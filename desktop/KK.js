(function ($hx_exports, $global) { "use strict"; var $hx_script = (function (exports, global) { // haxe
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = "lime.app.IModule";
lime_app_IModule.__isInterface__ = true;
lime_app_IModule.prototype = {
	__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = "lime.app.Module";
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	__registerLimeModule: function(application) {
	}
	,__unregisterLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = "lime._internal.backend.html5.HTML5Application";
lime__$internal_backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var window1 = _g1[_g];
			++_g;
			window1.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g = 0;
			var _g1 = this.parent.__windows;
			while(_g < _g1.length) {
				var window1 = _g1[_g];
				++_g;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if(window1.context != null) {
					window1.onRender.dispatch(window1.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			switch(event.type) {
			case "beforeunload":
				break;
			case "blur":
				this.parent.__window.onFocusOut.dispatch();
				this.parent.__window.onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__window.onFocusIn.dispatch();
				this.parent.__window.onActivate.dispatch();
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g3 = data.buttons.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g4 = 0;
				var _g5 = data.axes.length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g6 = 0;
				var _g7 = data.buttons.length;
				while(_g6 < _g7) {
					var i3 = _g6++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g8 = 0;
				var _g9 = data.axes.length;
				while(_g8 < _g9) {
					var i4 = _g8++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = "lime.app.Application";
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,createWindow: function(attributes) {
		var window1 = this.__createWindow(attributes);
		this.__addWindow(window1);
		return window1;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,removeModule: function(module) {
		if(module != null) {
			module.__unregisterLimeModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function(window1) {
		if(window1 != null) {
			this.__windows.push(window1);
			this.__windowByID.h[window1.id] = window1;
			var _g = $bind(this,this.__onWindowClose);
			var window2 = window1;
			var tmp = function() {
				_g(window2);
			};
			window1.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = window1;
				window1.onActivate.add($bind(this,this.onWindowActivate));
				window1.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				window1.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				window1.onDeactivate.add($bind(this,this.onWindowDeactivate));
				window1.onDropFile.add($bind(this,this.onWindowDropFile));
				window1.onEnter.add($bind(this,this.onWindowEnter));
				window1.onExpose.add($bind(this,this.onWindowExpose));
				window1.onFocusIn.add($bind(this,this.onWindowFocusIn));
				window1.onFocusOut.add($bind(this,this.onWindowFocusOut));
				window1.onFullscreen.add($bind(this,this.onWindowFullscreen));
				window1.onKeyDown.add($bind(this,this.onKeyDown));
				window1.onKeyUp.add($bind(this,this.onKeyUp));
				window1.onLeave.add($bind(this,this.onWindowLeave));
				window1.onMinimize.add($bind(this,this.onWindowMinimize));
				window1.onMouseDown.add($bind(this,this.onMouseDown));
				window1.onMouseMove.add($bind(this,this.onMouseMove));
				window1.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				window1.onMouseUp.add($bind(this,this.onMouseUp));
				window1.onMouseWheel.add($bind(this,this.onMouseWheel));
				window1.onMove.add($bind(this,this.onWindowMove));
				window1.onRender.add($bind(this,this.render));
				window1.onResize.add($bind(this,this.onWindowResize));
				window1.onRestore.add($bind(this,this.onWindowRestore));
				window1.onTextEdit.add($bind(this,this.onTextEdit));
				window1.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch(window1);
		}
	}
	,__createWindow: function(attributes) {
		var window1 = new lime_ui_Window(this,attributes);
		if(window1.id == -1) {
			return null;
		}
		return window1;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function(window1) {
		if(window1 != null && this.__windowByID.h.hasOwnProperty(window1.id)) {
			if(this.__window == window1) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,window1);
			this.__windowByID.remove(window1.id);
			window1.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var _g = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var _g = $bind(this,this.onJoystickAxisMove);
		var joystick1 = joystick;
		var tmp = function(axis,value) {
			_g(joystick1,axis,value);
		};
		joystick.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onJoystickButtonDown);
		var joystick2 = joystick;
		var tmp = function(button) {
			_g1(joystick2,button);
		};
		joystick.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onJoystickButtonUp);
		var joystick3 = joystick;
		var tmp = function(button) {
			_g2(joystick3,button);
		};
		joystick.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onJoystickDisconnect);
		var joystick4 = joystick;
		var tmp = function() {
			_g3(joystick4);
		};
		joystick.onDisconnect.add(tmp);
		var _g4 = $bind(this,this.onJoystickHatMove);
		var joystick5 = joystick;
		var tmp = function(hat,position) {
			_g4(joystick5,hat,position);
		};
		joystick.onHatMove.add(tmp);
		var _g5 = $bind(this,this.onJoystickTrackballMove);
		var joystick6 = joystick;
		var tmp = function(trackball,x,y) {
			_g5(joystick6,trackball,x,y);
		};
		joystick.onTrackballMove.add(tmp);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function(window1) {
		if(this.__window == window1) {
			this.onWindowClose();
		}
		this.__removeWindow(window1);
	}
	,__unregisterLimeModule: function(application) {
		application.onUpdate.remove($bind(this,this.update));
		application.onExit.remove($bind(this,this.__onModuleExit));
		application.onExit.remove($bind(this,this.onModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_window: function() {
		return this.__window;
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_preloader:"get_preloader"}
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = "ApplicationMain";
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("KK",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	ManifestResources.init(config);
	app.meta.h["build"] = "70";
	app.meta.h["company"] = "Kro13";
	app.meta.h["file"] = "KK";
	app.meta.h["name"] = "Kanyon Karver";
	app.meta.h["packageName"] = "com.kro13.kanyonkarver";
	app.meta.h["version"] = "0.13.175";
	var attributes = { allowHighDPI : false, alwaysOnTop : false, borderless : false, element : null, frameRate : 60, height : 1080, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "Kanyon Karver", width : 1920, x : null, y : null};
	attributes.context = { antialiasing : 0, background : 16777215, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : false};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var preloader = new openfl_display_Preloader(new haxepunk_Preloader());
	app.__preloader.onProgress.add(function(loaded,total) {
		preloader.update(loaded,total);
	});
	app.__preloader.onComplete.add(function() {
		preloader.start();
	});
	var stage = app.__window.stage;
	var tmp = function() {
		ApplicationMain.start(stage);
	};
	preloader.onComplete.add(tmp);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		app.__preloader.addLibrary(library);
	}
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraryNames;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	try {
		kro13_kk_Main.main();
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		stage.__handleError(e);
	}
};
var kro13_kk_Main = function() { };
$hxClasses["kro13.kk.Main"] = kro13_kk_Main;
kro13_kk_Main.__name__ = "kro13.kk.Main";
kro13_kk_Main.main = function() {
	new kro13_kk_KKGame();
};
kro13_kk_Main.onResize = function(e) {
	haxe_Log.trace(openfl_Lib.get_current().stage.stageWidth,{ fileName : "src/kro13/kk/Main.hx", lineNumber : 28, className : "kro13.kk.Main", methodName : "onResize", customParams : [openfl_Lib.get_current().stage.stageWidth]});
};
var DocumentClass = function() { };
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = "DocumentClass";
DocumentClass.__super__ = kro13_kk_Main;
DocumentClass.prototype = $extend(kro13_kk_Main.prototype,{
	__class__: DocumentClass
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = "ManifestResources";
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "./";
	}
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf);
	var bundle;
	var data = "{\"name\":null,\"assets\":\"aoy4:pathy29:graphics%2Fdebug%2Fbutton.pngy4:sizei248y4:typey5:IMAGEy2:idR1y7:preloadtgoR0y36:graphics%2Fdebug%2Fconsole_debug.pngR2i242R3R4R5R7R6tgoR0y43:graphics%2Fdebug%2Fconsole_drawcall_add.pngR2i183R3R4R5R8R6tgoR0y43:graphics%2Fdebug%2Fconsole_drawcall_all.pngR2i189R3R4R5R9R6tgoR0y37:graphics%2Fdebug%2Fconsole_hidden.pngR2i1216R3R4R5R10R6tgoR0y35:graphics%2Fdebug%2Fconsole_logo.pngR2i21764R3R4R5R11R6tgoR0y37:graphics%2Fdebug%2Fconsole_output.pngR2i186R3R4R5R12R6tgoR0y36:graphics%2Fdebug%2Fconsole_pause.pngR2i213R3R4R5R13R6tgoR0y35:graphics%2Fdebug%2Fconsole_play.pngR2i242R3R4R5R14R6tgoR0y35:graphics%2Fdebug%2Fconsole_step.pngR2i251R3R4R5R15R6tgoR0y38:graphics%2Fdebug%2Fconsole_visible.pngR2i1275R3R4R5R16R6tgoR0y35:graphics%2Fpreloader%2Fhaxepunk.pngR2i21044R3R4R5R17R6tgoR2i58088R3y4:FONTy9:classNamey27:__ASSET__font_monofonto_ttfR5y20:font%2Fmonofonto.ttfR6tgoR0y20:font%2Fmonofonto.fntR2i11598R3y4:TEXTR5R22R6tgoR0y20:font%2Fmonofonto.pngR2i19822R3R4R5R24R6tgoR0y17:images%2Fback.pngR2i32750R3R4R5R25R6tgoR0y18:images%2Fboard.pngR2i2914R3R4R5R26R6tgoR0y17:images%2Fkk.atlasR2i6010R3R23R5R27R6tgoR0y15:images%2Fkk.pngR2i137381R3R4R5R28R6tgoR0y17:images%2Flike.pngR2i2936R3R4R5R29R6tgoR0y18:images%2Fthanx.pngR2i3715R3R4R5R30R6tgoR0y25:fonts%2FNorse-Bold-ru.fntR2i42776R3R23R5R31R6tgoR0y25:fonts%2FNorse-Bold-ru.pngR2i29571R3R4R5R32R6tgoR0y17:fonts%2FNorse.fntR2i35308R3R23R5R33R6tgoR0y17:fonts%2FNorse.pngR2i21628R3R4R5R34R6tgoR0y21:fonts%2Fsnowstorm.fntR2i37598R3R23R5R35R6tgoR0y21:fonts%2Fsnowstorm.pngR2i23606R3R4R5R36R6tgoR0y24:fonts%2Fupheaval_pro.fntR2i52594R3R23R5R37R6tgoR0y26:fonts%2Fupheaval_pro_0.pngR2i12695R3R4R5R38R6tgoR2i85058R3y5:MUSICR5y21:audio%2Favalanche.mp3y9:pathGroupaR40y21:audio%2Favalanche.ogghR6tgoR2i62840R3y5:SOUNDR5R42R41aR40R42hgoR2i114366R3R39R5y22:audio%2Favalanche1.mp3R41aR44y22:audio%2Favalanche1.ogghR6tgoR2i84068R3R43R5R45R41aR44R45hgoR2i34299R3R39R5y22:audio%2Fcircle_big.mp3R41aR46y22:audio%2Fcircle_big.ogghR6tgoR2i30943R3R43R5R47R41aR46R47hgoR2i36963R3R39R5y23:audio%2Fcircle_big1.mp3R41aR48y23:audio%2Fcircle_big1.ogghR6tgoR2i32482R3R43R5R49R41aR48R49hgoR2i18436R3R39R5y24:audio%2Fcircle_small.mp3R41aR50y24:audio%2Fcircle_small.ogghR6tgoR2i19014R3R43R5R51R41aR50R51hgoR2i12686R3R39R5y17:audio%2Fcrash.mp3R41aR52y17:audio%2Fcrash.ogghR6tgoR2i13894R3R43R5R53R41aR52R53hgoR2i48156R3R39R5y17:audio%2Feagle.mp3R41aR54y17:audio%2Feagle.ogghR6tgoR2i41852R3R43R5R55R41aR54R55hgoR2i7588R3R39R5y16:audio%2Fhare.mp3R41aR56y16:audio%2Fhare.ogghR6tgoR2i10030R3R43R5R57R41aR56R57hgoR2i10643R3R39R5y15:audio%2Fhit.mp3R41aR58y15:audio%2Fhit.ogghR6tgoR2i12080R3R43R5R59R41aR58R59hgoR2i7141R3R39R5y17:audio%2Fland0.mp3R41aR60y17:audio%2Fland0.ogghR6tgoR2i9848R3R43R5R61R41aR60R61hgoR2i14077R3R39R5y17:audio%2Fland1.mp3R41aR62y17:audio%2Fland1.ogghR6tgoR2i16290R3R43R5R63R41aR62R63hgoR2i3053705R3R39R5y17:audio%2Fmain3.mp3R41aR64y17:audio%2Fmain3.ogghR6tgoR2i2422896R3R39R5R65R41aR64R65hgoR2i49617R3R39R5y17:audio%2Fsnow1.mp3R41aR66y17:audio%2Fsnow1.ogghR6tgoR2i49468R3R43R5R67R41aR66R67hgoR2i124715R3R39R5y16:audio%2Fwind.mp3R41aR68y16:audio%2Fwind.ogghR6tgoR2i108347R3R43R5R69R41aR68R69hgoR0y16:locale%2Fen.jsonR2i4204R3R23R5R70R6tgoR0y16:locale%2Fru.jsonR2i6257R3R23R5R71R6tgoR0y19:shaders%2Fblur.fragR2i680R3R23R5R72R6tgoR0y23:shaders%2Fscanline.fragR2i366R3R23R5R73R6tgoR0y19:shaders%2Ftest.fragR2i283R3R23R5R74R6tgoR0y19:shaders%2Ftest.vertR2i332R3R23R5R75R6tgoR0y20:shaders%2Ftest1.fragR2i5338R3R23R5R76R6tgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	var manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = "lime.text.Font";
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) {
			return lime_app_Future.withValue(font);
		} else {
			return lime_app_Future.withError("");
		}
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
			this.__init = true;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__initializeSource: function() {
		this.__init = true;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = $global.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 513, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 548, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,__class__: lime_text_Font
};
var _$_$ASSET_$_$font_$monofonto_$ttf = $hx_exports["__ASSET__font_monofonto_ttf"] = function() {
	this.ascender = 960;
	this.descender = -240;
	this.height = 1200;
	this.numGlyphs = 387;
	this.underlinePosition = -143;
	this.underlineThickness = 20;
	this.unitsPerEM = 1000;
	this.name = "Monofonto-Regular";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__font_monofonto_ttf"] = _$_$ASSET_$_$font_$monofonto_$ttf;
_$_$ASSET_$_$font_$monofonto_$ttf.__name__ = "__ASSET__font_monofonto_ttf";
_$_$ASSET_$_$font_$monofonto_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$font_$monofonto_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$font_$monofonto_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = "openfl.text.Font";
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils_ByteArray.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromBytes = function(bytes) {
	return lime_text_Font.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromFile = function(path) {
	return lime_text_Font.loadFromFile(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.registerFont = function(font) {
	var instance = null;
	if(js_Boot.getClass(font) == null) {
		instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	} else {
		instance = js_Boot.__cast(font , openfl_text_Font);
	}
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		openfl_text_Font.__fontByName.h[instance.name] = instance;
	}
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,__initialize: function() {
		return this.__initialized;
	}
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: {set_fontName:"set_fontName",get_fontName:"get_fontName"}
});
var _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf = $hx_exports["__ASSET__OPENFL__font_monofonto_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$font_$monofonto_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__font_monofonto_ttf"] = _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf;
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf.__name__ = "__ASSET__OPENFL__font_monofonto_ttf";
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf
});
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var UnicodeString = {};
UnicodeString.__properties__ = {get_length:"get_length"};
UnicodeString.charAt = function(this1,index) {
	if(index < 0) {
		return "";
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	while(nativeOffset < this1.length) {
		var index1 = nativeOffset++;
		var c = this1.charCodeAt(index1);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(index1 + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset == index) {
			return String.fromCodePoint(c1);
		}
		if(c1 >= 65536) {
			++nativeOffset;
		}
		++unicodeOffset;
	}
	return "";
};
UnicodeString.get_length = function(this1) {
	var l = 0;
	var _g_offset = 0;
	var _g_s = this1;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		++l;
	}
	return l;
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var extension_ga_GADef = function() { };
$hxClasses["extension.ga.GADef"] = extension_ga_GADef;
extension_ga_GADef.__name__ = "extension.ga.GADef";
extension_ga_GADef.genderToString = function(gender) {
	switch(gender) {
	case 1:
		return "Male";
	case 2:
		return "Female";
	default:
		return "";
	}
};
extension_ga_GADef.flowToString = function(flowType) {
	switch(flowType) {
	case 1:
		return "Source";
	case 2:
		return "Sink";
	default:
		return "Undefined";
	}
};
extension_ga_GADef.errorToString = function(errorSeverity) {
	switch(errorSeverity) {
	case 1:
		return "Debug";
	case 2:
		return "Info";
	case 3:
		return "Warning";
	case 4:
		return "Error";
	case 5:
		return "Critical";
	default:
		return "Undefined";
	}
};
var extension_ga_GameAnalytics = function() { };
$hxClasses["extension.ga.GameAnalytics"] = extension_ga_GameAnalytics;
extension_ga_GameAnalytics.__name__ = "extension.ga.GameAnalytics";
extension_ga_GameAnalytics.initialise = function(gameKey,secretKey) {
	extension_ga_GameAnalytics.gameKey = gameKey;
	extension_ga_GameAnalytics.secretKey = secretKey;
	extension_ga_GameAnalytics.initialiseWithGameKeyJS();
};
extension_ga_GameAnalytics.initialiseWithGameKeyiOS = function() {
	extension_ga_GameAnalytics.configureSdkVersion();
	extension_ga_GameAnalytics.configureEngineVersion();
};
extension_ga_GameAnalytics.initialiseWithGameKeyAndroid = function() {
	extension_ga_GameAnalytics.configureSdkVersion();
	extension_ga_GameAnalytics.configureEngineVersion();
};
extension_ga_GameAnalytics.initialiseWithGameKeyJS = function() {
	window.GameAnalytics("initialize",extension_ga_GameAnalytics.gameKey,extension_ga_GameAnalytics.secretKey);
};
extension_ga_GameAnalytics.enableVerbose = function(enableVerboseB) {
	extension_ga_GameAnalytics.enableVerboseB = enableVerboseB;
	extension_ga_GameAnalytics.enableVerboseLog();
};
extension_ga_GameAnalytics.enableVerboseLog = function() {
	window.GameAnalytics("setEnabledInfoLog",extension_ga_GameAnalytics.enableVerboseB);
};
extension_ga_GameAnalytics.enableInfo = function(enableInfoB) {
	extension_ga_GameAnalytics.enableInfoB = enableInfoB;
	extension_ga_GameAnalytics.enableInfoLog();
};
extension_ga_GameAnalytics.enableInfoLog = function() {
	window.GameAnalytics("setEnabledInfoLog",extension_ga_GameAnalytics.enableInfoB);
};
extension_ga_GameAnalytics.configureUserId = function(user_id) {
	extension_ga_GameAnalytics.user_id = user_id;
	extension_ga_GameAnalytics.configUserId();
};
extension_ga_GameAnalytics.configUserId = function() {
	window.GameAnalytics("configureUserId",extension_ga_GameAnalytics.user_id);
};
extension_ga_GameAnalytics.configureBuild = function(build) {
	extension_ga_GameAnalytics.build = build;
	window.GameAnalytics("configureBuild",build);
};
extension_ga_GameAnalytics.configureAvailableResourceCurrencies = function(_currencies) {
	extension_ga_GameAnalytics.currencies = _currencies;
	extension_ga_GameAnalytics.availableResourceCurrencies();
};
extension_ga_GameAnalytics.availableResourceCurrencies = function() {
	var data = extension_ga_GameAnalytics.currencies.split(",");
	window.GameAnalytics("configureAvailableResourceCurrencies",data);
};
extension_ga_GameAnalytics.configureAvailableResourceItemTypes = function(_itemTypes) {
	extension_ga_GameAnalytics.itemTypes = _itemTypes;
	extension_ga_GameAnalytics.availableResourceItemTypes();
};
extension_ga_GameAnalytics.availableResourceItemTypes = function() {
	var data = extension_ga_GameAnalytics.itemTypes.split(",");
	window.GameAnalytics("configureAvailableResourceItemTypes",data);
};
extension_ga_GameAnalytics.configureAvailableCustomDimensions01 = function(customDim) {
	extension_ga_GameAnalytics.customDimensions01 = customDim;
	extension_ga_GameAnalytics.availableCustomDimensions01();
};
extension_ga_GameAnalytics.availableCustomDimensions01 = function() {
	var data = extension_ga_GameAnalytics.itemTypes.split(",");
	window.GameAnalytics("configureAvailableCustomDimensions01",data);
};
extension_ga_GameAnalytics.configureAvailableCustomDimensions02 = function(customDim) {
	extension_ga_GameAnalytics.customDimensions02 = customDim;
	extension_ga_GameAnalytics.availableCustomDimensions02();
};
extension_ga_GameAnalytics.availableCustomDimensions02 = function() {
	var data = extension_ga_GameAnalytics.itemTypes.split(",");
	window.GameAnalytics("configureAvailableCustomDimensions02",data);
};
extension_ga_GameAnalytics.configureAvailableCustomDimensions03 = function(customDim) {
	extension_ga_GameAnalytics.customDimensions03 = customDim;
	extension_ga_GameAnalytics.availableCustomDimensions03();
};
extension_ga_GameAnalytics.availableCustomDimensions03 = function() {
	var data = extension_ga_GameAnalytics.itemTypes.split(",");
	window.GameAnalytics("configureAvailableCustomDimensions03",data);
};
extension_ga_GameAnalytics.setCustomDimension01 = function(customDim) {
	extension_ga_GameAnalytics.customDimension = customDim;
	extension_ga_GameAnalytics.setCustomDim01();
};
extension_ga_GameAnalytics.setCustomDim01 = function() {
	window.GameAnalytics("setCustomDimension01",extension_ga_GameAnalytics.customDimension);
};
extension_ga_GameAnalytics.setCustomDimension02 = function(customDim) {
	extension_ga_GameAnalytics.customDimension = customDim;
	extension_ga_GameAnalytics.setCustomDim02();
};
extension_ga_GameAnalytics.setCustomDim02 = function() {
	window.GameAnalytics("setCustomDimension02",extension_ga_GameAnalytics.customDimension);
};
extension_ga_GameAnalytics.setCustomDimension03 = function(customDim) {
	extension_ga_GameAnalytics.customDimension = customDim;
	extension_ga_GameAnalytics.setCustomDim03();
};
extension_ga_GameAnalytics.setCustomDim03 = function() {
	window.GameAnalytics("setCustomDimension03",extension_ga_GameAnalytics.customDimension);
};
extension_ga_GameAnalytics.setGender = function(gender) {
	extension_ga_GameAnalytics.gender = gender;
	extension_ga_GameAnalytics.genderGA();
};
extension_ga_GameAnalytics.genderGA = function() {
	var gstr = extension_ga_GADef.genderToString(extension_ga_GameAnalytics.gender);
	window.GameAnalytics("setGender",gstr);
};
extension_ga_GameAnalytics.setBirthYear = function(birthYear) {
	extension_ga_GameAnalytics.birthYear = birthYear;
	extension_ga_GameAnalytics.birthYearGA();
};
extension_ga_GameAnalytics.birthYearGA = function() {
	window.GameAnalytics("setBirthYear",extension_ga_GameAnalytics.birthYear);
};
extension_ga_GameAnalytics.sendDesignEvent = function(eventId) {
	extension_ga_GameAnalytics.designEventId = eventId;
	extension_ga_GameAnalytics.designEvent();
};
extension_ga_GameAnalytics.designEvent = function() {
	window.GameAnalytics("addDesignEvent",extension_ga_GameAnalytics.designEventId);
};
extension_ga_GameAnalytics.sendDesignEventWithAmount = function(eventId,amount) {
	extension_ga_GameAnalytics.designEventId = eventId;
	extension_ga_GameAnalytics.amount = amount;
	extension_ga_GameAnalytics.designEventWithAmount();
};
extension_ga_GameAnalytics.designEventWithAmount = function() {
	window.GameAnalytics("addDesignEvent",extension_ga_GameAnalytics.designEventId,extension_ga_GameAnalytics.amount);
};
extension_ga_GameAnalytics.sendBusinessEventIOS = function(currency,amountInCents,itemType,itemId,cartType,receipt) {
	extension_ga_GameAnalytics.currency = currency;
	extension_ga_GameAnalytics.amountInCents = amountInCents;
	extension_ga_GameAnalytics.itemType = itemType;
	extension_ga_GameAnalytics.itemId = itemId;
	extension_ga_GameAnalytics.cartType = cartType;
	extension_ga_GameAnalytics.receipt = receipt;
	extension_ga_GameAnalytics.businessEvent();
};
extension_ga_GameAnalytics.sendBusinessEventAndroid = function(currency,amountInCents,itemType,itemId,cartType,receipt,signature) {
	extension_ga_GameAnalytics.currency = currency;
	extension_ga_GameAnalytics.amountInCents = amountInCents;
	extension_ga_GameAnalytics.itemType = itemType;
	extension_ga_GameAnalytics.itemId = itemId;
	extension_ga_GameAnalytics.cartType = cartType;
	extension_ga_GameAnalytics.receipt = receipt;
	extension_ga_GameAnalytics.signature = signature;
	extension_ga_GameAnalytics.businessEvent();
};
extension_ga_GameAnalytics.businessEvent = function() {
	window.GameAnalytics("addBusinessEvent",extension_ga_GameAnalytics.amountInCents,extension_ga_GameAnalytics.currency,extension_ga_GameAnalytics.amount,extension_ga_GameAnalytics.itemType,extension_ga_GameAnalytics.itemId,extension_ga_GameAnalytics.cartType);
};
extension_ga_GameAnalytics.sendResourceEvent = function(flowType,currency,amount,itemType,itemId) {
	extension_ga_GameAnalytics.flowType = flowType;
	extension_ga_GameAnalytics.currency = currency;
	extension_ga_GameAnalytics.amount = amount;
	extension_ga_GameAnalytics.itemType = itemType;
	extension_ga_GameAnalytics.itemId = itemId;
	extension_ga_GameAnalytics.resourceEvent();
};
extension_ga_GameAnalytics.resourceEvent = function() {
	var flow = extension_ga_GADef.flowToString(extension_ga_GameAnalytics.flowType);
	window.GameAnalytics("addResourceEvent",flow,extension_ga_GameAnalytics.currency,extension_ga_GameAnalytics.itemType,extension_ga_GameAnalytics.itemId);
};
extension_ga_GameAnalytics.sendProgressionEvent = function(status,progression01,progression02,progression03,score) {
	if(score == null) {
		score = 0;
	}
	extension_ga_GameAnalytics.status = status;
	extension_ga_GameAnalytics.progression01 = progression01;
	extension_ga_GameAnalytics.progression02 = progression02;
	extension_ga_GameAnalytics.progression03 = progression03;
	extension_ga_GameAnalytics.score = score;
	extension_ga_GameAnalytics.progressionEvent();
};
extension_ga_GameAnalytics.progressionEvent = function() {
	haxe_Log.trace("addProgressionEvent",{ fileName : "extension/ga/GameAnalytics.hx", lineNumber : 671, className : "extension.ga.GameAnalytics", methodName : "progressionEvent", customParams : [extension_ga_GameAnalytics.status,extension_ga_GameAnalytics.progression01,extension_ga_GameAnalytics.progression02,extension_ga_GameAnalytics.progression03,extension_ga_GameAnalytics.score]});
	window.GameAnalytics("addProgressionEvent",extension_ga_GameAnalytics.status,extension_ga_GameAnalytics.progression01,extension_ga_GameAnalytics.progression02,extension_ga_GameAnalytics.progression03,extension_ga_GameAnalytics.score);
};
extension_ga_GameAnalytics.sendErrorEvent = function(severity,message) {
	extension_ga_GameAnalytics.severity = severity;
	extension_ga_GameAnalytics.message = message;
	extension_ga_GameAnalytics.errorEvent();
};
extension_ga_GameAnalytics.errorEvent = function() {
	var sev = extension_ga_GADef.errorToString(extension_ga_GameAnalytics.severity);
	window.GameAnalytics("addErrorEvent",sev,extension_ga_GameAnalytics.message);
};
extension_ga_GameAnalytics.configureSdkVersion = function() {
	var _version = "openfl" + " " + "3.0.0";
	_version = "javascript 3.1.2";
	window.GameAnalytics("configureSdkGameEngineVersion",_version);
};
extension_ga_GameAnalytics.configureEngineVersion = function() {
	var engineVersion = "openfl " + "9.1.0";
	window.GameAnalytics("configureGameEngineVersion",engineVersion);
};
extension_ga_GameAnalytics.setEnableManualSessionHandling = function() {
	window.GameAnalytics("setEnabledManualSessionHandling",true);
};
extension_ga_GameAnalytics.startSession = function() {
	window.GameAnalytics("startSession");
};
extension_ga_GameAnalytics.endSession = function() {
	window.GameAnalytics("endSession");
};
extension_ga_GameAnalytics.isCommandCenterReady = function() {
	extension_ga_GameAnalytics.ready = window.GameAnalytics("isCommandCenterReady");
	return extension_ga_GameAnalytics.ready;
};
extension_ga_GameAnalytics.getCommandCenterValueAsString = function(_key) {
	extension_ga_GameAnalytics.configKey = _key;
	extension_ga_GameAnalytics.configValue = extension_ga_GameAnalytics._getCommandCenterValueAsString();
	return extension_ga_GameAnalytics.configValue;
};
extension_ga_GameAnalytics._getCommandCenterValueAsString = function() {
	var ret = "";
	extension_ga_GameAnalytics.ready = window.GameAnalytics("getCommandCenterValueAsString",extension_ga_GameAnalytics.configKey);
	return ret;
};
extension_ga_GameAnalytics.getCommandCenterValueAsStringWithDefVal = function(_key,_defaultValue) {
	extension_ga_GameAnalytics.configKey = _key;
	extension_ga_GameAnalytics.configDefaultValue = _defaultValue;
	extension_ga_GameAnalytics.configValue = extension_ga_GameAnalytics._getCommandCenterValueAsStringWithDefVal();
	return extension_ga_GameAnalytics.configValue;
};
extension_ga_GameAnalytics._getCommandCenterValueAsStringWithDefVal = function() {
	var ret = "";
	extension_ga_GameAnalytics.ready = window.GameAnalytics("getCommandCenterValueAsString",extension_ga_GameAnalytics.configKey,extension_ga_GameAnalytics.configDefaultValue);
	return ret;
};
extension_ga_GameAnalytics.printMessage = function(message) {
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function() {
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m1 = item1.m;
				var m2 = item2.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item11 = item1.s;
				var file1 = item1.file;
				var line1 = item1.line;
				var col1 = item1.column;
				var col2 = item2.column;
				var line2 = item2.line;
				var file2 = item2.file;
				var item21 = item2.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class1 = item1.classname;
				var method1 = item1.method;
				var method2 = item2.method;
				var class2 = item2.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v1 = item1.v;
				var v2 = item2.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native"}
});
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v1 = v;
			if(isNaN(v1)) {
				this.buf.b += "k";
			} else if(!isFinite(v1)) {
				this.buf.b += v1 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v1 == null ? "null" : "" + v1;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v1 = v;
				var _g_head = v1.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i = val;
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1["__id__"] = id;
					this.serialize(v1.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v1 = v;
				var k = haxe_ds_StringMap.keysIterator(v1.h);
				while(k.hasNext()) {
					var k1 = k.next();
					this.serializeString(k1);
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v1 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v1.length * 8 / 6));
				this.buf.b += ":";
				var i = 0;
				var max = v1.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g1 = 0;
					var _g2 = haxe_Serializer.BASE64.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						b64[i1] = HxOverrides.cca(haxe_Serializer.BASE64,i1);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					var b3 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					var b1 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe__$Template_TemplateExpr = $hxEnums["haxe._Template.TemplateExpr"] = { __ename__ : "haxe._Template.TemplateExpr", __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"]
	,OpVar: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,OpExpr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr"],$_)
	,OpIf: ($_=function(expr,eif,eelse) { return {_hx_index:2,expr:expr,eif:eif,eelse:eelse,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","eif","eelse"],$_)
	,OpStr: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["str"],$_)
	,OpBlock: ($_=function(l) { return {_hx_index:4,l:l,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["l"],$_)
	,OpForeach: ($_=function(expr,loop) { return {_hx_index:5,expr:expr,loop:loop,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","loop"],$_)
	,OpMacro: ($_=function(name,params) { return {_hx_index:6,name:name,params:params,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["name","params"],$_)
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw haxe_Exception.thrown("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
$hxClasses["haxe.Template"] = haxe_Template;
haxe_Template.__name__ = "haxe.Template";
haxe_Template.prototype = {
	execute: function(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new haxe_ds_List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new haxe_ds_List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw haxe_Exception.thrown("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCodePoint(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new haxe_ds_List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new haxe_ds_List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		var kwdEnd = function(kwd) {
			var pos = -1;
			var length = kwd.length;
			if(HxOverrides.substr(p,0,length) == kwd) {
				pos = length;
				var _g_offset = 0;
				var _g_s = HxOverrides.substr(p,length,null);
				while(_g_offset < _g_s.length) {
					var c = _g_s.charCodeAt(_g_offset++);
					if(c == 32) {
						++pos;
					} else {
						break;
					}
				}
			}
			return pos;
		};
		var pos = kwdEnd("if");
		if(pos > 0) {
			p = HxOverrides.substr(p,pos,p.length - pos);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t = tokens.first();
			var eelse;
			if(t == null) {
				throw haxe_Exception.thrown("Unclosed 'if'");
			}
			if(t.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t = tokens.pop();
				if(t == null || t.p != "end") {
					throw haxe_Exception.thrown("Unclosed 'else'");
				}
			} else {
				t.p = HxOverrides.substr(t.p,4,t.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		var pos = kwdEnd("foreach");
		if(pos >= 0) {
			p = HxOverrides.substr(p,pos,p.length - pos);
			var e = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t = tokens.pop();
			if(t == null || t.p != "end") {
				throw haxe_Exception.thrown("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new haxe_ds_List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			var _g_offset = 0;
			var _g_s = data;
			while(_g_offset < _g_s.length) {
				var _g1_key = _g_offset;
				var _g1_value = _g_s.charCodeAt(_g_offset++);
				var i = _g1_key;
				var c = _g1_value;
				if(c != 32) {
					l.add({ p : HxOverrides.substr(data,i,null), s : true});
					break;
				}
			}
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw haxe_Exception.thrown(l.first().p);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				var s = _g1;
				throw haxe_Exception.thrown("Unexpected '" + s + "' in " + expr);
			} else {
				throw _g;
			}
		}
		return function() {
			try {
				return e();
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var exc = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Error : " + Std.string(exc) + " in " + expr);
			}
		};
	}
	,makeConst: function(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw haxe_Exception.thrown(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,skipSpaces: function(l) {
		var p = l.first();
		while(p != null) {
			var _g_offset = 0;
			var _g_s = p.p;
			while(_g_offset < _g_s.length) {
				var c = _g_s.charCodeAt(_g_offset++);
				if(c != 32) {
					return;
				}
			}
			l.pop();
			p = l.first();
		}
	}
	,makeExpr2: function(l) {
		this.skipSpaces(l);
		var p = l.pop();
		this.skipSpaces(l);
		if(p == null) {
			throw haxe_Exception.thrown("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		switch(p.p) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			this.skipSpaces(l);
			var e1 = this.makeExpr(l);
			this.skipSpaces(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw haxe_Exception.thrown(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			this.skipSpaces(l);
			var e2 = this.makeExpr(l);
			this.skipSpaces(l);
			var p2 = l.pop();
			this.skipSpaces(l);
			if(p2 == null || p2.p != ")") {
				throw haxe_Exception.thrown(p2);
			}
			switch(p1.p) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw haxe_Exception.thrown("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw haxe_Exception.thrown(p.p);
	}
	,run: function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			var _this = this.buf;
			var x = Std.string(this.resolve(v));
			_this.b += Std.string(x);
			break;
		case 1:
			var e1 = e.expr;
			var _this = this.buf;
			var x = Std.string(e1());
			_this.b += Std.string(x);
			break;
		case 2:
			var eelse = e.eelse;
			var eif = e.eif;
			var e1 = e.expr;
			var v = e1();
			if(v == null || v == false) {
				if(eelse != null) {
					this.run(eelse);
				}
			} else {
				this.run(eif);
			}
			break;
		case 3:
			var str = e.str;
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e.l;
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e1 = val;
				this.run(e1);
			}
			break;
		case 5:
			var loop = e.loop;
			var e1 = e.expr;
			var v = e1();
			try {
				var x = $getIterator(v);
				if(x.hasNext == null) {
					throw haxe_Exception.thrown(null);
				}
				v = x;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				try {
					if(v.hasNext == null) {
						throw haxe_Exception.thrown(null);
					}
				} catch( _g1 ) {
					throw haxe_Exception.thrown("Cannot iter on " + Std.string(v));
				}
			}
			this.stack.push(this.context);
			var v1 = v;
			var ctx = v1;
			while(ctx.hasNext()) {
				var ctx1 = ctx.next();
				this.context = ctx1;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e.params;
			var m = e.name;
			var v = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head = params.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var p = val;
				if(p._hx_index == 0) {
					var v1 = p.v;
					pl.push(this.resolve(v1));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this = this.buf;
				var x = Std.string(v.apply(this.macros,pl));
				_this.b += Std.string(x);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( _g1 ) {
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e) + ")";
				throw haxe_Exception.thrown(msg);
			}
			break;
		}
	}
	,__class__: haxe_Template
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = new Date().getTime() / 1000;
	var r = f();
	haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = "haxe._Unserializer.NullResolver";
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = _$String_String_$Impl_$.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : "haxe.ds.Either", __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,keyValueIterator: function() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readLine: function() {
		var buf = new haxe_io_BytesBuffer();
		var last;
		var s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				var e = _g1;
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = tmp;
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	__class__: haxe_io_Path
};
var haxe_io_StringInput = function(s) {
	haxe_io_BytesInput.call(this,haxe_io_Bytes.ofString(s));
};
$hxClasses["haxe.io.StringInput"] = haxe_io_StringInput;
haxe_io_StringInput.__name__ = "haxe.io.StringInput";
haxe_io_StringInput.__super__ = haxe_io_BytesInput;
haxe_io_StringInput.prototype = $extend(haxe_io_BytesInput.prototype,{
	__class__: haxe_io_StringInput
});
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	return this1;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasAttribAccess = {};
haxe_xml__$Access_HasAttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	return this1.exists(name);
};
var haxe_xml__$Access_NodeListAccess = {};
haxe_xml__$Access_NodeListAccess.resolve = function(this1,name) {
	var l = [];
	var x = this1.elementsNamed(name);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
		}
		var this1 = x1;
		l.push(this1);
	}
	return l;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__ : "haxe.zip.ExtraField", __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"]
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : "haxe.zip.Huffman", __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.table;
			var _g = t.n;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : "haxe.zip._InflateImpl.State", __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n = h.n;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
haxe_zip_Reader.unzip = function(f) {
	if(!f.compressed) {
		return f.data;
	}
	throw haxe_Exception.thrown("No uncompress support");
};
haxe_zip_Reader.prototype = {
	readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			csize = -1;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.dataSize < 0) {
				var bufSize = 65536;
				if(tmp == null) {
					tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
				}
				var out = new haxe_io_BytesBuffer();
				var z = new haxe_zip_InflateImpl(this.i,false,false);
				while(true) {
					var n = z.readBytes(tmp,0,bufSize);
					out.addBytes(tmp,0,n);
					if(n < bufSize) {
						break;
					}
				}
				e.data = out.getBytes();
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = "openfl.events.IEventDispatcher";
openfl_events_IEventDispatcher.__isInterface__ = true;
openfl_events_IEventDispatcher.prototype = {
	__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = "openfl.events.EventDispatcher";
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		if(!Object.prototype.hasOwnProperty.call(this.__eventMap.h,type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			this.__eventMap.h[type] = list;
			this.__iterators.h[type] = [iterator];
		} else {
			var list = this.__eventMap.h[type];
			var _g = 0;
			var _g1 = list.length;
			while(_g < _g1) {
				var i = _g++;
				if(list[i].match(listener,useCapture)) {
					return;
				}
			}
			var iterators = this.__iterators.h[type];
			var _g = 0;
			while(_g < iterators.length) {
				var iterator = iterators[_g];
				++_g;
				if(iterator.active) {
					iterator.copy();
				}
			}
			this.__addListenerByPriority(list,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this.__eventMap.h,type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var list = this.__eventMap.h[type];
		if(list == null) {
			return;
		}
		var iterators = this.__iterators.h[type];
		var _g = 0;
		var _g1 = list.length;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			var _this = this.__eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			var _this = this.__iterators;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
		}
		if(!haxe_ds_StringMap.valueIterator(this.__eventMap.h).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var full = c.__name__;
		var short = full.split(".").pop();
		return "[object " + short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var list = this.__eventMap.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var iterators = this.__iterators.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.start();
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		iterator.stop();
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		} else {
			iterator.reset(list);
		}
		return !event.isDefaultPrevented();
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g = 0;
		var _g1 = numElements;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = "openfl.display.IBitmapDrawable";
openfl_display_IBitmapDrawable.__isInterface__ = true;
openfl_display_IBitmapDrawable.prototype = {
	__class__: openfl_display_IBitmapDrawable
};
var openfl_Vector = {};
openfl_Vector.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"};
openfl_Vector.concat = function(this1,vec) {
	return this1.concat(vec);
};
openfl_Vector.copy = function(this1) {
	return this1.copy();
};
openfl_Vector.filter = function(this1,callback) {
	return this1.filter(callback);
};
openfl_Vector.get = function(this1,index) {
	return this1.get(index);
};
openfl_Vector.indexOf = function(this1,searchElement,fromIndex) {
	if(fromIndex == null) {
		fromIndex = 0;
	}
	return this1.indexOf(searchElement,fromIndex);
};
openfl_Vector.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl_Vector.iterator = function(this1) {
	return this1.iterator();
};
openfl_Vector.join = function(this1,sep) {
	if(sep == null) {
		sep = ",";
	}
	return this1.join(sep);
};
openfl_Vector.lastIndexOf = function(this1,searchElement,fromIndex) {
	return this1.lastIndexOf(searchElement,fromIndex);
};
openfl_Vector.pop = function(this1) {
	return this1.pop();
};
openfl_Vector.push = function(this1,value) {
	return this1.push(value);
};
openfl_Vector.removeAt = function(this1,index) {
	return this1.removeAt(index);
};
openfl_Vector.reverse = function(this1) {
	return this1.reverse();
};
openfl_Vector.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl_Vector.shift = function(this1) {
	return this1.shift();
};
openfl_Vector.slice = function(this1,startIndex,endIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	return this1.slice(startIndex,endIndex);
};
openfl_Vector.sort = function(this1,sortBehavior) {
	this1.sort(sortBehavior);
};
openfl_Vector.splice = function(this1,startIndex,deleteCount) {
	return this1.splice(startIndex,deleteCount);
};
openfl_Vector.toString = function(this1) {
	if(this1 != null) {
		return this1.toString();
	} else {
		return null;
	}
};
openfl_Vector.unshift = function(this1,value) {
	this1.unshift(value);
};
openfl_Vector.convert = function(vec) {
	return vec;
};
openfl_Vector.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_BoolVector(length,fixed,array);
};
openfl_Vector.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_IntVector(length,fixed,array);
};
openfl_Vector.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FloatVector(length,fixed,array,true);
};
openfl_Vector.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FunctionVector(length,fixed,array);
};
openfl_Vector.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.toNullVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.fromBoolVector = function(vector) {
	return vector;
};
openfl_Vector.fromIntVector = function(vector) {
	return vector;
};
openfl_Vector.fromFloatVector = function(vector) {
	return vector;
};
openfl_Vector.fromFunctionVector = function(vector) {
	return vector;
};
openfl_Vector.fromObjectVector = function(vector) {
	return vector;
};
openfl_Vector.get_fixed = function(this1) {
	return this1.fixed;
};
openfl_Vector.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl_Vector.get_length = function(this1) {
	return this1.get_length();
};
openfl_Vector.set_length = function(this1,value) {
	return this1.set_length(value);
};
var lime_utils_ObjectPool = function(create,clean,size) {
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new haxe_ds_List();
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = "lime.utils.ObjectPool";
lime_utils_ObjectPool.prototype = {
	add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.__pool.set(object1,true);
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		if(!this.__pool.exists(object)) {
			haxe_Log.trace(haxe_CallStack.toString(haxe_CallStack.callStack()),{ fileName : "lime/utils/ObjectPool.hx", lineNumber : 106, className : "lime.utils.ObjectPool", methodName : "release"});
			lime_utils_Log.error("Object is not a member of the pool",{ fileName : "lime/utils/ObjectPool.hx", lineNumber : 107, className : "lime.utils.ObjectPool", methodName : "release"});
		} else if(!this.__pool.get(object)) {
			lime_utils_Log.error("Object has already been released",{ fileName : "lime/utils/ObjectPool.hx", lineNumber : 111, className : "lime.utils.ObjectPool", methodName : "release"});
		}
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__pool.set(object,false);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,remove: function(object) {
		if(this.__pool.exists(object)) {
			this.__pool.remove(object);
			if(this.__inactiveObject0 == object) {
				this.__inactiveObject0 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObject1 == object) {
				this.__inactiveObject1 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObjectList.remove(object)) {
				this.inactiveObjects--;
			} else {
				this.activeObjects--;
			}
		}
	}
	,__addInactive: function(object) {
		this.__pool.set(object,false);
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.__pool.set(object,true);
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g = 0;
				var _g1 = value - current;
				while(_g < _g1) {
					var i = _g++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__drawableType = 1;
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
		this.stage.addChild(this);
	}
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = "openfl.display.DisplayObject";
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__calculateAbsoluteTransform = function(local,parentTransform,target) {
	target.a = local.a * parentTransform.a + local.b * parentTransform.c;
	target.b = local.a * parentTransform.b + local.b * parentTransform.d;
	target.c = local.c * parentTransform.a + local.d * parentTransform.c;
	target.d = local.c * parentTransform.b + local.d * parentTransform.d;
	target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
	target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
};
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
				openfl_display_DisplayObject.__broadcastEvents.h[type] = [];
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.h[type];
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(this.__customRenderEvent == null) {
				this.__customRenderEvent = new openfl_events_RenderEvent(null);
				this.__customRenderEvent.objectColorTransform = new openfl_geom_ColorTransform();
				this.__customRenderEvent.objectMatrix = new openfl_geom_Matrix();
				this.__customRenderClear = true;
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(((event) instanceof openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this.b + mouseEvent.localY * _this.d + _this.ty;
		} else if(((event) instanceof openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this.a + touchEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this.b + touchEvent.localY * _this.d + _this.ty;
		}
		event.target = this;
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,false,this);
		} else {
			return false;
		}
	}
	,invalidate: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.h[type],this);
				}
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(!this.hasEventListener("clearDOM") && !this.hasEventListener("renderCairo") && !this.hasEventListener("renderCanvas") && !this.hasEventListener("renderDOM") && !this.hasEventListener("renderOpenGL")) {
				this.__customRenderEvent = null;
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__cleanup();
			this.__cacheBitmap = null;
		}
		if(this.__cacheBitmapData != null) {
			this.__cacheBitmapData.dispose();
			this.__cacheBitmapData = null;
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var parent = event.bubbles ? this.parent : null;
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(parent != null && parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g = 0;
				var _g1 = i;
				while(_g < _g1) {
					var j = _g++;
					stack.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getRenderBounds(rect,matrix);
		if(this.__filters != null) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(r.x,r.y,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.x = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.y = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.__visible || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.__visible && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		this.__worldTransformInvalid = false;
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.__visible;
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
					this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				} else {
					this.__worldColorTransform.__copyFrom(renderParent.__worldColorTransform);
				}
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__worldBlendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
				if(this.__shader == null) {
					this.__worldShader = renderParent.__shader;
				} else {
					this.__worldShader = this.__shader;
				}
				if(this.__scale9Grid == null) {
					this.__worldScale9Grid = renderParent.__scale9Grid;
				} else {
					this.__worldScale9Grid = this.__scale9Grid;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.__visible;
					this.__worldVisible = this.__visible;
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
				} else {
					this.__worldColorTransform.__identity();
				}
				this.__worldBlendMode = this.__blendMode;
				this.__worldShader = this.__shader;
				this.__worldScale9Grid = this.__scale9Grid;
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var target = this.__worldTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			var parentTransform = renderParent.__renderTransform;
			var target = this.__renderTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value < 0.0) {
			value = 0.0;
		}
		if(value != this.__alpha && !this.get_cacheAsBitmap()) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(value != this.__cacheAsBitmap) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmapMatrix = value != null ? value.clone() : value;
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else if(this.__filters != null) {
			this.__filters = null;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl_utils__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl_utils__$internal_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scale9Grid: function() {
		if(this.__scale9Grid == null) {
			return null;
		}
		return this.__scale9Grid.clone();
	}
	,set_scale9Grid: function(value) {
		if(value == null && this.__scale9Grid == null) {
			return value;
		}
		if(value != null && this.__scale9Grid != null && this.__scale9Grid.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scale9Grid == null) {
				this.__scale9Grid = new openfl_geom_Rectangle();
			}
			this.__scale9Grid.copyFrom(value);
		} else {
			this.__scale9Grid = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value == null && this.__scrollRect == null) {
			return value;
		}
		if(value != null && this.__scrollRect != null && this.__scrollRect.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scrollRect == null) {
				this.__scrollRect = new openfl_geom_Rectangle();
			}
			this.__scrollRect.copyFrom(value);
		} else {
			this.__scrollRect = null;
		}
		this.__setTransformDirty();
		if(openfl_display_DisplayObject.__supportDOM) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		this.__shader = value;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw haxe_Exception.thrown(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		if(!this.__objectTransform.__colorTransform.__equals(value.__colorTransform,true) || !this.get_cacheAsBitmap() && this.__objectTransform.__colorTransform.alphaMultiplier != value.__colorTransform.alphaMultiplier) {
			this.__objectTransform.__colorTransform.__copyFrom(value.get_colorTransform());
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_shader:"set_shader",get_shader:"get_shader",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_scale9Grid:"set_scale9Grid",get_scale9Grid:"get_scale9Grid",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = "openfl.display.InteractiveObject";
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	requestSoftKeyboard: function() {
		openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/display/InteractiveObject.hx", lineNumber : 1251, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__tabTest: function(stack) {
		if(this.get_tabEnabled()) {
			stack.push(this);
		}
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		if(this.__tabEnabled != value) {
			this.__tabEnabled = value;
			this.dispatchEvent(new openfl_events_Event("tabEnabledChange",true,false));
		}
		return this.__tabEnabled;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		if(this.__tabIndex != value) {
			if(value < -1) {
				throw haxe_Exception.thrown(new openfl_errors_RangeError("Parameter tabIndex must be a non-negative number; got " + value));
			}
			this.__tabIndex = value;
			this.dispatchEvent(new openfl_events_Event("tabIndexChange",true,false));
		}
		return this.__tabIndex;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__tabChildren = true;
	this.__children = [];
	this.__removedChildren = openfl_Vector.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = "openfl.display.DisplayObjectContainer";
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw haxe_Exception.thrown(error);
		} else if(child.stage == child) {
			var error = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error.errorID = 3783;
			throw haxe_Exception.thrown(error);
		}
		if(index > this.__children.length || index < 0) {
			throw haxe_Exception.thrown("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				child.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("added");
			event.bubbles = true;
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				event = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g = 0;
		var _g1 = this.__children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw haxe_Exception.thrown(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__cleanup: function() {
		openfl_display_InteractiveObject.prototype.__cleanup.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__cleanup();
		}
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__cleanupRemovedChildren: function() {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__scrollRect != null) {
			return;
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			var childRect = openfl_geom_Rectangle.__pool.get();
			child.__getFilterBounds(childRect,childWorldTransform);
			rect.__expand(childRect.x,childRect.y,childRect.width,childRect.height);
			openfl_geom_Rectangle.__pool.release(childRect);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getRenderBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			var hitTest = false;
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i])) {
				hitTest = true;
				if(stack == null) {
					break;
				}
			}
			return hitTest;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__tabTest: function(stack) {
		openfl_display_InteractiveObject.prototype.__tabTest.call(this,stack);
		if(!this.get_tabChildren()) {
			return;
		}
		var interactive = false;
		var interactiveObject = null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			interactive = child.__getInteractive(null);
			if(interactive) {
				interactiveObject = child;
				interactiveObject.__tabTest(stack);
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,get_tabChildren: function() {
		return this.__tabChildren;
	}
	,set_tabChildren: function(value) {
		if(this.__tabChildren != value) {
			this.__tabChildren = value;
			this.dispatchEvent(new openfl_events_Event("tabChildrenChange",true,false));
		}
		return this.__tabChildren;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_tabChildren:"set_tabChildren",get_tabChildren:"get_tabChildren",get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 4;
	this.__buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = "openfl.display.Sprite";
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.__buttonMode && this.useHandCursor) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			if(stack != null) {
				return interactiveOnly;
			} else {
				return true;
			}
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(stack != null && hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_buttonMode: function() {
		return this.__buttonMode;
	}
	,set_buttonMode: function(value) {
		return this.__buttonMode = value;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics",set_buttonMode:"set_buttonMode",get_buttonMode:"get_buttonMode"})
});
var haxepunk__$internal_FlashApp = function(engine) {
	openfl_display_Sprite.call(this);
	this.engine = engine;
	this.addEventListener("addedToStage",$bind(this,this.onStage));
};
$hxClasses["haxepunk._internal.FlashApp"] = haxepunk__$internal_FlashApp;
haxepunk__$internal_FlashApp.__name__ = "haxepunk._internal.FlashApp";
haxepunk__$internal_FlashApp.__super__ = openfl_display_Sprite;
haxepunk__$internal_FlashApp.prototype = $extend(openfl_display_Sprite.prototype,{
	get_fullscreen: function() {
		return this.stage.get_displayState() == 0;
	}
	,set_fullscreen: function(value) {
		if(value) {
			this.stage.set_displayState(0);
		} else {
			this.stage.set_displayState(2);
		}
		return value;
	}
	,init: function() {
		openfl_Lib.get_current().addChild(this);
	}
	,getTimeMillis: function() {
		return openfl_Lib.getTimer();
	}
	,getMemoryUse: function() {
		return openfl_system_System.get_totalMemory();
	}
	,multiTouchSupported: function() {
		return openfl_ui_Multitouch.get_supportsTouchEvents();
	}
	,onEnterFrame: function(e) {
		this.engine.onUpdate();
	}
	,initRenderer: function() {
		throw haxe_Exception.thrown("not implemented");
	}
	,onStage: function(e) {
		var _gthis = this;
		this.removeEventListener("addedToStage",$bind(this,this.onStage));
		this.setStageProperties();
		this.initRenderer();
		this.initKeyInput();
		this.initMouseInput();
		this.initGamepadInput();
		if(this.multiTouchSupported()) {
			this.initTouchInput();
		} else {
			var s = "touch events not supported";
			var pos_fileName = "haxepunk/_internal/FlashApp.hx";
			var pos_lineNumber = 92;
			var pos_className = "haxepunk._internal.FlashApp";
			var pos_methodName = "onStage";
			var level = 10;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
		}
		var _this = this.engine;
		if(_this._scene != null && _this._scenes.length > 0 && _this._scenes[_this._scenes.length - 1] != _this._scene) {
			var c = js_Boot.getClass(_this._scene);
			var s = "ending scene: " + c.__name__;
			var pos_fileName = "haxepunk/Engine.hx";
			var pos_lineNumber = 257;
			var pos_className = "haxepunk.Engine";
			var pos_methodName = "checkScene";
			var level = 10;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this1 = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this1.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
			_this._scene.end();
			_this._scene.updateLists(false);
			if(_this._scene.autoClear && _this._scene.get_hasTween()) {
				_this._scene.clearTweens();
			}
			_this._scene = _this._scenes[_this._scenes.length - 1];
			var _g = 0;
			var _g1 = _this.onSceneSwitch.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
			var c = js_Boot.getClass(_this._scene);
			var s = "starting scene: " + c.__name__;
			var pos_fileName = "haxepunk/Engine.hx";
			var pos_lineNumber = 266;
			var pos_className = "haxepunk.Engine";
			var pos_methodName = "checkScene";
			var level = 10;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this1 = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this1.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
			_this._scene.assetCache.enable();
			_this._scene.updateLists();
			if(_this._scene.started) {
				_this._scene.resume();
			} else {
				_this._scene.begin();
			}
			_this._scene.started = true;
			_this._scene.updateLists(true);
		}
		this.engine.init();
		this.engine._rate = 1000 / haxepunk_HXP.assignedFrameRate;
		this.engine._last = this.getTimeMillis();
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		openfl_Lib.get_current().stage.application.onExit.add(function(_) {
			var _g = 0;
			var _g1 = _gthis.engine.onClose.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		});
	}
	,setStageProperties: function() {
		var _gthis = this;
		this.stage.set_frameRate(haxepunk_HXP.assignedFrameRate);
		this.stage.align = 6;
		this.stage.set_scaleMode(2);
		this.stage.set_displayState(2);
		haxepunk_HXP.screen.color = this.stage.get_color();
		this._resize();
		this.stage.addEventListener("resize",function(e) {
			_gthis._resize();
		});
		this.stage.addEventListener("activate",function(e) {
			haxepunk_HXP.focused = true;
			_gthis.engine.focusGained();
			_gthis.engine._scene.focusGained();
		});
		this.stage.addEventListener("deactivate",function(e) {
			haxepunk_HXP.focused = false;
			_gthis.engine.focusLost();
			_gthis.engine._scene.focusLost();
		});
	}
	,initMouseInput: function() {
		var s = "init mouse input";
		var pos_fileName = "haxepunk/_internal/FlashApp.hx";
		var pos_lineNumber = 172;
		var pos_className = "haxepunk._internal.FlashApp";
		var pos_methodName = "initMouseInput";
		var level = 10;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
		haxepunk__$internal_MouseInput.init(this);
	}
	,initKeyInput: function() {
		var s = "init key input";
		var pos_fileName = "haxepunk/_internal/FlashApp.hx";
		var pos_lineNumber = 178;
		var pos_className = "haxepunk._internal.FlashApp";
		var pos_methodName = "initKeyInput";
		var level = 10;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
		haxepunk__$internal_KeyInput.init(this);
	}
	,initGamepadInput: function() {
		var s = "init gamepad input";
		var pos_fileName = "haxepunk/_internal/FlashApp.hx";
		var pos_lineNumber = 185;
		var pos_className = "haxepunk._internal.FlashApp";
		var pos_methodName = "initGamepadInput";
		var level = 10;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
		haxepunk__$internal_GamepadInput.init(this);
	}
	,initTouchInput: function() {
		var s = "init touch input";
		var pos_fileName = "haxepunk/_internal/FlashApp.hx";
		var pos_lineNumber = 192;
		var pos_className = "haxepunk._internal.FlashApp";
		var pos_methodName = "initTouchInput";
		var level = 10;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
		haxepunk__$internal_TouchInput.init(this);
	}
	,getMouseX: function() {
		return this.stage.get_mouseX();
	}
	,getMouseY: function() {
		return this.stage.get_mouseY();
	}
	,_resize: function() {
		if(haxepunk_HXP.width == 0 || haxepunk_HXP.height == 0) {
			haxepunk_HXP.width = this.stage.stageWidth;
			haxepunk_HXP.height = this.stage.stageHeight;
			haxepunk_HXP.screen.scaleMode.setBaseSize();
		}
		haxepunk_HXP.resize(this.stage.stageWidth,this.stage.stageHeight);
		if(this.get_scrollRect() == null) {
			this.set_scrollRect(new openfl_geom_Rectangle());
		}
		this.get_scrollRect().width = haxepunk_HXP.screen.width;
		this.get_scrollRect().height = haxepunk_HXP.screen.height;
		var _g = 0;
		var _g1 = this.engine.onResize.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,__class__: haxepunk__$internal_FlashApp
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen"})
});
var haxepunk_App = function(engine) {
	haxepunk__$internal_FlashApp.call(this,engine);
};
$hxClasses["haxepunk.App"] = haxepunk_App;
haxepunk_App.__name__ = "haxepunk.App";
haxepunk_App.__super__ = haxepunk__$internal_FlashApp;
haxepunk_App.prototype = $extend(haxepunk__$internal_FlashApp.prototype,{
	onEnterFrame: function(e) {
		this.invalidate();
		haxepunk__$internal_FlashApp.prototype.onEnterFrame.call(this,e);
	}
	,initRenderer: function() {
		var _gthis = this;
		this.addEventListener("renderOpenGL",function(event) {
			var renderer = event.renderer;
			haxepunk_graphics_hardware_opengl_GLInternal.gl = renderer.gl;
			haxepunk_graphics_hardware_opengl_GLInternal.renderer = renderer;
			_gthis.engine.onRender();
		});
	}
	,__class__: haxepunk_App
});
var haxepunk_Camera = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._shakeY = 0;
	this._shakeX = 0;
	this._shakeMagnitude = 0;
	this._shakeTime = 0;
	this.anchorY = 0;
	this.anchorX = 0;
	this.pixelSnapping = false;
	this.scaleY = 1;
	this.scaleX = 1;
	this.scale = 1;
	this.y = 0;
	this.x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["haxepunk.Camera"] = haxepunk_Camera;
haxepunk_Camera.__name__ = "haxepunk.Camera";
haxepunk_Camera.prototype = {
	setTo: function(x,y,px,py) {
		if(py == null) {
			py = 0;
		}
		if(px == null) {
			px = 0;
		}
		this.x = x - haxepunk_HXP.width / (this.scale * this.scaleX) * px;
		this.y = y - haxepunk_HXP.height / (this.scale * this.scaleY) * py;
	}
	,get_fullScaleX: function() {
		return this.scale * this.scaleX;
	}
	,get_fullScaleY: function() {
		return this.scale * this.scaleY;
	}
	,get_screenScaleX: function() {
		return this.scale * this.scaleX * haxepunk_HXP.screen.scaleX;
	}
	,get_screenScaleY: function() {
		return this.scale * this.scaleY * haxepunk_HXP.screen.scaleY;
	}
	,get_width: function() {
		return haxepunk_HXP.screen.width / (this.scale * this.scaleX * haxepunk_HXP.screen.scaleX);
	}
	,get_height: function() {
		return haxepunk_HXP.screen.height / (this.scale * this.scaleY * haxepunk_HXP.screen.scaleY);
	}
	,floorX: function(x) {
		return Math.floor((x + 0.5) * (this.scale * this.scaleX * haxepunk_HXP.screen.scaleX)) / (this.scale * this.scaleX * haxepunk_HXP.screen.scaleX);
	}
	,floorY: function(y) {
		return Math.floor((y + 0.5) * (this.scale * this.scaleY * haxepunk_HXP.screen.scaleY)) / (this.scale * this.scaleY * haxepunk_HXP.screen.scaleY);
	}
	,anchor: function(target,anchorX,anchorY) {
		if(anchorY == null) {
			anchorY = 0.5;
		}
		if(anchorX == null) {
			anchorX = 0.5;
		}
		this.anchorTarget = target;
		this.anchorX = anchorX;
		this.anchorY = anchorY;
	}
	,onCamera: function(entity) {
		return entity.collideRect(entity.get_x(),entity.get_y(),this.x,this.y,haxepunk_HXP.width,haxepunk_HXP.height);
	}
	,shake: function(duration,magnitude) {
		if(magnitude == null) {
			magnitude = 4;
		}
		if(duration == null) {
			duration = 0.5;
		}
		if(this._shakeTime < duration) {
			this._shakeTime = duration;
		}
		this._shakeMagnitude = magnitude;
	}
	,shakeStop: function() {
		this._shakeTime = 0;
	}
	,update: function() {
		if(this.anchorTarget != null) {
			var tx = this.anchorTarget.x;
			var ty = this.anchorTarget.y;
			if(((this.anchorTarget) instanceof haxepunk_Entity)) {
				var e = this.anchorTarget;
				tx = e.get_x() - e.originX + e.get_width() / 2;
				ty = e.get_y() - e.originY + e.get_height() / 2;
			}
			this.x = tx - haxepunk_HXP.width / (this.scale * this.scaleX) * this.anchorX;
			this.y = ty - haxepunk_HXP.height / (this.scale * this.scaleY) * this.anchorY;
		}
		if(this._shakeTime > 0) {
			var sx = Std.random(this._shakeMagnitude * 2 + 1) - this._shakeMagnitude;
			var sy = Std.random(this._shakeMagnitude * 2 + 1) - this._shakeMagnitude;
			this.x += sx - this._shakeX;
			this.y += sy - this._shakeY;
			this._shakeX = sx;
			this._shakeY = sy;
			this._shakeTime -= haxepunk_HXP.elapsed;
			if(this._shakeTime < 0) {
				this._shakeTime = 0;
			}
		} else if(this._shakeX != 0 || this._shakeY != 0) {
			this.x -= this._shakeX;
			this.y -= this._shakeY;
			this._shakeX = this._shakeY = 0;
		}
	}
	,__class__: haxepunk_Camera
	,__properties__: {get_height:"get_height",get_width:"get_width",get_screenScaleY:"get_screenScaleY",get_screenScaleX:"get_screenScaleX",get_fullScaleY:"get_fullScaleY",get_fullScaleX:"get_fullScaleX"}
};
var haxepunk_Tweener = function() {
	this.autoClear = false;
	this.active = true;
};
$hxClasses["haxepunk.Tweener"] = haxepunk_Tweener;
haxepunk_Tweener.__name__ = "haxepunk.Tweener";
haxepunk_Tweener.prototype = {
	get_active: function() {
		return this.active;
	}
	,set_active: function(v) {
		return this.active = v;
	}
	,update: function() {
	}
	,addTween: function(t,start) {
		if(start == null) {
			start = false;
		}
		if(t._parent != null) {
			throw haxe_Exception.thrown("Cannot add a Tween object more than once.");
		}
		t._parent = this;
		t._next = this._tween;
		if(this._tween != null) {
			this._tween._prev = t;
		}
		this._tween = t;
		if(start) {
			this._tween.start();
		} else {
			this._tween.active = false;
		}
		return t;
	}
	,removeTween: function(t) {
		if(t._parent != this) {
			throw haxe_Exception.thrown("Core object does not contain Tween.");
		}
		if(t._next != null) {
			t._next._prev = t._prev;
		}
		if(t._prev != null) {
			t._prev._next = t._next;
		} else {
			this._tween = t._next == null ? null : js_Boot.__cast(t._next , haxepunk_Tween);
		}
		t._next = t._prev = null;
		t._parent = null;
		t.active = false;
		return t;
	}
	,clearTweens: function() {
		var t = this._tween;
		while(t != null) {
			var next = t._next;
			this.removeTween(t);
			t = next;
		}
	}
	,updateTweens: function(elapsed) {
		var t = this._tween;
		while(t != null) {
			if(t.active) {
				t.update(elapsed);
			}
			t = t._next;
		}
	}
	,get_hasTween: function() {
		return this._tween != null;
	}
	,__class__: haxepunk_Tweener
	,__properties__: {get_hasTween:"get_hasTween",set_active:"set_active",get_active:"get_active"}
};
var haxepunk_Mask = function() {
	this._parent = haxepunk_Entity._EMPTY;
	var c = js_Boot.getClass(this);
	this._class = c.__name__;
	this._check = new haxe_ds_StringMap();
	var this1 = this._check;
	var key = haxepunk_Mask.__name__;
	this1.h[key] = $bind(this,this.collideMask);
	var this1 = this._check;
	var key = haxepunk_masks_Masklist.__name__;
	this1.h[key] = $bind(this,this.collideMasklist);
};
$hxClasses["haxepunk.Mask"] = haxepunk_Mask;
haxepunk_Mask.__name__ = "haxepunk.Mask";
haxepunk_Mask.__properties__ = {get_drawContext:"get_drawContext"};
haxepunk_Mask.get_drawContext = function() {
	if(haxepunk_Mask.drawContext == null) {
		haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
		haxepunk_Mask.drawContext.lineThickness = 2;
	}
	return haxepunk_Mask.drawContext;
};
haxepunk_Mask.prototype = {
	get_parent: function() {
		if(this._parent != haxepunk_Entity._EMPTY) {
			return this._parent;
		} else {
			return null;
		}
	}
	,set_parent: function(value) {
		if(value == null) {
			this._parent = haxepunk_Entity._EMPTY;
		} else {
			this._parent = value;
		}
		this.update();
		return value;
	}
	,collide: function(mask) {
		var cbFunc = this._check.h[mask._class];
		if(cbFunc != null) {
			return cbFunc(mask);
		}
		cbFunc = mask._check.h[this._class];
		if(cbFunc != null) {
			return cbFunc(this);
		}
		return false;
	}
	,collideMask: function(other) {
		if(this._parent.get_x() - this._parent.originX + this._parent.get_width() > other._parent.get_x() - other._parent.originX && this._parent.get_y() - this._parent.originY + this._parent.get_height() > other._parent.get_y() - other._parent.originY && this._parent.get_x() - this._parent.originX < other._parent.get_x() - other._parent.originX + other._parent.get_width()) {
			return this._parent.get_y() - this._parent.originY < other._parent.get_y() - other._parent.originY + other._parent.get_height();
		} else {
			return false;
		}
	}
	,collideMasklist: function(other) {
		return other.collide(this);
	}
	,debugDraw: function(camera) {
	}
	,update: function() {
	}
	,project: function(axis,projection) {
		var max = -Infinity;
		var min = Infinity;
		var cur = -this._parent.originX * axis.x - this._parent.originY * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (-this._parent.originX + this._parent.get_width()) * axis.x - this._parent.originY * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = -this._parent.originX * axis.x + (-this._parent.originY + this._parent.get_height()) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (-this._parent.originX + this._parent.get_width()) * axis.x + (-this._parent.originY + this._parent.get_height()) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		projection.min = min;
		projection.max = max;
	}
	,__class__: haxepunk_Mask
	,__properties__: {set_parent:"set_parent",get_parent:"get_parent"}
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var haxepunk_masks_Hitbox = function(width,height,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	this._y = 0;
	this._x = 0;
	this._height = 0;
	this._width = 0;
	haxepunk_Mask.call(this);
	this._width = width;
	this._height = height;
	this._x = x;
	this._y = y;
	var this1 = this._check;
	var key = haxepunk_masks_Hitbox.__name__;
	this1.h[key] = $bind(this,this.collideHitbox);
};
$hxClasses["haxepunk.masks.Hitbox"] = haxepunk_masks_Hitbox;
haxepunk_masks_Hitbox.__name__ = "haxepunk.masks.Hitbox";
haxepunk_masks_Hitbox.__super__ = haxepunk_Mask;
haxepunk_masks_Hitbox.prototype = $extend(haxepunk_Mask.prototype,{
	collideMask: function(other) {
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._parent.get_x() - other._parent.originX;
		var oy = other._parent.get_y() - other._parent.originY;
		if(px + this._width > ox && py + this._height > oy && px < ox + other._parent.get_width()) {
			return py < oy + other._parent.get_height();
		} else {
			return false;
		}
	}
	,collideHitbox: function(other) {
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._x + other._parent.get_x();
		var oy = other._y + other._parent.get_y();
		if(px + this._width > ox && py + this._height > oy && px < ox + other._width) {
			return py < oy + other._height;
		} else {
			return false;
		}
	}
	,get_x: function() {
		return this._x;
	}
	,set_x: function(value) {
		if(this._x == value) {
			return value;
		}
		this._x = value;
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this.update();
		}
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(value) {
		if(this._y == value) {
			return value;
		}
		this._y = value;
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this.update();
		}
		return this._y;
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		if(this._width == value) {
			return value;
		}
		this._width = value;
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this.update();
		}
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(this._height == value) {
			return value;
		}
		this._height = value;
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this.update();
		}
		return this._height;
	}
	,update: function() {
		if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this._parent.originX = -this._x;
			this._parent.originY = -this._y;
			this._parent.set_width(this._width);
			this._parent.set_height(this._height);
			if(this.list != null) {
				this.list.update();
			}
		}
	}
	,debugDraw: function(camera) {
		if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			var _this = haxepunk_Mask.drawContext;
			var color = 16711680;
			var alpha = 0.25;
			if(alpha == null) {
				alpha = 1;
			}
			if(color == null) {
				color = 16777215;
			}
			_this.color = color;
			_this.alpha = alpha;
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			haxepunk_Mask.drawContext.rectFilled(((this._parent != haxepunk_Entity._EMPTY ? this._parent : null).get_x() - camera.x + this.get_x()) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),((this._parent != haxepunk_Entity._EMPTY ? this._parent : null).get_y() - camera.y + this.get_y()) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this.get_width() * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),this.get_height() * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY));
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			var _this = haxepunk_Mask.drawContext;
			var color = 16711680;
			var alpha = 0.5;
			if(alpha == null) {
				alpha = 1;
			}
			if(color == null) {
				color = 16777215;
			}
			_this.color = color;
			_this.alpha = alpha;
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			haxepunk_Mask.drawContext.rect(((this._parent != haxepunk_Entity._EMPTY ? this._parent : null).get_x() - camera.x + this.get_x()) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),((this._parent != haxepunk_Entity._EMPTY ? this._parent : null).get_y() - camera.y + this.get_y()) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this.get_width() * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),this.get_height() * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY));
		}
	}
	,project: function(axis,projection) {
		var px = this._x;
		var py = this._y;
		var max = -Infinity;
		var min = Infinity;
		var cur = px * axis.x + py * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (px + this._width) * axis.x + py * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = px * axis.x + (py + this._height) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (px + this._width) * axis.x + (py + this._height) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		projection.min = min;
		projection.max = max;
	}
	,__class__: haxepunk_masks_Hitbox
	,__properties__: $extend(haxepunk_Mask.prototype.__properties__,{set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
var haxepunk_masks_Masklist = function(masks) {
	haxepunk_masks_Hitbox.call(this);
	this._masks = [];
	this._temp = [];
	this._count = 0;
	if(masks != null) {
		var _g = 0;
		while(_g < masks.length) {
			var m = masks[_g];
			++_g;
			this.add(m);
		}
	}
};
$hxClasses["haxepunk.masks.Masklist"] = haxepunk_masks_Masklist;
haxepunk_masks_Masklist.__name__ = "haxepunk.masks.Masklist";
haxepunk_masks_Masklist.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Masklist.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	collide: function(mask) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.collide(mask)) {
				return true;
			}
		}
		return false;
	}
	,collideMasklist: function(other) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = other._masks;
			while(_g2 < _g3.length) {
				var b = _g3[_g2];
				++_g2;
				if(a.collide(b)) {
					return true;
				}
			}
		}
		return true;
	}
	,add: function(mask) {
		this._masks[this._count++] = mask;
		mask.list = this;
		mask.set_parent(this._parent != haxepunk_Entity._EMPTY ? this._parent : null);
		this.update();
		return mask;
	}
	,remove: function(mask) {
		if(this._masks.indexOf(mask) < 0) {
			return mask;
		}
		this._temp.length = 0;
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m == mask) {
				mask.list = null;
				mask.set_parent(null);
				this._count--;
				this.update();
			} else {
				this._temp[this._temp.length] = m;
			}
		}
		var temp = this._masks;
		this._masks = this._temp;
		this._temp = temp;
		return mask;
	}
	,removeAt: function(index) {
		if(index == null) {
			index = 0;
		}
		this._temp.length = 0;
		var i = this._masks.length;
		index %= i;
		while(i-- > 0) if(i == index) {
			this._masks[index].list = null;
			this._count--;
			this.update();
		} else {
			this._temp[this._temp.length] = this._masks[index];
		}
		var temp = this._masks;
		this._masks = this._temp;
		this._temp = temp;
	}
	,removeAll: function() {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.list = null;
		}
		this._count = 0;
		this._masks.length = 0;
		this._temp.length = 0;
		this.update();
	}
	,getMask: function(index) {
		if(index == null) {
			index = 0;
		}
		return this._masks[index % this._masks.length];
	}
	,set_parent: function(parent) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.set_parent(parent);
		}
		return haxepunk_masks_Hitbox.prototype.set_parent.call(this,parent);
	}
	,update: function() {
		var h;
		var l = 2147483647;
		var t = l;
		var b = -2147483648;
		var r = b;
		var h;
		var p;
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(((m) instanceof haxepunk_masks_Polygon)) {
				p = m;
				if(p != null) {
					if(p.minX < l) {
						l = p.minX;
					}
					if(p.minY < t) {
						t = p.minY;
					}
					if(p.maxX > r) {
						r = p.maxX;
					}
					if(p.maxY > b) {
						b = p.maxY;
					}
				}
			} else {
				h = js_Boot.__cast(m , haxepunk_masks_Hitbox);
				if(h != null) {
					if(h.get_x() < l) {
						l = h.get_x();
					}
					if(h.get_y() < t) {
						t = h.get_y();
					}
					if(h.get_x() + h.get_width() > r) {
						r = h.get_x() + h.get_width();
					}
					if(h.get_y() + h.get_height() > b) {
						b = h.get_y() + h.get_height();
					}
				}
			}
		}
		this._x = l;
		this._y = t;
		this._width = r - l;
		this._height = b - t;
		haxepunk_masks_Hitbox.prototype.update.call(this);
	}
	,debugDraw: function(camera) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.debugDraw(camera);
		}
	}
	,get_count: function() {
		return this._count;
	}
	,__class__: haxepunk_masks_Masklist
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{get_count:"get_count"})
});
var haxepunk_Entity = function(x,y,graphic,mask) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._moveY = 0;
	this._moveX = 0;
	this._y = 0;
	this._x = 0;
	this._frames = -1;
	this._layer = 0;
	this.postUpdate = new haxepunk_Signal0();
	this.preUpdate = new haxepunk_Signal0();
	this.onRemove = new haxepunk_Signal0();
	this.onAdd = new haxepunk_Signal0();
	this.originY = 0;
	this.originX = 0;
	this.height = 0;
	this.width = 0;
	this.followCamera = null;
	this.y = 0;
	this.x = 0;
	this.collidable = true;
	this.visible = true;
	this.skipFrames = 0;
	this.camera = null;
	haxepunk_Tweener.call(this);
	this.set_x(x);
	this.set_y(y);
	this.originX = this.originY = 0;
	this.set_width(this.set_height(0));
	this._moveX = this._moveY = 0;
	this._type = "";
	this._name = "";
	this.HITBOX = new haxepunk_Mask();
	this.set_layer(0);
	if(graphic != null) {
		this.graphic = graphic;
	}
	if(mask != null) {
		this.set_mask(mask);
	}
	this.HITBOX.set_parent(this);
	var c = js_Boot.getClass(this);
	this._class = c.__name__;
};
$hxClasses["haxepunk.Entity"] = haxepunk_Entity;
haxepunk_Entity.__name__ = "haxepunk.Entity";
haxepunk_Entity.__super__ = haxepunk_Tweener;
haxepunk_Entity.prototype = $extend(haxepunk_Tweener.prototype,{
	set_camera: function(v) {
		return this.camera = v;
	}
	,get_visible: function() {
		if(this.visible) {
			if(this.parent != null) {
				return this.parent.get_visible();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,set_visible: function(v) {
		return this.visible = v;
	}
	,get_active: function() {
		if(this.active) {
			if(this.parent != null) {
				return this.parent.get_active();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,get_collidable: function() {
		if(this.collidable) {
			if(this.parent != null) {
				return this.parent.get_collidable();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,set_collidable: function(v) {
		return this.collidable = v;
	}
	,get_enabled: function() {
		if(this.get_active() && this.get_visible()) {
			return this.get_collidable();
		} else {
			return false;
		}
	}
	,set_enabled: function(v) {
		return this.set_active(this.set_visible(this.set_collidable(v)));
	}
	,get_x: function() {
		var parentX = this.parent == null ? 0 : this.parent.get_x();
		return parentX + this.x + (this.followCamera == null ? 0 : this.followCamera.x);
	}
	,set_x: function(v) {
		var parentX = this.parent == null ? 0 : this.parent.get_x();
		return this.x = v - parentX;
	}
	,get_y: function() {
		var parentY = this.parent == null ? 0 : this.parent.get_y();
		return parentY + this.y + (this.followCamera == null ? 0 : this.followCamera.y);
	}
	,set_y: function(v) {
		var parentY = this.parent == null ? 0 : this.parent.get_y();
		return this.y = v - parentY;
	}
	,get_localX: function() {
		return this.get_x() - (this.parent == null ? 0 : this.parent.get_x());
	}
	,set_localX: function(v) {
		return this.set_x((this.parent == null ? 0 : this.parent.get_x()) + v);
	}
	,get_localY: function() {
		return this.get_y() - (this.parent == null ? 0 : this.parent.get_y());
	}
	,set_localY: function(v) {
		return this.set_y((this.parent == null ? 0 : this.parent.get_y()) + v);
	}
	,get_width: function() {
		return this.width;
	}
	,set_width: function(w) {
		return this.width = w;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(h) {
		return this.height = h;
	}
	,added: function() {
	}
	,removed: function() {
	}
	,resized: function() {
	}
	,shouldUpdate: function() {
		if(this.skipFrames == 0) {
			return true;
		} else if(++this._frames % this.skipFrames == 0) {
			this._frames %= this.skipFrames;
			return true;
		} else {
			return false;
		}
	}
	,update: function() {
	}
	,render: function(camera) {
		if(this.graphic != null && this.graphic._visible) {
			if(this.graphic.relative) {
				haxepunk_Entity._point.x = this.get_x();
				haxepunk_Entity._point.y = this.get_y();
			} else {
				haxepunk_Entity._point.x = haxepunk_Entity._point.y = 0;
			}
			this.graphic.doRender(haxepunk_Entity._point,camera);
		}
	}
	,debugDraw: function(camera,selected) {
		if(selected == null) {
			selected = false;
		}
		if(this._mask == null && this.get_width() > 0 && this.get_height() > 0 && this.get_collidable()) {
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			haxepunk_Mask.drawContext.lineThickness = 2;
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			var _this = haxepunk_Mask.drawContext;
			var color = 16711680;
			var alpha = 0.065;
			if(alpha == null) {
				alpha = 1;
			}
			if(color == null) {
				color = 16777215;
			}
			_this.color = color;
			_this.alpha = alpha;
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			haxepunk_Mask.drawContext.rectFilled((this.get_x() - camera.x - this.originX) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),(this.get_y() - camera.y - this.originY) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this.get_width() * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),this.get_height() * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY));
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			var _this = haxepunk_Mask.drawContext;
			var color = 16711680;
			var alpha = 0.25;
			if(alpha == null) {
				alpha = 1;
			}
			if(color == null) {
				color = 16777215;
			}
			_this.color = color;
			_this.alpha = alpha;
			if(haxepunk_Mask.drawContext == null) {
				haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
				haxepunk_Mask.drawContext.lineThickness = 2;
			}
			haxepunk_Mask.drawContext.rect((this.get_x() - camera.x - this.originX) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),(this.get_y() - camera.y - this.originY) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this.get_width() * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),this.get_height() * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY));
		} else if(this._mask != null) {
			this._mask.debugDraw(camera);
		}
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var _this = haxepunk_Mask.drawContext;
		var color = selected ? 65280 : 16777215;
		var alpha = 1;
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		_this.color = color;
		_this.alpha = alpha;
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var _this = haxepunk_Mask.drawContext;
		var x = (this.get_x() - camera.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX);
		var y = (this.get_y() - camera.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
		var segments = 8;
		if(segments == null) {
			segments = 25;
		}
		var radians = 2 * Math.PI / segments;
		var halfThick = _this.lineThickness / 2;
		var innerRadius = 3 - halfThick;
		var outerRadius = 3 + halfThick;
		var this1 = { x : 0, y : 0};
		var inner = this1;
		var this1 = { x : 0, y : 0};
		var outer = this1;
		var this1 = { x : 0, y : 0};
		var lastOuter = this1;
		var this1 = { x : 0, y : 0};
		var lastInner = this1;
		if(_this.shader == null) {
			_this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = _this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : _this.scene;
		_this.command = scene.batch.getDrawCommand(null,_this.shader,_this.smooth,_this.blend,null);
		var _g = 0;
		var _g1 = segments + 1;
		while(_g < _g1) {
			var segment = _g++;
			var theta = segment * radians;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			haxepunk_math_Vector2.setTo(inner,x + sin * innerRadius,y + cos * innerRadius);
			haxepunk_math_Vector2.setTo(outer,x + sin * outerRadius,y + cos * outerRadius);
			if(segment != 0) {
				var tx1 = lastInner.x;
				var ty1 = lastInner.y;
				var tx2 = lastOuter.x;
				var ty2 = lastOuter.y;
				var tx3 = outer.x;
				var ty3 = outer.y;
				var color = _this.color;
				var alpha = _this.alpha;
				if(_this.scale) {
					tx1 *= haxepunk_HXP.screen.scaleX;
					tx2 *= haxepunk_HXP.screen.scaleX;
					tx3 *= haxepunk_HXP.screen.scaleX;
					ty1 *= haxepunk_HXP.screen.scaleY;
					ty2 *= haxepunk_HXP.screen.scaleY;
					ty3 *= haxepunk_HXP.screen.scaleY;
				}
				var _this1 = _this.command;
				if(alpha > 0) {
					var onScreen;
					if(_this1.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this2 = _this1.visibleArea;
						if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this2.x + _this2.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this1.visibleArea.x) {
							var _this3 = _this1.visibleArea;
							onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this3.y + _this3.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this1.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = 0;
						data1.uvy1 = 0;
						data1.tx2 = tx2;
						data1.ty2 = ty2;
						data1.uvx2 = 0;
						data1.uvy2 = 0;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = 0;
						data1.uvy3 = 0;
						data1.color = color;
						data1.alpha = alpha;
						if(_this1.data == null) {
							_this1.data = data1;
						} else {
							_this1._lastData._next = data1;
						}
						_this1._lastData = data1;
						++_this1.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
						var a2 = data1.ty1;
						var b2 = data1.ty2;
						var c2 = data1.ty3;
						var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c3 = data1.ty3;
						var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
						if(_this1.bounds.width == 0) {
							_this1.bounds.x = x1;
							_this1.bounds.width = x2 - x1;
						} else {
							if(x1 < _this1.bounds.x) {
								_this1.bounds.width += _this1.bounds.x - x1;
								_this1.bounds.x = x1;
							}
							var _this4 = _this1.bounds;
							if(x2 > _this4.x + _this4.width) {
								_this1.bounds.width = x2 - _this1.bounds.x;
							}
						}
						if(_this1.bounds.height == 0) {
							_this1.bounds.y = y1;
							_this1.bounds.height = y2 - y1;
						} else {
							if(y1 < _this1.bounds.y) {
								_this1.bounds.height += _this1.bounds.y - y1;
								_this1.bounds.y = y1;
							}
							var _this5 = _this1.bounds;
							if(y2 > _this5.y + _this5.height) {
								_this1.bounds.height = y2 - _this1.bounds.y;
							}
						}
					}
				}
				var tx11 = lastInner.x;
				var ty11 = lastInner.y;
				var tx21 = outer.x;
				var ty21 = outer.y;
				var tx31 = inner.x;
				var ty31 = inner.y;
				var color1 = _this.color;
				var alpha1 = _this.alpha;
				if(_this.scale) {
					tx11 *= haxepunk_HXP.screen.scaleX;
					tx21 *= haxepunk_HXP.screen.scaleX;
					tx31 *= haxepunk_HXP.screen.scaleX;
					ty11 *= haxepunk_HXP.screen.scaleY;
					ty21 *= haxepunk_HXP.screen.scaleY;
					ty31 *= haxepunk_HXP.screen.scaleY;
				}
				var _this6 = _this.command;
				if(alpha1 > 0) {
					var onScreen2;
					if(_this6.shader.attributeNames.length <= 0) {
						var onScreen3;
						var _this7 = _this6.visibleArea;
						if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this7.x + _this7.width && (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this6.visibleArea.x) {
							var _this8 = _this6.visibleArea;
							onScreen3 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this8.y + _this8.height;
						} else {
							onScreen3 = false;
						}
						onScreen2 = onScreen3 && (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this6.visibleArea.y;
					} else {
						onScreen2 = true;
					}
					if(onScreen2) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = tx11;
						data3.ty1 = ty11;
						data3.uvx1 = 0;
						data3.uvy1 = 0;
						data3.tx2 = tx21;
						data3.ty2 = ty21;
						data3.uvx2 = 0;
						data3.uvy2 = 0;
						data3.tx3 = tx31;
						data3.ty3 = ty31;
						data3.uvx3 = 0;
						data3.uvy3 = 0;
						data3.color = color1;
						data3.alpha = alpha1;
						if(_this6.data == null) {
							_this6.data = data3;
						} else {
							_this6._lastData._next = data3;
						}
						_this6._lastData = data3;
						++_this6.triangleCount;
						var a4 = data3.tx1;
						var b4 = data3.tx2;
						var c4 = data3.tx3;
						var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c5 = data3.tx3;
						var x21 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
						var a6 = data3.ty1;
						var b6 = data3.ty2;
						var c6 = data3.ty3;
						var y11 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c7 = data3.ty3;
						var y21 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
						if(_this6.bounds.width == 0) {
							_this6.bounds.x = x11;
							_this6.bounds.width = x21 - x11;
						} else {
							if(x11 < _this6.bounds.x) {
								_this6.bounds.width += _this6.bounds.x - x11;
								_this6.bounds.x = x11;
							}
							var _this9 = _this6.bounds;
							if(x21 > _this9.x + _this9.width) {
								_this6.bounds.width = x21 - _this6.bounds.x;
							}
						}
						if(_this6.bounds.height == 0) {
							_this6.bounds.y = y11;
							_this6.bounds.height = y21 - y11;
						} else {
							if(y11 < _this6.bounds.y) {
								_this6.bounds.height += _this6.bounds.y - y11;
								_this6.bounds.y = y11;
							}
							var _this10 = _this6.bounds;
							if(y21 > _this10.y + _this10.height) {
								_this6.bounds.height = y21 - _this6.bounds.y;
							}
						}
					}
				}
			}
			lastOuter.x = outer.x;
			lastOuter.y = outer.y;
			lastInner.x = inner.x;
			lastInner.y = inner.y;
		}
	}
	,collide: function(type,x,y) {
		if(this._scene == null) {
			return null;
		}
		var _this = this._scene;
		var entities = Object.prototype.hasOwnProperty.call(_this._types.h,type) ? _this._types.h[type] : null;
		if(!this.get_collidable() || entities == null) {
			return null;
		}
		this._x = this.get_x();
		this._y = this.get_y();
		this.set_x(x);
		this.set_y(y);
		if(this._mask == null) {
			var _g = 0;
			while(_g < entities.length) {
				var e = entities[_g];
				++_g;
				if(e.get_collidable() && e != this && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
					if(e._mask == null || e._mask.collide(this.HITBOX)) {
						this.set_x(this._x);
						this.set_y(this._y);
						return e;
					}
				}
			}
		} else {
			var _g = 0;
			while(_g < entities.length) {
				var e = entities[_g];
				++_g;
				if(e.get_collidable() && e != this && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
					if(this._mask.collide(e._mask != null ? e._mask : e.HITBOX)) {
						this.set_x(this._x);
						this.set_y(this._y);
						return e;
					}
				}
			}
		}
		this.set_x(this._x);
		this.set_y(this._y);
		return null;
	}
	,collideTypes: function(types,x,y) {
		switch(types._hx_index) {
		case 0:
			var s = types.v;
			return this.collide(s,x,y);
		case 1:
			var a = types.v;
			var e;
			var _g = 0;
			while(_g < a.length) {
				var type = a[_g];
				++_g;
				e = this.collide(type,x,y);
				if(e != null) {
					return e;
				}
			}
			break;
		}
		return null;
	}
	,collideWith: function(e,x,y) {
		this._x = this.get_x();
		this._y = this.get_y();
		this.set_x(x);
		this.set_y(y);
		if(this.get_collidable() && e.get_collidable() && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
			if(this._mask == null) {
				if(e._mask == null || e._mask.collide(this.HITBOX)) {
					this.set_x(this._x);
					this.set_y(this._y);
					return e;
				}
				this.set_x(this._x);
				this.set_y(this._y);
				return null;
			}
			if(this._mask.collide(e._mask != null ? e._mask : e.HITBOX)) {
				this.set_x(this._x);
				this.set_y(this._y);
				return e;
			}
		}
		this.set_x(this._x);
		this.set_y(this._y);
		return null;
	}
	,collideRect: function(x,y,rX,rY,rWidth,rHeight) {
		if(x - this.originX + this.get_width() >= rX && y - this.originY + this.get_height() >= rY && x - this.originX <= rX + rWidth && y - this.originY <= rY + rHeight) {
			if(this._mask == null) {
				return true;
			}
			this._x = this.get_x();
			this._y = this.get_y();
			this.set_x(x);
			this.set_y(y);
			haxepunk_HXP.entity.set_x(rX);
			haxepunk_HXP.entity.set_y(rY);
			haxepunk_HXP.entity.set_width(rWidth | 0);
			haxepunk_HXP.entity.set_height(rHeight | 0);
			if(this._mask.collide(haxepunk_HXP.entity.HITBOX)) {
				this.set_x(this._x);
				this.set_y(this._y);
				return true;
			}
			this.set_x(this._x);
			this.set_y(this._y);
			return false;
		}
		return false;
	}
	,collidePoint: function(x,y,pX,pY) {
		if(pX >= x - this.originX && pY >= y - this.originY && pX < x - this.originX + this.get_width() && pY < y - this.originY + this.get_height()) {
			if(this._mask == null) {
				return true;
			}
			this._x = this.get_x();
			this._y = this.get_y();
			this.set_x(x);
			this.set_y(y);
			haxepunk_HXP.entity.set_x(pX);
			haxepunk_HXP.entity.set_y(pY);
			haxepunk_HXP.entity.set_width(1);
			haxepunk_HXP.entity.set_height(1);
			if(this._mask.collide(haxepunk_HXP.entity.HITBOX)) {
				this.set_x(this._x);
				this.set_y(this._y);
				return true;
			}
			this.set_x(this._x);
			this.set_y(this._y);
			return false;
		}
		return false;
	}
	,collideInto: function(type,x,y,array) {
		if(this._scene == null) {
			return;
		}
		var _this = this._scene;
		var entities = Object.prototype.hasOwnProperty.call(_this._types.h,type) ? _this._types.h[type] : null;
		if(!this.get_collidable() || entities == null) {
			return;
		}
		this._x = this.get_x();
		this._y = this.get_y();
		this.set_x(x);
		this.set_y(y);
		var n = array.length;
		if(this._mask == null) {
			var _g = 0;
			while(_g < entities.length) {
				var e = entities[_g];
				++_g;
				if(e.get_collidable() && e != this && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
					if(e._mask == null || e._mask.collide(this.HITBOX)) {
						array[n++] = e;
					}
				}
			}
		} else {
			var _g = 0;
			while(_g < entities.length) {
				var e = entities[_g];
				++_g;
				if(e.get_collidable() && e != this && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
					if(this._mask.collide(e._mask != null ? e._mask : e.HITBOX)) {
						array[n++] = e;
					}
				}
			}
		}
		this.set_x(this._x);
		this.set_y(this._y);
	}
	,collideTypesInto: function(types,x,y,array) {
		if(this._scene == null) {
			return;
		}
		var _g = 0;
		while(_g < types.length) {
			var type = types[_g];
			++_g;
			this.collideInto(type,x,y,array);
		}
	}
	,get_scene: function() {
		return this._scene;
	}
	,get_halfWidth: function() {
		return this.get_width() / 2;
	}
	,get_halfHeight: function() {
		return this.get_height() / 2;
	}
	,get_centerX: function() {
		return this.get_x() - this.originX + this.get_width() / 2;
	}
	,get_centerY: function() {
		return this.get_y() - this.originY + this.get_height() / 2;
	}
	,get_left: function() {
		return this.get_x() - this.originX;
	}
	,get_right: function() {
		return this.get_x() - this.originX + this.get_width();
	}
	,get_top: function() {
		return this.get_y() - this.originY;
	}
	,get_bottom: function() {
		return this.get_y() - this.originY + this.get_height();
	}
	,get_layer: function() {
		return this._layer;
	}
	,set_layer: function(value) {
		if(this._layer == value) {
			return this._layer;
		}
		if(this._scene == null) {
			return this._layer = value;
		}
		this._scene.removeRender(this);
		this._layer = value;
		this._scene.addRender(this);
		return this._layer;
	}
	,get_type: function() {
		return this._type;
	}
	,set_type: function(value) {
		if(this._type == value) {
			return this._type;
		}
		if(this._scene == null) {
			return this._type = value;
		}
		if(this._type != "") {
			this._scene.removeType(this);
		}
		this._type = value;
		if(value != "") {
			this._scene.addType(this);
		}
		return this._type;
	}
	,get_mask: function() {
		return this._mask;
	}
	,set_mask: function(value) {
		if(this._mask == value) {
			return value;
		}
		if(this._mask != null) {
			this._mask.set_parent(null);
		}
		this._mask = value;
		if(value != null) {
			this._mask.set_parent(this);
		}
		return this._mask;
	}
	,get_name: function() {
		return this._name;
	}
	,set_name: function(value) {
		if(this._name == value) {
			return this._name;
		}
		if(this._scene == null) {
			return this._name = value;
		}
		if(this._name != "") {
			var key = this._name;
			var _this = this._scene._entityNames;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
		this._name = value;
		if(value != "") {
			this._scene._entityNames.h[this._name] = this;
		}
		return this._name;
	}
	,addGraphic: function(g) {
		if(this.graphic == null) {
			this.graphic = g;
		} else if(((this.graphic) instanceof haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic)) {
			(js_Boot.__cast(this.graphic , haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic)).add(g);
		} else {
			var list = new haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic();
			list.add(this.graphic);
			list.add(g);
			this.graphic = list;
		}
		return g;
	}
	,setHitbox: function(width,height,originX,originY) {
		if(originY == null) {
			originY = 0;
		}
		if(originX == null) {
			originX = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		this.set_width(width);
		this.set_height(height);
		this.originX = originX;
		this.originY = originY;
	}
	,setHitboxTo: function(o) {
		var value = o.width;
		this.set_width(typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number" ? value : 0);
		var value = o.height;
		this.set_height(typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number" ? value : 0);
		var value = o.originX;
		var value1 = o.x;
		var defaultValue = -(typeof(value1) == "number" && ((value1 | 0) === value1) || typeof(value1) == "number" ? value1 : 0);
		if(defaultValue == null) {
			defaultValue = 0;
		}
		this.originX = typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number" ? value : defaultValue;
		var value = o.originY;
		var value1 = o.y;
		var defaultValue = -(typeof(value1) == "number" && ((value1 | 0) === value1) || typeof(value1) == "number" ? value1 : 0);
		if(defaultValue == null) {
			defaultValue = 0;
		}
		this.originY = typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number" ? value : defaultValue;
	}
	,setOrigin: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.originX = x;
		this.originY = y;
	}
	,centerOrigin: function() {
		this.originX = this.get_width() / 2 | 0;
		this.originY = this.get_height() / 2 | 0;
	}
	,distanceFrom: function(e,useHitboxes) {
		if(useHitboxes == null) {
			useHitboxes = false;
		}
		if(!useHitboxes) {
			return Math.sqrt((this.get_x() - e.get_x()) * (this.get_x() - e.get_x()) + (this.get_y() - e.get_y()) * (this.get_y() - e.get_y()));
		} else {
			return haxepunk_math_MathUtil.distanceRects(this.get_x() - this.originX,this.get_y() - this.originY,this.get_width(),this.get_height(),e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
		}
	}
	,distanceToPoint: function(px,py,useHitbox) {
		if(useHitbox == null) {
			useHitbox = false;
		}
		if(!useHitbox) {
			return Math.sqrt((this.get_x() - px) * (this.get_x() - px) + (this.get_y() - py) * (this.get_y() - py));
		} else {
			return haxepunk_math_MathUtil.distanceRectPoint(px,py,this.get_x() - this.originX,this.get_y() - this.originY,this.get_width(),this.get_height());
		}
	}
	,distanceToRect: function(rx,ry,rwidth,rheight) {
		return haxepunk_math_MathUtil.distanceRects(rx,ry,rwidth,rheight,this.get_x() - this.originX,this.get_y() - this.originY,this.get_width(),this.get_height());
	}
	,toString: function() {
		return this._class;
	}
	,moveBy: function(x,y,solidType,sweep) {
		if(sweep == null) {
			sweep = false;
		}
		this._moveX += x;
		this._moveY += y;
		x = Math.round(this._moveX);
		y = Math.round(this._moveY);
		this._moveX -= x;
		this._moveY -= y;
		if(solidType != null) {
			var sign;
			var e;
			if(x != 0) {
				if(this.get_collidable() && (sweep || this.collideTypes(solidType,this.get_x() + x,this.get_y()) != null)) {
					sign = x > 0 ? 1 : -1;
					while(x != 0) {
						e = this.collideTypes(solidType,this.get_x() + sign,this.get_y());
						if(e != null) {
							if(this.moveCollideX(e)) {
								break;
							} else {
								var _g = this;
								_g.set_x(_g.get_x() + sign);
							}
						} else {
							var _g1 = this;
							_g1.set_x(_g1.get_x() + sign);
						}
						x -= sign;
					}
				} else {
					var _g = this;
					_g.set_x(_g.get_x() + x);
				}
			}
			if(y != 0) {
				if(this.get_collidable() && (sweep || this.collideTypes(solidType,this.get_x(),this.get_y() + y) != null)) {
					sign = y > 0 ? 1 : -1;
					while(y != 0) {
						e = this.collideTypes(solidType,this.get_x(),this.get_y() + sign);
						if(e != null) {
							if(this.moveCollideY(e)) {
								break;
							} else {
								var _g = this;
								_g.set_y(_g.get_y() + sign);
							}
						} else {
							var _g1 = this;
							_g1.set_y(_g1.get_y() + sign);
						}
						y -= sign;
					}
				} else {
					var _g = this;
					_g.set_y(_g.get_y() + y);
				}
			}
		} else {
			var _g = this;
			_g.set_x(_g.get_x() + x);
			var _g = this;
			_g.set_y(_g.get_y() + y);
		}
	}
	,moveTo: function(x,y,solidType,sweep) {
		if(sweep == null) {
			sweep = false;
		}
		this.moveBy(x - this.get_x(),y - this.get_y(),solidType,sweep);
	}
	,moveTowards: function(x,y,amount,solidType,sweep) {
		if(sweep == null) {
			sweep = false;
		}
		var tmp = this.get_x();
		haxepunk_Entity._point.x = x - tmp;
		var tmp = this.get_y();
		haxepunk_Entity._point.y = y - tmp;
		var this1 = haxepunk_Entity._point;
		var other = haxepunk_Entity._point;
		if(this1.x * other.x + this1.y * other.y > amount * amount) {
			var this1 = haxepunk_Entity._point;
			var size = amount;
			if(size == null) {
				size = 1;
			}
			if(!(this1.x == 0 && this1.y == 0)) {
				var normal = size / Math.sqrt(this1.x * this1.x + this1.y * this1.y);
				this1.x *= normal;
				this1.y *= normal;
			}
		}
		this.moveBy(haxepunk_Entity._point.x,haxepunk_Entity._point.y,solidType,sweep);
	}
	,moveAtAngle: function(angle,amount,solidType,sweep) {
		if(sweep == null) {
			sweep = false;
		}
		angle *= Math.PI / -180;
		this.moveBy(Math.cos(angle) * amount,Math.sin(angle) * amount,solidType,sweep);
	}
	,moveCollideX: function(e) {
		return true;
	}
	,moveCollideY: function(e) {
		return true;
	}
	,clampHorizontal: function(left,right,padding) {
		if(padding == null) {
			padding = 0;
		}
		if(this.get_x() - this.originX < left + padding) {
			this.set_x(left + this.originX + padding);
		}
		if(this.get_x() - this.originX + this.get_width() > right - padding) {
			this.set_x(right - this.get_width() + this.originX - padding);
		}
	}
	,clampVertical: function(top,bottom,padding) {
		if(padding == null) {
			padding = 0;
		}
		if(this.get_y() - this.originY < top + padding) {
			this.set_y(top + this.originY + padding);
		}
		if(this.get_y() - this.originY + this.get_height() > bottom - padding) {
			this.set_y(bottom - this.get_height() + this.originY - padding);
		}
	}
	,centerGraphicInRect: function() {
		if(this.graphic != null) {
			this.graphic.x = this.get_width() / 2;
			this.graphic.y = this.get_height() / 2;
		}
	}
	,__class__: haxepunk_Entity
	,__properties__: $extend(haxepunk_Tweener.prototype.__properties__,{set_name:"set_name",get_name:"get_name",set_mask:"set_mask",get_mask:"get_mask",set_type:"set_type",get_type:"get_type",set_layer:"set_layer",get_layer:"get_layer",get_bottom:"get_bottom",get_top:"get_top",get_right:"get_right",get_left:"get_left",get_centerY:"get_centerY",get_centerX:"get_centerX",get_halfHeight:"get_halfHeight",get_halfWidth:"get_halfWidth",get_scene:"get_scene",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_localY:"set_localY",get_localY:"get_localY",set_localX:"set_localX",get_localX:"get_localX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_enabled:"set_enabled",get_enabled:"get_enabled",set_collidable:"set_collidable",get_collidable:"get_collidable",set_visible:"set_visible",get_visible:"get_visible",set_camera:"set_camera"})
});
var haxepunk_Cursor = function(image) {
	var img = new haxepunk_graphics_Image(image);
	img.smooth = true;
	haxepunk_Entity.call(this,0,0,img);
};
$hxClasses["haxepunk.Cursor"] = haxepunk_Cursor;
haxepunk_Cursor.__name__ = "haxepunk.Cursor";
haxepunk_Cursor.__super__ = haxepunk_Entity;
haxepunk_Cursor.prototype = $extend(haxepunk_Entity.prototype,{
	update: function() {
		haxepunk_Entity.prototype.update.call(this);
		var _this = this._scene;
		var x = haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this.x;
		var _this1 = _this.camera;
		this.set_x(x / (_this1.scale * _this1.scaleX * haxepunk_HXP.screen.scaleX) + _this.camera.x | 0);
		var _this = this._scene;
		var x = haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this.y;
		var _this1 = _this.camera;
		this.set_y(x / (_this1.scale * _this1.scaleY * haxepunk_HXP.screen.scaleY) + _this.camera.y | 0);
	}
	,render: function(camera) {
		var img = this.graphic;
		if(img != null) {
			img.scaleX = 1 / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX);
			img.scaleY = 1 / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
		}
		haxepunk_Entity.prototype.render.call(this,camera);
	}
	,show: function() {
		this.set_visible(true);
	}
	,hide: function() {
		this.set_visible(false);
	}
	,__class__: haxepunk_Cursor
});
var haxepunk_Engine = function(width,height,frameRate,fixed) {
	if(fixed == null) {
		fixed = false;
	}
	if(frameRate == null) {
		frameRate = 60;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this._renderer = new haxepunk_graphics_hardware_HardwareRenderer();
	this._frameListSum = 0;
	this._frameLast = 0;
	this._systemTime = 0;
	this._gameTime = 0;
	this._updateTime = 0;
	this._elapsed = 0;
	this._prev = 0;
	this._skip = 0;
	this._rate = 0;
	this._last = 0;
	this._time = 0;
	this._delta = 0;
	this._scenes = [];
	this._scene = new haxepunk_Scene();
	this.onClose = new haxepunk_Signal0();
	this.onSceneSwitch = new haxepunk_Signal0();
	this.onInputReleased = haxepunk_Signals._new();
	this.onInputPressed = haxepunk_Signals._new();
	this.onResize = new haxepunk_Signal0();
	this.postRender = new haxepunk_Signal0();
	this.preRender = new haxepunk_Signal0();
	this.postUpdate = new haxepunk_Signal0();
	this.preUpdate = new haxepunk_Signal0();
	this.maxFrameSkip = 5;
	this.maxElapsed = 0.0333;
	this.paused = false;
	haxepunk_HXP.bounds = new haxepunk_math_Rectangle(0,0,width,height);
	haxepunk_HXP.assignedFrameRate = frameRate;
	haxepunk_HXP.fixed = fixed;
	haxepunk_HXP.engine = this;
	haxepunk_HXP.width = width;
	haxepunk_HXP.height = height;
	haxepunk_HXP.screen = new haxepunk_Screen();
	haxepunk_HXP.app = this.app = this.createApp();
	if(haxepunk_math_Random._seed == 0) {
		haxepunk_math_Random._seed = haxepunk_math_MathUtil.clamp(2147483647 * Math.random() | 0,1.0,2147483646) | 0;
	}
	haxepunk_HXP.entity = new haxepunk_Entity();
	haxepunk_HXP._time = this.app.getTimeMillis();
	this._frameList = [];
	this._iterator = new haxepunk__$Engine_VisibleSceneIterator();
	this.app.init();
};
$hxClasses["haxepunk.Engine"] = haxepunk_Engine;
haxepunk_Engine.__name__ = "haxepunk.Engine";
haxepunk_Engine.prototype = {
	createApp: function() {
		return new haxepunk_App(this);
	}
	,init: function() {
	}
	,focusGained: function() {
	}
	,focusLost: function() {
	}
	,update: function() {
		if(haxepunk_HXP.needsResize) {
			haxepunk_HXP.resize(haxepunk_HXP.windowWidth,haxepunk_HXP.windowHeight);
		}
		this._scene.updateLists();
		if(this._scene != null && this._scenes.length > 0 && this._scenes[this._scenes.length - 1] != this._scene) {
			var c = js_Boot.getClass(this._scene);
			var s = "ending scene: " + c.__name__;
			var pos_fileName = "haxepunk/Engine.hx";
			var pos_lineNumber = 257;
			var pos_className = "haxepunk.Engine";
			var pos_methodName = "checkScene";
			var level = 10;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
			this._scene.end();
			this._scene.updateLists(false);
			if(this._scene.autoClear && this._scene.get_hasTween()) {
				this._scene.clearTweens();
			}
			this._scene = this._scenes[this._scenes.length - 1];
			var _g = 0;
			var _g1 = this.onSceneSwitch.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
			var c = js_Boot.getClass(this._scene);
			var s = "starting scene: " + c.__name__;
			var pos_fileName = "haxepunk/Engine.hx";
			var pos_lineNumber = 266;
			var pos_className = "haxepunk.Engine";
			var pos_methodName = "checkScene";
			var level = 10;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
			this._scene.assetCache.enable();
			this._scene.updateLists();
			if(this._scene.started) {
				this._scene.resume();
			} else {
				this._scene.begin();
			}
			this._scene.started = true;
			this._scene.updateLists(true);
		}
		var _g = 0;
		var _g1 = this.preUpdate.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		var _g = 0;
		var _g1 = this._scene.preUpdate.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		if(haxepunk_HXP.tweener.get_active() && haxepunk_HXP.tweener.get_hasTween()) {
			haxepunk_HXP.tweener.updateTweens(haxepunk_HXP.elapsed);
		}
		if(this._scene.get_active()) {
			if(this._scene.get_hasTween()) {
				this._scene.updateTweens(haxepunk_HXP.elapsed);
			}
			this._scene.update();
		}
		this._scene.updateLists(false);
		var _g = 0;
		var _g1 = this._scene.postUpdate.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		var _g = 0;
		var _g1 = this.postUpdate.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,onRender: function() {
		var t = this.app.getTimeMillis();
		if(this.paused) {
			this._frameLast = t;
			if(haxepunk_HXP.engine.console == null) {
				return;
			}
		}
		if(this._frameLast == 0) {
			this._frameLast = t | 0;
		}
		var _g = 0;
		var _g1 = this.preRender.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		this._renderer.startFrame();
		var _g = this._iterator.reset(this);
		while(_g.scenes.length > 0) {
			var scene = _g.scenes.pop();
			this._renderer.startScene(scene);
			haxepunk_HXP.renderingScene = scene;
			scene.render();
			var commands = scene.batch.iterator();
			while(commands.hasNext()) {
				var commands1 = commands.next();
				this._renderer.render(commands1);
			}
			this._renderer.flushScene(scene);
		}
		haxepunk_HXP.renderingScene = null;
		this._renderer.endFrame();
		var _g = 0;
		var _g1 = this.postRender.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		t = this.app.getTimeMillis();
		var tmp = this._frameList[this._frameList.length] = t - this._frameLast | 0;
		this._frameListSum += tmp;
		if(this._frameList.length > 10) {
			this._frameListSum -= this._frameList.shift();
		}
		haxepunk_HXP.frameRate = 1000 / (this._frameListSum / this._frameList.length);
		this._frameLast = t;
	}
	,onUpdate: function() {
		this._time = this._gameTime = this.app.getTimeMillis();
		haxepunk_HXP._systemTime = this._time - this._systemTime;
		this._updateTime = this._time;
		var elapsed = (this._time - this._last) / 1000;
		if(haxepunk_HXP.fixed) {
			this._elapsed += elapsed;
			haxepunk_HXP.elapsed = 1 / haxepunk_HXP.assignedFrameRate;
			if(this._elapsed > haxepunk_HXP.elapsed * this.maxFrameSkip) {
				this._elapsed = haxepunk_HXP.elapsed * this.maxFrameSkip;
			}
			while(this._elapsed > haxepunk_HXP.elapsed) {
				this._elapsed -= haxepunk_HXP.elapsed;
				this.step();
			}
		} else {
			haxepunk_HXP.elapsed = elapsed;
			if(haxepunk_HXP.elapsed > this.maxElapsed) {
				haxepunk_HXP.elapsed = this.maxElapsed;
			}
			haxepunk_HXP.elapsed *= haxepunk_HXP.rate;
			this.step();
		}
		this._last = this._time;
		this._time = this.app.getTimeMillis();
		haxepunk_HXP._updateTime = this._time - this._updateTime;
		this._time = this._systemTime = this.app.getTimeMillis();
		haxepunk_HXP._gameTime = this._time - this._gameTime;
	}
	,step: function() {
		haxepunk_input_Input.update();
		if(!this.paused) {
			this.update();
		}
		if(this.console != null) {
			this.console.update();
		}
		haxepunk_input_Input.postUpdate();
	}
	,checkScene: function() {
		if(this._scene != null && this._scenes.length > 0 && this._scenes[this._scenes.length - 1] != this._scene) {
			var c = js_Boot.getClass(this._scene);
			var s = "ending scene: " + c.__name__;
			var pos_fileName = "haxepunk/Engine.hx";
			var pos_lineNumber = 257;
			var pos_className = "haxepunk.Engine";
			var pos_methodName = "checkScene";
			var level = 10;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
			this._scene.end();
			this._scene.updateLists(false);
			if(this._scene.autoClear && this._scene.get_hasTween()) {
				this._scene.clearTweens();
			}
			this._scene = this._scenes[this._scenes.length - 1];
			var _g = 0;
			var _g1 = this.onSceneSwitch.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
			var c = js_Boot.getClass(this._scene);
			var s = "starting scene: " + c.__name__;
			var pos_fileName = "haxepunk/Engine.hx";
			var pos_lineNumber = 266;
			var pos_className = "haxepunk.Engine";
			var pos_methodName = "checkScene";
			var level = 10;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
			this._scene.assetCache.enable();
			this._scene.updateLists();
			if(this._scene.started) {
				this._scene.resume();
			} else {
				this._scene.begin();
			}
			this._scene.started = true;
			this._scene.updateLists(true);
		}
	}
	,pushScene: function(value) {
		var c = js_Boot.getClass(this._scene);
		var s = "pushed scene: " + c.__name__;
		var pos_fileName = "haxepunk/Engine.hx";
		var pos_lineNumber = 283;
		var pos_className = "haxepunk.Engine";
		var pos_methodName = "pushScene";
		var level = 10;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
		this._scenes.push(value);
	}
	,popScene: function() {
		var c = js_Boot.getClass(this._scene);
		var s = "popped scene: " + c.__name__;
		var pos_fileName = "haxepunk/Engine.hx";
		var pos_lineNumber = 293;
		var pos_className = "haxepunk.Engine";
		var pos_methodName = "popScene";
		var level = 10;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
		var scene = this._scenes.pop();
		if(haxepunk_assets_AssetCache.active.indexOf(scene.assetCache) > -1) {
			scene.assetCache.dispose();
		}
		return scene;
	}
	,get_scene: function() {
		return this._scene;
	}
	,set_scene: function(value) {
		if(this._scene == value) {
			return value;
		}
		if(this._scenes.length > 0) {
			this.popScene();
		}
		this._scenes.push(value);
		return this._scene;
	}
	,iterator: function() {
		return this._iterator.reset(this);
	}
	,__class__: haxepunk_Engine
	,__properties__: {set_scene:"set_scene",get_scene:"get_scene"}
};
var haxepunk__$Engine_VisibleSceneIterator = function() {
	this.scenes = [];
};
$hxClasses["haxepunk._Engine.VisibleSceneIterator"] = haxepunk__$Engine_VisibleSceneIterator;
haxepunk__$Engine_VisibleSceneIterator.__name__ = "haxepunk._Engine.VisibleSceneIterator";
haxepunk__$Engine_VisibleSceneIterator.prototype = {
	hasNext: function() {
		return this.scenes.length > 0;
	}
	,next: function() {
		return this.scenes.pop();
	}
	,reset: function(engine) {
		this.scenes.length = 0;
		if(engine.console != null) {
			this.scenes.push(engine.console);
		}
		var scene;
		var i = engine._scenes.length - 1;
		while(i >= 0) {
			scene = engine._scenes[i];
			if(scene.visible) {
				this.scenes.push(scene);
			}
			if(scene.bgAlpha == 1) {
				break;
			}
			--i;
		}
		return this;
	}
	,__class__: haxepunk__$Engine_VisibleSceneIterator
};
var haxepunk_EntityList = function() {
	this.entities = [];
	this._recycled = new haxe_ds_List();
	haxepunk_Entity.call(this);
};
$hxClasses["haxepunk.EntityList"] = haxepunk_EntityList;
haxepunk_EntityList.__name__ = "haxepunk.EntityList";
haxepunk_EntityList.__super__ = haxepunk_Entity;
haxepunk_EntityList.prototype = $extend(haxepunk_Entity.prototype,{
	get_count: function() {
		return this.entities.length;
	}
	,add: function(entity,index) {
		if(index == null) {
			index = -1;
		}
		if(index < 0) {
			this.entities.push(entity);
		} else {
			this.entities.splice(index,0,entity);
		}
		if(this._type != "") {
			entity.set_type(this._type);
		}
		if(this._scene != null) {
			this._scene.add(entity);
		}
		entity.parent = this;
		entity.set_layer(this._layer);
		entity.set_camera(this.camera);
		return entity;
	}
	,remove: function(entity) {
		HxOverrides.remove(this.entities,entity);
		if(this._scene != null) {
			this._scene.remove(entity);
		}
		entity.parent = null;
		return entity;
	}
	,pop: function() {
		var entity = this.entities.pop();
		if(entity != null) {
			if(this._scene != null) {
				this._scene.remove(entity);
			}
			entity.parent = null;
		}
		return entity;
	}
	,apply: function(f) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			f(entity);
		}
	}
	,map: function(f) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.entities;
		while(_g1 < _g2.length) {
			var entity = _g2[_g1];
			++_g1;
			_g.push(f(entity));
		}
		return _g;
	}
	,added: function() {
		haxepunk_Entity.prototype.added.call(this);
		if(this._scene != null) {
			var _g = 0;
			var _g1 = this.entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				this._scene.add(entity);
			}
		}
	}
	,removed: function() {
		if(this._scene != null) {
			var _g = 0;
			var _g1 = this.entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				this._scene.remove(entity);
			}
		}
		haxepunk_Entity.prototype.removed.call(this);
	}
	,set_type: function(value) {
		if(value != "") {
			var _g = 0;
			var _g1 = this.entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				entity.set_type(value);
			}
		}
		return this._type = value;
	}
	,set_layer: function(value) {
		var originalLayer = this._layer;
		var value1 = haxepunk_Entity.prototype.set_layer.call(this,value);
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			entity.set_layer(entity._layer - originalLayer + value1);
		}
		return value1;
	}
	,set_camera: function(value) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			entity.set_camera(value);
		}
		return this.camera = value;
	}
	,create: function(cls,constructorArgs) {
		var entity = this._recycled.pop();
		if(entity == null || entity._scene != null) {
			if(entity != null) {
				this.recycle(entity);
			}
			if(constructorArgs != null) {
				entity = Type.createInstance(cls,constructorArgs);
			} else {
				entity = Type.createInstance(cls,[]);
			}
		}
		entity.set_active(true);
		return this.add(entity);
	}
	,recycle: function(entity) {
		this.remove(entity);
		entity.set_active(false);
		return this.remove(entity);
	}
	,clearRecycled: function() {
		this._recycled.clear();
	}
	,__class__: haxepunk_EntityList
	,__properties__: $extend(haxepunk_Entity.prototype.__properties__,{get_count:"get_count"})
});
var haxepunk_TileType = {};
haxepunk_TileType.fromString = function(tileset) {
	return haxepunk_assets_AssetCache.global.getTileAtlas(tileset,false);
};
haxepunk_TileType.fromTileAtlas = function(atlas) {
	return atlas;
};
haxepunk_TileType.fromTexture = function(bd) {
	var this1 = new haxepunk_graphics_atlas_AtlasData(bd);
	return new haxepunk_graphics_atlas_TileAtlas(this1);
};
var haxepunk_ImageType = {};
haxepunk_ImageType.fromString = function(s) {
	var region = haxepunk_assets_AssetCache.global.getAtlasRegion(s,false);
	return region;
};
haxepunk_ImageType.fromTileAtlas = function(atlas) {
	return atlas.getRegion(0);
};
haxepunk_ImageType.fromAtlasRegion = function(region) {
	return region;
};
haxepunk_ImageType.fromTexture = function(bd) {
	var this1 = new haxepunk_graphics_atlas_AtlasData(bd);
	return haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1);
};
haxepunk_ImageType.fromStrings = function(v) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < v.length) {
		var image = v[_g1];
		++_g1;
		var this1 = haxepunk_assets_AssetCache.global.getAtlasData(image,false);
		_g.push(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1));
	}
	return new haxepunk_graphics_atlas_AtlasResolutions(_g);
};
haxepunk_ImageType.fromAtlasRegions = function(v) {
	return new haxepunk_graphics_atlas_AtlasResolutions(v);
};
var haxepunk_ImageOrTileType = {};
haxepunk_ImageOrTileType.fromString = function(tileset) {
	return haxe_ds_Either.Right(haxepunk_assets_AssetCache.global.getTileAtlas(tileset,false));
};
haxepunk_ImageOrTileType.fromTexture = function(bd) {
	var this1 = new haxepunk_graphics_atlas_AtlasData(bd);
	return haxe_ds_Either.Right(new haxepunk_graphics_atlas_TileAtlas(this1));
};
haxepunk_ImageOrTileType.fromTileAtlas = function(atlas) {
	return haxe_ds_Either.Right(atlas);
};
haxepunk_ImageOrTileType.fromAtlasRegion = function(region) {
	return haxe_ds_Either.Left(region);
};
var haxepunk_Graphic = function() {
	this._visible = true;
	var this1 = { x : 0, y : 0};
	this._point = this1;
	this._scroll = true;
	this.postUpdate = new haxepunk_Signal0();
	this.preUpdate = new haxepunk_Signal0();
	this.relative = true;
	this.alpha = 1;
	this.originY = 0;
	this.originX = 0;
	this.scrollY = 1;
	this.scrollX = 1;
	this.y = 0;
	this.x = 0;
	this.blend = 1;
	this.flexibleLayer = false;
	this.pixelSnapping = false;
	this.active = false;
	this.smooth = haxepunk_Graphic.smoothDefault;
	this.pixelSnapping = haxepunk_Graphic.pixelSnappingDefault;
	this.set_color(16777215);
	if(haxepunk_graphics_shader_TextureShader.defaultShader == null) {
		haxepunk_graphics_shader_TextureShader.defaultShader = new haxepunk_graphics_shader_TextureShader();
	}
	this.shader = haxepunk_graphics_shader_TextureShader.defaultShader;
	var c = js_Boot.getClass(this);
	this._class = c.__name__;
};
$hxClasses["haxepunk.Graphic"] = haxepunk_Graphic;
haxepunk_Graphic.__name__ = "haxepunk.Graphic";
haxepunk_Graphic.prototype = {
	get_visible: function() {
		return this._visible;
	}
	,set_visible: function(value) {
		return this._visible = value;
	}
	,get_x: function() {
		return this.x;
	}
	,set_x: function(value) {
		return this.x = value;
	}
	,get_y: function() {
		return this.y;
	}
	,set_y: function(value) {
		return this.y = value;
	}
	,set_alpha: function(value) {
		return this.alpha = value < 0 ? 0 : value > 1 ? 1 : value;
	}
	,set_color: function(value) {
		return this.color = value & 16777215;
	}
	,screenClipRect: function(camera,x,y) {
		if(this.clipRect != null) {
			if(this._screenClipRect == null) {
				this._screenClipRect = new haxepunk_math_Rectangle();
			}
			this._screenClipRect.setTo((x + this.clipRect.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),(y + this.clipRect.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this.clipRect.width * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),this.clipRect.height * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY));
			return this._screenClipRect;
		} else {
			return null;
		}
	}
	,floorX: function(camera,x) {
		if(this.pixelSnapping || camera.pixelSnapping) {
			return Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX);
		} else {
			return x;
		}
	}
	,floorY: function(camera,y) {
		if(this.pixelSnapping || camera.pixelSnapping) {
			return Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
		} else {
			return y;
		}
	}
	,update: function() {
	}
	,destroy: function() {
	}
	,isPixelPerfect: function(camera) {
		if(!this.pixelSnapping) {
			return camera.pixelSnapping;
		} else {
			return true;
		}
	}
	,doRender: function(point,camera) {
		if(this.pixelSnapping || camera.pixelSnapping) {
			this.pixelPerfectRender(point,camera);
		} else {
			this.render(point,camera);
		}
	}
	,render: function(point,camera) {
	}
	,pixelPerfectRender: function(point,camera) {
		this.render(point,camera);
	}
	,pause: function() {
		this.active = false;
	}
	,resume: function() {
		this.active = true;
	}
	,centerOrigin: function() {
	}
	,toString: function() {
		return "[" + this._class + "]";
	}
	,__class__: haxepunk_Graphic
	,__properties__: {set_color:"set_color",set_alpha:"set_alpha",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_visible:"set_visible",get_visible:"get_visible"}
};
var haxepunk_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.setTo(x,y,width,height);
};
$hxClasses["haxepunk.math.Rectangle"] = haxepunk_math_Rectangle;
haxepunk_math_Rectangle.__name__ = "haxepunk.math.Rectangle";
haxepunk_math_Rectangle.prototype = {
	get_left: function() {
		return this.x;
	}
	,set_left: function(value) {
		return this.x = value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(value) {
		this.x = value - this.width;
		return value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(value) {
		return this.y = value;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(value) {
		this.y = value - this.height;
		return value;
	}
	,setTo: function(x,y,width,height) {
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}
	,clone: function() {
		return new haxepunk_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,isEmpty: function() {
		if(this.width <= 0) {
			return this.height <= 0;
		} else {
			return false;
		}
	}
	,intersects: function(other) {
		if(this.x <= other.x + other.width && other.x <= this.x + this.width && this.y <= other.y + other.height) {
			return other.y <= this.y + this.height;
		} else {
			return false;
		}
	}
	,intersection: function(other) {
		var left = Math.max(this.x,other.x);
		var right = Math.min(this.x + this.width,other.x + other.width);
		var top = Math.max(this.y,other.y);
		var bottom = Math.min(this.y + this.height,other.y + other.height);
		if(right >= left && bottom >= top) {
			return new haxepunk_math_Rectangle(left,top,right - left,bottom - this.y);
		} else {
			return null;
		}
	}
	,__class__: haxepunk_math_Rectangle
	,__properties__: {set_bottom:"set_bottom",get_bottom:"get_bottom",set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left"}
};
var haxepunk_HXP = function() { };
$hxClasses["haxepunk.HXP"] = haxepunk_HXP;
haxepunk_HXP.__name__ = "haxepunk.HXP";
haxepunk_HXP.__properties__ = {set_time:"set_time",set_pan:"set_pan",get_pan:"get_pan",set_volume:"set_volume",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_scene:"set_scene",get_scene:"get_scene",get_choose:"get_choose",set_cursor:"set_cursor",get_camera:"get_camera"};
haxepunk_HXP.get_camera = function() {
	if(haxepunk_HXP.engine._scene == null) {
		return null;
	} else {
		return haxepunk_HXP.engine._scene.camera;
	}
};
haxepunk_HXP.set_cursor = function(cursor) {
	if(haxepunk_HXP.cursor == cursor) {
		return cursor;
	}
	if(cursor == null) {
		haxepunk_input_Mouse.showCursor();
	} else {
		haxepunk_input_Mouse.hideCursor();
	}
	return haxepunk_HXP.cursor = cursor;
};
haxepunk_HXP.get_choose = function() {
	return Reflect.makeVarArgs(haxepunk_HXP._choose);
};
haxepunk_HXP._choose = function(objs) {
	if(objs == null || objs.length == 0) {
		throw haxe_Exception.thrown("Can't choose a random element on an empty array");
	}
	if(((objs[0]) instanceof Array)) {
		var c = js_Boot.__cast(objs[0] , Array);
		if(c.length != 0) {
			haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
			return c[haxepunk_math_Random._seed / 2147483647 * c.length | 0];
		} else {
			throw haxe_Exception.thrown("Can't choose a random element on an empty array");
		}
	} else {
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		return objs[haxepunk_math_Random._seed / 2147483647 * objs.length | 0];
	}
};
haxepunk_HXP.get_scene = function() {
	return haxepunk_HXP.engine._scene;
};
haxepunk_HXP.set_scene = function(value) {
	return haxepunk_HXP.engine.set_scene(value);
};
haxepunk_HXP.resize = function(width,height) {
	haxepunk_HXP.windowWidth = width;
	haxepunk_HXP.windowHeight = height;
	haxepunk_HXP.screen.resize(width,height);
	haxepunk_HXP.halfWidth = haxepunk_HXP.width / 2;
	haxepunk_HXP.halfHeight = haxepunk_HXP.height / 2;
	haxepunk_HXP.bounds.width = width;
	haxepunk_HXP.bounds.height = height;
	var _g = haxepunk_HXP.engine.iterator();
	while(_g.scenes.length > 0) {
		var scene = _g.scenes.pop();
		scene._resize();
	}
	haxepunk_HXP.needsResize = false;
};
haxepunk_HXP.clear = function(array) {
	array.length = 0;
};
haxepunk_HXP.setCamera = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	(haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).x = x;
	(haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).y = y;
};
haxepunk_HXP.resetCamera = function() {
	(haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).x = (haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).y = 0;
};
haxepunk_HXP.get_fullscreen = function() {
	return haxepunk_HXP.app.stage.get_displayState() == 0;
};
haxepunk_HXP.set_fullscreen = function(value) {
	var _this = haxepunk_HXP.app;
	if(value) {
		_this.stage.set_displayState(0);
	} else {
		_this.stage.set_displayState(2);
	}
	return value;
};
haxepunk_HXP.set_volume = function(value) {
	value = haxepunk_math_MathUtil.clamp(value,0,1);
	if(haxepunk_HXP.volume == value) {
		return value;
	}
	haxepunk_HXP.volume = value;
	haxepunk_Sfx.onGlobalUpdated(false);
	return haxepunk_HXP.volume;
};
haxepunk_HXP.get_pan = function() {
	return haxepunk_HXP._pan;
};
haxepunk_HXP.set_pan = function(value) {
	if(value < -1) {
		value = -1;
	}
	if(value > 1) {
		value = 1;
	}
	if(haxepunk_HXP._pan == value) {
		return value;
	}
	haxepunk_HXP._pan = value;
	haxepunk_Sfx.onGlobalUpdated(true);
	return haxepunk_HXP._pan;
};
haxepunk_HXP.indexOf = function(arr,v) {
	return arr.indexOf(v);
};
haxepunk_HXP.next = function(current,options,loop) {
	if(loop == null) {
		loop = true;
	}
	if(loop) {
		return options[(options.indexOf(current) + 1) % options.length];
	} else {
		return options[Math.min(options.indexOf(current) + 1,options.length - 1) | 0];
	}
};
haxepunk_HXP.prev = function(current,options,loop) {
	if(loop == null) {
		loop = true;
	}
	if(loop) {
		return options[(options.indexOf(current) - 1 + options.length) % options.length];
	} else {
		return options[Math.max(options.indexOf(current) - 1,0) | 0];
	}
};
haxepunk_HXP.swap = function(current,a,b) {
	if(current == a) {
		return b;
	} else {
		return a;
	}
};
haxepunk_HXP.insertSortedKey = function(list,key,compare) {
	var result = 0;
	var mid = 0;
	var min = 0;
	var max = list.length - 1;
	while(max >= min) {
		mid = min + ((max - min) / 2 | 0);
		result = compare(list[mid],key);
		if(result > 0) {
			max = mid - 1;
		} else if(result < 0) {
			min = mid + 1;
		} else {
			return;
		}
	}
	list.splice(result > 0 ? mid : mid + 1,0,key);
};
haxepunk_HXP.timeFlag = function() {
	var t = new Date().getTime() / 1000;
	var e = t - haxepunk_HXP._time;
	haxepunk_HXP._time = t;
	return e;
};
haxepunk_HXP.tween = function(object,values,duration,options) {
	if(options != null && Object.prototype.hasOwnProperty.call(options,"delay")) {
		var delay = options.delay;
		Reflect.deleteField(options,"delay");
		haxepunk_HXP.alarm(delay,function() {
			haxepunk_HXP.tween(object,values,duration,options);
		});
		return null;
	}
	var type = haxepunk_TweenType.OneShot;
	var complete = null;
	var ease = null;
	var tweener = haxepunk_HXP.tweener;
	if(((object) instanceof haxepunk_Tweener)) {
		tweener = js_Boot.__cast(object , haxepunk_Tweener);
	}
	if(options != null) {
		if(Object.prototype.hasOwnProperty.call(options,"type")) {
			type = options.type;
		}
		if(Object.prototype.hasOwnProperty.call(options,"complete")) {
			complete = options.complete;
		}
		if(Object.prototype.hasOwnProperty.call(options,"ease")) {
			ease = options.ease;
		}
		if(Object.prototype.hasOwnProperty.call(options,"tweener")) {
			tweener = options.tweener;
		}
	}
	var tween = new haxepunk_tweens_misc_MultiVarTween(type);
	if(complete != null) {
		tween.onComplete.callbacks.push(complete);
	}
	tween.tween(object,values,duration,ease);
	tweener.addTween(tween,true);
	return tween;
};
haxepunk_HXP.alarm = function(delay,complete,type,tweener) {
	if(type == null) {
		type = haxepunk_TweenType.OneShot;
	}
	if(tweener == null) {
		tweener = haxepunk_HXP.tweener;
	}
	var alarm = new haxepunk_tweens_misc_Alarm(delay,complete,type);
	tweener.addTween(alarm,true);
	return alarm;
};
haxepunk_HXP.frames = function(from,to,skip) {
	if(skip == null) {
		skip = 0;
	}
	var a = [];
	++skip;
	if(from < to) {
		while(from <= to) {
			a.push(from);
			from += skip;
		}
	} else {
		while(from >= to) {
			a.push(from);
			from -= skip;
		}
	}
	return a;
};
haxepunk_HXP.shuffle = function(a) {
	var i = a.length;
	var j;
	var t;
	while(--i > 0) {
		t = a[i];
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		j = haxepunk_math_Random._seed / 2147483647 * (i + 1) | 0;
		a[i] = a[j];
		a[j] = t;
	}
};
haxepunk_HXP.set_time = function(value) {
	haxepunk_HXP._time = value;
	return haxepunk_HXP._time;
};
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Shape();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Shape();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = "openfl.display.DefaultPreloader";
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	getBackgroundColor: function() {
		var attributes = openfl_Lib.get_current().stage.window.context.attributes;
		if(Object.prototype.hasOwnProperty.call(attributes,"background") && attributes.background != null) {
			return attributes.background;
		} else {
			return 0;
		}
	}
	,getHeight: function() {
		var height = openfl_Lib.get_current().stage.window.__height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.get_current().stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.get_current().stage.window.__width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.get_current().stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(this.progress.set_alpha(percent));
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var haxepunk_Preloader = function() {
	var _gthis = this;
	openfl_display_DefaultPreloader.call(this);
	openfl_utils_Assets.loadBitmapData("graphics/preloader/haxepunk.png").onComplete(function(bmd) {
		_gthis.scaleIncrement = 0.002;
		var width = 260;
		var height = 340;
		var color = -3448027;
		var padding = 5;
		_gthis.outline.set_x((_gthis.getWidth() - width) / 2);
		_gthis.outline.set_y((_gthis.getHeight() - height) / 2);
		_gthis.outline.get_graphics().clear();
		var img = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(0,0,274,58)));
		_gthis.addChild(img);
		img.set_x(_gthis.outline.get_x());
		img.set_y(_gthis.outline.get_y());
		var img = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(0,65,274,80)));
		_gthis.addChild(img);
		img.set_x(_gthis.outline.get_x());
		img.set_y(_gthis.outline.get_y() + 260);
		_gthis.factory = new openfl_display_Sprite();
		_gthis.factory.set_x(_gthis.outline.get_x() + 187);
		_gthis.factory.set_y(_gthis.outline.get_y() + 260);
		var img = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(0,165,114,190)));
		img.set_x(-57);
		img.set_y(-190);
		_gthis.factory.addChild(img);
		_gthis.addChild(_gthis.factory);
		_gthis.largeCog = new openfl_display_Sprite();
		_gthis.largeCog.set_x(_gthis.outline.get_x() + 80);
		_gthis.largeCog.set_y(_gthis.outline.get_y() + 190);
		var img = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(115,164,134,136)));
		img.set_x(-67);
		img.set_y(-68);
		_gthis.largeCog.addChild(img);
		_gthis.addChild(_gthis.largeCog);
		_gthis.smallCog = new openfl_display_Sprite();
		_gthis.smallCog.set_x(_gthis.outline.get_x() + 190);
		_gthis.smallCog.set_y(_gthis.outline.get_y() + 185);
		var img = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(123,305,56,56)));
		img.set_x(-28);
		img.set_y(-28);
		_gthis.smallCog.addChild(img);
		_gthis.addChild(_gthis.smallCog);
		var complete = new openfl_display_Sprite();
		complete.set_x(_gthis.outline.get_x() + width / 2);
		complete.set_y(_gthis.outline.get_y() + 60);
		complete.get_graphics().lineStyle(1,-1);
		complete.get_graphics().moveTo(-width / 2 + padding,0);
		complete.get_graphics().lineTo(width / 2 - padding,0);
		_gthis.addChildAt(complete,0);
		_gthis.progress.set_y(_gthis.outline.get_y() + 60);
		_gthis.progress.set_x(_gthis.outline.get_x() + width / 2);
		_gthis.progress.get_graphics().clear();
		_gthis.progress.get_graphics().lineStyle(1,color);
		_gthis.progress.get_graphics().moveTo(-width / 2 + padding,0);
		_gthis.progress.get_graphics().lineTo(width / 2 - padding,0);
		_gthis.addEventListener("enterFrame",$bind(_gthis,_gthis.onEnterFrame));
		_gthis.onEnterFrame(null);
	});
};
$hxClasses["haxepunk.Preloader"] = haxepunk_Preloader;
haxepunk_Preloader.__name__ = "haxepunk.Preloader";
haxepunk_Preloader.__super__ = openfl_display_DefaultPreloader;
haxepunk_Preloader.prototype = $extend(openfl_display_DefaultPreloader.prototype,{
	onEnterFrame: function(e) {
		var _g = this.largeCog;
		_g.set_rotation(_g.get_rotation() + 1);
		var _g = this.smallCog;
		_g.set_rotation(_g.get_rotation() - 1);
		var _g = this.factory;
		_g.set_scaleX(_g.get_scaleX() + this.scaleIncrement);
		var _g = this.factory;
		_g.set_scaleY(_g.get_scaleY() + this.scaleIncrement);
		if(this.factory.get_scaleX() > 1.02 || this.factory.get_scaleX() < 1) {
			this.scaleIncrement = -this.scaleIncrement;
		}
		this.outline.get_graphics().clear();
	}
	,crop: function(bmd,rect) {
		var cropped = new openfl_display_BitmapData(rect.width | 0,rect.height | 0);
		cropped.copyPixels(bmd,rect,new openfl_geom_Point());
		return cropped;
	}
	,__class__: haxepunk_Preloader
});
var haxepunk_utils_DrawContext = function(lineThickness,color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(lineThickness == null) {
		lineThickness = 1;
	}
	this.lineThickness = 1;
	this.scale = false;
	this.alpha = 1;
	this.color = 16777215;
	this.smooth = true;
	this.blend = 1;
	this.lineThickness = lineThickness;
	this.color = color;
	this.alpha = alpha;
};
$hxClasses["haxepunk.utils.DrawContext"] = haxepunk_utils_DrawContext;
haxepunk_utils_DrawContext.__name__ = "haxepunk.utils.DrawContext";
haxepunk_utils_DrawContext.prototype = {
	setColor: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		this.color = color;
		this.alpha = alpha;
	}
	,line: function(x1,y1,x2,y2) {
		var x = x1;
		var y = y1;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var a_x = x;
		var a_y = y;
		var x = x2 - a_x;
		var y = y2 - a_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var b = this1;
		var size = this.lineThickness / 2;
		if(size == null) {
			size = 1;
		}
		if(!(b.x == 0 && b.y == 0)) {
			var normal = size / Math.sqrt(b.x * b.x + b.y * b.y);
			b.x *= normal;
			b.y *= normal;
		}
		haxepunk_math_Vector2.setTo(b,-b.y,b.x);
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		var x11 = x1 + b.x;
		var y11 = y1 + b.y;
		var x3 = x2 - b.x;
		var y3 = y2 - b.y;
		var x4 = x2 + b.x;
		var y4 = y2 + b.y;
		var tx1 = x11;
		var ty1 = y11;
		var tx2 = x1 - b.x;
		var ty2 = y1 - b.y;
		var tx3 = x3;
		var ty3 = y3;
		var color = this.color;
		var alpha = this.alpha;
		if(this.scale) {
			tx1 *= haxepunk_HXP.screen.scaleX;
			tx2 *= haxepunk_HXP.screen.scaleX;
			tx3 *= haxepunk_HXP.screen.scaleX;
			ty1 *= haxepunk_HXP.screen.scaleY;
			ty2 *= haxepunk_HXP.screen.scaleY;
			ty3 *= haxepunk_HXP.screen.scaleY;
		}
		var _this = this.command;
		if(alpha > 0) {
			var onScreen;
			if(_this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var _this1 = _this.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
					var _this1 = _this.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x2 = a < b ? b < c ? c : b : a < c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y2 = a < b ? b < c ? c : b : a < c ? c : a;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x2 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this1 = _this.bounds;
					if(x2 > _this1.x + _this1.width) {
						_this.bounds.width = x2 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this1 = _this.bounds;
					if(y2 > _this1.y + _this1.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
		var tx1 = x11;
		var ty1 = y11;
		var tx2 = x3;
		var ty2 = y3;
		var tx3 = x4;
		var ty3 = y4;
		var color = this.color;
		var alpha = this.alpha;
		if(this.scale) {
			tx1 *= haxepunk_HXP.screen.scaleX;
			tx2 *= haxepunk_HXP.screen.scaleX;
			tx3 *= haxepunk_HXP.screen.scaleX;
			ty1 *= haxepunk_HXP.screen.scaleY;
			ty2 *= haxepunk_HXP.screen.scaleY;
			ty3 *= haxepunk_HXP.screen.scaleY;
		}
		var _this = this.command;
		if(alpha > 0) {
			var onScreen;
			if(_this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var _this1 = _this.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
					var _this1 = _this.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x2 = a < b ? b < c ? c : b : a < c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y2 = a < b ? b < c ? c : b : a < c ? c : a;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x2 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this1 = _this.bounds;
					if(x2 > _this1.x + _this1.width) {
						_this.bounds.width = x2 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this1 = _this.bounds;
					if(y2 > _this1.y + _this1.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
	}
	,polyline: function(points,miterJoint) {
		if(miterJoint == null) {
			miterJoint = false;
		}
		if(points.length < 4 || points.length % 2 == 1) {
			throw haxe_Exception.thrown("Invalid number of values. Expected an even number greater than 4.");
		}
		var halfThick = this.lineThickness / 2;
		var last = points.length / 2 | 0;
		var this1 = { x : 0, y : 0};
		var a = this1;
		var this1 = { x : 0, y : 0};
		var b = this1;
		var x = points[0];
		var y = points[1];
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var pos = this1;
		var x = pos.x - points[2];
		var y = pos.y - points[3];
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var prev = this1;
		var x = prev.x;
		var y = prev.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var next = this1;
		var this1 = { x : 0, y : 0};
		var inner = this1;
		var this1 = { x : 0, y : 0};
		var outer = this1;
		var this1 = { x : 0, y : 0};
		var nextPrev = this1;
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		haxepunk_math_Vector2.setTo(a,pos.x,pos.y);
		haxepunk_math_Vector2.setTo(b,pos.x,pos.y);
		haxepunk_math_Vector2.setTo(next,-next.y,next.x);
		var size = halfThick;
		if(size == null) {
			size = 1;
		}
		if(!(next.x == 0 && next.y == 0)) {
			var normal = size / Math.sqrt(next.x * next.x + next.y * next.y);
			next.x *= normal;
			next.y *= normal;
		}
		a.x += next.x;
		a.y += next.y;
		b.x -= next.x;
		b.y -= next.y;
		var size = 1;
		if(size == null) {
			size = 1;
		}
		if(!(prev.x == 0 && prev.y == 0)) {
			var normal = size / Math.sqrt(prev.x * prev.x + prev.y * prev.y);
			prev.x *= normal;
			prev.y *= normal;
		}
		var over180;
		var angle;
		var index;
		var _g = 1;
		var _g1 = last - 1;
		while(_g < _g1) {
			var i = _g++;
			index = i * 2;
			pos.x = points[index];
			pos.y = points[index + 1];
			next.x = pos.x - points[index + 2];
			next.y = pos.y - points[index + 3];
			var size = 1;
			if(size == null) {
				size = 1;
			}
			if(!(next.x == 0 && next.y == 0)) {
				var normal = size / Math.sqrt(next.x * next.x + next.y * next.y);
				next.x *= normal;
				next.y *= normal;
			}
			nextPrev.x = next.x;
			nextPrev.y = next.y;
			over180 = prev.x * next.y - prev.y * next.x > 0;
			angle = Math.acos(prev.x * next.x + prev.y * next.y) / 2;
			inner.x = prev.x;
			inner.y = prev.y;
			inner.x += next.x;
			inner.y += next.y;
			haxepunk_math_Vector2.setTo(inner,-inner.y,inner.x);
			if(over180) {
				inner.x = -inner.x;
				inner.y = -inner.y;
			}
			var size1 = halfThick / Math.cos(angle);
			if(size1 == null) {
				size1 = 1;
			}
			if(!(inner.x == 0 && inner.y == 0)) {
				var normal1 = size1 / Math.sqrt(inner.x * inner.x + inner.y * inner.y);
				inner.x *= normal1;
				inner.y *= normal1;
			}
			if(miterJoint) {
				outer.x = pos.x;
				outer.y = pos.y;
				outer.x -= inner.x;
				outer.y -= inner.y;
			}
			inner.x += pos.x;
			inner.y += pos.y;
			haxepunk_math_Vector2.setTo(prev,-prev.y,prev.x);
			var size2 = halfThick;
			if(size2 == null) {
				size2 = 1;
			}
			if(!(prev.x == 0 && prev.y == 0)) {
				var normal2 = size2 / Math.sqrt(prev.x * prev.x + prev.y * prev.y);
				prev.x *= normal2;
				prev.y *= normal2;
			}
			haxepunk_math_Vector2.setTo(next,-next.y,next.x);
			var size3 = halfThick;
			if(size3 == null) {
				size3 = 1;
			}
			if(!(next.x == 0 && next.y == 0)) {
				var normal3 = size3 / Math.sqrt(next.x * next.x + next.y * next.y);
				next.x *= normal3;
				next.y *= normal3;
			}
			if(!over180) {
				prev.x = -prev.x;
				prev.y = -prev.y;
				next.x = -next.x;
				next.y = -next.y;
			}
			prev.x += pos.x;
			prev.y += pos.y;
			next.x += pos.x;
			next.y += pos.y;
			if(over180) {
				var tx1 = a.x;
				var ty1 = a.y;
				var tx2 = b.x;
				var ty2 = b.y;
				var tx3 = prev.x;
				var ty3 = prev.y;
				var color = this.color;
				var alpha = this.alpha;
				if(this.scale) {
					tx1 *= haxepunk_HXP.screen.scaleX;
					tx2 *= haxepunk_HXP.screen.scaleX;
					tx3 *= haxepunk_HXP.screen.scaleX;
					ty1 *= haxepunk_HXP.screen.scaleY;
					ty2 *= haxepunk_HXP.screen.scaleY;
					ty3 *= haxepunk_HXP.screen.scaleY;
				}
				var _this = this.command;
				if(alpha > 0) {
					var onScreen;
					if(_this.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this1 = _this.visibleArea;
						if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
							var _this2 = _this.visibleArea;
							onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this2.y + _this2.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = 0;
						data1.uvy1 = 0;
						data1.tx2 = tx2;
						data1.ty2 = ty2;
						data1.uvx2 = 0;
						data1.uvy2 = 0;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = 0;
						data1.uvy3 = 0;
						data1.color = color;
						data1.alpha = alpha;
						if(_this.data == null) {
							_this.data = data1;
						} else {
							_this._lastData._next = data1;
						}
						_this._lastData = data1;
						++_this.triangleCount;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c = data1.tx3;
						var x1 = a1 > b1 ? b1 > c ? c : b1 : a1 > c ? c : a1;
						var a2 = data1.tx1;
						var b2 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a2 < b2 ? b2 < c1 ? c1 : b2 : a2 < c1 ? c1 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c2 = data1.ty3;
						var y1 = a3 > b3 ? b3 > c2 ? c2 : b3 : a3 > c2 ? c2 : a3;
						var a4 = data1.ty1;
						var b4 = data1.ty2;
						var c3 = data1.ty3;
						var y2 = a4 < b4 ? b4 < c3 ? c3 : b4 : a4 < c3 ? c3 : a4;
						if(_this.bounds.width == 0) {
							_this.bounds.x = x1;
							_this.bounds.width = x2 - x1;
						} else {
							if(x1 < _this.bounds.x) {
								_this.bounds.width += _this.bounds.x - x1;
								_this.bounds.x = x1;
							}
							var _this3 = _this.bounds;
							if(x2 > _this3.x + _this3.width) {
								_this.bounds.width = x2 - _this.bounds.x;
							}
						}
						if(_this.bounds.height == 0) {
							_this.bounds.y = y1;
							_this.bounds.height = y2 - y1;
						} else {
							if(y1 < _this.bounds.y) {
								_this.bounds.height += _this.bounds.y - y1;
								_this.bounds.y = y1;
							}
							var _this4 = _this.bounds;
							if(y2 > _this4.y + _this4.height) {
								_this.bounds.height = y2 - _this.bounds.y;
							}
						}
					}
				}
			} else {
				var tx11 = a.x;
				var ty11 = a.y;
				var tx21 = b.x;
				var ty21 = b.y;
				var tx31 = inner.x;
				var ty31 = inner.y;
				var color1 = this.color;
				var alpha1 = this.alpha;
				if(this.scale) {
					tx11 *= haxepunk_HXP.screen.scaleX;
					tx21 *= haxepunk_HXP.screen.scaleX;
					tx31 *= haxepunk_HXP.screen.scaleX;
					ty11 *= haxepunk_HXP.screen.scaleY;
					ty21 *= haxepunk_HXP.screen.scaleY;
					ty31 *= haxepunk_HXP.screen.scaleY;
				}
				var _this5 = this.command;
				if(alpha1 > 0) {
					var onScreen2;
					if(_this5.shader.attributeNames.length <= 0) {
						var onScreen3;
						var _this6 = _this5.visibleArea;
						if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this6.x + _this6.width && (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this5.visibleArea.x) {
							var _this7 = _this5.visibleArea;
							onScreen3 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this7.y + _this7.height;
						} else {
							onScreen3 = false;
						}
						onScreen2 = onScreen3 && (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this5.visibleArea.y;
					} else {
						onScreen2 = true;
					}
					if(onScreen2) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = tx11;
						data3.ty1 = ty11;
						data3.uvx1 = 0;
						data3.uvy1 = 0;
						data3.tx2 = tx21;
						data3.ty2 = ty21;
						data3.uvx2 = 0;
						data3.uvy2 = 0;
						data3.tx3 = tx31;
						data3.ty3 = ty31;
						data3.uvx3 = 0;
						data3.uvy3 = 0;
						data3.color = color1;
						data3.alpha = alpha1;
						if(_this5.data == null) {
							_this5.data = data3;
						} else {
							_this5._lastData._next = data3;
						}
						_this5._lastData = data3;
						++_this5.triangleCount;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c4 = data3.tx3;
						var x11 = a5 > b5 ? b5 > c4 ? c4 : b5 : a5 > c4 ? c4 : a5;
						var a6 = data3.tx1;
						var b6 = data3.tx2;
						var c5 = data3.tx3;
						var x21 = a6 < b6 ? b6 < c5 ? c5 : b6 : a6 < c5 ? c5 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c6 = data3.ty3;
						var y11 = a7 > b7 ? b7 > c6 ? c6 : b7 : a7 > c6 ? c6 : a7;
						var a8 = data3.ty1;
						var b8 = data3.ty2;
						var c7 = data3.ty3;
						var y21 = a8 < b8 ? b8 < c7 ? c7 : b8 : a8 < c7 ? c7 : a8;
						if(_this5.bounds.width == 0) {
							_this5.bounds.x = x11;
							_this5.bounds.width = x21 - x11;
						} else {
							if(x11 < _this5.bounds.x) {
								_this5.bounds.width += _this5.bounds.x - x11;
								_this5.bounds.x = x11;
							}
							var _this8 = _this5.bounds;
							if(x21 > _this8.x + _this8.width) {
								_this5.bounds.width = x21 - _this5.bounds.x;
							}
						}
						if(_this5.bounds.height == 0) {
							_this5.bounds.y = y11;
							_this5.bounds.height = y21 - y11;
						} else {
							if(y11 < _this5.bounds.y) {
								_this5.bounds.height += _this5.bounds.y - y11;
								_this5.bounds.y = y11;
							}
							var _this9 = _this5.bounds;
							if(y21 > _this9.y + _this9.height) {
								_this5.bounds.height = y21 - _this5.bounds.y;
							}
						}
					}
				}
			}
			var tx12 = b.x;
			var ty12 = b.y;
			var tx22 = prev.x;
			var ty22 = prev.y;
			var tx32 = inner.x;
			var ty32 = inner.y;
			var color2 = this.color;
			var alpha2 = this.alpha;
			if(this.scale) {
				tx12 *= haxepunk_HXP.screen.scaleX;
				tx22 *= haxepunk_HXP.screen.scaleX;
				tx32 *= haxepunk_HXP.screen.scaleX;
				ty12 *= haxepunk_HXP.screen.scaleY;
				ty22 *= haxepunk_HXP.screen.scaleY;
				ty32 *= haxepunk_HXP.screen.scaleY;
			}
			var _this10 = this.command;
			if(alpha2 > 0) {
				var onScreen4;
				if(_this10.shader.attributeNames.length <= 0) {
					var onScreen5;
					var _this11 = _this10.visibleArea;
					if((tx12 > tx22 ? tx22 > tx32 ? tx32 : tx22 : tx12 > tx32 ? tx32 : tx12) <= _this11.x + _this11.width && (tx12 < tx22 ? tx22 < tx32 ? tx32 : tx22 : tx12 < tx32 ? tx32 : tx12) >= _this10.visibleArea.x) {
						var _this12 = _this10.visibleArea;
						onScreen5 = (ty12 > ty22 ? ty22 > ty32 ? ty32 : ty22 : ty12 > ty32 ? ty32 : ty12) <= _this12.y + _this12.height;
					} else {
						onScreen5 = false;
					}
					onScreen4 = onScreen5 && (ty12 < ty22 ? ty22 < ty32 ? ty32 : ty22 : ty12 < ty32 ? ty32 : ty12) >= _this10.visibleArea.y;
				} else {
					onScreen4 = true;
				}
				if(onScreen4) {
					var data4;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data4 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data4._next = null;
					} else {
						data4 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data5 = data4;
					data5.tx1 = tx12;
					data5.ty1 = ty12;
					data5.uvx1 = 0;
					data5.uvy1 = 0;
					data5.tx2 = tx22;
					data5.ty2 = ty22;
					data5.uvx2 = 0;
					data5.uvy2 = 0;
					data5.tx3 = tx32;
					data5.ty3 = ty32;
					data5.uvx3 = 0;
					data5.uvy3 = 0;
					data5.color = color2;
					data5.alpha = alpha2;
					if(_this10.data == null) {
						_this10.data = data5;
					} else {
						_this10._lastData._next = data5;
					}
					_this10._lastData = data5;
					++_this10.triangleCount;
					var a9 = data5.tx1;
					var b9 = data5.tx2;
					var c8 = data5.tx3;
					var x12 = a9 > b9 ? b9 > c8 ? c8 : b9 : a9 > c8 ? c8 : a9;
					var a10 = data5.tx1;
					var b10 = data5.tx2;
					var c9 = data5.tx3;
					var x22 = a10 < b10 ? b10 < c9 ? c9 : b10 : a10 < c9 ? c9 : a10;
					var a11 = data5.ty1;
					var b11 = data5.ty2;
					var c10 = data5.ty3;
					var y12 = a11 > b11 ? b11 > c10 ? c10 : b11 : a11 > c10 ? c10 : a11;
					var a12 = data5.ty1;
					var b12 = data5.ty2;
					var c11 = data5.ty3;
					var y22 = a12 < b12 ? b12 < c11 ? c11 : b12 : a12 < c11 ? c11 : a12;
					if(_this10.bounds.width == 0) {
						_this10.bounds.x = x12;
						_this10.bounds.width = x22 - x12;
					} else {
						if(x12 < _this10.bounds.x) {
							_this10.bounds.width += _this10.bounds.x - x12;
							_this10.bounds.x = x12;
						}
						var _this13 = _this10.bounds;
						if(x22 > _this13.x + _this13.width) {
							_this10.bounds.width = x22 - _this10.bounds.x;
						}
					}
					if(_this10.bounds.height == 0) {
						_this10.bounds.y = y12;
						_this10.bounds.height = y22 - y12;
					} else {
						if(y12 < _this10.bounds.y) {
							_this10.bounds.height += _this10.bounds.y - y12;
							_this10.bounds.y = y12;
						}
						var _this14 = _this10.bounds;
						if(y22 > _this14.y + _this14.height) {
							_this10.bounds.height = y22 - _this10.bounds.y;
						}
					}
				}
			}
			var tx13 = next.x;
			var ty13 = next.y;
			var tx23 = prev.x;
			var ty23 = prev.y;
			var tx33 = inner.x;
			var ty33 = inner.y;
			var color3 = this.color;
			var alpha3 = this.alpha;
			if(this.scale) {
				tx13 *= haxepunk_HXP.screen.scaleX;
				tx23 *= haxepunk_HXP.screen.scaleX;
				tx33 *= haxepunk_HXP.screen.scaleX;
				ty13 *= haxepunk_HXP.screen.scaleY;
				ty23 *= haxepunk_HXP.screen.scaleY;
				ty33 *= haxepunk_HXP.screen.scaleY;
			}
			var _this15 = this.command;
			if(alpha3 > 0) {
				var onScreen6;
				if(_this15.shader.attributeNames.length <= 0) {
					var onScreen7;
					var _this16 = _this15.visibleArea;
					if((tx13 > tx23 ? tx23 > tx33 ? tx33 : tx23 : tx13 > tx33 ? tx33 : tx13) <= _this16.x + _this16.width && (tx13 < tx23 ? tx23 < tx33 ? tx33 : tx23 : tx13 < tx33 ? tx33 : tx13) >= _this15.visibleArea.x) {
						var _this17 = _this15.visibleArea;
						onScreen7 = (ty13 > ty23 ? ty23 > ty33 ? ty33 : ty23 : ty13 > ty33 ? ty33 : ty13) <= _this17.y + _this17.height;
					} else {
						onScreen7 = false;
					}
					onScreen6 = onScreen7 && (ty13 < ty23 ? ty23 < ty33 ? ty33 : ty23 : ty13 < ty33 ? ty33 : ty13) >= _this15.visibleArea.y;
				} else {
					onScreen6 = true;
				}
				if(onScreen6) {
					var data6;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data6 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data6._next = null;
					} else {
						data6 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data7 = data6;
					data7.tx1 = tx13;
					data7.ty1 = ty13;
					data7.uvx1 = 0;
					data7.uvy1 = 0;
					data7.tx2 = tx23;
					data7.ty2 = ty23;
					data7.uvx2 = 0;
					data7.uvy2 = 0;
					data7.tx3 = tx33;
					data7.ty3 = ty33;
					data7.uvx3 = 0;
					data7.uvy3 = 0;
					data7.color = color3;
					data7.alpha = alpha3;
					if(_this15.data == null) {
						_this15.data = data7;
					} else {
						_this15._lastData._next = data7;
					}
					_this15._lastData = data7;
					++_this15.triangleCount;
					var a13 = data7.tx1;
					var b13 = data7.tx2;
					var c12 = data7.tx3;
					var x13 = a13 > b13 ? b13 > c12 ? c12 : b13 : a13 > c12 ? c12 : a13;
					var a14 = data7.tx1;
					var b14 = data7.tx2;
					var c13 = data7.tx3;
					var x23 = a14 < b14 ? b14 < c13 ? c13 : b14 : a14 < c13 ? c13 : a14;
					var a15 = data7.ty1;
					var b15 = data7.ty2;
					var c14 = data7.ty3;
					var y13 = a15 > b15 ? b15 > c14 ? c14 : b15 : a15 > c14 ? c14 : a15;
					var a16 = data7.ty1;
					var b16 = data7.ty2;
					var c15 = data7.ty3;
					var y23 = a16 < b16 ? b16 < c15 ? c15 : b16 : a16 < c15 ? c15 : a16;
					if(_this15.bounds.width == 0) {
						_this15.bounds.x = x13;
						_this15.bounds.width = x23 - x13;
					} else {
						if(x13 < _this15.bounds.x) {
							_this15.bounds.width += _this15.bounds.x - x13;
							_this15.bounds.x = x13;
						}
						var _this18 = _this15.bounds;
						if(x23 > _this18.x + _this18.width) {
							_this15.bounds.width = x23 - _this15.bounds.x;
						}
					}
					if(_this15.bounds.height == 0) {
						_this15.bounds.y = y13;
						_this15.bounds.height = y23 - y13;
					} else {
						if(y13 < _this15.bounds.y) {
							_this15.bounds.height += _this15.bounds.y - y13;
							_this15.bounds.y = y13;
						}
						var _this19 = _this15.bounds;
						if(y23 > _this19.y + _this19.height) {
							_this15.bounds.height = y23 - _this15.bounds.y;
						}
					}
				}
			}
			if(miterJoint) {
				var tx14 = next.x;
				var ty14 = next.y;
				var tx24 = prev.x;
				var ty24 = prev.y;
				var tx34 = outer.x;
				var ty34 = outer.y;
				var color4 = this.color;
				var alpha4 = this.alpha;
				if(this.scale) {
					tx14 *= haxepunk_HXP.screen.scaleX;
					tx24 *= haxepunk_HXP.screen.scaleX;
					tx34 *= haxepunk_HXP.screen.scaleX;
					ty14 *= haxepunk_HXP.screen.scaleY;
					ty24 *= haxepunk_HXP.screen.scaleY;
					ty34 *= haxepunk_HXP.screen.scaleY;
				}
				var _this20 = this.command;
				if(alpha4 > 0) {
					var onScreen8;
					if(_this20.shader.attributeNames.length <= 0) {
						var onScreen9;
						var _this21 = _this20.visibleArea;
						if((tx14 > tx24 ? tx24 > tx34 ? tx34 : tx24 : tx14 > tx34 ? tx34 : tx14) <= _this21.x + _this21.width && (tx14 < tx24 ? tx24 < tx34 ? tx34 : tx24 : tx14 < tx34 ? tx34 : tx14) >= _this20.visibleArea.x) {
							var _this22 = _this20.visibleArea;
							onScreen9 = (ty14 > ty24 ? ty24 > ty34 ? ty34 : ty24 : ty14 > ty34 ? ty34 : ty14) <= _this22.y + _this22.height;
						} else {
							onScreen9 = false;
						}
						onScreen8 = onScreen9 && (ty14 < ty24 ? ty24 < ty34 ? ty34 : ty24 : ty14 < ty34 ? ty34 : ty14) >= _this20.visibleArea.y;
					} else {
						onScreen8 = true;
					}
					if(onScreen8) {
						var data8;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data8 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data8._next = null;
						} else {
							data8 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data9 = data8;
						data9.tx1 = tx14;
						data9.ty1 = ty14;
						data9.uvx1 = 0;
						data9.uvy1 = 0;
						data9.tx2 = tx24;
						data9.ty2 = ty24;
						data9.uvx2 = 0;
						data9.uvy2 = 0;
						data9.tx3 = tx34;
						data9.ty3 = ty34;
						data9.uvx3 = 0;
						data9.uvy3 = 0;
						data9.color = color4;
						data9.alpha = alpha4;
						if(_this20.data == null) {
							_this20.data = data9;
						} else {
							_this20._lastData._next = data9;
						}
						_this20._lastData = data9;
						++_this20.triangleCount;
						var a17 = data9.tx1;
						var b17 = data9.tx2;
						var c16 = data9.tx3;
						var x14 = a17 > b17 ? b17 > c16 ? c16 : b17 : a17 > c16 ? c16 : a17;
						var a18 = data9.tx1;
						var b18 = data9.tx2;
						var c17 = data9.tx3;
						var x24 = a18 < b18 ? b18 < c17 ? c17 : b18 : a18 < c17 ? c17 : a18;
						var a19 = data9.ty1;
						var b19 = data9.ty2;
						var c18 = data9.ty3;
						var y14 = a19 > b19 ? b19 > c18 ? c18 : b19 : a19 > c18 ? c18 : a19;
						var a20 = data9.ty1;
						var b20 = data9.ty2;
						var c19 = data9.ty3;
						var y24 = a20 < b20 ? b20 < c19 ? c19 : b20 : a20 < c19 ? c19 : a20;
						if(_this20.bounds.width == 0) {
							_this20.bounds.x = x14;
							_this20.bounds.width = x24 - x14;
						} else {
							if(x14 < _this20.bounds.x) {
								_this20.bounds.width += _this20.bounds.x - x14;
								_this20.bounds.x = x14;
							}
							var _this23 = _this20.bounds;
							if(x24 > _this23.x + _this23.width) {
								_this20.bounds.width = x24 - _this20.bounds.x;
							}
						}
						if(_this20.bounds.height == 0) {
							_this20.bounds.y = y14;
							_this20.bounds.height = y24 - y14;
						} else {
							if(y14 < _this20.bounds.y) {
								_this20.bounds.height += _this20.bounds.y - y14;
								_this20.bounds.y = y14;
							}
							var _this24 = _this20.bounds;
							if(y24 > _this24.y + _this24.height) {
								_this20.bounds.height = y24 - _this20.bounds.y;
							}
						}
					}
				}
			}
			if(over180) {
				a.x = next.x;
				a.y = next.y;
				b.x = inner.x;
				b.y = inner.y;
			} else {
				a.x = inner.x;
				a.y = inner.y;
				b.x = next.x;
				b.y = next.y;
			}
			prev.x = nextPrev.x;
			prev.y = nextPrev.y;
		}
		next.x = points[points.length - 2];
		next.y = points[points.length - 1];
		pos.x -= next.x;
		pos.y -= next.y;
		haxepunk_math_Vector2.setTo(pos,-pos.y,pos.x);
		var size = halfThick;
		if(size == null) {
			size = 1;
		}
		if(!(pos.x == 0 && pos.y == 0)) {
			var normal = size / Math.sqrt(pos.x * pos.x + pos.y * pos.y);
			pos.x *= normal;
			pos.y *= normal;
		}
		prev.x = next.x;
		prev.y = next.y;
		prev.x += pos.x;
		prev.y += pos.y;
		next.x -= pos.x;
		next.y -= pos.y;
		var tx1 = a.x;
		var ty1 = a.y;
		var tx2 = b.x;
		var ty2 = b.y;
		var tx3 = prev.x;
		var ty3 = prev.y;
		var color = this.color;
		var alpha = this.alpha;
		if(this.scale) {
			tx1 *= haxepunk_HXP.screen.scaleX;
			tx2 *= haxepunk_HXP.screen.scaleX;
			tx3 *= haxepunk_HXP.screen.scaleX;
			ty1 *= haxepunk_HXP.screen.scaleY;
			ty2 *= haxepunk_HXP.screen.scaleY;
			ty3 *= haxepunk_HXP.screen.scaleY;
		}
		var _this = this.command;
		if(alpha > 0) {
			var onScreen;
			if(_this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var _this1 = _this.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
					var _this1 = _this.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b1 = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b1 ? b1 > c ? c : b1 : a > c ? c : a;
				var a = data1.tx1;
				var b1 = data1.tx2;
				var c = data1.tx3;
				var x2 = a < b1 ? b1 < c ? c : b1 : a < c ? c : a;
				var a = data1.ty1;
				var b1 = data1.ty2;
				var c = data1.ty3;
				var y1 = a > b1 ? b1 > c ? c : b1 : a > c ? c : a;
				var a = data1.ty1;
				var b1 = data1.ty2;
				var c = data1.ty3;
				var y2 = a < b1 ? b1 < c ? c : b1 : a < c ? c : a;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x2 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this1 = _this.bounds;
					if(x2 > _this1.x + _this1.width) {
						_this.bounds.width = x2 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this1 = _this.bounds;
					if(y2 > _this1.y + _this1.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
		var tx1 = b.x;
		var ty1 = b.y;
		var tx2 = prev.x;
		var ty2 = prev.y;
		var tx3 = next.x;
		var ty3 = next.y;
		var color = this.color;
		var alpha = this.alpha;
		if(this.scale) {
			tx1 *= haxepunk_HXP.screen.scaleX;
			tx2 *= haxepunk_HXP.screen.scaleX;
			tx3 *= haxepunk_HXP.screen.scaleX;
			ty1 *= haxepunk_HXP.screen.scaleY;
			ty2 *= haxepunk_HXP.screen.scaleY;
			ty3 *= haxepunk_HXP.screen.scaleY;
		}
		var _this = this.command;
		if(alpha > 0) {
			var onScreen;
			if(_this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var _this1 = _this.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
					var _this1 = _this.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x2 = a < b ? b < c ? c : b : a < c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y2 = a < b ? b < c ? c : b : a < c ? c : a;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x2 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this1 = _this.bounds;
					if(x2 > _this1.x + _this1.width) {
						_this.bounds.width = x2 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this1 = _this.bounds;
					if(y2 > _this1.y + _this1.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
	}
	,rect: function(x,y,width,height) {
		var ht = this.lineThickness / 2;
		var x2 = x + width;
		var y2 = y + height;
		this.line(x - ht,y,x2 + ht,y);
		this.line(x - ht,y2,x2 + ht,y2);
		this.line(x,y + ht,x,y2 - ht);
		this.line(x2,y + ht,x2,y2 - ht);
	}
	,rectFilled: function(x,y,width,height) {
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		var x3 = x + width;
		var y3 = y + height;
		var tx1 = x;
		var ty1 = y;
		var tx2 = x + width;
		var ty2 = y;
		var tx3 = x3;
		var ty3 = y3;
		var color = this.color;
		var alpha = this.alpha;
		if(this.scale) {
			tx1 *= haxepunk_HXP.screen.scaleX;
			tx2 *= haxepunk_HXP.screen.scaleX;
			tx3 *= haxepunk_HXP.screen.scaleX;
			ty1 *= haxepunk_HXP.screen.scaleY;
			ty2 *= haxepunk_HXP.screen.scaleY;
			ty3 *= haxepunk_HXP.screen.scaleY;
		}
		var _this = this.command;
		if(alpha > 0) {
			var onScreen;
			if(_this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var _this1 = _this.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
					var _this1 = _this.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x2 = a < b ? b < c ? c : b : a < c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y2 = a < b ? b < c ? c : b : a < c ? c : a;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x2 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this1 = _this.bounds;
					if(x2 > _this1.x + _this1.width) {
						_this.bounds.width = x2 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this1 = _this.bounds;
					if(y2 > _this1.y + _this1.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
		var tx1 = x;
		var ty1 = y;
		var tx2 = x3;
		var ty2 = y3;
		var tx3 = x;
		var ty3 = y + height;
		var color = this.color;
		var alpha = this.alpha;
		if(this.scale) {
			tx1 *= haxepunk_HXP.screen.scaleX;
			tx2 *= haxepunk_HXP.screen.scaleX;
			tx3 *= haxepunk_HXP.screen.scaleX;
			ty1 *= haxepunk_HXP.screen.scaleY;
			ty2 *= haxepunk_HXP.screen.scaleY;
			ty3 *= haxepunk_HXP.screen.scaleY;
		}
		var _this = this.command;
		if(alpha > 0) {
			var onScreen;
			if(_this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var _this1 = _this.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
					var _this1 = _this.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x2 = a < b ? b < c ? c : b : a < c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y2 = a < b ? b < c ? c : b : a < c ? c : a;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x2 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this1 = _this.bounds;
					if(x2 > _this1.x + _this1.width) {
						_this.bounds.width = x2 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this1 = _this.bounds;
					if(y2 > _this1.y + _this1.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
	}
	,circle: function(x,y,radius,segments,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(segments == null) {
			segments = 25;
		}
		var radians = 2 * Math.PI / segments;
		var halfThick = this.lineThickness / 2;
		var innerRadius = radius - halfThick;
		var outerRadius = radius + halfThick;
		var this1 = { x : 0, y : 0};
		var inner = this1;
		var this1 = { x : 0, y : 0};
		var outer = this1;
		var this1 = { x : 0, y : 0};
		var lastOuter = this1;
		var this1 = { x : 0, y : 0};
		var lastInner = this1;
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		var _g = 0;
		var _g1 = segments + 1;
		while(_g < _g1) {
			var segment = _g++;
			var theta = segment * radians;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			haxepunk_math_Vector2.setTo(inner,x + sin * innerRadius * scaleX,y + cos * innerRadius * scaleY);
			haxepunk_math_Vector2.setTo(outer,x + sin * outerRadius * scaleX,y + cos * outerRadius * scaleY);
			if(segment != 0) {
				var tx1 = lastInner.x;
				var ty1 = lastInner.y;
				var tx2 = lastOuter.x;
				var ty2 = lastOuter.y;
				var tx3 = outer.x;
				var ty3 = outer.y;
				var color = this.color;
				var alpha = this.alpha;
				if(this.scale) {
					tx1 *= haxepunk_HXP.screen.scaleX;
					tx2 *= haxepunk_HXP.screen.scaleX;
					tx3 *= haxepunk_HXP.screen.scaleX;
					ty1 *= haxepunk_HXP.screen.scaleY;
					ty2 *= haxepunk_HXP.screen.scaleY;
					ty3 *= haxepunk_HXP.screen.scaleY;
				}
				var _this = this.command;
				if(alpha > 0) {
					var onScreen;
					if(_this.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this1 = _this.visibleArea;
						if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
							var _this2 = _this.visibleArea;
							onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this2.y + _this2.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = 0;
						data1.uvy1 = 0;
						data1.tx2 = tx2;
						data1.ty2 = ty2;
						data1.uvx2 = 0;
						data1.uvy2 = 0;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = 0;
						data1.uvy3 = 0;
						data1.color = color;
						data1.alpha = alpha;
						if(_this.data == null) {
							_this.data = data1;
						} else {
							_this._lastData._next = data1;
						}
						_this._lastData = data1;
						++_this.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
						var a2 = data1.ty1;
						var b2 = data1.ty2;
						var c2 = data1.ty3;
						var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c3 = data1.ty3;
						var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
						if(_this.bounds.width == 0) {
							_this.bounds.x = x1;
							_this.bounds.width = x2 - x1;
						} else {
							if(x1 < _this.bounds.x) {
								_this.bounds.width += _this.bounds.x - x1;
								_this.bounds.x = x1;
							}
							var _this3 = _this.bounds;
							if(x2 > _this3.x + _this3.width) {
								_this.bounds.width = x2 - _this.bounds.x;
							}
						}
						if(_this.bounds.height == 0) {
							_this.bounds.y = y1;
							_this.bounds.height = y2 - y1;
						} else {
							if(y1 < _this.bounds.y) {
								_this.bounds.height += _this.bounds.y - y1;
								_this.bounds.y = y1;
							}
							var _this4 = _this.bounds;
							if(y2 > _this4.y + _this4.height) {
								_this.bounds.height = y2 - _this.bounds.y;
							}
						}
					}
				}
				var tx11 = lastInner.x;
				var ty11 = lastInner.y;
				var tx21 = outer.x;
				var ty21 = outer.y;
				var tx31 = inner.x;
				var ty31 = inner.y;
				var color1 = this.color;
				var alpha1 = this.alpha;
				if(this.scale) {
					tx11 *= haxepunk_HXP.screen.scaleX;
					tx21 *= haxepunk_HXP.screen.scaleX;
					tx31 *= haxepunk_HXP.screen.scaleX;
					ty11 *= haxepunk_HXP.screen.scaleY;
					ty21 *= haxepunk_HXP.screen.scaleY;
					ty31 *= haxepunk_HXP.screen.scaleY;
				}
				var _this5 = this.command;
				if(alpha1 > 0) {
					var onScreen2;
					if(_this5.shader.attributeNames.length <= 0) {
						var onScreen3;
						var _this6 = _this5.visibleArea;
						if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this6.x + _this6.width && (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this5.visibleArea.x) {
							var _this7 = _this5.visibleArea;
							onScreen3 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this7.y + _this7.height;
						} else {
							onScreen3 = false;
						}
						onScreen2 = onScreen3 && (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this5.visibleArea.y;
					} else {
						onScreen2 = true;
					}
					if(onScreen2) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = tx11;
						data3.ty1 = ty11;
						data3.uvx1 = 0;
						data3.uvy1 = 0;
						data3.tx2 = tx21;
						data3.ty2 = ty21;
						data3.uvx2 = 0;
						data3.uvy2 = 0;
						data3.tx3 = tx31;
						data3.ty3 = ty31;
						data3.uvx3 = 0;
						data3.uvy3 = 0;
						data3.color = color1;
						data3.alpha = alpha1;
						if(_this5.data == null) {
							_this5.data = data3;
						} else {
							_this5._lastData._next = data3;
						}
						_this5._lastData = data3;
						++_this5.triangleCount;
						var a4 = data3.tx1;
						var b4 = data3.tx2;
						var c4 = data3.tx3;
						var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c5 = data3.tx3;
						var x21 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
						var a6 = data3.ty1;
						var b6 = data3.ty2;
						var c6 = data3.ty3;
						var y11 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c7 = data3.ty3;
						var y21 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
						if(_this5.bounds.width == 0) {
							_this5.bounds.x = x11;
							_this5.bounds.width = x21 - x11;
						} else {
							if(x11 < _this5.bounds.x) {
								_this5.bounds.width += _this5.bounds.x - x11;
								_this5.bounds.x = x11;
							}
							var _this8 = _this5.bounds;
							if(x21 > _this8.x + _this8.width) {
								_this5.bounds.width = x21 - _this5.bounds.x;
							}
						}
						if(_this5.bounds.height == 0) {
							_this5.bounds.y = y11;
							_this5.bounds.height = y21 - y11;
						} else {
							if(y11 < _this5.bounds.y) {
								_this5.bounds.height += _this5.bounds.y - y11;
								_this5.bounds.y = y11;
							}
							var _this9 = _this5.bounds;
							if(y21 > _this9.y + _this9.height) {
								_this5.bounds.height = y21 - _this5.bounds.y;
							}
						}
					}
				}
			}
			lastOuter.x = outer.x;
			lastOuter.y = outer.y;
			lastInner.x = inner.x;
			lastInner.y = inner.y;
		}
	}
	,circleFilled: function(x,y,radius,segments,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(segments == null) {
			segments = 25;
		}
		var radians = 2 * Math.PI / segments;
		var x1 = x;
		var y1 = y + radius;
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		var _g = 1;
		var _g1 = segments + 1;
		while(_g < _g1) {
			var segment = _g++;
			var theta = segment * radians;
			var x2 = x + Math.sin(theta) * radius * scaleX;
			var y2 = y + Math.cos(theta) * radius * scaleY;
			var tx1 = x;
			var ty1 = y;
			var tx2 = x1;
			var ty2 = y1;
			var tx3 = x2;
			var ty3 = y2;
			var color = this.color;
			var alpha = this.alpha;
			if(this.scale) {
				tx1 *= haxepunk_HXP.screen.scaleX;
				tx2 *= haxepunk_HXP.screen.scaleX;
				tx3 *= haxepunk_HXP.screen.scaleX;
				ty1 *= haxepunk_HXP.screen.scaleY;
				ty2 *= haxepunk_HXP.screen.scaleY;
				ty3 *= haxepunk_HXP.screen.scaleY;
			}
			var _this = this.command;
			if(alpha > 0) {
				var onScreen;
				if(_this.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this1 = _this.visibleArea;
					if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
						var _this2 = _this.visibleArea;
						onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this2.y + _this2.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx1;
					data1.ty1 = ty1;
					data1.uvx1 = 0;
					data1.uvy1 = 0;
					data1.tx2 = tx2;
					data1.ty2 = ty2;
					data1.uvx2 = 0;
					data1.uvy2 = 0;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = 0;
					data1.uvy3 = 0;
					data1.color = color;
					data1.alpha = alpha;
					if(_this.data == null) {
						_this.data = data1;
					} else {
						_this._lastData._next = data1;
					}
					_this._lastData = data1;
					++_this.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x11 = a > b ? b > c ? c : b : a > c ? c : a;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x21 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
					var a2 = data1.ty1;
					var b2 = data1.ty2;
					var c2 = data1.ty3;
					var y11 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y21 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
					if(_this.bounds.width == 0) {
						_this.bounds.x = x11;
						_this.bounds.width = x21 - x11;
					} else {
						if(x11 < _this.bounds.x) {
							_this.bounds.width += _this.bounds.x - x11;
							_this.bounds.x = x11;
						}
						var _this3 = _this.bounds;
						if(x21 > _this3.x + _this3.width) {
							_this.bounds.width = x21 - _this.bounds.x;
						}
					}
					if(_this.bounds.height == 0) {
						_this.bounds.y = y11;
						_this.bounds.height = y21 - y11;
					} else {
						if(y11 < _this.bounds.y) {
							_this.bounds.height += _this.bounds.y - y11;
							_this.bounds.y = y11;
						}
						var _this4 = _this.bounds;
						if(y21 > _this4.y + _this4.height) {
							_this.bounds.height = y21 - _this.bounds.y;
						}
					}
				}
			}
			x1 = x2;
			y1 = y2;
		}
	}
	,arc: function(x,y,radius,start,angle,segments) {
		if(segments == null) {
			segments = 25;
		}
		var radians = angle / segments;
		var points = [];
		var _g = 0;
		var _g1 = segments + 1;
		while(_g < _g1) {
			var segment = _g++;
			var theta = segment * radians + start;
			points.push(x + Math.sin(theta) * radius);
			points.push(y + Math.cos(theta) * radius);
		}
		this.polyline(points,true);
	}
	,curve: function(x1,y1,x2,y2,x3,y3,segments) {
		if(segments == null) {
			segments = 25;
		}
		var points = [];
		points.push(x1);
		points.push(y1);
		var deltaT = 1 / segments;
		var _g = 1;
		var _g1 = segments;
		while(_g < _g1) {
			var segment = _g++;
			var t = segment * deltaT;
			var x = (1 - t) * (1 - t) * x1 + 2 * t * (1 - t) * x2 + t * t * x3;
			var y = (1 - t) * (1 - t) * y1 + 2 * t * (1 - t) * y2 + t * t * y3;
			points.push(x);
			points.push(y);
		}
		points.push(x3);
		points.push(y3);
		this.polyline(points);
	}
	,begin: function() {
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene;
		this.command = scene.batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
	}
	,drawTriangle: function(v1,v2,v3) {
		var tx1 = v1.x;
		var ty1 = v1.y;
		var tx2 = v2.x;
		var ty2 = v2.y;
		var tx3 = v3.x;
		var ty3 = v3.y;
		var color = this.color;
		var alpha = this.alpha;
		if(this.scale) {
			tx1 *= haxepunk_HXP.screen.scaleX;
			tx2 *= haxepunk_HXP.screen.scaleX;
			tx3 *= haxepunk_HXP.screen.scaleX;
			ty1 *= haxepunk_HXP.screen.scaleY;
			ty2 *= haxepunk_HXP.screen.scaleY;
			ty3 *= haxepunk_HXP.screen.scaleY;
		}
		var _this = this.command;
		if(alpha > 0) {
			var onScreen;
			if(_this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var _this1 = _this.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
					var _this1 = _this.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x2 = a < b ? b < c ? c : b : a < c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y2 = a < b ? b < c ? c : b : a < c ? c : a;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x2 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this1 = _this.bounds;
					if(x2 > _this1.x + _this1.width) {
						_this.bounds.width = x2 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this1 = _this.bounds;
					if(y2 > _this1.y + _this1.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
	}
	,drawQuad: function(x1,y1,x2,y2,x3,y3,x4,y4) {
		var tx1 = x1;
		var ty1 = y1;
		var tx2 = x2;
		var ty2 = y2;
		var tx3 = x3;
		var ty3 = y3;
		var color = this.color;
		var alpha = this.alpha;
		if(this.scale) {
			tx1 *= haxepunk_HXP.screen.scaleX;
			tx2 *= haxepunk_HXP.screen.scaleX;
			tx3 *= haxepunk_HXP.screen.scaleX;
			ty1 *= haxepunk_HXP.screen.scaleY;
			ty2 *= haxepunk_HXP.screen.scaleY;
			ty3 *= haxepunk_HXP.screen.scaleY;
		}
		var _this = this.command;
		if(alpha > 0) {
			var onScreen;
			if(_this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var _this1 = _this.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
					var _this1 = _this.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x11 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x2 = a < b ? b < c ? c : b : a < c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y11 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y2 = a < b ? b < c ? c : b : a < c ? c : a;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x11;
					_this.bounds.width = x2 - x11;
				} else {
					if(x11 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x11;
						_this.bounds.x = x11;
					}
					var _this1 = _this.bounds;
					if(x2 > _this1.x + _this1.width) {
						_this.bounds.width = x2 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y11;
					_this.bounds.height = y2 - y11;
				} else {
					if(y11 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y11;
						_this.bounds.y = y11;
					}
					var _this1 = _this.bounds;
					if(y2 > _this1.y + _this1.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
		var tx1 = x1;
		var ty1 = y1;
		var tx2 = x3;
		var ty2 = y3;
		var tx3 = x4;
		var ty3 = y4;
		var color = this.color;
		var alpha = this.alpha;
		if(this.scale) {
			tx1 *= haxepunk_HXP.screen.scaleX;
			tx2 *= haxepunk_HXP.screen.scaleX;
			tx3 *= haxepunk_HXP.screen.scaleX;
			ty1 *= haxepunk_HXP.screen.scaleY;
			ty2 *= haxepunk_HXP.screen.scaleY;
			ty3 *= haxepunk_HXP.screen.scaleY;
		}
		var _this = this.command;
		if(alpha > 0) {
			var onScreen;
			if(_this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var _this1 = _this.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
					var _this1 = _this.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x2 = a < b ? b < c ? c : b : a < c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y2 = a < b ? b < c ? c : b : a < c ? c : a;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x2 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this1 = _this.bounds;
					if(x2 > _this1.x + _this1.width) {
						_this.bounds.width = x2 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this1 = _this.bounds;
					if(y2 > _this1.y + _this1.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
	}
	,addTriangle: function(tx1,ty1,uvx1,uvy1,tx2,ty2,uvx2,uvy2,tx3,ty3,uvx3,uvy3,color,alpha) {
		if(this.scale) {
			tx1 *= haxepunk_HXP.screen.scaleX;
			tx2 *= haxepunk_HXP.screen.scaleX;
			tx3 *= haxepunk_HXP.screen.scaleX;
			ty1 *= haxepunk_HXP.screen.scaleY;
			ty2 *= haxepunk_HXP.screen.scaleY;
			ty3 *= haxepunk_HXP.screen.scaleY;
		}
		var _this = this.command;
		if(alpha > 0) {
			var onScreen;
			if(_this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var _this1 = _this.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
					var _this1 = _this.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = uvx1;
				data1.uvy1 = uvy1;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = uvx2;
				data1.uvy2 = uvy2;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = uvx3;
				data1.uvy3 = uvy3;
				data1.color = color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x2 = a < b ? b < c ? c : b : a < c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y2 = a < b ? b < c ? c : b : a < c ? c : a;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x2 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this1 = _this.bounds;
					if(x2 > _this1.x + _this1.width) {
						_this.bounds.width = x2 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this1 = _this.bounds;
					if(y2 > _this1.y + _this1.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
	}
	,__class__: haxepunk_utils_DrawContext
};
var haxepunk_Scene = function() {
	this.onInputReleased = haxepunk_Signals._new();
	this.onInputPressed = haxepunk_Signals._new();
	this.onResize = new haxepunk_Signal0();
	this.postRender = new haxepunk_Signal0();
	this.preRender = new haxepunk_Signal0();
	this.postUpdate = new haxepunk_Signal0();
	this.preUpdate = new haxepunk_Signal0();
	this.height = null;
	this._height = null;
	this.width = null;
	this._width = null;
	this.y = 0;
	this.x = 0;
	this.started = false;
	this.trackDrawCalls = true;
	this.bgAlpha = 1;
	this.bgColor = null;
	this.visible = true;
	haxepunk_Tweener.call(this);
	this.camera = new haxepunk_Camera();
	var c = js_Boot.getClass(this);
	this.assetCache = new haxepunk_assets_AssetCache(c.__name__);
	this.batch = new haxepunk_graphics_hardware_DrawCommandBatch();
	this._layerList = [];
	this._add = [];
	this._remove = [];
	this._recycle = [];
	this._update = new haxe_ds_List();
	this._layerDisplay = new haxe_ds_IntMap();
	this._layers = new haxe_ds_IntMap();
	this._types = new haxe_ds_StringMap();
	this._classCount = new haxe_ds_StringMap();
	this._recycled = new haxe_ds_StringMap();
	this._entityNames = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.Scene"] = haxepunk_Scene;
haxepunk_Scene.__name__ = "haxepunk.Scene";
haxepunk_Scene.squareRects = function(x1,y1,w1,h1,x2,y2,w2,h2) {
	if(x1 < x2 + w2 && x2 < x1 + w1) {
		if(y1 < y2 + h2 && y2 < y1 + h1) {
			return 0;
		}
		if(y1 > y2) {
			return (y1 - (y2 + h2)) * (y1 - (y2 + h2));
		}
		return (y2 - (y1 + h1)) * (y2 - (y1 + h1));
	}
	if(y1 < y2 + h2 && y2 < y1 + h1) {
		if(x1 > x2) {
			return (x1 - (x2 + w2)) * (x1 - (x2 + w2));
		}
		return (x2 - (x1 + w1)) * (x2 - (x1 + w1));
	}
	if(x1 > x2) {
		if(y1 > y2) {
			var x11 = x2 + w2;
			var y11 = y2 + h2;
			var x21 = x1;
			var y21 = y1;
			if(y21 == null) {
				y21 = 0;
			}
			if(x21 == null) {
				x21 = 0;
			}
			return (x21 - x11) * (x21 - x11) + (y21 - y11) * (y21 - y11);
		}
		var x11 = x2 + w2;
		var x21 = x1;
		var y21 = y1 + h1;
		if(y21 == null) {
			y21 = 0;
		}
		if(x21 == null) {
			x21 = 0;
		}
		return (x21 - x11) * (x21 - x11) + (y21 - y2) * (y21 - y2);
	}
	if(y1 > y2) {
		var y11 = y2 + h2;
		var x21 = x1 + w1;
		var y21 = y1;
		if(y21 == null) {
			y21 = 0;
		}
		if(x21 == null) {
			x21 = 0;
		}
		return (x21 - x2) * (x21 - x2) + (y21 - y11) * (y21 - y11);
	}
	var x21 = x1 + w1;
	var y21 = y1 + h1;
	if(y21 == null) {
		y21 = 0;
	}
	if(x21 == null) {
		x21 = 0;
	}
	return (x21 - x2) * (x21 - x2) + (y21 - y2) * (y21 - y2);
};
haxepunk_Scene.squarePointRect = function(px,py,rx,ry,rw,rh) {
	if(px >= rx && px <= rx + rw) {
		if(py >= ry && py <= ry + rh) {
			return 0;
		}
		if(py > ry) {
			return (py - (ry + rh)) * (py - (ry + rh));
		}
		return (ry - py) * (ry - py);
	}
	if(py >= ry && py <= ry + rh) {
		if(px > rx) {
			return (px - (rx + rw)) * (px - (rx + rw));
		}
		return (rx - px) * (rx - px);
	}
	if(px > rx) {
		if(py > ry) {
			var x1 = rx + rw;
			var y1 = ry + rh;
			var x2 = px;
			var y2 = py;
			if(y2 == null) {
				y2 = 0;
			}
			if(x2 == null) {
				x2 = 0;
			}
			return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
		}
		var x1 = rx + rw;
		var x2 = px;
		var y2 = py;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		return (x2 - x1) * (x2 - x1) + (y2 - ry) * (y2 - ry);
	}
	if(py > ry) {
		var y1 = ry + rh;
		var x2 = px;
		var y2 = py;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		return (x2 - rx) * (x2 - rx) + (y2 - y1) * (y2 - y1);
	}
	var x2 = px;
	var y2 = py;
	if(y2 == null) {
		y2 = 0;
	}
	if(x2 == null) {
		x2 = 0;
	}
	return (x2 - rx) * (x2 - rx) + (y2 - ry) * (y2 - ry);
};
haxepunk_Scene.__super__ = haxepunk_Tweener;
haxepunk_Scene.prototype = $extend(haxepunk_Tweener.prototype,{
	get_width: function() {
		if(this._width == null) {
			return haxepunk_HXP.screen.width - this.x;
		} else {
			return this._width;
		}
	}
	,set_width: function(v) {
		return this._width = v;
	}
	,get_height: function() {
		if(this._height == null) {
			return haxepunk_HXP.screen.height - this.y;
		} else {
			return this._height;
		}
	}
	,set_height: function(v) {
		return this._height = v;
	}
	,begin: function() {
	}
	,resume: function() {
	}
	,end: function() {
	}
	,_resize: function() {
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			e.resized();
		}
		var _g = 0;
		var _g1 = this.onResize.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,focusGained: function() {
	}
	,focusLost: function() {
	}
	,update: function() {
		this.camera.update();
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e.get_active()) {
				if(e.get_hasTween()) {
					e.updateTweens(haxepunk_HXP.elapsed);
				}
				if(e.get_active()) {
					if(e.shouldUpdate()) {
						var _g = 0;
						var _g1 = e.preUpdate.callbacks;
						while(_g < _g1.length) {
							var callback = _g1[_g];
							++_g;
							callback();
						}
						e.update();
						var _g2 = 0;
						var _g3 = e.postUpdate.callbacks;
						while(_g2 < _g3.length) {
							var callback1 = _g3[_g2];
							++_g2;
							callback1();
						}
					}
				}
			}
			var g = e.graphic;
			if(g != null && g.active) {
				var _g4 = 0;
				var _g5 = g.preUpdate.callbacks;
				while(_g4 < _g5.length) {
					var callback2 = _g5[_g4];
					++_g4;
					callback2();
				}
				g.update();
				var _g6 = 0;
				var _g7 = g.postUpdate.callbacks;
				while(_g6 < _g7.length) {
					var callback3 = _g7[_g6];
					++_g6;
					callback3();
				}
			}
		}
		this.camera.update();
		if(haxepunk_HXP.cursor != null && haxepunk_HXP.cursor.get_active()) {
			haxepunk_HXP.cursor.update();
		}
	}
	,showLayer: function(layer,show) {
		if(show == null) {
			show = true;
		}
		this._layerDisplay.h[layer] = show;
	}
	,layerVisible: function(layer) {
		if(this._layerDisplay.h.hasOwnProperty(layer)) {
			return this._layerDisplay.h[layer];
		} else {
			return true;
		}
	}
	,layerSort: function(a,b) {
		return b - a;
	}
	,render: function() {
		var batch = this.batch;
		haxepunk_graphics_atlas_AtlasData._batch = batch;
		batch.head.recycle();
		batch.last = null;
		this.batch.visibleArea.setTo(0,0,this._width == null ? haxepunk_HXP.screen.width - this.x : this._width,this._height == null ? haxepunk_HXP.screen.height - this.y : this._height);
		if(this.bgAlpha > 0) {
			var screen = haxepunk_HXP.screen;
			haxepunk_Scene.drawContext.scene = this;
			haxepunk_Scene.drawContext.blend = 1;
			var _this = haxepunk_Scene.drawContext;
			var color = this.bgColor == null ? screen.color : this.bgColor;
			var alpha = this.bgAlpha;
			if(alpha == null) {
				alpha = 1;
			}
			if(color == null) {
				color = 16777215;
			}
			_this.color = color;
			_this.alpha = alpha;
			haxepunk_Scene.drawContext.rectFilled(0,0,this._width == null ? haxepunk_HXP.screen.width - this.x : this._width,this._height == null ? haxepunk_HXP.screen.height - this.y : this._height);
		}
		var _g = 0;
		var _g1 = this.preRender.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		var _g = 0;
		var _g1 = this._layerList;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			if(!(!this._layerDisplay.h.hasOwnProperty(layer) || this._layerDisplay.h[layer])) {
				continue;
			}
			var _g2 = 0;
			var _g3 = this._layers.h[layer];
			while(_g2 < _g3.length) {
				var e = _g3[_g2];
				++_g2;
				if(e.get_visible()) {
					e.render(e.camera == null ? this.camera : e.camera);
				}
			}
		}
		if(haxepunk_HXP.cursor != null && haxepunk_HXP.cursor.get_visible() && this == haxepunk_HXP.engine._scene) {
			haxepunk_HXP.cursor.render(this.camera);
		}
		var _g = 0;
		var _g1 = this.postRender.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,get_mouseX: function() {
		var x = haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - this.x;
		var _this = this.camera;
		return x / (_this.scale * _this.scaleX * haxepunk_HXP.screen.scaleX) + this.camera.x | 0;
	}
	,get_mouseY: function() {
		var x = haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - this.y;
		var _this = this.camera;
		return x / (_this.scale * _this.scaleY * haxepunk_HXP.screen.scaleY) + this.camera.y | 0;
	}
	,add: function(e) {
		this._add[this._add.length] = e;
		return e;
	}
	,remove: function(e) {
		this._remove[this._remove.length] = e;
		return e;
	}
	,removeAll: function() {
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			this._remove[this._remove.length] = e;
		}
	}
	,addList: function(list) {
		var e = $getIterator(list);
		while(e.hasNext()) {
			var e1 = e.next();
			this.add(e1);
		}
	}
	,removeList: function(list) {
		var e = $getIterator(list);
		while(e.hasNext()) {
			var e1 = e.next();
			this.remove(e1);
		}
	}
	,addGraphic: function(graphic,layer,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var e = new haxepunk_Entity(x,y,graphic);
		e.set_layer(layer);
		e.set_active(false);
		return this.add(e);
	}
	,addMask: function(mask,type,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var e = new haxepunk_Entity(x,y,null,mask);
		if(type != "") {
			e.set_type(type);
		}
		e.set_active(e.set_visible(false));
		return this.add(e);
	}
	,create: function(classType,addToScene,constructorsArgs) {
		if(addToScene == null) {
			addToScene = true;
		}
		var className = classType.__name__;
		var e = this._recycled.h[className];
		if(e != null) {
			this._recycled.h[className] = e._recycleNext;
			e._recycleNext = null;
		} else if(constructorsArgs != null) {
			e = Type.createInstance(classType,constructorsArgs);
		} else {
			e = Type.createInstance(classType,[]);
		}
		return addToScene ? this.add(e) : e;
	}
	,recycle: function(e) {
		this._recycle[this._recycle.length] = e;
		return this.remove(e);
	}
	,clearRecycled: function(classType) {
		var className = classType.__name__;
		var e = this._recycled.h[className];
		var n;
		while(e != null) {
			n = e._recycleNext;
			e._recycleNext = null;
			e = n;
		}
		var _this = this._recycled;
		if(Object.prototype.hasOwnProperty.call(_this.h,className)) {
			delete(_this.h[className]);
		}
	}
	,clearRecycledAll: function() {
		var e;
		var e = haxe_ds_StringMap.valueIterator(this._recycled.h);
		while(e.hasNext()) {
			var e1 = e.next();
			this.clearRecycled(js_Boot.getClass(e1));
		}
	}
	,bringToFront: function(e) {
		if(e._scene != this) {
			return false;
		}
		var list = this._layers.h[e._layer];
		HxOverrides.remove(list,e);
		list.push(e);
		return true;
	}
	,sendToBack: function(e) {
		if(e._scene != this) {
			return false;
		}
		var list = this._layers.h[e._layer];
		HxOverrides.remove(list,e);
		list.push(e);
		return true;
	}
	,bringForward: function(e) {
		if(e._scene != this) {
			return false;
		}
		return true;
	}
	,sendBackward: function(e) {
		if(e._scene != this) {
			return false;
		}
		return true;
	}
	,isAtFront: function(e) {
		return e == this._layers.h[e._layer][0];
	}
	,isAtBack: function(e) {
		return e == this._layers.h[e._layer][this._layers.h[e._layer].length - 1];
	}
	,collideRect: function(type,rX,rY,rWidth,rHeight) {
		if(Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			var _g = 0;
			var _g1 = this._types.h[type];
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e.get_collidable() && e.collideRect(e.get_x(),e.get_y(),rX,rY,rWidth,rHeight)) {
					return e;
				}
			}
		}
		return null;
	}
	,collidePoint: function(type,pX,pY) {
		var result = null;
		if(Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			var _g = 0;
			var _g1 = this._types.h[type];
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e.get_collidable() && e.collidePoint(e.get_x(),e.get_y(),pX,pY)) {
					if(result == null) {
						result = e;
					} else if(e._layer < result._layer) {
						result = e;
					}
				}
			}
		}
		return result;
	}
	,collideLine: function(type,fromX,fromY,toX,toY,precision,p) {
		if(precision == null) {
			precision = 1;
		}
		if(precision < 1) {
			precision = 1;
		}
		var x2 = toX;
		var y2 = toY;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		if(Math.sqrt((x2 - fromX) * (x2 - fromX) + (y2 - fromY) * (y2 - fromY)) < precision) {
			if(p != null) {
				if(fromX == toX && fromY == toY) {
					p.x = toX;
					p.y = toY;
					return this.collidePoint(type,toX,toY);
				}
				return this.collideLine(type,fromX,fromY,toX,toY,1,p);
			} else {
				return this.collidePoint(type,fromX,toY);
			}
		}
		var xDelta = Math.abs(toX - fromX) | 0;
		var yDelta = Math.abs(toY - fromY) | 0;
		var xSign = toX > fromX ? precision : -precision;
		var ySign = toY > fromY ? precision : -precision;
		var x = fromX;
		var y = fromY;
		var e;
		if(xDelta > yDelta) {
			ySign *= yDelta / xDelta;
			if(xSign > 0) {
				while(x < toX) {
					e = this.collidePoint(type,x,y);
					if(e != null) {
						if(p == null) {
							return e;
						}
						if(precision < 2) {
							p.x = x - xSign;
							p.y = y - ySign;
							return e;
						}
						return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
					}
					x += xSign;
					y += ySign;
				}
			} else {
				while(x > toX) {
					e = this.collidePoint(type,x,y);
					if(e != null) {
						if(p == null) {
							return e;
						}
						if(precision < 2) {
							p.x = x - xSign;
							p.y = y - ySign;
							return e;
						}
						return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
					}
					x += xSign;
					y += ySign;
				}
			}
		} else {
			xSign *= xDelta / yDelta;
			if(ySign > 0) {
				while(y < toY) {
					e = this.collidePoint(type,x,y);
					if(e != null) {
						if(p == null) {
							return e;
						}
						if(precision < 2) {
							p.x = x - xSign;
							p.y = y - ySign;
							return e;
						}
						return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
					}
					x += xSign;
					y += ySign;
				}
			} else {
				while(y > toY) {
					e = this.collidePoint(type,x,y);
					if(e != null) {
						if(p == null) {
							return e;
						}
						if(precision < 2) {
							p.x = x - xSign;
							p.y = y - ySign;
							return e;
						}
						return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
					}
					x += xSign;
					y += ySign;
				}
			}
		}
		if(precision > 1) {
			if(p == null) {
				return this.collidePoint(type,toX,toY);
			}
			if(this.collidePoint(type,toX,toY) != null) {
				return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
			}
		}
		if(p != null) {
			p.x = toX;
			p.y = toY;
		}
		return null;
	}
	,collideRectInto: function(type,rX,rY,rWidth,rHeight,into) {
		var n = into.length;
		if(Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			var _g = 0;
			var _g1 = this._types.h[type];
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e.get_collidable() && e.collideRect(e.get_x(),e.get_y(),rX,rY,rWidth,rHeight)) {
					into[n++] = e;
				}
			}
		}
	}
	,collideCircleInto: function(type,circleX,circleY,radius,into) {
		if(!Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			return;
		}
		var n = into.length;
		radius *= radius;
		var _g = 0;
		var _g1 = this._types.h[type];
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var x2 = e.get_x();
			var y2 = e.get_y();
			if(y2 == null) {
				y2 = 0;
			}
			if(x2 == null) {
				x2 = 0;
			}
			if((x2 - circleX) * (x2 - circleX) + (y2 - circleY) * (y2 - circleY) < radius) {
				into[n++] = e;
			}
		}
	}
	,collidePointInto: function(type,pX,pY,into,cameraAdjust) {
		if(cameraAdjust == null) {
			cameraAdjust = false;
		}
		if(!Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			return;
		}
		var n = into.length;
		var _g = 0;
		var _g1 = this._types.h[type];
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.get_collidable()) {
				if(cameraAdjust && e.camera != null) {
					var _this = this.camera;
					var _this1 = e.camera;
					var px = (pX + e.camera.x - this.camera.x) * (_this.scale * _this.scaleX) / (_this1.scale * _this1.scaleX);
					var _this2 = this.camera;
					var _this3 = e.camera;
					var py = (pY + e.camera.y - this.camera.y) * (_this2.scale * _this2.scaleY) / (_this3.scale * _this3.scaleY);
					if(e.collidePoint(e.get_x(),e.get_y(),px,py)) {
						into[n++] = e;
					}
				} else if(e.collidePoint(e.get_x(),e.get_y(),pX,pY)) {
					into[n++] = e;
				}
			}
		}
	}
	,nearestToRect: function(type,x,y,width,height) {
		if(!Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			return null;
		}
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		var _g = 0;
		var _g1 = this._types.h[type];
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			dist = haxepunk_Scene.squareRects(x,y,width,height,e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
			if(dist < nearDist) {
				nearDist = dist;
				near = e;
			}
		}
		return near;
	}
	,nearestToEntity: function(type,e,useHitboxes) {
		if(useHitboxes == null) {
			useHitboxes = false;
		}
		if(!Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			return null;
		}
		if(useHitboxes) {
			return this.nearestToRect(type,e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
		}
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		var x = e.get_x() - e.originX;
		var y = e.get_y() - e.originY;
		var _g = 0;
		var _g1 = this._types.h[type];
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			dist = (x - n.get_x()) * (x - n.get_x()) + (y - n.get_y()) * (y - n.get_y());
			if(dist < nearDist) {
				nearDist = dist;
				near = n;
			}
		}
		return near;
	}
	,nearestToClass: function(type,e,classType,useHitboxes) {
		if(useHitboxes == null) {
			useHitboxes = false;
		}
		if(!Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			return null;
		}
		if(useHitboxes) {
			return this.nearestToRect(type,e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
		}
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		var x = e.get_x() - e.originX;
		var y = e.get_y() - e.originY;
		var _g = 0;
		var _g1 = this._types.h[type];
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			dist = (x - n.get_x()) * (x - n.get_x()) + (y - n.get_y()) * (y - n.get_y());
			if(dist < nearDist && js_Boot.__instanceof(e,classType)) {
				nearDist = dist;
				near = n;
			}
		}
		return near;
	}
	,nearestToPoint: function(type,x,y,useHitboxes) {
		if(useHitboxes == null) {
			useHitboxes = false;
		}
		if(!Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			return null;
		}
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		if(useHitboxes) {
			var _g = 0;
			var _g1 = this._types.h[type];
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				dist = haxepunk_Scene.squarePointRect(x,y,n.get_x() - n.originX,n.get_y() - n.originY,n.get_width(),n.get_height());
				if(dist < nearDist) {
					nearDist = dist;
					near = n;
				}
			}
		} else {
			var _g = 0;
			var _g1 = this._types.h[type];
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				dist = (x - n.get_x()) * (x - n.get_x()) + (y - n.get_y()) * (y - n.get_y());
				if(dist < nearDist) {
					nearDist = dist;
					near = n;
				}
			}
		}
		return near;
	}
	,get_count: function() {
		return this._update.length;
	}
	,typeCount: function(type) {
		if(Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			return this._types.h[type].length;
		} else {
			return 0;
		}
	}
	,classCount: function(c) {
		if(Object.prototype.hasOwnProperty.call(this._classCount.h,c)) {
			return this._classCount.h[c];
		} else {
			return 0;
		}
	}
	,layerCount: function(layer) {
		if(this._layers.h.hasOwnProperty(layer)) {
			return this._layers.h[layer].length;
		} else {
			return 0;
		}
	}
	,get_first: function() {
		return this._update.first();
	}
	,get_layers: function() {
		return this._layerList.length;
	}
	,entitiesForType: function(type) {
		if(Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			return this._types.h[type];
		} else {
			return null;
		}
	}
	,classFirst: function(c) {
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(js_Boot.__instanceof(e,c)) {
				return e;
			}
		}
		return null;
	}
	,layerFirst: function(layer) {
		if(this._layers.h.hasOwnProperty(layer)) {
			return this._layers.h[layer][0];
		} else {
			return null;
		}
	}
	,layerLast: function(layer) {
		if(this._layers.h.hasOwnProperty(layer)) {
			return this._layers.h[layer][this._layers.h[layer].length - 1];
		} else {
			return null;
		}
	}
	,get_farthest: function() {
		if(this._layerList.length == 0) {
			return null;
		}
		return this._layers.h[this._layerList[this._layerList.length - 1]][this._layers.h[this._layerList[this._layerList.length - 1]].length - 1];
	}
	,get_nearest: function() {
		if(this._layerList.length == 0) {
			return null;
		}
		return this._layers.h[this._layerList[0]][0];
	}
	,get_layerFarthest: function() {
		if(this._layerList.length == 0) {
			return 0;
		}
		return this._layerList[this._layerList.length - 1];
	}
	,get_layerNearest: function() {
		if(this._layerList.length == 0) {
			return 0;
		}
		return this._layerList[0];
	}
	,get_uniqueTypes: function() {
		var i = 0;
		var type = haxe_ds_StringMap.valueIterator(this._types.h);
		while(type.hasNext()) {
			var type1 = type.next();
			++i;
		}
		return i;
	}
	,getType: function(type,into) {
		if(!Object.prototype.hasOwnProperty.call(this._types.h,type)) {
			return;
		}
		var n = into.length;
		var _g = 0;
		var _g1 = this._types.h[type];
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			into[n++] = e;
		}
	}
	,getClass: function(c,into) {
		var n = into.length;
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(js_Boot.__instanceof(e,c)) {
				into[n++] = e;
			}
		}
	}
	,getLayer: function(layer) {
		return this._layers.h[layer];
	}
	,getAll: function(into) {
		var n = into.length;
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			into[n++] = e;
		}
	}
	,getInstance: function(name) {
		return this._entityNames.h[name];
	}
	,updateLists: function(shouldAdd) {
		if(shouldAdd == null) {
			shouldAdd = true;
		}
		var e;
		if(haxepunk_HXP.cursor != null) {
			haxepunk_HXP.cursor._scene = this;
		}
		if(this._remove.length > 0) {
			var _g = 0;
			var _g1 = this._remove;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e._scene == null) {
					var idx = this._add.indexOf(e);
					if(idx >= 0) {
						this._add.splice(idx,1);
					}
					continue;
				}
				if(e._scene != this) {
					continue;
				}
				e.removed();
				var _g2 = 0;
				var _g3 = e.onRemove.callbacks;
				while(_g2 < _g3.length) {
					var callback = _g3[_g2];
					++_g2;
					callback();
				}
				e._scene = null;
				this.removeUpdate(e);
				this.removeRender(e);
				if(e._type != "") {
					this.removeType(e);
				}
				if(e._name != "") {
					var key = e._name;
					var _this = this._entityNames;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				}
				if(e.autoClear && e.get_hasTween()) {
					e.clearTweens();
				}
			}
			this._remove.length = 0;
		}
		if(shouldAdd && this._add.length > 0) {
			var _g = 0;
			var _g1 = this._add;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e._scene != null) {
					continue;
				}
				e._scene = this;
				this.addUpdate(e);
				this.addRender(e);
				if(e._type != "") {
					this.addType(e);
				}
				if(e._name != "") {
					this._entityNames.h[e._name] = e;
				}
				e.added();
				var _g2 = 0;
				var _g3 = e.onAdd.callbacks;
				while(_g2 < _g3.length) {
					var callback = _g3[_g2];
					++_g2;
					callback();
				}
			}
			this._add.length = 0;
		}
		if(this._recycle.length > 0) {
			var _g = 0;
			var _g1 = this._recycle;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e._scene != null || e._recycleNext != null) {
					continue;
				}
				e._recycleNext = this._recycled.h[e._class];
				this._recycled.h[e._class] = e;
			}
			this._recycle.length = 0;
		}
	}
	,getTexture: function(id) {
		return this.assetCache.getTexture(id);
	}
	,addUpdate: function(e) {
		this._update.add(e);
		if(this._classCount.h[e._class] != 0) {
			this._classCount.h[e._class] = 0;
		}
		this._classCount.h[e._class] += 1;
	}
	,removeUpdate: function(e) {
		this._update.remove(e);
		this._classCount.h[e._class] -= 1;
	}
	,addRender: function(e) {
		var list;
		if(this._layers.h.hasOwnProperty(e._layer)) {
			list = this._layers.h[e._layer];
		} else {
			list = haxepunk_Scene._pooledEntityLists.length > 0 ? haxepunk_Scene._pooledEntityLists.pop() : [];
			this._layers.h[e._layer] = list;
			if(this._layerList.length == 0) {
				this._layerList[0] = e._layer;
			} else {
				haxepunk_HXP.insertSortedKey(this._layerList,e._layer,$bind(this,this.layerSort));
			}
		}
		list.push(e);
	}
	,removeRender: function(e) {
		var list = this._layers.h[e._layer];
		HxOverrides.remove(list,e);
		if(list.length == 0) {
			HxOverrides.remove(this._layerList,e._layer);
			this._layers.remove(e._layer);
			haxepunk_Scene._pooledEntityLists.push(list);
		}
	}
	,addType: function(e) {
		var list;
		if(Object.prototype.hasOwnProperty.call(this._types.h,e._type)) {
			list = this._types.h[e._type];
		} else {
			list = haxepunk_Scene._pooledEntityLists.length > 0 ? haxepunk_Scene._pooledEntityLists.pop() : [];
			this._types.h[e._type] = list;
		}
		list.push(e);
	}
	,removeType: function(e) {
		if(!Object.prototype.hasOwnProperty.call(this._types.h,e._type)) {
			return;
		}
		var list = this._types.h[e._type];
		HxOverrides.remove(list,e);
		if(list.length == 0) {
			var key = e._type;
			var _this = this._types;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			haxepunk_Scene._pooledEntityLists.push(list);
		}
	}
	,registerName: function(e) {
		this._entityNames.h[e._name] = e;
	}
	,unregisterName: function(e) {
		var key = e._name;
		var _this = this._entityNames;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
		}
	}
	,__class__: haxepunk_Scene
	,__properties__: $extend(haxepunk_Tweener.prototype.__properties__,{get_uniqueTypes:"get_uniqueTypes",get_layerNearest:"get_layerNearest",get_layerFarthest:"get_layerFarthest",get_nearest:"get_nearest",get_farthest:"get_farthest",get_layers:"get_layers",get_first:"get_first",get_count:"get_count",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
var haxepunk_Screen = function() {
	this.scaleY = 1;
	this.scaleX = 1;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.color = 0;
	this.scaleMode = new haxepunk_screen_ScaleMode();
};
$hxClasses["haxepunk.Screen"] = haxepunk_Screen;
haxepunk_Screen.__name__ = "haxepunk.Screen";
haxepunk_Screen.prototype = {
	resize: function(width,height) {
		var oldWidth = haxepunk_HXP.width;
		var oldHeight = haxepunk_HXP.height;
		this.scaleMode.resize(width,height);
		width = haxepunk_HXP.width = (haxepunk_HXP.screen.width + 0.5) / haxepunk_HXP.screen.scaleX | 0;
		height = haxepunk_HXP.height = (haxepunk_HXP.screen.height + 0.5) / haxepunk_HXP.screen.scaleY | 0;
	}
	,set_scaleX: function(value) {
		if(this.scaleX != value) {
			this.scaleX = value;
			haxepunk_HXP.needsResize = true;
		}
		return this.scaleX;
	}
	,set_scaleY: function(value) {
		if(this.scaleY != value) {
			this.scaleY = value;
			haxepunk_HXP.needsResize = true;
		}
		return this.scaleY;
	}
	,get_mouseX: function() {
		return (haxepunk_HXP.app.stage.get_mouseX() - this.x) / this.scaleX | 0;
	}
	,get_mouseY: function() {
		return (haxepunk_HXP.app.stage.get_mouseY() - this.y) / this.scaleY | 0;
	}
	,capture: function() {
		throw haxe_Exception.thrown("Screen.capture not currently supported");
	}
	,__class__: haxepunk_Screen
	,__properties__: {get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX"}
};
var haxepunk_Sfx = function(source,complete) {
	this._position = 0;
	this._pan = 0;
	this._volume = 1;
	this._transform = new openfl_media_SoundTransform();
	this._volume = 1;
	this._pan = 0;
	this._position = 0;
	this._type = "";
	if(source == null) {
		throw haxe_Exception.thrown("Invalid source Sound.");
	}
	if(typeof(source) == "string") {
		this._sound = haxepunk_assets_AssetLoader.getSound(source);
		haxepunk_Sfx._sounds.h[source] = this._sound;
	} else {
		var c = js_Boot.getClass(source);
		var className = c.__name__;
		if(StringTools.endsWith(className,"media.Sound")) {
			var __sound = source;
			this._sound = haxepunk_Sfx._sounds.h[__sound.url];
			if(this._sound == null) {
				this._sound = source;
				haxepunk_Sfx._sounds.h[__sound.url] = source;
			}
		} else {
			this._sound = haxepunk_Sfx._sounds.h[className];
			if(this._sound == null) {
				this._sound = source;
				haxepunk_Sfx._sounds.h[className] = source;
			}
		}
	}
	this.complete = complete;
};
$hxClasses["haxepunk.Sfx"] = haxepunk_Sfx;
haxepunk_Sfx.__name__ = "haxepunk.Sfx";
haxepunk_Sfx.getPan = function(type) {
	var result = 0;
	if(Object.prototype.hasOwnProperty.call(haxepunk_Sfx._typeTransforms.h,type)) {
		var transform = haxepunk_Sfx._typeTransforms.h[type];
		if(transform != null) {
			result = transform.pan;
		}
	}
	return result + haxepunk_HXP._pan;
};
haxepunk_Sfx.getVolume = function(type) {
	var result = 1;
	if(Object.prototype.hasOwnProperty.call(haxepunk_Sfx._typeTransforms.h,type)) {
		var transform = haxepunk_Sfx._typeTransforms.h[type];
		if(transform != null) {
			result = transform.volume;
		}
	}
	return result * haxepunk_HXP.volume;
};
haxepunk_Sfx.setPan = function(type,pan) {
	var transform = haxepunk_Sfx._typeTransforms.h[type];
	if(transform == null) {
		transform = new openfl_media_SoundTransform();
		haxepunk_Sfx._typeTransforms.h[type] = transform;
	}
	transform.pan = haxepunk_math_MathUtil.clamp(pan,-1,1);
	if(Object.prototype.hasOwnProperty.call(haxepunk_Sfx._typePlaying.h,type)) {
		var _g = 0;
		var _g1 = haxepunk_Sfx._typePlaying.h[type];
		while(_g < _g1.length) {
			var sfx = _g1[_g];
			++_g;
			sfx.set_pan(sfx.get_pan());
		}
	}
};
haxepunk_Sfx.setVolume = function(type,volume) {
	var transform = haxepunk_Sfx._typeTransforms.h[type];
	if(transform == null) {
		transform = new openfl_media_SoundTransform();
		haxepunk_Sfx._typeTransforms.h[type] = transform;
	}
	transform.volume = volume < 0 ? 0 : volume;
	if(Object.prototype.hasOwnProperty.call(haxepunk_Sfx._typePlaying.h,type)) {
		var _g = 0;
		var _g1 = haxepunk_Sfx._typePlaying.h[type];
		while(_g < _g1.length) {
			var sfx = _g1[_g];
			++_g;
			sfx.set_volume(sfx.get_volume());
		}
	}
};
haxepunk_Sfx.onGlobalUpdated = function(updatePan) {
	var type = haxe_ds_StringMap.keysIterator(haxepunk_Sfx._typePlaying.h);
	while(type.hasNext()) {
		var type1 = type.next();
		var _g = 0;
		var _g1 = haxepunk_Sfx._typePlaying.h[type1];
		while(_g < _g1.length) {
			var sfx = _g1[_g];
			++_g;
			if(updatePan) {
				sfx.set_pan(sfx.get_pan());
			} else {
				sfx.set_volume(sfx.get_volume());
			}
		}
	}
};
haxepunk_Sfx.prototype = {
	play: function(volume,pan,loop) {
		if(loop == null) {
			loop = false;
		}
		if(pan == null) {
			pan = 0;
		}
		if(volume == null) {
			volume = 1;
		}
		if(this._sound == null) {
			return;
		}
		if(this._channel != null) {
			this.stop();
		}
		this._pan = haxepunk_math_MathUtil.clamp(pan,-1,1);
		this._volume = volume < 0 ? 0 : volume;
		this._filteredPan = haxepunk_math_MathUtil.clamp(this._pan + haxepunk_Sfx.getPan(this._type),-1,1);
		this._filteredVol = Math.max(0,this._volume * haxepunk_Sfx.getVolume(this._type));
		this._transform.pan = this._filteredPan;
		this._transform.volume = this._filteredVol;
		this._channel = this._sound.play(0,loop ? -1 : 0,this._transform);
		if(this._channel != null) {
			this.addPlaying();
			this._channel.addEventListener("soundComplete",$bind(this,this.onComplete));
		}
		this._looping = loop;
		this._position = 0;
	}
	,loop: function(vol,pan) {
		if(pan == null) {
			pan = 0;
		}
		if(vol == null) {
			vol = 1;
		}
		this.play(vol,pan,true);
	}
	,stop: function() {
		if(this._channel == null) {
			return false;
		}
		this.removePlaying();
		this._position = this._channel.get_position();
		this._channel.removeEventListener("soundComplete",$bind(this,this.onComplete));
		this._channel.stop();
		this._channel = null;
		return true;
	}
	,resume: function() {
		this._channel = this._sound.play(this._position,this._looping ? -1 : 0,this._transform);
		if(this._channel != null) {
			this.addPlaying();
			this._channel.addEventListener("soundComplete",$bind(this,this.onComplete));
		}
		this._position = 0;
	}
	,onComplete: function(e) {
		if(this._looping) {
			this.loop(this._volume,this._pan);
		} else {
			this.stop();
		}
		this._position = 0;
		if(this.complete != null) {
			this.complete();
		}
	}
	,addPlaying: function() {
		var list;
		if(!Object.prototype.hasOwnProperty.call(haxepunk_Sfx._typePlaying.h,this._type)) {
			list = [];
			haxepunk_Sfx._typePlaying.h[this._type] = list;
		} else {
			list = haxepunk_Sfx._typePlaying.h[this._type];
		}
		list.push(this);
	}
	,removePlaying: function() {
		if(Object.prototype.hasOwnProperty.call(haxepunk_Sfx._typePlaying.h,this._type)) {
			HxOverrides.remove(haxepunk_Sfx._typePlaying.h[this._type],this);
		}
	}
	,get_volume: function() {
		return this._volume;
	}
	,set_volume: function(value) {
		if(value < 0) {
			value = 0;
		}
		if(this._channel == null) {
			return value;
		}
		this._volume = value;
		var filteredVol = value * haxepunk_Sfx.getVolume(this._type);
		if(filteredVol < 0) {
			filteredVol = 0;
		}
		if(this._filteredVol == filteredVol) {
			return value;
		}
		this._filteredVol = this._transform.volume = filteredVol;
		this._channel.set_soundTransform(this._transform);
		return this._volume;
	}
	,get_pan: function() {
		return this._pan;
	}
	,set_pan: function(value) {
		value = haxepunk_math_MathUtil.clamp(value,-1,1);
		if(this._channel == null) {
			return value;
		}
		var filteredPan = haxepunk_math_MathUtil.clamp(value + haxepunk_Sfx.getPan(this._type),-1,1);
		if(this._filteredPan == filteredPan) {
			return value;
		}
		this._pan = value;
		this._filteredPan = this._transform.pan = filteredPan;
		this._channel.set_soundTransform(this._transform);
		return this._pan;
	}
	,get_type: function() {
		return this._type;
	}
	,set_type: function(value) {
		if(this._type == value) {
			return value;
		}
		if(this._channel != null) {
			this.removePlaying();
			this._type = value;
			this.addPlaying();
			this.set_pan(this.get_pan());
			this.set_volume(this.get_volume());
		} else {
			this._type = value;
		}
		return value;
	}
	,get_playing: function() {
		return this._channel != null;
	}
	,get_position: function() {
		return (this._channel != null ? this._channel.get_position() : this._position) / 1000;
	}
	,get_length: function() {
		return this._sound.get_length() / 1000;
	}
	,__class__: haxepunk_Sfx
	,__properties__: {get_length:"get_length",get_position:"get_position",get_playing:"get_playing",set_type:"set_type",get_type:"get_type",set_pan:"set_pan",get_pan:"get_pan",set_volume:"set_volume",get_volume:"get_volume"}
};
var haxepunk_Signal = function() {
	this.callbacks = [];
};
$hxClasses["haxepunk.Signal"] = haxepunk_Signal;
haxepunk_Signal.__name__ = "haxepunk.Signal";
haxepunk_Signal.prototype = {
	exists: function(callback) {
		return this.callbacks.indexOf(callback) > -1;
	}
	,bind: function(callback) {
		this.callbacks.push(callback);
	}
	,remove: function(callback) {
		HxOverrides.remove(this.callbacks,callback);
	}
	,clear: function() {
		while(this.callbacks.length > 0) this.callbacks.pop();
	}
	,__class__: haxepunk_Signal
};
var haxepunk_Signal0 = function() {
	haxepunk_Signal.call(this);
};
$hxClasses["haxepunk.Signal0"] = haxepunk_Signal0;
haxepunk_Signal0.__name__ = "haxepunk.Signal0";
haxepunk_Signal0.__super__ = haxepunk_Signal;
haxepunk_Signal0.prototype = $extend(haxepunk_Signal.prototype,{
	invoke: function() {
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,__class__: haxepunk_Signal0
});
var haxepunk_Signal1 = function() {
	haxepunk_Signal.call(this);
};
$hxClasses["haxepunk.Signal1"] = haxepunk_Signal1;
haxepunk_Signal1.__name__ = "haxepunk.Signal1";
haxepunk_Signal1.__super__ = haxepunk_Signal;
haxepunk_Signal1.prototype = $extend(haxepunk_Signal.prototype,{
	invoke: function(a) {
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback(a);
		}
	}
	,__class__: haxepunk_Signal1
});
var haxepunk_Signal2 = function() {
	haxepunk_Signal.call(this);
};
$hxClasses["haxepunk.Signal2"] = haxepunk_Signal2;
haxepunk_Signal2.__name__ = "haxepunk.Signal2";
haxepunk_Signal2.__super__ = haxepunk_Signal;
haxepunk_Signal2.prototype = $extend(haxepunk_Signal.prototype,{
	invoke: function(a,b) {
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback(a,b);
		}
	}
	,__class__: haxepunk_Signal2
});
var haxepunk_Signals = {};
haxepunk_Signals._new = function() {
	var this1 = new haxe_ds_StringMap();
	return this1;
};
haxepunk_Signals.arrayRead = function(this1,field) {
	return this1.h[field];
};
haxepunk_Signals.arrayWrite = function(this1,field,signal) {
	this1.h[field] = signal;
	return signal;
};
haxepunk_Signals.fieldRead = function(this1,field) {
	return haxepunk_Signals.resolve(this1,field);
};
haxepunk_Signals.fieldWrite = function(this1,field,signal) {
	this1.h[field] = signal;
	return signal;
};
haxepunk_Signals.exists = function(this1,field) {
	return Object.prototype.hasOwnProperty.call(this1.h,field);
};
haxepunk_Signals.invoke = function(this1,field) {
	if(Object.prototype.hasOwnProperty.call(this1.h,field)) {
		var _g = 0;
		var _g1 = this1.h[field].callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
};
haxepunk_Signals.resolve = function(this1,field) {
	if(!Object.prototype.hasOwnProperty.call(this1.h,field)) {
		var v = new haxepunk_Signal0();
		this1.h[field] = v;
	}
	return this1.h[field];
};
var haxepunk_TweenType = $hxEnums["haxepunk.TweenType"] = { __ename__ : "haxepunk.TweenType", __constructs__ : ["Persist","Looping","OneShot","PingPong"]
	,Persist: {_hx_index:0,__enum__:"haxepunk.TweenType",toString:$estr}
	,Looping: {_hx_index:1,__enum__:"haxepunk.TweenType",toString:$estr}
	,OneShot: {_hx_index:2,__enum__:"haxepunk.TweenType",toString:$estr}
	,PingPong: {_hx_index:3,__enum__:"haxepunk.TweenType",toString:$estr}
};
var haxepunk_Tween = function(duration,type,complete,ease) {
	this._time = 0;
	this.onComplete = new haxepunk_Signal0();
	this.onUpdate = new haxepunk_Signal0();
	this.onStart = new haxepunk_Signal0();
	this.forward = true;
	this.active = false;
	if(duration < 0) {
		throw haxe_Exception.thrown("Tween duration must be positive!");
	}
	this._target = duration;
	this._type = type == null ? haxepunk_TweenType.Persist : type;
	this._ease = ease;
	this._t = 0;
	if(complete != null) {
		this.onComplete.callbacks.push(complete);
	}
};
$hxClasses["haxepunk.Tween"] = haxepunk_Tween;
haxepunk_Tween.__name__ = "haxepunk.Tween";
haxepunk_Tween.prototype = {
	updateInternal: function() {
	}
	,update: function(elapsed) {
		var _gthis = this;
		var isFinished = false;
		if(this.active) {
			this._time += elapsed;
			this._t = this.get_percent();
			if(this._t > 0 && this._t < 1) {
				var this1 = this._ease;
				if(this1 != null) {
					_gthis._t = this1(_gthis._t);
				}
			}
			if(this._time >= this._target) {
				this._t = this.forward ? 1 : 0;
				isFinished = true;
			}
			this.updateInternal();
			var _g = 0;
			var _g1 = this.onUpdate.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		}
		if(isFinished) {
			this.finish();
		}
	}
	,start: function() {
		this._time = 0;
		if(this._target == 0) {
			this.active = false;
			var _g = 0;
			var _g1 = this.onComplete.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		} else {
			this.active = true;
			var _g = 0;
			var _g1 = this.onStart.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		}
	}
	,finish: function() {
		switch(this._type._hx_index) {
		case 0:
			this._time = this._target;
			this.active = false;
			break;
		case 2:
			this._time = this._target;
			this.cancel();
			break;
		case 1:case 3:
			if(this._type == haxepunk_TweenType.PingPong) {
				this.forward = !this.forward;
			}
			this.start();
			break;
		}
		var _g = 0;
		var _g1 = this.onComplete.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		if(this._type == haxepunk_TweenType.OneShot) {
			var _this = this.onComplete;
			while(_this.callbacks.length > 0) _this.callbacks.pop();
		}
	}
	,cancel: function() {
		this.active = false;
		if(this._parent != null) {
			this._parent.removeTween(this);
		}
	}
	,get_percent: function() {
		if(this._target == 0) {
			return 0;
		} else {
			return (this.forward ? this._time : this._target - this._time) / this._target;
		}
	}
	,set_percent: function(value) {
		return this._time = this._target * value;
	}
	,get_scale: function() {
		return this._t;
	}
	,__class__: haxepunk_Tween
	,__properties__: {get_scale:"get_scale",set_percent:"set_percent",get_percent:"get_percent"}
};
var haxepunk__$internal_GamepadInput = function() { };
$hxClasses["haxepunk._internal.GamepadInput"] = haxepunk__$internal_GamepadInput;
haxepunk__$internal_GamepadInput.__name__ = "haxepunk._internal.GamepadInput";
haxepunk__$internal_GamepadInput.init = function(app) {
	lime_ui_Gamepad.onConnect.add(haxepunk__$internal_GamepadInput.onJoyDeviceAdded);
	var device = lime_ui_Gamepad.devices.iterator();
	while(device.hasNext()) {
		var device1 = device.next();
		haxepunk__$internal_GamepadInput.onJoyDeviceAdded(device1);
	}
};
haxepunk__$internal_GamepadInput.onJoyDeviceAdded = function(limeGamepad) {
	var joy = new haxepunk_input_Gamepad(limeGamepad.id);
	haxepunk_input_Gamepad.gamepads.h[limeGamepad.id] = joy;
	++haxepunk_input_Gamepad.gamepadCount;
	var devices = lime_ui_Joystick.__getDeviceData();
	joy.name = devices[limeGamepad.id].id;
	var devices = lime_ui_Joystick.__getDeviceData();
	joy.guid = devices[limeGamepad.id].id;
	var s = "Gamepad (" + joy.guid + ": " + joy.name + " added";
	var pos_fileName = "haxepunk/_internal/GamepadInput.hx";
	var pos_lineNumber = 27;
	var pos_className = "haxepunk._internal.GamepadInput";
	var pos_methodName = "onJoyDeviceAdded";
	var level = 20;
	if(level == null) {
		level = 20;
	}
	var minLevel = 10;
	if((level | 0) >= (minLevel | 0)) {
		var p = null;
		var tmp = haxe_Log.trace;
		var s1 = Std.string(s);
		var d = HxOverrides.dateStr(new Date());
		var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
		var l;
		switch(level) {
		case 20:
			l = "INF";
			break;
		case 30:
			l = "WRN";
			break;
		case 40:
			l = "ERR";
			break;
		case 50:
			l = "!!!";
			break;
		default:
			l = "DBG";
		}
		tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
		if(haxepunk_HXP.engine.console != null) {
			var _this = haxepunk_HXP.engine.console;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
		}
	}
	if(joy.type != null) {
		var s = joy.type.buttons.toString();
		var pos_fileName = "haxepunk/_internal/GamepadInput.hx";
		var pos_lineNumber = 30;
		var pos_className = "haxepunk._internal.GamepadInput";
		var pos_methodName = "onJoyDeviceAdded";
		var level = 10;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
		var s = joy.type.axes.toString();
		var pos_fileName = "haxepunk/_internal/GamepadInput.hx";
		var pos_lineNumber = 31;
		var pos_className = "haxepunk._internal.GamepadInput";
		var pos_methodName = "onJoyDeviceAdded";
		var level = 10;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
	}
	limeGamepad.onButtonUp.add($bind(joy,joy.onButtonUp));
	limeGamepad.onButtonDown.add($bind(joy,joy.onButtonDown));
	var limeGamepad1 = limeGamepad;
	var tmp = function(a,v) {
		haxepunk__$internal_GamepadInput.onJoyAxisMove(limeGamepad1,a,v);
	};
	limeGamepad.onAxisMove.add(tmp);
	var limeGamepad2 = limeGamepad;
	var tmp = function() {
		haxepunk__$internal_GamepadInput.onJoyDeviceRemoved(limeGamepad2);
	};
	limeGamepad.onDisconnect.add(tmp);
	haxepunk_input_Input.handlers.push(joy);
	var _g = 0;
	var _g1 = haxepunk_input_Gamepad.onConnect.callbacks;
	while(_g < _g1.length) {
		var callback = _g1[_g];
		++_g;
		callback(joy);
	}
};
haxepunk__$internal_GamepadInput.onJoyDeviceRemoved = function(limeGamepad) {
	var joy = haxepunk_input_Gamepad.gamepad(limeGamepad.id);
	joy.connected = false;
	haxepunk_input_Gamepad.gamepads.remove(limeGamepad.id);
	--haxepunk_input_Gamepad.gamepadCount;
	if(haxepunk_input_Input.handlers.indexOf(joy) > -1) {
		HxOverrides.remove(haxepunk_input_Input.handlers,joy);
	}
	var _g = 0;
	var _g1 = haxepunk_input_Gamepad.onDisconnect.callbacks;
	while(_g < _g1.length) {
		var callback = _g1[_g];
		++_g;
		callback(joy);
	}
	var s = "Gamepad (" + joy.guid + ": " + joy.name + ") removed";
	var pos_fileName = "haxepunk/_internal/GamepadInput.hx";
	var pos_lineNumber = 51;
	var pos_className = "haxepunk._internal.GamepadInput";
	var pos_methodName = "onJoyDeviceRemoved";
	var level = 20;
	if(level == null) {
		level = 20;
	}
	var minLevel = 10;
	if((level | 0) >= (minLevel | 0)) {
		var p = null;
		var tmp = haxe_Log.trace;
		var s1 = Std.string(s);
		var d = HxOverrides.dateStr(new Date());
		var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
		var l;
		switch(level) {
		case 20:
			l = "INF";
			break;
		case 30:
			l = "WRN";
			break;
		case 40:
			l = "ERR";
			break;
		case 50:
			l = "!!!";
			break;
		default:
			l = "DBG";
		}
		tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
		if(haxepunk_HXP.engine.console != null) {
			var _this = haxepunk_HXP.engine.console;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
		}
	}
};
haxepunk__$internal_GamepadInput.onJoyAxisMove = function(limeGamepad,a,v) {
	var joy = haxepunk_input_Gamepad.gamepad(limeGamepad.id);
	joy.onAxisMove(a,v);
};
var haxepunk__$internal_KeyInput = function() { };
$hxClasses["haxepunk._internal.KeyInput"] = haxepunk__$internal_KeyInput;
haxepunk__$internal_KeyInput.__name__ = "haxepunk._internal.KeyInput";
haxepunk__$internal_KeyInput.init = function(app) {
	var stage = app.stage;
	stage.addEventListener("keyDown",haxepunk__$internal_KeyInput.keyDownCallback,false,2);
	stage.addEventListener("keyUp",haxepunk__$internal_KeyInput.keyUpCallback,false,2);
};
haxepunk__$internal_KeyInput.keyCode = function(e) {
	return e.keyCode;
};
haxepunk__$internal_KeyInput.keyDownCallback = function(e) {
	var code = e.keyCode;
	if(code == -1) {
		return;
	}
	haxepunk_input_Key.onKeyDown(code,e.shiftKey);
};
haxepunk__$internal_KeyInput.keyUpCallback = function(e) {
	var code = e.keyCode;
	if(code == -1) {
		return;
	}
	haxepunk_input_Key.onKeyUp(code);
};
var haxepunk__$internal_MouseInput = function() { };
$hxClasses["haxepunk._internal.MouseInput"] = haxepunk__$internal_MouseInput;
haxepunk__$internal_MouseInput.__name__ = "haxepunk._internal.MouseInput";
haxepunk__$internal_MouseInput.init = function(app) {
	var stage = app.stage;
	stage.addEventListener("mouseDown",haxepunk_input_Mouse.onMouseDown,false,2);
	stage.addEventListener("mouseUp",haxepunk_input_Mouse.onMouseUp,false,2);
	stage.addEventListener("mouseWheel",function(e) {
		haxepunk_input_Mouse.onMouseWheel(e.delta);
	},false,2);
	stage.addEventListener("middleMouseDown",haxepunk_input_Mouse.onMiddleMouseDown,false,2);
	stage.addEventListener("middleMouseUp",haxepunk_input_Mouse.onMiddleMouseUp,false,2);
	stage.addEventListener("rightMouseDown",haxepunk_input_Mouse.onRightMouseDown,false,2);
	stage.addEventListener("rightMouseUp",haxepunk_input_Mouse.onRightMouseUp,false,2);
	stage.addEventListener("mouseMove",haxepunk__$internal_MouseInput.onMouseOver,false,2);
	stage.addEventListener("mouseLeave",haxepunk__$internal_MouseInput.onMouseOut,false,2);
};
haxepunk__$internal_MouseInput.onMouseOver = function(_) {
	haxepunk_input_Mouse._mouseOnScreen = true;
};
haxepunk__$internal_MouseInput.onMouseOut = function(_) {
	haxepunk_input_Mouse._mouseOnScreen = false;
};
var haxepunk__$internal_TouchInput = function() { };
$hxClasses["haxepunk._internal.TouchInput"] = haxepunk__$internal_TouchInput;
haxepunk__$internal_TouchInput.__name__ = "haxepunk._internal.TouchInput";
haxepunk__$internal_TouchInput.init = function(app) {
	haxepunk_input_Input.multiTouchSupported = true;
	haxepunk_input_Input.handlers.push(haxepunk_input_Touch);
	var stage = app.stage;
	openfl_ui_Multitouch.inputMode = 2;
	stage.addEventListener("touchBegin",haxepunk__$internal_TouchInput.onTouchBegin);
	stage.addEventListener("touchMove",haxepunk__$internal_TouchInput.onTouchMove);
	stage.addEventListener("touchEnd",haxepunk__$internal_TouchInput.onTouchEnd);
};
haxepunk__$internal_TouchInput.onTouchBegin = function(e) {
	var touchPoint = new haxepunk_input_Touch(e.stageX / haxepunk_HXP.screen.scaleX,e.stageY / haxepunk_HXP.screen.scaleY,e.touchPointID);
	haxepunk_input_Touch._touches.h[e.touchPointID] = touchPoint;
	haxepunk_input_Touch._touchOrder.push(e.touchPointID);
};
haxepunk__$internal_TouchInput.onTouchMove = function(e) {
	if(haxepunk_input_Touch._touches.h.hasOwnProperty(e.touchPointID)) {
		var point = haxepunk_input_Touch._touches.h[e.touchPointID];
		point.x = e.stageX / haxepunk_HXP.screen.scaleX;
		point.y = e.stageY / haxepunk_HXP.screen.scaleY;
	}
};
haxepunk__$internal_TouchInput.onTouchEnd = function(e) {
	if(haxepunk_input_Touch._touches.h.hasOwnProperty(e.touchPointID)) {
		haxepunk_input_Touch._touches.h[e.touchPointID].released = true;
	}
};
var haxepunk_assets_AssetCache = function(name) {
	this.custom = new haxe_ds_StringMap();
	this.atlasData = new haxe_ds_StringMap();
	this.tileAtlases = new haxe_ds_StringMap();
	this.bitmapFonts = new haxe_ds_StringMap();
	this.regions = new haxe_ds_StringMap();
	this.sounds = new haxe_ds_StringMap();
	this.text = new haxe_ds_StringMap();
	this.textures = new haxe_ds_StringMap();
	this.name = name;
};
$hxClasses["haxepunk.assets.AssetCache"] = haxepunk_assets_AssetCache;
haxepunk_assets_AssetCache.__name__ = "haxepunk.assets.AssetCache";
haxepunk_assets_AssetCache.addCustomLoader = function(name,loader) {
	haxepunk_assets_AssetCache.customLoaders.h[name] = loader;
};
haxepunk_assets_AssetCache.prototype = {
	get_enabled: function() {
		return haxepunk_assets_AssetCache.active.indexOf(this) > -1;
	}
	,addTexture: function(id,texture) {
		this.textures.h[id] = texture;
	}
	,getTexture: function(id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		if(Object.prototype.hasOwnProperty.call(this.textures.h,id)) {
			result = this.textures.h[id];
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(otherCache.textures.h,id)) {
					var cached = otherCache.textures.h[id];
					if(addRef && cached != null) {
						var s = "adding asset cache reference: " + Std.string(this) + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:60: characters 69-71), expr: EConst(CIdent(id))} -> " + otherCache.name + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:60: characters 69-71), expr: EConst(CIdent(id))}";
						var pos_fileName = "haxepunk/assets/AssetMacros.hx";
						var pos_lineNumber = 28;
						var pos_className = "haxepunk.assets.AssetCache";
						var pos_methodName = "getTexture";
						var level = 10;
						if(level == null) {
							level = 20;
						}
						var minLevel = 10;
						if((level | 0) >= (minLevel | 0)) {
							var p = null;
							var tmp = haxe_Log.trace;
							var s1 = Std.string(s);
							var d = HxOverrides.dateStr(new Date());
							var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
							var l;
							switch(level) {
							case 20:
								l = "INF";
								break;
							case 30:
								l = "WRN";
								break;
							case 40:
								l = "ERR";
								break;
							case 50:
								l = "!!!";
								break;
							default:
								l = "DBG";
							}
							tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
							if(haxepunk_HXP.engine.console != null) {
								var _this = haxepunk_HXP.engine.console;
								var s2 = Std.string(s);
								var d1 = HxOverrides.dateStr(new Date());
								var p2 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
								var l1;
								switch(level) {
								case 20:
									l1 = "INF";
									break;
								case 30:
									l1 = "WRN";
									break;
								case 40:
									l1 = "ERR";
									break;
								case 50:
									l1 = "!!!";
									break;
								default:
									l1 = "DBG";
								}
								_this.logPanel.log("" + d1 + " " + p2 + "  " + l1 + ": " + s2);
							}
						}
						this.textures.h[id] = cached;
					}
					result = cached;
				}
			}
			if(result == null) {
				var this1 = this.textures;
				var s = "loading texture " + id + " into cache " + this.name;
				var pos_fileName = "haxepunk/assets/AssetCache.hx";
				var pos_lineNumber = 61;
				var pos_className = "haxepunk.assets.AssetCache";
				var pos_methodName = "getTexture";
				var level = 20;
				if(level == null) {
					level = 20;
				}
				var minLevel = 10;
				if((level | 0) >= (minLevel | 0)) {
					var p = null;
					var result1 = haxe_Log.trace;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					result1("" + d + " " + p1 + "  " + l + ": " + s1,p);
					if(haxepunk_HXP.engine.console != null) {
						var _this = haxepunk_HXP.engine.console;
						var s1 = Std.string(s);
						var d = HxOverrides.dateStr(new Date());
						var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
						var l;
						switch(level) {
						case 20:
							l = "INF";
							break;
						case 30:
							l = "WRN";
							break;
						case 40:
							l = "ERR";
							break;
						case 50:
							l = "!!!";
							break;
						default:
							l = "DBG";
						}
						_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
					}
				}
				var texture = haxepunk_assets_AssetLoader.getTexture(id);
				if(!Object.prototype.hasOwnProperty.call(this.atlasData.h,id)) {
					var data = new haxepunk_graphics_atlas_AtlasData(texture,id);
					this.addAtlasData(id,data);
					if(!Object.prototype.hasOwnProperty.call(this.regions.h,id)) {
						var this2 = data;
						this.addAtlasRegion(id,haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this2));
					}
				}
				var v = texture;
				this1.h[id] = v;
				result = v;
			}
		}
		return result;
	}
	,removeTexture: function(id) {
		var texture = this.textures.h[id];
		var _this = this.textures;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
		var stillNeeded = false;
		var _g = 0;
		var _g1 = haxepunk_assets_AssetCache.active;
		while(_g < _g1.length) {
			var cache = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(cache.textures.h,id)) {
				stillNeeded = true;
				break;
			}
		}
		if(!stillNeeded) {
			var s = "disposing texture " + id;
			var pos_fileName = "haxepunk/assets/AssetCache.hx";
			var pos_lineNumber = 91;
			var pos_className = "haxepunk.assets.AssetCache";
			var pos_methodName = "removeTexture";
			var level = 20;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
			texture.dispose();
		}
	}
	,addText: function(id,value) {
		this.text.h[id] = value;
	}
	,getText: function(id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		if(Object.prototype.hasOwnProperty.call(this.text.h,id)) {
			result = this.text.h[id];
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(otherCache.text.h,id)) {
					var cached = otherCache.text.h[id];
					if(addRef && cached != null) {
						var s = "adding asset cache reference: " + Std.string(this) + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:103: characters 61-63), expr: EConst(CIdent(id))} -> " + otherCache.name + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:103: characters 61-63), expr: EConst(CIdent(id))}";
						var pos_fileName = "haxepunk/assets/AssetMacros.hx";
						var pos_lineNumber = 28;
						var pos_className = "haxepunk.assets.AssetCache";
						var pos_methodName = "getText";
						var level = 10;
						if(level == null) {
							level = 20;
						}
						var minLevel = 10;
						if((level | 0) >= (minLevel | 0)) {
							var p = null;
							var tmp = haxe_Log.trace;
							var s1 = Std.string(s);
							var d = HxOverrides.dateStr(new Date());
							var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
							var l;
							switch(level) {
							case 20:
								l = "INF";
								break;
							case 30:
								l = "WRN";
								break;
							case 40:
								l = "ERR";
								break;
							case 50:
								l = "!!!";
								break;
							default:
								l = "DBG";
							}
							tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
							if(haxepunk_HXP.engine.console != null) {
								var _this = haxepunk_HXP.engine.console;
								var s2 = Std.string(s);
								var d1 = HxOverrides.dateStr(new Date());
								var p2 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
								var l1;
								switch(level) {
								case 20:
									l1 = "INF";
									break;
								case 30:
									l1 = "WRN";
									break;
								case 40:
									l1 = "ERR";
									break;
								case 50:
									l1 = "!!!";
									break;
								default:
									l1 = "DBG";
								}
								_this.logPanel.log("" + d1 + " " + p2 + "  " + l1 + ": " + s2);
							}
						}
						this.text.h[id] = cached;
					}
					result = cached;
				}
			}
			if(result == null) {
				var this1 = this.text;
				var v = haxepunk_assets_AssetLoader.getText(id);
				this1.h[id] = v;
				result = v;
			}
		}
		return result;
	}
	,removeText: function(id) {
		var _this = this.text;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
	}
	,addSound: function(id,sound) {
		var v = sound;
		this.sounds.h[id] = v;
	}
	,getSound: function(id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		if(Object.prototype.hasOwnProperty.call(this.sounds.h,id)) {
			result = this.sounds.h[id];
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(otherCache.sounds.h,id)) {
					var cached = otherCache.sounds.h[id];
					if(addRef && cached != null) {
						var s = "adding asset cache reference: " + Std.string(this) + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:118: characters 65-67), expr: EConst(CIdent(id))} -> " + otherCache.name + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:118: characters 65-67), expr: EConst(CIdent(id))}";
						var pos_fileName = "haxepunk/assets/AssetMacros.hx";
						var pos_lineNumber = 28;
						var pos_className = "haxepunk.assets.AssetCache";
						var pos_methodName = "getSound";
						var level = 10;
						if(level == null) {
							level = 20;
						}
						var minLevel = 10;
						if((level | 0) >= (minLevel | 0)) {
							var p = null;
							var tmp = haxe_Log.trace;
							var s1 = Std.string(s);
							var d = HxOverrides.dateStr(new Date());
							var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
							var l;
							switch(level) {
							case 20:
								l = "INF";
								break;
							case 30:
								l = "WRN";
								break;
							case 40:
								l = "ERR";
								break;
							case 50:
								l = "!!!";
								break;
							default:
								l = "DBG";
							}
							tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
							if(haxepunk_HXP.engine.console != null) {
								var _this = haxepunk_HXP.engine.console;
								var s2 = Std.string(s);
								var d1 = HxOverrides.dateStr(new Date());
								var p2 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
								var l1;
								switch(level) {
								case 20:
									l1 = "INF";
									break;
								case 30:
									l1 = "WRN";
									break;
								case 40:
									l1 = "ERR";
									break;
								case 50:
									l1 = "!!!";
									break;
								default:
									l1 = "DBG";
								}
								_this.logPanel.log("" + d1 + " " + p2 + "  " + l1 + ": " + s2);
							}
						}
						var v = cached;
						this.sounds.h[id] = v;
					}
					result = cached;
				}
			}
			if(result == null) {
				var this1 = this.sounds;
				var v = haxepunk_assets_AssetLoader.getSound(id);
				this1.h[id] = v;
				result = v;
			}
		}
		return result;
	}
	,removeSound: function(id) {
		var _this = this.sounds;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
	}
	,addTileAtlas: function(id,atlas) {
		this.tileAtlases.h[id] = atlas;
	}
	,getTileAtlas: function(id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		if(Object.prototype.hasOwnProperty.call(this.tileAtlases.h,id)) {
			result = this.tileAtlases.h[id];
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(otherCache.tileAtlases.h,id)) {
					var cached = otherCache.tileAtlases.h[id];
					if(addRef && cached != null) {
						var s = "adding asset cache reference: " + Std.string(this) + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:133: characters 75-77), expr: EConst(CIdent(id))} -> " + otherCache.name + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:133: characters 75-77), expr: EConst(CIdent(id))}";
						var pos_fileName = "haxepunk/assets/AssetMacros.hx";
						var pos_lineNumber = 28;
						var pos_className = "haxepunk.assets.AssetCache";
						var pos_methodName = "getTileAtlas";
						var level = 10;
						if(level == null) {
							level = 20;
						}
						var minLevel = 10;
						if((level | 0) >= (minLevel | 0)) {
							var p = null;
							var tmp = haxe_Log.trace;
							var s1 = Std.string(s);
							var d = HxOverrides.dateStr(new Date());
							var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
							var l;
							switch(level) {
							case 20:
								l = "INF";
								break;
							case 30:
								l = "WRN";
								break;
							case 40:
								l = "ERR";
								break;
							case 50:
								l = "!!!";
								break;
							default:
								l = "DBG";
							}
							tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
							if(haxepunk_HXP.engine.console != null) {
								var _this = haxepunk_HXP.engine.console;
								var s2 = Std.string(s);
								var d1 = HxOverrides.dateStr(new Date());
								var p2 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
								var l1;
								switch(level) {
								case 20:
									l1 = "INF";
									break;
								case 30:
									l1 = "WRN";
									break;
								case 40:
									l1 = "ERR";
									break;
								case 50:
									l1 = "!!!";
									break;
								default:
									l1 = "DBG";
								}
								_this.logPanel.log("" + d1 + " " + p2 + "  " + l1 + ": " + s2);
							}
						}
						this.tileAtlases.h[id] = cached;
					}
					result = cached;
				}
			}
			if(result == null) {
				var this1 = this.tileAtlases;
				var texture = this.getTexture(id);
				var this2 = new haxepunk_graphics_atlas_AtlasData(texture);
				var atlas = new haxepunk_graphics_atlas_TileAtlas(this2);
				var v = atlas;
				this1.h[id] = v;
				result = v;
			}
		}
		return result;
	}
	,removeTileAtlas: function(id) {
		var _this = this.tileAtlases;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
	}
	,addAtlasData: function(id,data) {
		this.atlasData.h[id] = data;
	}
	,getAtlasData: function(id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		if(Object.prototype.hasOwnProperty.call(this.atlasData.h,id)) {
			result = this.atlasData.h[id];
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(otherCache.atlasData.h,id)) {
					var cached = otherCache.atlasData.h[id];
					if(addRef && cached != null) {
						var s = "adding asset cache reference: " + Std.string(this) + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:152: characters 71-73), expr: EConst(CIdent(id))} -> " + otherCache.name + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:152: characters 71-73), expr: EConst(CIdent(id))}";
						var pos_fileName = "haxepunk/assets/AssetMacros.hx";
						var pos_lineNumber = 28;
						var pos_className = "haxepunk.assets.AssetCache";
						var pos_methodName = "getAtlasData";
						var level = 10;
						if(level == null) {
							level = 20;
						}
						var minLevel = 10;
						if((level | 0) >= (minLevel | 0)) {
							var p = null;
							var tmp = haxe_Log.trace;
							var s1 = Std.string(s);
							var d = HxOverrides.dateStr(new Date());
							var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
							var l;
							switch(level) {
							case 20:
								l = "INF";
								break;
							case 30:
								l = "WRN";
								break;
							case 40:
								l = "ERR";
								break;
							case 50:
								l = "!!!";
								break;
							default:
								l = "DBG";
							}
							tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
							if(haxepunk_HXP.engine.console != null) {
								var _this = haxepunk_HXP.engine.console;
								var s2 = Std.string(s);
								var d1 = HxOverrides.dateStr(new Date());
								var p2 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
								var l1;
								switch(level) {
								case 20:
									l1 = "INF";
									break;
								case 30:
									l1 = "WRN";
									break;
								case 40:
									l1 = "ERR";
									break;
								case 50:
									l1 = "!!!";
									break;
								default:
									l1 = "DBG";
								}
								_this.logPanel.log("" + d1 + " " + p2 + "  " + l1 + ": " + s2);
							}
						}
						this.atlasData.h[id] = cached;
						this.getTexture(id,true);
					}
					result = cached;
				}
			}
			if(result == null) {
				var this1 = this.atlasData;
				var data = new haxepunk_graphics_atlas_AtlasData(this.getTexture(id,true),id);
				if(!Object.prototype.hasOwnProperty.call(this.regions.h,id)) {
					var this2 = data;
					this.addAtlasRegion(id,haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this2));
				}
				var v = data;
				this1.h[id] = v;
				result = v;
			}
		}
		return result;
	}
	,removeAtlasData: function(id) {
		var _this = this.atlasData;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
	}
	,addAtlasRegion: function(id,region) {
		this.regions.h[id] = region;
	}
	,getAtlasRegion: function(id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		if(Object.prototype.hasOwnProperty.call(this.regions.h,id)) {
			result = this.regions.h[id];
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(otherCache.regions.h,id)) {
					var cached = otherCache.regions.h[id];
					if(addRef && cached != null) {
						var s = "adding asset cache reference: " + Std.string(this) + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:178: characters 67-69), expr: EConst(CIdent(id))} -> " + otherCache.name + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:178: characters 67-69), expr: EConst(CIdent(id))}";
						var pos_fileName = "haxepunk/assets/AssetMacros.hx";
						var pos_lineNumber = 28;
						var pos_className = "haxepunk.assets.AssetCache";
						var pos_methodName = "getAtlasRegion";
						var level = 10;
						if(level == null) {
							level = 20;
						}
						var minLevel = 10;
						if((level | 0) >= (minLevel | 0)) {
							var p = null;
							var tmp = haxe_Log.trace;
							var s1 = Std.string(s);
							var d = HxOverrides.dateStr(new Date());
							var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
							var l;
							switch(level) {
							case 20:
								l = "INF";
								break;
							case 30:
								l = "WRN";
								break;
							case 40:
								l = "ERR";
								break;
							case 50:
								l = "!!!";
								break;
							default:
								l = "DBG";
							}
							tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
							if(haxepunk_HXP.engine.console != null) {
								var _this = haxepunk_HXP.engine.console;
								var s2 = Std.string(s);
								var d1 = HxOverrides.dateStr(new Date());
								var p2 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
								var l1;
								switch(level) {
								case 20:
									l1 = "INF";
									break;
								case 30:
									l1 = "WRN";
									break;
								case 40:
									l1 = "ERR";
									break;
								case 50:
									l1 = "!!!";
									break;
								default:
									l1 = "DBG";
								}
								_this.logPanel.log("" + d1 + " " + p2 + "  " + l1 + ": " + s2);
							}
						}
						this.regions.h[id] = cached;
						this.getAtlasData(id,true);
					}
					result = cached;
				}
			}
			if(result == null) {
				var this1 = this.regions;
				var data = this.getAtlasData(id,true);
				var this2 = data;
				var v = haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this2);
				this1.h[id] = v;
				result = v;
			}
		}
		return result;
	}
	,removeAtlasRegion: function(id) {
		var _this = this.regions;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
	}
	,addBitmapFont: function(fontName,font) {
		this.bitmapFonts.h[fontName] = font;
	}
	,getBitmapFont: function(fontName,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		if(Object.prototype.hasOwnProperty.call(this.bitmapFonts.h,fontName)) {
			result = this.bitmapFonts.h[fontName];
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(otherCache.bitmapFonts.h,fontName)) {
					var cached = otherCache.bitmapFonts.h[fontName];
					if(addRef && cached != null) {
						var s = "adding asset cache reference: " + Std.string(this) + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:200: characters 75-83), expr: EConst(CIdent(fontName))} -> " + otherCache.name + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:200: characters 75-83), expr: EConst(CIdent(fontName))}";
						var pos_fileName = "haxepunk/assets/AssetMacros.hx";
						var pos_lineNumber = 28;
						var pos_className = "haxepunk.assets.AssetCache";
						var pos_methodName = "getBitmapFont";
						var level = 10;
						if(level == null) {
							level = 20;
						}
						var minLevel = 10;
						if((level | 0) >= (minLevel | 0)) {
							var p = null;
							var tmp = haxe_Log.trace;
							var s1 = Std.string(s);
							var d = HxOverrides.dateStr(new Date());
							var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
							var l;
							switch(level) {
							case 20:
								l = "INF";
								break;
							case 30:
								l = "WRN";
								break;
							case 40:
								l = "ERR";
								break;
							case 50:
								l = "!!!";
								break;
							default:
								l = "DBG";
							}
							tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
							if(haxepunk_HXP.engine.console != null) {
								var _this = haxepunk_HXP.engine.console;
								var s2 = Std.string(s);
								var d1 = HxOverrides.dateStr(new Date());
								var p2 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
								var l1;
								switch(level) {
								case 20:
									l1 = "INF";
									break;
								case 30:
									l1 = "WRN";
									break;
								case 40:
									l1 = "ERR";
									break;
								case 50:
									l1 = "!!!";
									break;
								default:
									l1 = "DBG";
								}
								_this.logPanel.log("" + d1 + " " + p2 + "  " + l1 + ": " + s2);
							}
						}
						this.bitmapFonts.h[fontName] = cached;
					}
					result = cached;
				}
			}
			if(result == null) {
				var v = null;
				this.bitmapFonts.h[fontName] = v;
				result = v;
			}
		}
		return result;
	}
	,removeBitmapFont: function(fontName) {
		var _this = this.bitmapFonts;
		if(Object.prototype.hasOwnProperty.call(_this.h,fontName)) {
			delete(_this.h[fontName]);
		}
	}
	,addBitmapFontSizes: function(fontName,fonts,format,extraParams) {
		if(format == null) {
			format = 1;
		}
		var bmf = new haxepunk_graphics_text_BitmapFont(fontName);
		if(!Object.prototype.hasOwnProperty.call(this.bitmapFonts.h,fontName)) {
			this.bitmapFonts.h[fontName] = bmf;
		}
		var bitmapFont = this.bitmapFonts.h[fontName];
		var _g = 0;
		while(_g < fonts.length) {
			var font = fonts[_g];
			++_g;
			bmf.addSize(haxepunk_graphics_text_BitmapFontAtlas.getFont(font,format,extraParams));
		}
		return bmf;
	}
	,addResolutions: function(id,assets) {
		if(Object.prototype.hasOwnProperty.call(this.regions.h,id)) {
			var resolutions = this.regions.h[id];
			var _g = 0;
			while(_g < assets.length) {
				var asset = assets[_g];
				++_g;
				var region = this.getAtlasRegion(asset);
				resolutions.addResolution(region);
			}
			return resolutions;
		} else {
			var _g = [];
			var _g1 = 0;
			while(_g1 < assets.length) {
				var asset = assets[_g1];
				++_g1;
				var this1 = haxepunk_assets_AssetCache.global.getAtlasData(asset,false);
				_g.push(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1));
			}
			var resolutions = new haxepunk_graphics_atlas_AtlasResolutions(_g);
			this.regions.h[id] = resolutions;
			return resolutions;
		}
	}
	,addTextureAtlas: function(atlas) {
		var key = haxe_ds_StringMap.keysIterator(atlas._regions.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var this1 = this.regions;
			var v;
			if(Object.prototype.hasOwnProperty.call(atlas._regions.h,key1)) {
				v = atlas._regions.h[key1];
			} else {
				throw haxe_Exception.thrown("Region has not been defined yet \"" + key1 + "\".");
			}
			this1.h[key1] = v;
		}
	}
	,addCustom: function(loader,id,resource) {
		if(!Object.prototype.hasOwnProperty.call(this.custom.h,loader)) {
			var this1 = this.custom;
			var v = new haxe_ds_StringMap();
			this1.h[loader] = v;
		}
		var v = resource;
		this.custom.h[loader].h[id] = v;
	}
	,getCustom: function(loader,id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var _g = 0;
		var _g1 = haxepunk_assets_AssetCache.active;
		while(_g < _g1.length) {
			var cache = _g1[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(cache.custom.h,loader)) {
				var this1 = cache.custom;
				var v = new haxe_ds_StringMap();
				this1.h[loader] = v;
			}
		}
		var result = null;
		if(Object.prototype.hasOwnProperty.call(this.custom.h[loader].h,id)) {
			result = this.custom.h[loader].h[id];
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(otherCache.custom.h[loader].h,id)) {
					var cached = otherCache.custom.h[loader].h[id];
					if(addRef && cached != null) {
						var s = "adding asset cache reference: " + Std.string(this) + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:283: characters 81-83), expr: EConst(CIdent(id))} -> " + otherCache.name + ":{pos: #pos(C:/Users/473387/AppData/Roaming/haxe/haxe_libraries/HaxePunk/4.0.2/github/2bb1f77376460e28db946b6ae5db443d33fa40f9/haxepunk/assets/AssetCache.hx:283: characters 81-83), expr: EConst(CIdent(id))}";
						var pos_fileName = "haxepunk/assets/AssetMacros.hx";
						var pos_lineNumber = 28;
						var pos_className = "haxepunk.assets.AssetCache";
						var pos_methodName = "getCustom";
						var level = 10;
						if(level == null) {
							level = 20;
						}
						var minLevel = 10;
						if((level | 0) >= (minLevel | 0)) {
							var p = null;
							var tmp = haxe_Log.trace;
							var s1 = Std.string(s);
							var d = HxOverrides.dateStr(new Date());
							var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
							var l;
							switch(level) {
							case 20:
								l = "INF";
								break;
							case 30:
								l = "WRN";
								break;
							case 40:
								l = "ERR";
								break;
							case 50:
								l = "!!!";
								break;
							default:
								l = "DBG";
							}
							tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
							if(haxepunk_HXP.engine.console != null) {
								var _this = haxepunk_HXP.engine.console;
								var s2 = Std.string(s);
								var d1 = HxOverrides.dateStr(new Date());
								var p2 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
								var l1;
								switch(level) {
								case 20:
									l1 = "INF";
									break;
								case 30:
									l1 = "WRN";
									break;
								case 40:
									l1 = "ERR";
									break;
								case 50:
									l1 = "!!!";
									break;
								default:
									l1 = "DBG";
								}
								_this.logPanel.log("" + d1 + " " + p2 + "  " + l1 + ": " + s2);
							}
						}
						var v = cached;
						this.custom.h[loader].h[id] = v;
						haxepunk_assets_AssetCache.customLoaders.h[loader].onRef(id,cached,this,otherCache);
					}
					result = cached;
				}
			}
			if(result == null) {
				var this1 = this.custom.h[loader];
				var s = "loading custom asset " + loader + ":" + id + " into cache " + this.name;
				var pos_fileName = "haxepunk/assets/AssetCache.hx";
				var pos_lineNumber = 284;
				var pos_className = "haxepunk.assets.AssetCache";
				var pos_methodName = "getCustom";
				var level = 20;
				if(level == null) {
					level = 20;
				}
				var minLevel = 10;
				if((level | 0) >= (minLevel | 0)) {
					var p = null;
					var result1 = haxe_Log.trace;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					result1("" + d + " " + p1 + "  " + l + ": " + s1,p);
					if(haxepunk_HXP.engine.console != null) {
						var _this = haxepunk_HXP.engine.console;
						var s1 = Std.string(s);
						var d = HxOverrides.dateStr(new Date());
						var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
						var l;
						switch(level) {
						case 20:
							l = "INF";
							break;
						case 30:
							l = "WRN";
							break;
						case 40:
							l = "ERR";
							break;
						case 50:
							l = "!!!";
							break;
						default:
							l = "DBG";
						}
						_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
					}
				}
				var resource = haxepunk_assets_AssetCache.customLoaders.h[loader].load(id);
				haxepunk_assets_AssetCache.customLoaders.h[loader].onLoad(id,resource,this);
				var v = resource;
				this1.h[id] = v;
				result = v;
			}
		}
		return result;
	}
	,removeCustom: function(loader,id,resource) {
		if(Object.prototype.hasOwnProperty.call(this.custom.h,loader)) {
			if(Object.prototype.hasOwnProperty.call(this.custom.h[loader].h,id)) {
				var resource = this.custom.h[loader].h[id];
				var _this = this.custom.h[loader];
				if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
					delete(_this.h[id]);
				}
				var stillNeeded = false;
				var _g = 0;
				var _g1 = haxepunk_assets_AssetCache.active;
				while(_g < _g1.length) {
					var cache = _g1[_g];
					++_g;
					if(Object.prototype.hasOwnProperty.call(cache.custom.h,loader) && Object.prototype.hasOwnProperty.call(cache.custom.h[loader].h,id)) {
						stillNeeded = true;
						break;
					}
				}
				if(!stillNeeded) {
					haxepunk_assets_AssetCache.customLoaders.h[loader].dispose(resource);
				}
			}
		}
	}
	,enable: function() {
		if(haxepunk_assets_AssetCache.active.indexOf(this) <= -1) {
			haxepunk_assets_AssetCache.active.push(this);
			var s = "enabled asset cache " + this.name;
			var pos_fileName = "haxepunk/assets/AssetCache.hx";
			var pos_lineNumber = 323;
			var pos_className = "haxepunk.assets.AssetCache";
			var pos_methodName = "enable";
			var level = 10;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
		}
	}
	,dispose: function() {
		if(haxepunk_assets_AssetCache.active.indexOf(this) > -1) {
			var pos = haxepunk_assets_AssetCache.active.indexOf(this);
			var s = "disposing asset cache " + this.name;
			var pos_fileName = "haxepunk/assets/AssetCache.hx";
			var pos_lineNumber = 332;
			var pos_className = "haxepunk.assets.AssetCache";
			var pos_methodName = "dispose";
			var level = 10;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
			HxOverrides.remove(haxepunk_assets_AssetCache.active,this);
			var key = haxe_ds_StringMap.keysIterator(this.textures.h);
			while(key.hasNext()) {
				var key1 = key.next();
				this.removeTexture(key1);
			}
		}
	}
	,__class__: haxepunk_assets_AssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var haxepunk_assets_AssetLoader = function() { };
$hxClasses["haxepunk.assets.AssetLoader"] = haxepunk_assets_AssetLoader;
haxepunk_assets_AssetLoader.__name__ = "haxepunk.assets.AssetLoader";
haxepunk_assets_AssetLoader.getText = function(id) {
	return openfl_utils_Assets.getText(id);
};
haxepunk_assets_AssetLoader.getSound = function(id) {
	return openfl_utils_Assets.getSound(id,false);
};
haxepunk_assets_AssetLoader.getTexture = function(id) {
	return openfl_utils_Assets.getBitmapData(id,false);
};
var haxepunk_assets_AssetMacros = function() { };
$hxClasses["haxepunk.assets.AssetMacros"] = haxepunk_assets_AssetMacros;
haxepunk_assets_AssetMacros.__name__ = "haxepunk.assets.AssetMacros";
var haxepunk_assets_CustomAssetLoader = function() { };
$hxClasses["haxepunk.assets.CustomAssetLoader"] = haxepunk_assets_CustomAssetLoader;
haxepunk_assets_CustomAssetLoader.__name__ = "haxepunk.assets.CustomAssetLoader";
haxepunk_assets_CustomAssetLoader.prototype = {
	load: function(id) {
		return null;
	}
	,dispose: function(asset) {
	}
	,onLoad: function(id,asset,cache) {
	}
	,onRef: function(id,asset,cache,otherCache) {
	}
	,__class__: haxepunk_assets_CustomAssetLoader
};
var haxepunk_cameras_StaticCamera = function(x,y) {
	haxepunk_Camera.call(this,x,y);
};
$hxClasses["haxepunk.cameras.StaticCamera"] = haxepunk_cameras_StaticCamera;
haxepunk_cameras_StaticCamera.__name__ = "haxepunk.cameras.StaticCamera";
haxepunk_cameras_StaticCamera.__super__ = haxepunk_Camera;
haxepunk_cameras_StaticCamera.prototype = $extend(haxepunk_Camera.prototype,{
	update: function() {
		haxepunk_Camera.prototype.update.call(this);
		this.x = this.y = 0;
	}
	,__class__: haxepunk_cameras_StaticCamera
});
var haxepunk_cameras_UICamera = function(x,y) {
	haxepunk_cameras_StaticCamera.call(this,x,y);
};
$hxClasses["haxepunk.cameras.UICamera"] = haxepunk_cameras_UICamera;
haxepunk_cameras_UICamera.__name__ = "haxepunk.cameras.UICamera";
haxepunk_cameras_UICamera.__super__ = haxepunk_cameras_StaticCamera;
haxepunk_cameras_UICamera.prototype = $extend(haxepunk_cameras_StaticCamera.prototype,{
	update: function() {
		haxepunk_cameras_StaticCamera.prototype.update.call(this);
		this.scale = 1;
		this.scaleX = 1 / haxepunk_HXP.screen.scaleX;
		this.scaleY = 1 / haxepunk_HXP.screen.scaleY;
	}
	,__class__: haxepunk_cameras_UICamera
});
var haxepunk_debug_ButtonTray = function(mouseManager,onHide,onPause,onStep) {
	var _gthis = this;
	haxepunk_EntityList.call(this);
	var btn = new haxepunk_debug_DebugButton("graphics/debug/console_visible.png",mouseManager,onHide);
	btn.set_x(_gthis.get_width());
	var _g = _gthis;
	_g.set_width(_g.get_width() + btn.get_width());
	_gthis.add(btn);
	var btn = new haxepunk_debug_DebugButton("graphics/debug/console_pause.png",mouseManager,onPause);
	btn.set_x(_gthis.get_width());
	var _g = _gthis;
	_g.set_width(_g.get_width() + btn.get_width());
	_gthis.add(btn);
	var btn = new haxepunk_debug_DebugButton("graphics/debug/console_step.png",mouseManager,onStep);
	btn.set_x(_gthis.get_width());
	var _g = _gthis;
	_g.set_width(_g.get_width() + btn.get_width());
	_gthis.add(btn);
	var btn = new haxepunk_debug_DebugButton("graphics/debug/console_drawcall_add.png",mouseManager,$bind(this,this.incrementDrawCallDebug));
	btn.set_x(_gthis.get_width());
	var _g = _gthis;
	_g.set_width(_g.get_width() + btn.get_width());
	_gthis.add(btn);
	var btn = new haxepunk_debug_DebugButton("graphics/debug/console_drawcall_all.png",mouseManager,$bind(this,this.resetDrawCallDebug));
	btn.set_x(_gthis.get_width());
	var _g = _gthis;
	_g.set_width(_g.get_width() + btn.get_width());
	_gthis.add(btn);
};
$hxClasses["haxepunk.debug.ButtonTray"] = haxepunk_debug_ButtonTray;
haxepunk_debug_ButtonTray.__name__ = "haxepunk.debug.ButtonTray";
haxepunk_debug_ButtonTray.__super__ = haxepunk_EntityList;
haxepunk_debug_ButtonTray.prototype = $extend(haxepunk_EntityList.prototype,{
	resetDrawCallDebug: function() {
		haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit = -1;
	}
	,incrementDrawCallDebug: function() {
		haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit++;
	}
	,__class__: haxepunk_debug_ButtonTray
});
var haxepunk_debug_Console = function() {
	this._stepping = false;
	this.panning = false;
	this.dragging = false;
	this.clickActive = false;
	this.selBox = new haxepunk_math_Rectangle();
	var this1 = { x : 0, y : 0};
	this.click = this1;
	this._t = 0;
	this._dc = 0;
	this._tri = 0;
	this._ent = 0;
	this._mem = 0;
	this._fps = 0;
	this.selected = [];
	this.debugDraw = false;
	haxepunk_Scene.call(this);
	this.trackDrawCalls = false;
	this.fps = new haxepunk_utils_CircularBuffer(15);
	this.memory = new haxepunk_utils_CircularBuffer(15);
	this.entities = new haxepunk_utils_CircularBuffer(15);
	this.triangles = new haxepunk_utils_CircularBuffer(15);
	this.drawCalls = new haxepunk_utils_CircularBuffer(15);
	var region = haxepunk_assets_AssetCache.global.getAtlasRegion("graphics/debug/console_logo.png",false);
	this.logo = new haxepunk_graphics_Image(region);
	this.logo.blend = 9;
	this.addGraphic(this.logo);
	this.fpsChart = new haxepunk_debug_Metric("FPS",this.fps,16711680,haxepunk_HXP.frameRate);
	this.fpsChart.set_x(this.fpsChart.set_y(8));
	this.add(this.fpsChart);
	this.memoryChart = new haxepunk_debug_Metric("Memory (MB)",this.memory,16768341,256);
	this.memoryChart.set_x(this.fpsChart.get_x());
	this.memoryChart.set_y(this.fpsChart.get_y() + this.fpsChart.get_height() + 8);
	this.add(this.memoryChart);
	this.entitiesChart = new haxepunk_debug_Metric("Entities",this.entities,16737792,16);
	this.entitiesChart.set_x(this.memoryChart.get_x());
	this.entitiesChart.set_y(this.memoryChart.get_y() + this.memoryChart.get_height() + 8);
	this.add(this.entitiesChart);
	this.trianglesChart = new haxepunk_debug_Metric("Triangles",this.triangles,65280,128);
	this.trianglesChart.set_x(this.entitiesChart.get_x());
	this.trianglesChart.set_y(this.entitiesChart.get_y() + this.entitiesChart.get_height() + 8);
	this.add(this.trianglesChart);
	this.drawCallsChart = new haxepunk_debug_Metric("Draw calls",this.drawCalls,255,16);
	this.drawCallsChart.set_x(this.trianglesChart.get_x());
	this.drawCallsChart.set_y(this.trianglesChart.get_y() + this.trianglesChart.get_height() + 8);
	this.add(this.drawCallsChart);
	this.mouseManager = new haxepunk_input_MouseManager();
	this.mouseManager.set_type("hxp_debug_ui");
	this.buttonTray = new haxepunk_debug_ButtonTray(this.mouseManager,$bind(this,this.toggleDebugDraw),$bind(this,this.togglePause),$bind(this,this.step));
	this.buttonTray.set_y(8);
	this.add(this.buttonTray);
	this.layerList = new haxepunk_debug_LayerList(this.mouseManager);
	this.layerList.set_y(8);
	this.add(this.layerList);
	this.logPanel = new haxepunk_debug_LogPanel(this.mouseManager);
	this.logPanel.set_x(8);
	this.add(this.logPanel);
	this.add(this.mouseManager);
	this.bgColor = 12632256;
	this.preRender.callbacks.push($bind(this,this.debugRender));
	this.camera = new haxepunk_cameras_UICamera();
	if(haxepunk_debug_Console.drawContext == null) {
		haxepunk_debug_Console.drawContext = new haxepunk_utils_DrawContext();
		haxepunk_debug_Console.drawContext.lineThickness = 2;
	}
};
$hxClasses["haxepunk.debug.Console"] = haxepunk_debug_Console;
haxepunk_debug_Console.__name__ = "haxepunk.debug.Console";
haxepunk_debug_Console.__properties__ = {set_enabled:"set_enabled",get_enabled:"get_enabled"};
haxepunk_debug_Console.enable = function() {
	if(true != (haxepunk_HXP.engine.console != null)) {
		haxepunk_HXP.engine.console = new haxepunk_debug_Console();
	}
};
haxepunk_debug_Console.get_enabled = function() {
	return haxepunk_HXP.engine.console != null;
};
haxepunk_debug_Console.set_enabled = function(v) {
	if(v != (haxepunk_HXP.engine.console != null)) {
		var tmp = v ? new haxepunk_debug_Console() : null;
		haxepunk_HXP.engine.console = tmp;
	}
	return v;
};
haxepunk_debug_Console.avg = function(buffer) {
	if(buffer.len == 0) {
		return 0;
	} else {
		return Lambda.fold(buffer,haxepunk_debug_Console.add2,0) / buffer.len;
	}
};
haxepunk_debug_Console.add2 = function(a,b) {
	return a + b;
};
haxepunk_debug_Console.__super__ = haxepunk_Scene;
haxepunk_debug_Console.prototype = $extend(haxepunk_Scene.prototype,{
	get_paused: function() {
		return haxepunk_HXP.engine.paused;
	}
	,set_paused: function(v) {
		return haxepunk_HXP.engine.paused = v;
	}
	,update: function() {
		haxepunk_Scene.prototype.update.call(this);
		var key = 192;
		if(key < 0 ? haxepunk_input_Key._pressNum != 0 : haxepunk_input_Key._press.indexOf(key) >= 0) {
			this.togglePause();
			this.debugDraw = haxepunk_HXP.engine.paused;
		}
		if(!haxepunk_HXP.engine.paused) {
			this.updateMetrics();
		}
		if(haxepunk_HXP.engine.paused) {
			var key = 221;
			if(key < 0 && haxepunk_input_Key._keyNum > 0 || haxepunk_input_Key._key.h[key]) {
				this.step();
			}
			var key = 16;
			if(key < 0 && haxepunk_input_Key._keyNum > 0 || haxepunk_input_Key._key.h[key]) {
				var mx = 0;
				var my = 0;
				var key = 37;
				if(key < 0 && haxepunk_input_Key._keyNum > 0 || haxepunk_input_Key._key.h[key]) {
					mx = -1;
				} else {
					var key = 39;
					if(key < 0 && haxepunk_input_Key._keyNum > 0 || haxepunk_input_Key._key.h[key]) {
						mx = 1;
					}
				}
				var key = 38;
				if(key < 0 && haxepunk_input_Key._keyNum > 0 || haxepunk_input_Key._key.h[key]) {
					my = -1;
				} else {
					var key = 40;
					if(key < 0 && haxepunk_input_Key._keyNum > 0 || haxepunk_input_Key._key.h[key]) {
						my = 1;
					}
				}
				if(mx != 0 || my != 0) {
					var camera = haxepunk_HXP.engine._scene.camera;
					camera.x = camera.x + haxepunk_HXP.elapsed * 256 * mx | 0;
					camera.y = camera.y + haxepunk_HXP.elapsed * 256 * my | 0;
				}
				if(!this.clickActive && haxepunk_input_Mouse.mouseDown) {
					this.panning = true;
				}
			}
			if(haxepunk_input_Mouse.mousePressed) {
				this.clickActive = true;
				this.dragging = false;
				var tmp = this.click;
				var _this = haxepunk_HXP.engine._scene;
				var x = haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this.x;
				var _this1 = _this.camera;
				var tmp1 = x / (_this1.scale * _this1.scaleX * haxepunk_HXP.screen.scaleX) + _this.camera.x | 0;
				var _this = haxepunk_HXP.engine._scene;
				var x = haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this.y;
				var _this1 = _this.camera;
				haxepunk_math_Vector2.setTo(tmp,tmp1,x / (_this1.scale * _this1.scaleY * haxepunk_HXP.screen.scaleY) + _this.camera.y | 0);
			}
			if(this.clickActive) {
				var _this = haxepunk_HXP.engine._scene;
				var x = haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this.x;
				var _this1 = _this.camera;
				var mx = x / (_this1.scale * _this1.scaleX * haxepunk_HXP.screen.scaleX) + _this.camera.x | 0;
				var _this = haxepunk_HXP.engine._scene;
				var x = haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this.y;
				var _this1 = _this.camera;
				var my = x / (_this1.scale * _this1.scaleY * haxepunk_HXP.screen.scaleY) + _this.camera.y | 0;
				if(this.panning) {
					var dx = mx - this.click.x | 0;
					var dy = my - this.click.y | 0;
					if(dx != 0 || dy != 0) {
						if(this.selected.length > 0) {
							var _g = 0;
							var _g1 = this.selected;
							while(_g < _g1.length) {
								var e = _g1[_g];
								++_g;
								var _g2 = e;
								_g2.set_x(_g2.get_x() + dx);
								var _g3 = e;
								_g3.set_y(_g3.get_y() + dy);
							}
						} else {
							haxepunk_HXP.engine._scene.camera.x -= dx;
							haxepunk_HXP.engine._scene.camera.y -= dy;
						}
						var tmp = this.click;
						var _this = haxepunk_HXP.engine._scene;
						var x = haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this.x;
						var _this1 = _this.camera;
						var tmp1 = x / (_this1.scale * _this1.scaleX * haxepunk_HXP.screen.scaleX) + _this.camera.x | 0;
						var _this = haxepunk_HXP.engine._scene;
						var x = haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this.y;
						var _this1 = _this.camera;
						haxepunk_math_Vector2.setTo(tmp,tmp1,x / (_this1.scale * _this1.scaleY * haxepunk_HXP.screen.scaleY) + _this.camera.y | 0);
					}
				} else {
					var moved = Math.abs(mx - this.click.x) + Math.abs(my - this.click.y);
					if(moved > 8) {
						this.dragging = true;
					}
					if(this.dragging) {
						this.selBox.setTo(Math.min(mx,this.click.x),Math.min(my,this.click.y),Math.abs(mx - this.click.x),Math.abs(my - this.click.y));
					}
					if(haxepunk_input_Mouse.mouseReleased) {
						if(!this.dragging) {
							this.selBox.setTo(this.click.x,this.click.y,1,1);
						}
						this.setSelection();
						this.clickActive = this.dragging = false;
					}
				}
			}
			if(!haxepunk_input_Mouse.mouseDown) {
				this.clickActive = this.dragging = this.panning = false;
			}
		}
		var _this = this.fpsChart;
		var _this1 = this.memoryChart;
		var _this2 = this.entitiesChart;
		var _this3 = this.trianglesChart;
		var _this4 = this.drawCallsChart;
		var _this5 = this.logPanel;
		var _this6 = this.layerList;
		_this.set_active(_this.set_visible(_this.set_collidable(_this1.set_active(_this1.set_visible(_this1.set_collidable(_this2.set_active(_this2.set_visible(_this2.set_collidable(_this3.set_active(_this3.set_visible(_this3.set_collidable(_this4.set_active(_this4.set_visible(_this4.set_collidable(_this5.set_active(_this5.set_visible(_this5.set_collidable(_this6.set_active(_this6.set_visible(_this6.set_collidable(this.debugDraw)))))))))))))))))))));
		var _this = this.camera;
		this.logo.x = (haxepunk_HXP.screen.width / (_this.scale * _this.scaleX * haxepunk_HXP.screen.scaleX) - this.logo.get_width()) / 2;
		var _this = this.camera;
		this.logo.y = (haxepunk_HXP.screen.height / (_this.scale * _this.scaleY * haxepunk_HXP.screen.scaleY) - this.logo.get_height()) / 2;
		this.logo._visible = haxepunk_HXP.engine.paused;
		var _this = this.camera;
		this.buttonTray.set_x((haxepunk_HXP.screen.width / (_this.scale * _this.scaleX * haxepunk_HXP.screen.scaleX) - this.buttonTray.get_width()) / 2);
		var _this = this.camera;
		this.logPanel.set_width(haxepunk_HXP.screen.width / (_this.scale * _this.scaleX * haxepunk_HXP.screen.scaleX) - this.logPanel.get_x() - 8 | 0);
		var _this = this.camera;
		this.logPanel.set_y(haxepunk_HXP.screen.height / (_this.scale * _this.scaleY * haxepunk_HXP.screen.scaleY) - this.logPanel.get_height() - 8);
		var _this = this.camera;
		this.layerList.set_x(haxepunk_HXP.screen.width / (_this.scale * _this.scaleX * haxepunk_HXP.screen.scaleX) - this.layerList.get_width() - 8);
		this.bgAlpha = haxepunk_HXP.engine.paused ? 0.75 : 0;
		this.updateLists();
	}
	,log: function(data) {
		this.logPanel.log(data);
	}
	,watch: function(properties) {
	}
	,toggleDebugDraw: function() {
		this.debugDraw = !this.debugDraw;
	}
	,togglePause: function() {
		haxepunk_HXP.engine.paused = !haxepunk_HXP.engine.paused;
	}
	,step: function() {
		if(this._stepping || !haxepunk_HXP.engine.paused) {
			return;
		}
		this._stepping = true;
		haxepunk_HXP.engine.update();
		this.updateMetrics();
		this._stepping = false;
	}
	,updateMetrics: function() {
		var s = haxepunk_HXP.elapsed / 0.33333333333333331;
		this._fps += 1 / haxepunk_HXP.elapsed * s;
		this._mem += haxepunk_HXP.app.getMemoryUse() / 1024 / 1024 * s;
		this._ent += haxepunk_HXP.engine._scene._update.length * s;
		this._tri += haxepunk_graphics_hardware_HardwareRenderer.triangleCount * s;
		this._dc += haxepunk_graphics_hardware_HardwareRenderer.drawCallCount * s;
		this._t += s;
		if(this._t >= 1) {
			var _this = this.fps;
			_this.data[(_this.pos + _this.len) % _this.data.length] = this._fps / this._t;
			if(_this.len < _this.data.length) {
				++_this.len;
			} else {
				++_this.pos;
			}
			var _this = this.memory;
			_this.data[(_this.pos + _this.len) % _this.data.length] = this._mem / this._t;
			if(_this.len < _this.data.length) {
				++_this.len;
			} else {
				++_this.pos;
			}
			var _this = this.entities;
			_this.data[(_this.pos + _this.len) % _this.data.length] = this._ent / this._t | 0;
			if(_this.len < _this.data.length) {
				++_this.len;
			} else {
				++_this.pos;
			}
			var _this = this.triangles;
			_this.data[(_this.pos + _this.len) % _this.data.length] = this._tri / this._t | 0;
			if(_this.len < _this.data.length) {
				++_this.len;
			} else {
				++_this.pos;
			}
			var _this = this.drawCalls;
			_this.data[(_this.pos + _this.len) % _this.data.length] = this._dc / this._t | 0;
			if(_this.len < _this.data.length) {
				++_this.len;
			} else {
				++_this.pos;
			}
			this._fps = this._mem = this._ent = this._tri = this._dc = this._t = 0;
		}
	}
	,debugRender: function() {
		if(this.debugDraw) {
			var scene = haxepunk_HXP.engine._scene;
			var _g = 0;
			var _g1 = scene._layerList;
			while(_g < _g1.length) {
				var layer = _g1[_g];
				++_g;
				if(!(!scene._layerDisplay.h.hasOwnProperty(layer) || scene._layerDisplay.h[layer])) {
					continue;
				}
				var _g2 = 0;
				var _g3 = scene._layers.h[layer];
				while(_g2 < _g3.length) {
					var e = _g3[_g2];
					++_g2;
					e.debugDraw(e.camera == null ? scene.camera : e.camera,this.selected.indexOf(e) > -1);
				}
			}
		}
		if(this.dragging) {
			var _this = haxepunk_debug_Console.drawContext;
			var color = 16777215;
			var alpha = 0.9;
			if(alpha == null) {
				alpha = 1;
			}
			if(color == null) {
				color = 16777215;
			}
			_this.color = color;
			_this.alpha = alpha;
			var camera = haxepunk_HXP.engine._scene.camera;
			haxepunk_debug_Console.drawContext.rect((this.selBox.x - camera.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),(this.selBox.y - camera.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this.selBox.width * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),this.selBox.height * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY));
		}
	}
	,setSelection: function() {
		var _rect = haxepunk_HXP.rect;
		this.selected.length = 0;
		var _g_head = haxepunk_HXP.engine._scene._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var entity = val;
			_rect.setTo(entity.get_x() - 4,entity.get_y() - 4,8,8);
			if(this.selBox.intersects(_rect)) {
				this.selected.push(entity);
			}
		}
	}
	,__class__: haxepunk_debug_Console
	,__properties__: $extend(haxepunk_Scene.prototype.__properties__,{set_paused:"set_paused",get_paused:"get_paused"})
});
var haxepunk_debug_DebugButton = function(img,mouseManager,onPress) {
	haxepunk_Entity.call(this);
	var region = haxepunk_assets_AssetCache.global.getAtlasRegion("graphics/debug/button.png",false);
	this.bg = new haxepunk_graphics_NineSlice(region,8,8,8,8);
	this.bg.set_alpha(0.5);
	this.addGraphic(this.bg);
	var region = haxepunk_assets_AssetCache.global.getAtlasRegion(img,false);
	this.icon = new haxepunk_graphics_Image(region);
	this.icon.smooth = true;
	this.addGraphic(this.icon);
	this.set_type(mouseManager._type);
	mouseManager.add(this,null,onPress,$bind(this,this.onEnter),$bind(this,this.onExit));
	this.set_width(this.set_height(64));
};
$hxClasses["haxepunk.debug.DebugButton"] = haxepunk_debug_DebugButton;
haxepunk_debug_DebugButton.__name__ = "haxepunk.debug.DebugButton";
haxepunk_debug_DebugButton.__super__ = haxepunk_Entity;
haxepunk_debug_DebugButton.prototype = $extend(haxepunk_Entity.prototype,{
	update: function() {
		haxepunk_Entity.prototype.update.call(this);
		this.bg.width = this.get_width();
		this.bg.height = this.get_height();
		this.icon.x = (this.get_width() - this.icon.get_width()) / 2;
		this.icon.y = (this.get_height() - this.icon.get_height()) / 2;
	}
	,onEnter: function() {
		this.bg.set_alpha(1);
	}
	,onExit: function() {
		this.bg.set_alpha(0.5);
	}
	,__class__: haxepunk_debug_DebugButton
});
var haxepunk_debug__$LayerList_LayerToggle = function(mouseManager) {
	haxepunk_Entity.call(this);
	this.label = new haxepunk_graphics_text_BitmapText("Layer",null,null,null,null,{ size : 12});
	this.label.set_alpha(0.75);
	this.addGraphic(this.label);
	this.set_width(220);
	this.set_height(18);
	this.set_type(mouseManager._type);
	mouseManager.add(this,null,$bind(this,this.onClick),$bind(this,this.onEnter),$bind(this,this.onExit),null,true);
};
$hxClasses["haxepunk.debug._LayerList.LayerToggle"] = haxepunk_debug__$LayerList_LayerToggle;
haxepunk_debug__$LayerList_LayerToggle.__name__ = "haxepunk.debug._LayerList.LayerToggle";
haxepunk_debug__$LayerList_LayerToggle.__super__ = haxepunk_Entity;
haxepunk_debug__$LayerList_LayerToggle.prototype = $extend(haxepunk_Entity.prototype,{
	update: function() {
		this.set_visible(this.set_collidable(this.layerNumber != null));
		if(this.layerNumber != null) {
			var entityCount = haxepunk_HXP.engine._scene._layers.h.hasOwnProperty(this.layerNumber) ? Lambda.count(haxepunk_HXP.engine._scene._layers.h[this.layerNumber]) : 0;
			var txt = "Layer " + this.layerNumber + " [" + entityCount + "]";
			if(this.label.text != txt) {
				this.label.set_text(txt);
			}
			var _this = haxepunk_HXP.engine._scene;
			var layer = this.layerNumber;
			this.label.set_color(!_this._layerDisplay.h.hasOwnProperty(layer) || _this._layerDisplay.h[layer] ? 65280 : 16711680);
		}
	}
	,onClick: function() {
		if(this.layerNumber != null) {
			var _this = haxepunk_HXP.engine._scene;
			var layer = this.layerNumber;
			var display = !(!_this._layerDisplay.h.hasOwnProperty(layer) || _this._layerDisplay.h[layer]);
			var show = display;
			if(show == null) {
				show = true;
			}
			haxepunk_HXP.engine._scene._layerDisplay.h[this.layerNumber] = show;
			haxepunk_HXP.engine._scene.updateLists();
		}
	}
	,onEnter: function() {
		this.label.set_alpha(1);
	}
	,onExit: function() {
		this.label.set_alpha(0.75);
	}
	,__class__: haxepunk_debug__$LayerList_LayerToggle
});
var haxepunk_debug_LayerList = function(mouseManager) {
	this.childY = 8;
	this.alpha = 0.5;
	haxepunk_EntityList.call(this);
	this.mouseManager = mouseManager;
	this.set_width(240);
	this.set_height(320);
	this.sceneLabel = new haxepunk_graphics_text_BitmapText("Scene",null,null,null,null,{ size : 12});
	this.sceneLabel.x = 10;
	this.sceneLabel.y = this.childY;
	var tmp = this;
	var tmp1 = tmp.childY;
	var _this = this.sceneLabel;
	if(_this._dirty) {
		_this.parseText();
	}
	tmp.childY = tmp1 + _this.textHeight;
	this.graphic = this.sceneLabel;
	this.set_type(mouseManager._type);
	mouseManager.add(this,null,null,$bind(this,this.onEnter),$bind(this,this.onExit));
};
$hxClasses["haxepunk.debug.LayerList"] = haxepunk_debug_LayerList;
haxepunk_debug_LayerList.__name__ = "haxepunk.debug.LayerList";
haxepunk_debug_LayerList.__super__ = haxepunk_EntityList;
haxepunk_debug_LayerList.prototype = $extend(haxepunk_EntityList.prototype,{
	update: function() {
		haxepunk_EntityList.prototype.update.call(this);
		var layerCount = haxepunk_HXP.engine._scene._layerList.length;
		while(this.entities.length < layerCount) {
			var toggle = new haxepunk_debug__$LayerList_LayerToggle(this.mouseManager);
			this.add(toggle);
			toggle.set_localY(this.childY);
			this.childY += toggle.get_height() + 4;
		}
		var _g = 0;
		var _g1 = this.entities.length;
		while(_g < _g1) {
			var i = _g++;
			this.entities[i].layerNumber = i >= haxepunk_HXP.engine._scene._layerList.length ? null : haxepunk_HXP.engine._scene._layerList[i];
			this.entities[i].update();
		}
		var c = js_Boot.getClass(haxepunk_HXP.engine._scene);
		var txt = c.__name__;
		if(this.sceneLabel.text != txt) {
			this.sceneLabel.set_text(txt);
		}
	}
	,render: function(camera) {
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		var color = 0;
		var alpha = this.alpha;
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.color = color;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.alpha = alpha;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.lineThickness = 4;
		haxepunk_utils_Draw.rectFilled((this.get_x() - 2) * fsx,this.get_y() * fsy,(this.get_width() + 4) * fsx,this.get_height() * fsy);
		haxepunk_EntityList.prototype.render.call(this,camera);
	}
	,onEnter: function() {
		this.alpha = 0.75;
	}
	,onExit: function() {
		this.alpha = 0.5;
	}
	,__class__: haxepunk_debug_LayerList
});
var haxepunk_debug_LogPanel = function(mouseManager) {
	this.logMessages = new haxepunk_utils_CircularBuffer(10);
	this.alpha = 0.5;
	this.expanded = false;
	haxepunk_Entity.call(this);
	this.label = new haxepunk_graphics_text_BitmapText("Mouse");
	this.label.x = 8;
	this.addGraphic(this.label);
	this.set_height(48);
	this.set_type(mouseManager._type);
	mouseManager.add(this,null,$bind(this,this.onClick),$bind(this,this.onEnter),$bind(this,this.onExit));
};
$hxClasses["haxepunk.debug.LogPanel"] = haxepunk_debug_LogPanel;
haxepunk_debug_LogPanel.__name__ = "haxepunk.debug.LogPanel";
haxepunk_debug_LogPanel.__super__ = haxepunk_Entity;
haxepunk_debug_LogPanel.prototype = $extend(haxepunk_Entity.prototype,{
	update: function() {
		haxepunk_Entity.prototype.update.call(this);
		var targetHeight = this.expanded ? 216 : 48;
		if(this.get_height() != targetHeight) {
			var change = 2048 * haxepunk_HXP.elapsed | 0;
			if(Math.abs(this.get_height() - targetHeight) < change) {
				this.set_height(targetHeight);
			} else {
				var _g = this;
				_g.set_height(_g.get_height() + change * (this.get_height() > targetHeight ? -1 : 1));
			}
		}
		var txt = "";
		var heightDiff = 168;
		var p = (this.get_height() - 48) / heightDiff;
		var lines = 1 + p * 9 | 0;
		var _this = this.logMessages;
		var i = this.logMessages.len - lines;
		if(i == null) {
			i = 0;
		}
		_this._iterator.i = i;
		var _g = _this._iterator;
		while(_g.i < _g.buffer.len) {
			var _this = _g.buffer;
			var i = _g.i++;
			var msg = i < 0 || i >= _this.len ? null : _this.data[(_this.pos + i) % _this.data.length];
			if(msg != null) {
				txt += msg + "\n";
			}
		}
		var _this = haxepunk_HXP.engine._scene;
		var x = haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this.x;
		var _this1 = _this.camera;
		var mouseLabel = "Mouse: " + (x / (_this1.scale * _this1.scaleX * haxepunk_HXP.screen.scaleX) + _this.camera.x | 0) + ",";
		var _this = haxepunk_HXP.engine._scene;
		var x = haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this.y;
		var _this1 = _this.camera;
		var mouseLabel1 = StringTools.rpad(mouseLabel + (x / (_this1.scale * _this1.scaleY * haxepunk_HXP.screen.scaleY) + _this.camera.y | 0)," ",20);
		txt += mouseLabel1 + "Camera: " + haxepunk_HXP.engine._scene.camera.x + "," + haxepunk_HXP.engine._scene.camera.y;
		if(this.label.text != txt) {
			this.label.set_text(txt);
		}
		var _this = this.label;
		var value = this.get_height();
		var _this1 = this.label;
		if(_this1._dirty) {
			_this1.parseText();
		}
		_this.y = value - _this1.textHeight - 4;
	}
	,render: function(camera) {
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		var color = 0;
		var alpha = this.alpha;
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.color = color;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.alpha = alpha;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.lineThickness = 4;
		haxepunk_utils_Draw.rectFilled(this.get_x() * fsx,this.get_y() * fsy,this.get_width() * fsx,this.get_height() * fsy);
		haxepunk_Entity.prototype.render.call(this,camera);
	}
	,log: function(data) {
		var _this = this.logMessages;
		_this.data[(_this.pos + _this.len) % _this.data.length] = Std.string(data);
		if(_this.len < _this.data.length) {
			++_this.len;
		} else {
			++_this.pos;
		}
	}
	,onClick: function() {
		this.expanded = !this.expanded;
	}
	,onEnter: function() {
		this.alpha = 0.75;
	}
	,onExit: function() {
		this.alpha = 0.5;
	}
	,__class__: haxepunk_debug_LogPanel
});
var haxepunk_debug_Metric = function(name,data,color,minScale) {
	this.points = [];
	this.color = 16777215;
	this.minScale = 0;
	haxepunk_Entity.call(this);
	this.metricName = name;
	this.data = data;
	this.color = color;
	this.minScale = minScale;
	this.label = new haxepunk_graphics_text_BitmapText(name,null,null,null,null,{ size : 12});
	this.label.x = this.label.y = 4;
	this.addGraphic(this.label);
	this.set_width(160);
	this.set_height(80);
	if(haxepunk_debug_Metric.drawContext == null) {
		haxepunk_debug_Metric.drawContext = new haxepunk_utils_DrawContext();
		haxepunk_debug_Metric.drawContext.lineThickness = 4;
	}
};
$hxClasses["haxepunk.debug.Metric"] = haxepunk_debug_Metric;
haxepunk_debug_Metric.__name__ = "haxepunk.debug.Metric";
haxepunk_debug_Metric.__super__ = haxepunk_Entity;
haxepunk_debug_Metric.prototype = $extend(haxepunk_Entity.prototype,{
	update: function() {
		var last;
		var _this = this.data;
		if((_this.len < 1 ? null : _this.data[(_this.pos + (_this.len - 1)) % _this.data.length]) == null) {
			last = 0;
		} else {
			var _this = this.data;
			last = ((_this.len < 1 ? null : _this.data[(_this.pos + (_this.len - 1)) % _this.data.length]) * Math.pow(10,2) | 0) / Math.pow(10,2);
		}
		this.label.set_text("" + this.metricName + ": " + last);
	}
	,render: function(camera) {
		var _gthis = this;
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		haxepunk_debug_Metric.drawContext.scene = this._scene;
		var _this = haxepunk_debug_Metric.drawContext;
		var this1 = this.color;
		var t = 0.9;
		if(t == null) {
			t = 1;
		}
		var t1 = t;
		if(t1 == null) {
			t1 = 1;
		}
		var color;
		if(t1 <= 0) {
			color = this1;
		} else if(t1 >= 1) {
			color = 0;
		} else {
			var a = this1 >>> 24 & 255;
			var r = this1 >>> 16 & 255;
			var g = this1 >>> 8 & 255;
			var b = this1 & 255;
			var dA = (0 >>> 24 & 255) - a;
			var dR = (0 >>> 16 & 255) - r;
			var dG = (0 >>> 8 & 255) - g;
			var dB = (0 & 255) - b;
			a += dA * t1 | 0;
			r += dR * t1 | 0;
			g += dG * t1 | 0;
			b += dB * t1 | 0;
			color = a << 24 | r << 16 | g << 8 | b;
		}
		var alpha = 0.8;
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		_this.color = color;
		_this.alpha = alpha;
		haxepunk_debug_Metric.drawContext.rectFilled(this.get_x() * fsx,this.get_y() * fsy,this.get_width() * fsx,this.get_height() * fsy);
		if(this.data.len > 1) {
			this.points.length = 0;
			var max = this.minScale;
			var _this = this.data;
			_this._iterator.i = 0;
			var _g = _this._iterator;
			while(_g.i < _g.buffer.len) {
				var _this = _g.buffer;
				var i = _g.i++;
				var value = i < 0 || i >= _this.len ? null : _this.data[(_this.pos + i) % _this.data.length];
				if(value > max) {
					max = value;
				}
			}
			var _g = 0;
			var _g1 = this.data.len;
			while(_g < _g1) {
				var i = _g++;
				var v = i / this.data.data.length;
				this.points.push((_gthis.get_x() + _gthis.get_width() * haxepunk_math_MathUtil.clamp(v,0,1)) * fsx);
				var _this = this.data;
				var v1 = i < 0 || i >= _this.len ? null : _this.data[(_this.pos + i) % _this.data.length];
				this.points.push((_gthis.get_y() + _gthis.get_height() * (1 - haxepunk_math_MathUtil.clamp(v1 / max,0,1))) * fsy);
			}
			var _this = haxepunk_debug_Metric.drawContext;
			var color = this.color;
			var alpha = 0.75;
			if(alpha == null) {
				alpha = 1;
			}
			if(color == null) {
				color = 16777215;
			}
			_this.color = color;
			_this.alpha = alpha;
			haxepunk_debug_Metric.drawContext.polyline(this.points,false);
		}
		haxepunk_Entity.prototype.render.call(this,camera);
	}
	,__class__: haxepunk_debug_Metric
});
var haxepunk_ds_Maybe = {};
haxepunk_ds_Maybe.exists = function(this1) {
	return this1 != null;
};
haxepunk_ds_Maybe.ensure = function(this1) {
	if(this1 != null) {
		return this1;
	} else {
		throw haxe_Exception.thrown("No value");
	}
};
haxepunk_ds_Maybe.or = function(this1,defaultValue) {
	if(this1 != null) {
		return this1;
	} else {
		return defaultValue;
	}
};
haxepunk_ds_Maybe.may = function(this1,fn) {
	if(this1 != null) {
		fn(this1);
	}
};
haxepunk_ds_Maybe.map = function(this1,fn,defaultValue) {
	if(this1 != null) {
		return fn(this1);
	} else {
		return defaultValue;
	}
};
haxepunk_ds_Maybe.mapMaybe = function(this1,fn) {
	if(this1 != null) {
		return fn(this1);
	} else {
		return null;
	}
};
var haxepunk_ds_OneOf = {};
haxepunk_ds_OneOf.fromL = function(val) {
	return haxe_ds_Either.Left(val);
};
haxepunk_ds_OneOf.fromR = function(val) {
	return haxe_ds_Either.Right(val);
};
haxepunk_ds_OneOf.toL = function(this1) {
	if(this1._hx_index == 0) {
		var val = this1.v;
		return val;
	} else {
		return null;
	}
};
haxepunk_ds_OneOf.toR = function(this1) {
	if(this1._hx_index == 1) {
		var val = this1.v;
		return val;
	} else {
		return null;
	}
};
var haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic = function(graphic) {
	this._camera = new haxepunk_Camera();
	this._temp = [];
	this._graphics = [];
	this.count = 0;
	this._graphics = [];
	this._temp = [];
	this._camera = new haxepunk_Camera();
	haxepunk_Graphic.call(this);
	if(graphic != null) {
		var _g = 0;
		while(_g < graphic.length) {
			var g = graphic[_g];
			++_g;
			this.add(g);
		}
	}
};
$hxClasses["haxepunk.graphics.BaseGraphicList_haxepunk_Graphic"] = haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic;
haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic.__name__ = "haxepunk.graphics.BaseGraphicList_haxepunk_Graphic";
haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic.__super__ = haxepunk_Graphic;
haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic.prototype = $extend(haxepunk_Graphic.prototype,{
	set_alpha: function(v) {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var graphic = _g1[_g];
			++_g;
			graphic.set_alpha(v);
		}
		return haxepunk_Graphic.prototype.set_alpha.call(this,v);
	}
	,set_color: function(v) {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var graphic = _g1[_g];
			++_g;
			graphic.set_color(v);
		}
		return haxepunk_Graphic.prototype.set_color.call(this,v);
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g != null && g.active) {
				var _g2 = 0;
				var _g3 = g.preUpdate.callbacks;
				while(_g2 < _g3.length) {
					var callback = _g3[_g2];
					++_g2;
					callback();
				}
				g.update();
				var _g4 = 0;
				var _g5 = g.postUpdate.callbacks;
				while(_g4 < _g5.length) {
					var callback1 = _g5[_g4];
					++_g4;
					callback1();
				}
			}
		}
	}
	,get: function(i) {
		if(i >= this._graphics.length || i < 0) {
			throw haxe_Exception.thrown("Index out of bounds.");
		} else {
			return this._graphics[i];
		}
	}
	,render: function(point,camera) {
		var cx = camera.x;
		var cy = camera.y;
		camera.x = cx * this.scrollX - haxepunk_HXP.width / (camera.scale * camera.scaleX) * 0;
		camera.y = cy * this.scrollY - haxepunk_HXP.height / (camera.scale * camera.scaleY) * 0;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g != null && g._visible) {
				if(g.relative) {
					var x = point.x;
					var x1 = this.x;
					var x2 = this.originX;
					this._point.x = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x1 + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x2 + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2);
					var y = point.y;
					var y1 = this.y;
					var y2 = this.originY;
					this._point.y = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y1 + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y2 + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2);
				} else {
					this._point.x = this._point.y = 0;
				}
				g.doRender(this._point,camera);
			}
		}
		camera.x = cx - haxepunk_HXP.width / (camera.scale * camera.scaleX) * 0;
		camera.y = cy - haxepunk_HXP.height / (camera.scale * camera.scaleY) * 0;
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g != null) {
				g.destroy();
			}
		}
	}
	,add: function(graphic) {
		if(graphic == null) {
			return graphic;
		}
		this._graphics[this.count++] = graphic;
		if(!this.active) {
			this.active = graphic.active;
		}
		return graphic;
	}
	,remove: function(graphic) {
		if(this._graphics.indexOf(graphic) < 0) {
			return graphic;
		}
		this._temp.length = 0;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g == graphic) {
				this.count--;
			} else {
				this._temp[this._temp.length] = g;
			}
		}
		var temp = this._graphics;
		this._graphics = this._temp;
		this._temp = temp;
		this.updateCheck();
		return graphic;
	}
	,removeAt: function(index) {
		if(index == null) {
			index = 0;
		}
		if(this._graphics.length == 0) {
			return;
		}
		index %= this._graphics.length;
		this.remove(this._graphics[index % this._graphics.length]);
		this.updateCheck();
	}
	,removeAll: function() {
		this._graphics.length = 0;
		this._temp.length = 0;
		this.count = 0;
		this.active = false;
	}
	,get_children: function() {
		return this._graphics;
	}
	,updateCheck: function() {
		this.active = false;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g != null && g.active) {
				this.active = true;
				return;
			}
		}
	}
	,__class__: haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic
	,__properties__: $extend(haxepunk_Graphic.prototype.__properties__,{get_children:"get_children"})
});
var haxepunk_graphics_BaseGraphicList = function(graphic) {
	this._camera = new haxepunk_Camera();
	this._temp = [];
	this._graphics = [];
	this.count = 0;
	this._graphics = [];
	this._temp = [];
	this._camera = new haxepunk_Camera();
	haxepunk_Graphic.call(this);
	if(graphic != null) {
		var _g = 0;
		while(_g < graphic.length) {
			var g = graphic[_g];
			++_g;
			this.add(g);
		}
	}
};
$hxClasses["haxepunk.graphics.BaseGraphicList"] = haxepunk_graphics_BaseGraphicList;
haxepunk_graphics_BaseGraphicList.__name__ = "haxepunk.graphics.BaseGraphicList";
haxepunk_graphics_BaseGraphicList.__super__ = haxepunk_Graphic;
haxepunk_graphics_BaseGraphicList.prototype = $extend(haxepunk_Graphic.prototype,{
	set_alpha: function(v) {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var graphic = _g1[_g];
			++_g;
			graphic.set_alpha(v);
		}
		return haxepunk_Graphic.prototype.set_alpha.call(this,v);
	}
	,set_color: function(v) {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var graphic = _g1[_g];
			++_g;
			graphic.set_color(v);
		}
		return haxepunk_Graphic.prototype.set_color.call(this,v);
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g != null && g.active) {
				var _g2 = 0;
				var _g3 = g.preUpdate.callbacks;
				while(_g2 < _g3.length) {
					var callback = _g3[_g2];
					++_g2;
					callback();
				}
				g.update();
				var _g4 = 0;
				var _g5 = g.postUpdate.callbacks;
				while(_g4 < _g5.length) {
					var callback1 = _g5[_g4];
					++_g4;
					callback1();
				}
			}
		}
	}
	,get: function(i) {
		if(i >= this._graphics.length || i < 0) {
			throw haxe_Exception.thrown("Index out of bounds.");
		} else {
			return this._graphics[i];
		}
	}
	,render: function(point,camera) {
		var cx = camera.x;
		var cy = camera.y;
		camera.x = cx * this.scrollX - haxepunk_HXP.width / (camera.scale * camera.scaleX) * 0;
		camera.y = cy * this.scrollY - haxepunk_HXP.height / (camera.scale * camera.scaleY) * 0;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g != null && g._visible) {
				if(g.relative) {
					var x = point.x;
					var x1 = this.x;
					var x2 = this.originX;
					this._point.x = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x1 + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x2 + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2);
					var y = point.y;
					var y1 = this.y;
					var y2 = this.originY;
					this._point.y = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y1 + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y2 + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2);
				} else {
					this._point.x = this._point.y = 0;
				}
				g.doRender(this._point,camera);
			}
		}
		camera.x = cx - haxepunk_HXP.width / (camera.scale * camera.scaleX) * 0;
		camera.y = cy - haxepunk_HXP.height / (camera.scale * camera.scaleY) * 0;
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g != null) {
				g.destroy();
			}
		}
	}
	,add: function(graphic) {
		if(graphic == null) {
			return graphic;
		}
		this._graphics[this.count++] = graphic;
		if(!this.active) {
			this.active = graphic.active;
		}
		return graphic;
	}
	,remove: function(graphic) {
		if(this._graphics.indexOf(graphic) < 0) {
			return graphic;
		}
		this._temp.length = 0;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g == graphic) {
				this.count--;
			} else {
				this._temp[this._temp.length] = g;
			}
		}
		var temp = this._graphics;
		this._graphics = this._temp;
		this._temp = temp;
		this.updateCheck();
		return graphic;
	}
	,removeAt: function(index) {
		if(index == null) {
			index = 0;
		}
		if(this._graphics.length == 0) {
			return;
		}
		index %= this._graphics.length;
		this.remove(this._graphics[index % this._graphics.length]);
		this.updateCheck();
	}
	,removeAll: function() {
		this._graphics.length = 0;
		this._temp.length = 0;
		this.count = 0;
		this.active = false;
	}
	,get_children: function() {
		return this._graphics;
	}
	,updateCheck: function() {
		this.active = false;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g != null && g.active) {
				this.active = true;
				return;
			}
		}
	}
	,__class__: haxepunk_graphics_BaseGraphicList
	,__properties__: $extend(haxepunk_Graphic.prototype.__properties__,{get_children:"get_children"})
});
var haxepunk_graphics_Image = function(source,clipRect) {
	this.flipY = false;
	this.flipX = false;
	haxepunk_Graphic.call(this);
	this.angle = 0;
	this.scale = this.scaleX = this.scaleY = 1;
	this.originX = this.originY = 0;
	this.set_alpha(1);
	this.set_color(16777215);
	this._sourceRect = new haxepunk_math_Rectangle(0,0,1,1);
	if(source != null) {
		this._region = source;
		this._sourceRect.width = this._region.get_width();
		this._sourceRect.height = this._region.get_height();
	}
	if(clipRect != null) {
		if(clipRect.width == 0) {
			clipRect.width = this._sourceRect.width;
		}
		if(clipRect.height == 0) {
			clipRect.height = this._sourceRect.height;
		}
		this._region = this._region.clip(clipRect);
		this._sourceRect = clipRect;
	}
};
$hxClasses["haxepunk.graphics.Image"] = haxepunk_graphics_Image;
haxepunk_graphics_Image.__name__ = "haxepunk.graphics.Image";
haxepunk_graphics_Image.createRect = function(width,height,color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(width == 0 || height == 0) {
		throw haxe_Exception.thrown("Illegal rect, sizes cannot be 0.");
	}
	var transparent = true;
	var color1 = -1;
	if(color1 == null) {
		color1 = 0;
	}
	if(transparent == null) {
		transparent = false;
	}
	var source = new openfl_display_BitmapData(width,height,transparent,color1);
	var this1 = new haxepunk_graphics_atlas_AtlasData(source);
	var image = new haxepunk_graphics_Image(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1));
	image.set_color(color);
	image.set_alpha(alpha);
	return image;
};
haxepunk_graphics_Image.createCircle = function(radius,color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(radius == 0) {
		throw haxe_Exception.thrown("Illegal circle, radius cannot be 0.");
	}
	var transparent = true;
	var color1 = 0;
	if(color1 == null) {
		color1 = 0;
	}
	if(transparent == null) {
		transparent = false;
	}
	var texture = new openfl_display_BitmapData(radius * 2,radius * 2,transparent,color1);
	haxepunk_graphics_hardware_Texture.drawCircle(texture,radius,radius,radius);
	var this1 = new haxepunk_graphics_atlas_AtlasData(texture);
	var image = new haxepunk_graphics_Image(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1));
	image.set_color(color);
	image.set_alpha(alpha);
	return image;
};
haxepunk_graphics_Image.__super__ = haxepunk_Graphic;
haxepunk_graphics_Image.prototype = $extend(haxepunk_Graphic.prototype,{
	get_flipped: function() {
		return this.flipX;
	}
	,set_flipped: function(v) {
		return this.flipX = v;
	}
	,init: function() {
		this.angle = 0;
		this.scale = this.scaleX = this.scaleY = 1;
		this.originX = this.originY = 0;
		this.set_alpha(1);
		this.set_color(16777215);
	}
	,render: function(point,camera) {
		var sx = this.scale * this.scaleX * (this.flipX ? -1 : 1);
		var sy = this.scale * this.scaleY * (this.flipY ? -1 : 1);
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		var x = this.x;
		var x1 = this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x;
		var y = this.y;
		var y1 = this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y;
		if(this.flipX) {
			var x = (this.originX * 2 - this._region.get_width()) * sx;
			x1 += this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x;
		}
		if(this.flipY) {
			var y = (this.originY * 2 - this._region.get_height()) * sy;
			y1 += this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y;
		}
		if(this.angle == 0) {
			var x = point.x;
			var x2 = this.originX * sx;
			var x3 = camera.x * this.scrollX;
			this._point.x = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x2 + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x3 + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x3) + x1;
			var y = point.y;
			var y2 = this.originY * sy;
			var y3 = camera.y * this.scrollY;
			this._point.y = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y2 + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y3 + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y3) + y1;
			var x = this._point.x;
			var y = this._point.y;
			var clipRect;
			if(this.clipRect != null) {
				if(this._screenClipRect == null) {
					this._screenClipRect = new haxepunk_math_Rectangle();
				}
				this._screenClipRect.setTo((x + this.clipRect.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),(y + this.clipRect.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this.clipRect.width * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),this.clipRect.height * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY));
				clipRect = this._screenClipRect;
			} else {
				clipRect = null;
			}
			this._region.draw(this._point.x * fsx,this._point.y * fsy,sx * fsx,sy * fsy,this.angle,this.color,this.alpha,this.shader,this.smooth,this.blend,clipRect,this.flexibleLayer);
		} else {
			var x = point.x;
			var x2 = this.originX;
			var x3 = camera.x * this.scrollX;
			this._point.x = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x2 + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x3 + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x3) + x1;
			var y = point.y;
			var y2 = this.originY;
			var y3 = camera.y * this.scrollY;
			this._point.y = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y2 + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y3 + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y3) + y1;
			var angle = this.angle * (Math.PI / -180);
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			var a = sx * cos * fsx;
			var b = sx * sin * fsy;
			var c = -sy * sin * fsx;
			var d = sy * cos * fsy;
			var tx = -this.originX * sx * cos + this.originY * sy * sin + this.originX + this._point.x;
			var ty = -this.originX * sx * sin - this.originY * sy * cos + this.originY + this._point.y;
			var clipRect;
			if(this.clipRect != null) {
				if(this._screenClipRect == null) {
					this._screenClipRect = new haxepunk_math_Rectangle();
				}
				this._screenClipRect.setTo((tx + this.clipRect.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),(ty + this.clipRect.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this.clipRect.width * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),this.clipRect.height * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY));
				clipRect = this._screenClipRect;
			} else {
				clipRect = null;
			}
			this._region.drawMatrix(tx * fsx,ty * fsy,a,b,c,d,this.color,this.alpha,this.shader,this.smooth,this.blend,clipRect,this.flexibleLayer);
		}
	}
	,centerOrigin: function() {
		this.originX = this.get_width() / 2 | 0;
		this.originY = this.get_height() / 2 | 0;
	}
	,centerOO: function() {
		this.x += this.originX;
		this.y += this.originY;
		this.centerOrigin();
		this.x -= this.originX;
		this.y -= this.originY;
	}
	,get_width: function() {
		return this._region.get_width();
	}
	,get_height: function() {
		return this._region.get_height();
	}
	,get_scaledWidth: function() {
		return this.get_width() * this.scaleX * this.scale;
	}
	,set_scaledWidth: function(w) {
		return this.scaleX = w / this.scale / this.get_width();
	}
	,get_scaledHeight: function() {
		return this.get_height() * this.scaleY * this.scale;
	}
	,set_scaledHeight: function(h) {
		return this.scaleY = h / this.scale / this.get_height();
	}
	,toString: function() {
		return "[" + this._class + " " + this.get_width() + " x " + this.get_height() + "]";
	}
	,__class__: haxepunk_graphics_Image
	,__properties__: $extend(haxepunk_Graphic.prototype.__properties__,{set_scaledHeight:"set_scaledHeight",get_scaledHeight:"get_scaledHeight",set_scaledWidth:"set_scaledWidth",get_scaledWidth:"get_scaledWidth",get_height:"get_height",get_width:"get_width",set_flipped:"set_flipped",get_flipped:"get_flipped"})
});
var haxepunk_graphics_NineSlice = function(source,leftWidth,rightWidth,topHeight,bottomHeight) {
	if(bottomHeight == null) {
		bottomHeight = 0;
	}
	if(topHeight == null) {
		topHeight = 0;
	}
	if(rightWidth == null) {
		rightWidth = 0;
	}
	if(leftWidth == null) {
		leftWidth = 0;
	}
	this._clipRect = new haxepunk_math_Rectangle();
	this._sliceRect = new haxepunk_math_Rectangle();
	this.drawCenter = true;
	this.scaleBorder = false;
	this.source = source;
	var w = source.get_width();
	var h = source.get_height();
	var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(0,0,leftWidth,topHeight));
	segment.originX = segment.originY = 0;
	this.topL = segment;
	var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(leftWidth,0,w - leftWidth - rightWidth,topHeight));
	segment.originX = segment.originY = 0;
	this.topC = segment;
	var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(w - rightWidth,0,rightWidth,topHeight));
	segment.originX = segment.originY = 0;
	this.topR = segment;
	var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(0,topHeight,leftWidth,h - topHeight - bottomHeight));
	segment.originX = segment.originY = 0;
	this.medL = segment;
	var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(leftWidth,topHeight,w - leftWidth - rightWidth,h - topHeight - bottomHeight));
	segment.originX = segment.originY = 0;
	this.medC = segment;
	var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(w - rightWidth,topHeight,rightWidth,h - topHeight - bottomHeight));
	segment.originX = segment.originY = 0;
	this.medR = segment;
	var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(0,h - bottomHeight,leftWidth,bottomHeight));
	segment.originX = segment.originY = 0;
	this.botL = segment;
	var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(leftWidth,h - bottomHeight,w - leftWidth - rightWidth,bottomHeight));
	segment.originX = segment.originY = 0;
	this.botC = segment;
	var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(w - rightWidth,h - bottomHeight,rightWidth,bottomHeight));
	segment.originX = segment.originY = 0;
	this.botR = segment;
	this._sliceRect.setTo(leftWidth,topHeight,w - rightWidth,h - bottomHeight);
	haxepunk_Graphic.call(this);
	this.width = w;
	this.height = h;
};
$hxClasses["haxepunk.graphics.NineSlice"] = haxepunk_graphics_NineSlice;
haxepunk_graphics_NineSlice.__name__ = "haxepunk.graphics.NineSlice";
haxepunk_graphics_NineSlice.__super__ = haxepunk_Graphic;
haxepunk_graphics_NineSlice.prototype = $extend(haxepunk_Graphic.prototype,{
	set_color: function(v) {
		return this.topL.set_color(this.topC.set_color(this.topR.set_color(this.medL.set_color(this.medC.set_color(this.medR.set_color(this.botL.set_color(this.botC.set_color(this.botR.set_color(this.color = v)))))))));
	}
	,set_alpha: function(v) {
		return this.topL.set_alpha(this.topC.set_alpha(this.topR.set_alpha(this.medL.set_alpha(this.medC.set_alpha(this.medR.set_alpha(this.botL.set_alpha(this.botC.set_alpha(this.botR.set_alpha(this.alpha = v)))))))));
	}
	,centerOrigin: function() {
		this.originX = this.width * 0.5;
		this.originY = this.height * 0.5;
	}
	,getSegment: function(source,x,y,width,height) {
		var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(x,y,width,height));
		segment.originX = segment.originY = 0;
		return segment;
	}
	,render: function(point,camera) {
		var _gthis = this;
		var leftWidth;
		var rightWidth;
		var topHeight;
		var bottomHeight;
		if(this.scaleBorder) {
			var x = this._sliceRect.x;
			leftWidth = this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x;
			var x = this.source.get_width() - this._sliceRect.width;
			rightWidth = this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x;
			var y = this._sliceRect.y;
			topHeight = this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y;
			var y = this.source.get_height() - this._sliceRect.height;
			bottomHeight = this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y;
		} else {
			var x = this._sliceRect.x;
			leftWidth = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX);
			var x = this.source.get_width() - this._sliceRect.width;
			rightWidth = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX);
			var y = this._sliceRect.y;
			topHeight = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
			var y = this.source.get_height() - this._sliceRect.height;
			bottomHeight = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
		}
		var x = this.width;
		var centerWidth = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - leftWidth - rightWidth;
		var y = this.height;
		var centerHeight = (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - topHeight - bottomHeight;
		var leftX = 0;
		var centerX = leftWidth;
		var rightX = leftWidth + centerWidth;
		var topY = 0;
		var centerY = topHeight;
		var bottomY = topHeight + centerHeight;
		var segment = this.topL;
		if(segment != null && segment._visible) {
			var x = _gthis.x;
			segment.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + leftX - _gthis.originX;
			var y = _gthis.y;
			segment.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + topY - _gthis.originY;
			var x = leftX + leftWidth;
			segment.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((leftX + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : leftX)) / segment.get_width();
			var y = topY + topHeight;
			segment.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((topY + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : topY)) / segment.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - leftX,_gthis.clipRect.y - topY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment.clipRect = _gthis._clipRect;
			} else {
				segment.clipRect = null;
			}
			segment.shader = _gthis.shader;
			segment.smooth = _gthis.smooth;
			segment.render(point,camera);
		}
		var segment = this.topC;
		if(segment != null && segment._visible) {
			var x = _gthis.x;
			segment.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + centerX - _gthis.originX;
			var y = _gthis.y;
			segment.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + topY - _gthis.originY;
			var x = centerX + centerWidth;
			segment.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((centerX + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : centerX)) / segment.get_width();
			var y = topY + topHeight;
			segment.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((topY + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : topY)) / segment.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - centerX,_gthis.clipRect.y - topY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment.clipRect = _gthis._clipRect;
			} else {
				segment.clipRect = null;
			}
			segment.shader = _gthis.shader;
			segment.smooth = _gthis.smooth;
			segment.render(point,camera);
		}
		var segment = this.topR;
		if(segment != null && segment._visible) {
			var x = _gthis.x;
			segment.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + rightX - _gthis.originX;
			var y = _gthis.y;
			segment.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + topY - _gthis.originY;
			var x = rightX + rightWidth;
			segment.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((rightX + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : rightX)) / segment.get_width();
			var y = topY + topHeight;
			segment.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((topY + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : topY)) / segment.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - rightX,_gthis.clipRect.y - topY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment.clipRect = _gthis._clipRect;
			} else {
				segment.clipRect = null;
			}
			segment.shader = _gthis.shader;
			segment.smooth = _gthis.smooth;
			segment.render(point,camera);
		}
		var segment = this.medL;
		if(segment != null && segment._visible) {
			var x = _gthis.x;
			segment.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + leftX - _gthis.originX;
			var y = _gthis.y;
			segment.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + centerY - _gthis.originY;
			var x = leftX + leftWidth;
			segment.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((leftX + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : leftX)) / segment.get_width();
			var y = centerY + centerHeight;
			segment.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((centerY + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : centerY)) / segment.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - leftX,_gthis.clipRect.y - centerY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment.clipRect = _gthis._clipRect;
			} else {
				segment.clipRect = null;
			}
			segment.shader = _gthis.shader;
			segment.smooth = _gthis.smooth;
			segment.render(point,camera);
		}
		if(this.drawCenter) {
			var segment = this.medC;
			if(segment != null && segment._visible) {
				var x = _gthis.x;
				segment.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + centerX - _gthis.originX;
				var y = _gthis.y;
				segment.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + centerY - _gthis.originY;
				var x = centerX + centerWidth;
				segment.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((centerX + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : centerX)) / segment.get_width();
				var y = centerY + centerHeight;
				segment.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((centerY + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : centerY)) / segment.get_height();
				if(_gthis.clipRect != null) {
					_gthis._clipRect.setTo(_gthis.clipRect.x - centerX,_gthis.clipRect.y - centerY,_gthis.clipRect.width,_gthis.clipRect.height);
					segment.clipRect = _gthis._clipRect;
				} else {
					segment.clipRect = null;
				}
				segment.shader = _gthis.shader;
				segment.smooth = _gthis.smooth;
				segment.render(point,camera);
			}
		}
		var segment = this.medR;
		if(segment != null && segment._visible) {
			var x = _gthis.x;
			segment.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + rightX - _gthis.originX;
			var y = _gthis.y;
			segment.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + centerY - _gthis.originY;
			var x = rightX + rightWidth;
			segment.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((rightX + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : rightX)) / segment.get_width();
			var y = centerY + centerHeight;
			segment.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((centerY + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : centerY)) / segment.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - rightX,_gthis.clipRect.y - centerY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment.clipRect = _gthis._clipRect;
			} else {
				segment.clipRect = null;
			}
			segment.shader = _gthis.shader;
			segment.smooth = _gthis.smooth;
			segment.render(point,camera);
		}
		var segment = this.botL;
		if(segment != null && segment._visible) {
			var x = _gthis.x;
			segment.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + leftX - _gthis.originX;
			var y = _gthis.y;
			segment.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + bottomY - _gthis.originY;
			var x = leftX + leftWidth;
			segment.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((leftX + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : leftX)) / segment.get_width();
			var y = bottomY + bottomHeight;
			segment.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((bottomY + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : bottomY)) / segment.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - leftX,_gthis.clipRect.y - bottomY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment.clipRect = _gthis._clipRect;
			} else {
				segment.clipRect = null;
			}
			segment.shader = _gthis.shader;
			segment.smooth = _gthis.smooth;
			segment.render(point,camera);
		}
		var segment = this.botC;
		if(segment != null && segment._visible) {
			var x = _gthis.x;
			segment.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + centerX - _gthis.originX;
			var y = _gthis.y;
			segment.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + bottomY - _gthis.originY;
			var x = centerX + centerWidth;
			segment.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((centerX + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : centerX)) / segment.get_width();
			var y = bottomY + bottomHeight;
			segment.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((bottomY + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : bottomY)) / segment.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - centerX,_gthis.clipRect.y - bottomY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment.clipRect = _gthis._clipRect;
			} else {
				segment.clipRect = null;
			}
			segment.shader = _gthis.shader;
			segment.smooth = _gthis.smooth;
			segment.render(point,camera);
		}
		var segment = this.botR;
		if(segment != null && segment._visible) {
			var x = _gthis.x;
			segment.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + rightX - _gthis.originX;
			var y = _gthis.y;
			segment.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + bottomY - _gthis.originY;
			var x = rightX + rightWidth;
			segment.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((rightX + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : rightX)) / segment.get_width();
			var y = bottomY + bottomHeight;
			segment.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor((bottomY + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : bottomY)) / segment.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - rightX,_gthis.clipRect.y - bottomY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment.clipRect = _gthis._clipRect;
			} else {
				segment.clipRect = null;
			}
			segment.shader = _gthis.shader;
			segment.smooth = _gthis.smooth;
			segment.render(point,camera);
		}
	}
	,__class__: haxepunk_graphics_NineSlice
});
var haxepunk_graphics_Animation = function(parent,frames,frameRate,loop,name) {
	if(name == null) {
		name = "";
	}
	this.onComplete = new haxepunk_Signal0();
	this.name = name;
	this.frames = frames;
	this.frameRate = frameRate == 0 ? haxepunk_HXP.assignedFrameRate : frameRate;
	this.frameCount = this.frames.length;
	this.loop = loop;
	this.name = name;
};
$hxClasses["haxepunk.graphics.Animation"] = haxepunk_graphics_Animation;
haxepunk_graphics_Animation.__name__ = "haxepunk.graphics.Animation";
haxepunk_graphics_Animation.prototype = {
	play: function(reset,reverse) {
		if(reverse == null) {
			reverse = false;
		}
		if(reset == null) {
			reset = false;
		}
		this.parent.playAnimation(this,reset,reverse);
	}
	,getFirstFrame: function(reverse) {
		if(reverse) {
			return 0;
		} else {
			return this.frameCount - 1;
		}
	}
	,getLastFrame: function(reverse) {
		if(reverse) {
			return this.frameCount - 1;
		} else {
			return 0;
		}
	}
	,__class__: haxepunk_graphics_Animation
};
var haxepunk_graphics_Spritemap = function(source,frameWidth,frameHeight) {
	if(frameHeight == null) {
		frameHeight = 0;
	}
	if(frameWidth == null) {
		frameWidth = 0;
	}
	this._timer = 0;
	this.frame = -1;
	this.reverse = false;
	this.rate = 1;
	this.onAnimationComplete = new haxepunk_Signal1();
	this.complete = true;
	this._anims = new haxe_ds_StringMap();
	haxepunk_graphics_Image.call(this);
	this._atlas = source;
	if(frameWidth > this._atlas.get_width() || frameHeight > this._atlas.get_height()) {
		throw haxe_Exception.thrown("Frame width and height can't be bigger than the source image dimension.");
	}
	this._atlas.prepare(frameWidth == 0 ? this._atlas.get_width() | 0 : frameWidth,frameHeight == 0 ? this._atlas.get_height() | 0 : frameHeight);
	this._columns = Math.ceil(this._atlas.get_width() / frameWidth);
	this._rows = Math.ceil(this._atlas.get_height() / frameHeight);
	this._frameCount = this._columns * this._rows;
	this.set_frame(0);
	this.active = true;
};
$hxClasses["haxepunk.graphics.Spritemap"] = haxepunk_graphics_Spritemap;
haxepunk_graphics_Spritemap.__name__ = "haxepunk.graphics.Spritemap";
haxepunk_graphics_Spritemap.__super__ = haxepunk_graphics_Image;
haxepunk_graphics_Spritemap.prototype = $extend(haxepunk_graphics_Image.prototype,{
	get_frameCount: function() {
		return this._frameCount;
	}
	,get_columns: function() {
		return this._columns;
	}
	,get_rows: function() {
		return this._rows;
	}
	,update: function() {
		var _gthis = this;
		var this1 = this.currentAnimation;
		if(this1 != null) {
			var original = _gthis.currentAnimation;
			if(!_gthis.complete) {
				_gthis._timer += haxepunk_HXP.elapsed * this1.frameRate * _gthis.rate;
				if(!(_gthis._timer < 1)) {
					while(_gthis._timer >= 1) {
						_gthis._timer--;
						_gthis._index += _gthis.reverse ? -1 : 1;
						if(_gthis._index < 0 || _gthis._index >= this1.frameCount) {
							if(this1.loop) {
								_gthis._index = _gthis.reverse ? this1.frameCount - 1 : 0;
								var _g = 0;
								var _g1 = this1.onComplete.callbacks;
								while(_g < _g1.length) {
									var callback = _g1[_g];
									++_g;
									callback();
								}
								var _g2 = 0;
								var _g3 = _gthis.onAnimationComplete.callbacks;
								while(_g2 < _g3.length) {
									var callback1 = _g3[_g2];
									++_g2;
									callback1(this1);
								}
							} else {
								_gthis._index = _gthis.reverse ? 0 : this1.frameCount - 1;
								var _g4 = 0;
								var _g5 = this1.onComplete.callbacks;
								while(_g4 < _g5.length) {
									var callback2 = _g5[_g4];
									++_g4;
									callback2();
								}
								_gthis.complete = true;
								var _g6 = 0;
								var _g7 = _gthis.onAnimationComplete.callbacks;
								while(_g6 < _g7.length) {
									var callback3 = _g7[_g6];
									++_g6;
									callback3(this1);
								}
								break;
							}
						}
					}
					if(!_gthis.complete && _gthis.currentAnimation == original) {
						_gthis.set_frame(this1.frames[_gthis._index] | 0);
					}
				}
			}
		}
	}
	,add: function(name,frames,frameRate,loop) {
		if(loop == null) {
			loop = true;
		}
		if(frameRate == null) {
			frameRate = 0;
		}
		if(Object.prototype.hasOwnProperty.call(this._anims.h,name)) {
			throw haxe_Exception.thrown("Cannot have multiple animations with the same name");
		}
		var anim = new haxepunk_graphics_Animation(this,frames,frameRate,loop,name);
		this._anims.h[name] = anim;
		return anim;
	}
	,exists: function(name) {
		return Object.prototype.hasOwnProperty.call(this._anims.h,name);
	}
	,remove: function(name) {
		if(!Object.prototype.hasOwnProperty.call(this._anims.h,name)) {
			return false;
		}
		var _this = this._anims;
		if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
			delete(_this.h[name]);
		}
		return true;
	}
	,play: function(name,reset,reverse) {
		if(reverse == null) {
			reverse = false;
		}
		if(reset == null) {
			reset = false;
		}
		if(name == null) {
			name = "";
		}
		if(!Object.prototype.hasOwnProperty.call(this._anims.h,name)) {
			this.stop(reset);
			return null;
		}
		return this.playAnimation(this._anims.h[name],reset,reverse);
	}
	,playFrames: function(frames,frameRate,loop,reset,reverse) {
		if(reverse == null) {
			reverse = false;
		}
		if(reset == null) {
			reset = false;
		}
		if(loop == null) {
			loop = true;
		}
		if(frameRate == null) {
			frameRate = 0;
		}
		if(frames == null || frames.length == 0) {
			this.stop(reset);
			return null;
		}
		return this.playAnimation(new haxepunk_graphics_Animation(this,frames,frameRate,loop),reset,reverse);
	}
	,playAnimation: function(anim,reset,reverse) {
		if(reverse == null) {
			reverse = false;
		}
		if(reset == null) {
			reset = false;
		}
		reset = reset || this.currentAnimation != anim;
		this.currentAnimation = anim;
		this.reverse = reverse;
		if(reset) {
			this.restart();
		}
		return anim;
	}
	,restart: function() {
		var _gthis = this;
		this._timer = 0;
		var this1 = this.currentAnimation;
		if(this1 != null) {
			_gthis._index = _gthis.reverse ? this1.frameCount - 1 : 0;
			_gthis.set_frame(this1.frames[_gthis._index]);
		}
		this.complete = false;
	}
	,stop: function(reset) {
		if(reset == null) {
			reset = false;
		}
		if(reset) {
			var this1 = this.currentAnimation;
			this.set_frame(this._index = this1 != null ? this.reverse ? this1.frameCount - 1 : 0 : 0);
		}
		this.currentAnimation = null;
		this.complete = true;
	}
	,randFrame: function() {
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		this.set_frame(haxepunk_math_Random._seed / 2147483647 * this._atlas._regions.length | 0);
	}
	,setAnimFrame: function(name,index) {
		if(Object.prototype.hasOwnProperty.call(this._anims.h,name)) {
			var anim = this._anims.h[name];
			index = (Math.abs(index) | 0) % anim.frameCount;
			this.set_frame(anim.frames[index]);
		}
	}
	,getFrameColRow: function(column,row) {
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		return row % this._rows * this._columns + column % this._columns;
	}
	,setFrameColRow: function(column,row) {
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		this.currentAnimation = null;
		var column1 = column;
		var row1 = row;
		if(row1 == null) {
			row1 = 0;
		}
		if(column1 == null) {
			column1 = 0;
		}
		var frameFromPos = row1 % this._rows * this._columns + column1 % this._columns;
		if(frameFromPos == this.frame) {
			return;
		}
		this.set_frame(frameFromPos);
	}
	,set_frame: function(value) {
		value = (Math.abs(value) | 0) % this._atlas._regions.length;
		if(this.frame != value) {
			this._region = this._atlas.getRegion(value);
			this._sourceRect.width = this._region.get_width();
			this._sourceRect.height = this._region.get_height();
		}
		return this.frame = value;
	}
	,get_index: function() {
		if(this.currentAnimation != null) {
			return this._index;
		} else {
			return 0;
		}
	}
	,set_index: function(value) {
		var _gthis = this;
		var this1 = this.currentAnimation;
		if(this1 != null) {
			value %= this1.frameCount;
			if(_gthis._index == value) {
				return _gthis._index;
			} else {
				_gthis.set_frame(this1.frames[value]);
				return _gthis._index = value;
			}
		} else {
			return 0;
		}
	}
	,__class__: haxepunk_graphics_Spritemap
	,__properties__: $extend(haxepunk_graphics_Image.prototype.__properties__,{set_index:"set_index",get_index:"get_index",set_frame:"set_frame",get_rows:"get_rows",get_columns:"get_columns",get_frameCount:"get_frameCount"})
});
var haxepunk_graphics_atlas_Atlas = function(source) {
	this._data = source;
};
$hxClasses["haxepunk.graphics.atlas.Atlas"] = haxepunk_graphics_atlas_Atlas;
haxepunk_graphics_atlas_Atlas.__name__ = "haxepunk.graphics.atlas.Atlas";
haxepunk_graphics_atlas_Atlas.loadImageAsRegion = function(source) {
	var data = source;
	return new haxepunk_graphics_atlas_AtlasRegion(data,new haxepunk_math_Rectangle(0,0,data.width,data.height).clone());
};
haxepunk_graphics_atlas_Atlas.prototype = {
	get_width: function() {
		return this._data.width;
	}
	,get_height: function() {
		return this._data.height;
	}
	,prepareTile: function(rect,x,y,scaleX,scaleY,angle,color,alpha,shader,smooth,blend,clipRect) {
		var a;
		var b;
		var c;
		var d;
		if(angle == 0) {
			a = scaleX;
			b = 0;
			c = 0;
			d = scaleY;
		} else {
			var cos = Math.cos(-angle * (Math.PI / -180));
			var sin = Math.sin(-angle * (Math.PI / -180));
			a = cos * scaleX;
			b = -sin * scaleY;
			c = sin * scaleX;
			d = cos * scaleY;
		}
		var texture = this._data.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		var flexibleLayer = false;
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / (texture == null ? 0 : texture.width);
				uvy1 = ry / (texture == null ? 0 : texture.height);
				uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
				uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
			}
			var xa = rw * a + x;
			var yb = rw * b + y;
			var xc = rh * c + x;
			var yd = rh * d + y;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,x,y,xa,yb,xc,yd,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((x > xa ? xa > xc ? xc : xa : x > xc ? xc : x) <= _this.x + _this.width && (x < xa ? xa < xc ? xc : xa : x < xc ? xc : x) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (y > yb ? yb > yd ? yd : yb : y > yd ? yd : y) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (y < yb ? yb < yd ? yd : yb : y < yd ? yd : y) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = x;
					data1.ty1 = y;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this.x + _this.width && (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = xc;
					data1.ty1 = yd;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy2;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = uvx2;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x2 = a < b ? b < c ? c : b : a < c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y2 = a < b ? b < c ? c : b : a < c ? c : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,__class__: haxepunk_graphics_atlas_Atlas
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var haxepunk_graphics_atlas_AtlasData = function(texture,name) {
	this.texture = texture;
	this._name = name;
	this.width = texture == null ? 0 : texture.width;
	this.height = texture == null ? 0 : texture.height;
};
$hxClasses["haxepunk.graphics.atlas.AtlasData"] = haxepunk_graphics_atlas_AtlasData;
haxepunk_graphics_atlas_AtlasData.__name__ = "haxepunk.graphics.atlas.AtlasData";
haxepunk_graphics_atlas_AtlasData.startScene = function(batch) {
	haxepunk_graphics_atlas_AtlasData._batch = batch;
	batch.head.recycle();
	batch.last = null;
};
haxepunk_graphics_atlas_AtlasData.prototype = {
	toString: function() {
		if(this._name == null) {
			return "AtlasData";
		} else {
			return this._name;
		}
	}
	,createRegion: function(rect,center) {
		return new haxepunk_graphics_atlas_AtlasRegion(this,rect.clone());
	}
	,prepareTileMatrix: function(rect,tx,ty,a,b,c,d,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(smooth == null) {
			smooth = false;
		}
		var texture = this.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		var flexibleLayer1 = flexibleLayer;
		if(flexibleLayer1 == null) {
			flexibleLayer1 = false;
		}
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / (texture == null ? 0 : texture.width);
				uvy1 = ry / (texture == null ? 0 : texture.height);
				uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
				uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
			}
			var xa = rw * a + tx;
			var yb = rw * b + ty;
			var xc = rh * c + tx;
			var yd = rh * d + ty;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,tx,ty,xa,yb,xc,yd,flexibleLayer1);
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((tx > xa ? xa > xc ? xc : xa : tx > xc ? xc : tx) <= _this.x + _this.width && (tx < xa ? xa < xc ? xc : xa : tx < xc ? xc : tx) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (ty > yb ? yb > yd ? yd : yb : ty > yd ? yd : ty) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (ty < yb ? yb < yd ? yd : yb : ty < yd ? yd : ty) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx;
					data1.ty1 = ty;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this.x + _this.width && (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = xc;
					data1.ty1 = yd;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy2;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = uvx2;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x2 = a < b ? b < c ? c : b : a < c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y2 = a < b ? b < c ? c : b : a < c ? c : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,prepareTile: function(rect,tx,ty,scaleX,scaleY,angle,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		var a;
		var b;
		var c;
		var d;
		if(angle == 0) {
			a = scaleX;
			b = 0;
			c = 0;
			d = scaleY;
		} else {
			var cos = Math.cos(-angle * (Math.PI / -180));
			var sin = Math.sin(-angle * (Math.PI / -180));
			a = cos * scaleX;
			b = -sin * scaleY;
			c = sin * scaleX;
			d = cos * scaleY;
		}
		var texture = this.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		var flexibleLayer1 = flexibleLayer;
		if(flexibleLayer1 == null) {
			flexibleLayer1 = false;
		}
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / (texture == null ? 0 : texture.width);
				uvy1 = ry / (texture == null ? 0 : texture.height);
				uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
				uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
			}
			var xa = rw * a + tx;
			var yb = rw * b + ty;
			var xc = rh * c + tx;
			var yd = rh * d + ty;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,tx,ty,xa,yb,xc,yd,flexibleLayer1);
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((tx > xa ? xa > xc ? xc : xa : tx > xc ? xc : tx) <= _this.x + _this.width && (tx < xa ? xa < xc ? xc : xa : tx < xc ? xc : tx) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (ty > yb ? yb > yd ? yd : yb : ty > yd ? yd : ty) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (ty < yb ? yb < yd ? yd : yb : ty < yd ? yd : ty) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx;
					data1.ty1 = ty;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this.x + _this.width && (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = xc;
					data1.ty1 = yd;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy2;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = uvx2;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x2 = a < b ? b < c ? c : b : a < c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y2 = a < b ? b < c ? c : b : a < c ? c : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,prepareTriangle: function(tx1,ty1,uvx1,uvy1,tx2,ty2,uvx2,uvy2,tx3,ty3,uvx3,uvy3,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		var flexibleLayer1 = flexibleLayer;
		if(flexibleLayer1 == null) {
			flexibleLayer1 = false;
		}
		if(alpha > 0) {
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(this.texture,shader,smooth,blend,clipRect,tx1,ty1,tx2,ty2,tx3,ty3,flexibleLayer1);
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this.x + _this.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx1;
					data1.ty1 = ty1;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = tx2;
					data1.ty2 = ty2;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy2;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = uvx3;
					data1.uvy3 = uvy3;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x2 = a < b ? b < c ? c : b : a < c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y2 = a < b ? b < c ? c : b : a < c ? c : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,__class__: haxepunk_graphics_atlas_AtlasData
};
var haxepunk_graphics_atlas_AtlasDataType = {};
haxepunk_graphics_atlas_AtlasDataType._new = function(data) {
	var this1 = data;
	return this1;
};
haxepunk_graphics_atlas_AtlasDataType.toAtlasData = function(this1) {
	return this1;
};
haxepunk_graphics_atlas_AtlasDataType.fromString = function(s) {
	var this1 = haxepunk_assets_AssetCache.global.getAtlasData(s,false);
	return this1;
};
haxepunk_graphics_atlas_AtlasDataType.fromTexture = function(texture) {
	var this1 = new haxepunk_graphics_atlas_AtlasData(texture);
	return this1;
};
haxepunk_graphics_atlas_AtlasDataType.fromAtlasData = function(data) {
	var this1 = data;
	return this1;
};
var haxepunk_graphics_atlas_IAtlasRegion = function() { };
$hxClasses["haxepunk.graphics.atlas.IAtlasRegion"] = haxepunk_graphics_atlas_IAtlasRegion;
haxepunk_graphics_atlas_IAtlasRegion.__name__ = "haxepunk.graphics.atlas.IAtlasRegion";
haxepunk_graphics_atlas_IAtlasRegion.__isInterface__ = true;
haxepunk_graphics_atlas_IAtlasRegion.prototype = {
	__class__: haxepunk_graphics_atlas_IAtlasRegion
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var haxepunk_graphics_atlas_AtlasRegion = function(parent,rect) {
	this._parent = parent;
	this._rect = rect;
	this.rotated = false;
};
$hxClasses["haxepunk.graphics.atlas.AtlasRegion"] = haxepunk_graphics_atlas_AtlasRegion;
haxepunk_graphics_atlas_AtlasRegion.__name__ = "haxepunk.graphics.atlas.AtlasRegion";
haxepunk_graphics_atlas_AtlasRegion.__interfaces__ = [haxepunk_graphics_atlas_IAtlasRegion];
haxepunk_graphics_atlas_AtlasRegion.prototype = {
	clip: function(clipRect,center) {
		var clipRectCopy = clipRect.clone();
		if(clipRectCopy.x + clipRectCopy.width > this._rect.width) {
			clipRectCopy.width = this._rect.width - clipRectCopy.x;
		}
		if(clipRectCopy.y + clipRectCopy.height > this._rect.height) {
			clipRectCopy.height = this._rect.height - clipRectCopy.y;
		}
		if(clipRectCopy.width < 0) {
			clipRectCopy.width = 0;
		}
		if(clipRectCopy.height < 0) {
			clipRectCopy.height = 0;
		}
		clipRectCopy.x += this._rect.x;
		clipRectCopy.y += this._rect.y;
		return new haxepunk_graphics_atlas_AtlasRegion(this._parent,clipRectCopy.clone());
	}
	,draw: function(x,y,scaleX,scaleY,angle,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		if(angle == null) {
			angle = 0;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(this.rotated) {
			angle += 90;
		}
		var rect = this._rect;
		var flexibleLayer1 = flexibleLayer;
		if(flexibleLayer1 == null) {
			flexibleLayer1 = false;
		}
		var a;
		var b;
		var c;
		var d;
		if(angle == 0) {
			a = scaleX;
			b = 0;
			c = 0;
			d = scaleY;
		} else {
			var cos = Math.cos(-angle * (Math.PI / -180));
			var sin = Math.sin(-angle * (Math.PI / -180));
			a = cos * scaleX;
			b = -sin * scaleY;
			c = sin * scaleX;
			d = cos * scaleY;
		}
		var texture = this._parent.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		var flexibleLayer = flexibleLayer1;
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / (texture == null ? 0 : texture.width);
				uvy1 = ry / (texture == null ? 0 : texture.height);
				uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
				uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
			}
			var xa = rw * a + x;
			var yb = rw * b + y;
			var xc = rh * c + x;
			var yd = rh * d + y;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,x,y,xa,yb,xc,yd,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((x > xa ? xa > xc ? xc : xa : x > xc ? xc : x) <= _this.x + _this.width && (x < xa ? xa < xc ? xc : xa : x < xc ? xc : x) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (y > yb ? yb > yd ? yd : yb : y > yd ? yd : y) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (y < yb ? yb < yd ? yd : yb : y < yd ? yd : y) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = x;
					data1.ty1 = y;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this.x + _this.width && (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = xc;
					data1.ty1 = yd;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy2;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = uvx2;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x2 = a < b ? b < c ? c : b : a < c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y2 = a < b ? b < c ? c : b : a < c ? c : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,drawMatrix: function(tx,ty,a,b,c,d,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		if(this.rotated) {
			var rect = this._rect;
			var tx1 = -ty;
			var c1 = -d;
			var smooth1 = smooth;
			var flexibleLayer1 = flexibleLayer;
			if(flexibleLayer1 == null) {
				flexibleLayer1 = false;
			}
			if(smooth1 == null) {
				smooth1 = false;
			}
			var texture = this._parent.texture;
			var rx = rect.x;
			var ry = rect.y;
			var rw = rect.width;
			var rh = rect.height;
			var flexibleLayer = flexibleLayer1;
			if(flexibleLayer == null) {
				flexibleLayer = false;
			}
			if(alpha > 0) {
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				if(texture == null) {
					uvy1 = 0;
					uvx1 = uvy1;
					uvx2 = rw;
					uvy2 = rh;
				} else {
					uvx1 = rx / (texture == null ? 0 : texture.width);
					uvy1 = ry / (texture == null ? 0 : texture.height);
					uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
					uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
				}
				var xa = rw * -b + tx1;
				var yb = rw * a + tx;
				var xc = rh * c1 + tx1;
				var yd = rh * c + tx;
				var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth1,blend,clipRect,tx1,tx,xa,yb,xc,yd,flexibleLayer);
				if(alpha > 0) {
					var onScreen;
					if(command.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this = command.visibleArea;
						if((tx1 > xa ? xa > xc ? xc : xa : tx1 > xc ? xc : tx1) <= _this.x + _this.width && (tx1 < xa ? xa < xc ? xc : xa : tx1 < xc ? xc : tx1) >= command.visibleArea.x) {
							var _this = command.visibleArea;
							onScreen1 = (tx > yb ? yb > yd ? yd : yb : tx > yd ? yd : tx) <= _this.y + _this.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (tx < yb ? yb < yd ? yd : yb : tx < yd ? yd : tx) >= command.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = tx;
						data1.uvx1 = uvx1;
						data1.uvy1 = uvy1;
						data1.tx2 = xa;
						data1.ty2 = yb;
						data1.uvx2 = uvx2;
						data1.uvy2 = uvy1;
						data1.tx3 = xc;
						data1.ty3 = yd;
						data1.uvx3 = uvx1;
						data1.uvy3 = uvy2;
						data1.color = color;
						data1.alpha = alpha;
						if(command.data == null) {
							command.data = data1;
						} else {
							command._lastData._next = data1;
						}
						command._lastData = data1;
						++command.triangleCount;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c2 = data1.tx3;
						var x1 = a1 > b1 ? b1 > c2 ? c2 : b1 : a1 > c2 ? c2 : a1;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c2 = data1.tx3;
						var x2 = a1 < b1 ? b1 < c2 ? c2 : b1 : a1 < c2 ? c2 : a1;
						var a1 = data1.ty1;
						var b1 = data1.ty2;
						var c2 = data1.ty3;
						var y1 = a1 > b1 ? b1 > c2 ? c2 : b1 : a1 > c2 ? c2 : a1;
						var a1 = data1.ty1;
						var b1 = data1.ty2;
						var c2 = data1.ty3;
						var y2 = a1 < b1 ? b1 < c2 ? c2 : b1 : a1 < c2 ? c2 : a1;
						if(command.bounds.width == 0) {
							command.bounds.x = x1;
							command.bounds.width = x2 - x1;
						} else {
							if(x1 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x1;
								command.bounds.x = x1;
							}
							var _this = command.bounds;
							if(x2 > _this.x + _this.width) {
								command.bounds.width = x2 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y1;
							command.bounds.height = y2 - y1;
						} else {
							if(y1 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y1;
								command.bounds.y = y1;
							}
							var _this = command.bounds;
							if(y2 > _this.y + _this.height) {
								command.bounds.height = y2 - command.bounds.y;
							}
						}
					}
				}
				var tx3 = xa + rh * c1;
				var ty3 = yb + rh * c;
				if(alpha > 0) {
					var onScreen;
					if(command.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this = command.visibleArea;
						if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this.x + _this.width && (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x) {
							var _this = command.visibleArea;
							onScreen1 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this.y + _this.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = xc;
						data1.ty1 = yd;
						data1.uvx1 = uvx1;
						data1.uvy1 = uvy2;
						data1.tx2 = xa;
						data1.ty2 = yb;
						data1.uvx2 = uvx2;
						data1.uvy2 = uvy1;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = uvx2;
						data1.uvy3 = uvy2;
						data1.color = color;
						data1.alpha = alpha;
						if(command.data == null) {
							command.data = data1;
						} else {
							command._lastData._next = data1;
						}
						command._lastData = data1;
						++command.triangleCount;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c1 = data1.tx3;
						var x1 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
						var a1 = data1.ty1;
						var b1 = data1.ty2;
						var c1 = data1.ty3;
						var y1 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
						var a1 = data1.ty1;
						var b1 = data1.ty2;
						var c1 = data1.ty3;
						var y2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
						if(command.bounds.width == 0) {
							command.bounds.x = x1;
							command.bounds.width = x2 - x1;
						} else {
							if(x1 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x1;
								command.bounds.x = x1;
							}
							var _this = command.bounds;
							if(x2 > _this.x + _this.width) {
								command.bounds.width = x2 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y1;
							command.bounds.height = y2 - y1;
						} else {
							if(y1 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y1;
								command.bounds.y = y1;
							}
							var _this = command.bounds;
							if(y2 > _this.y + _this.height) {
								command.bounds.height = y2 - command.bounds.y;
							}
						}
					}
				}
			}
		} else {
			var rect = this._rect;
			var smooth1 = smooth;
			if(smooth1 == null) {
				smooth1 = false;
			}
			var texture = this._parent.texture;
			var rx = rect.x;
			var ry = rect.y;
			var rw = rect.width;
			var rh = rect.height;
			var flexibleLayer = false;
			if(flexibleLayer == null) {
				flexibleLayer = false;
			}
			if(alpha > 0) {
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				if(texture == null) {
					uvy1 = 0;
					uvx1 = uvy1;
					uvx2 = rw;
					uvy2 = rh;
				} else {
					uvx1 = rx / (texture == null ? 0 : texture.width);
					uvy1 = ry / (texture == null ? 0 : texture.height);
					uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
					uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
				}
				var xa = rw * a + tx;
				var yb = rw * b + ty;
				var xc = rh * c + tx;
				var yd = rh * d + ty;
				var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth1,blend,clipRect,tx,ty,xa,yb,xc,yd,flexibleLayer);
				if(alpha > 0) {
					var onScreen;
					if(command.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this = command.visibleArea;
						if((tx > xa ? xa > xc ? xc : xa : tx > xc ? xc : tx) <= _this.x + _this.width && (tx < xa ? xa < xc ? xc : xa : tx < xc ? xc : tx) >= command.visibleArea.x) {
							var _this = command.visibleArea;
							onScreen1 = (ty > yb ? yb > yd ? yd : yb : ty > yd ? yd : ty) <= _this.y + _this.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (ty < yb ? yb < yd ? yd : yb : ty < yd ? yd : ty) >= command.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx;
						data1.ty1 = ty;
						data1.uvx1 = uvx1;
						data1.uvy1 = uvy1;
						data1.tx2 = xa;
						data1.ty2 = yb;
						data1.uvx2 = uvx2;
						data1.uvy2 = uvy1;
						data1.tx3 = xc;
						data1.ty3 = yd;
						data1.uvx3 = uvx1;
						data1.uvy3 = uvy2;
						data1.color = color;
						data1.alpha = alpha;
						if(command.data == null) {
							command.data = data1;
						} else {
							command._lastData._next = data1;
						}
						command._lastData = data1;
						++command.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c1 = data1.tx3;
						var x1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
						var a = data1.tx1;
						var b = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c1 = data1.ty3;
						var y1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c1 = data1.ty3;
						var y2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
						if(command.bounds.width == 0) {
							command.bounds.x = x1;
							command.bounds.width = x2 - x1;
						} else {
							if(x1 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x1;
								command.bounds.x = x1;
							}
							var _this = command.bounds;
							if(x2 > _this.x + _this.width) {
								command.bounds.width = x2 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y1;
							command.bounds.height = y2 - y1;
						} else {
							if(y1 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y1;
								command.bounds.y = y1;
							}
							var _this = command.bounds;
							if(y2 > _this.y + _this.height) {
								command.bounds.height = y2 - command.bounds.y;
							}
						}
					}
				}
				var tx3 = xa + rh * c;
				var ty3 = yb + rh * d;
				if(alpha > 0) {
					var onScreen;
					if(command.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this = command.visibleArea;
						if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this.x + _this.width && (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x) {
							var _this = command.visibleArea;
							onScreen1 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this.y + _this.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = xc;
						data1.ty1 = yd;
						data1.uvx1 = uvx1;
						data1.uvy1 = uvy2;
						data1.tx2 = xa;
						data1.ty2 = yb;
						data1.uvx2 = uvx2;
						data1.uvy2 = uvy1;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = uvx2;
						data1.uvy3 = uvy2;
						data1.color = color;
						data1.alpha = alpha;
						if(command.data == null) {
							command.data = data1;
						} else {
							command._lastData._next = data1;
						}
						command._lastData = data1;
						++command.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x2 = a < b ? b < c ? c : b : a < c ? c : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c = data1.ty3;
						var y1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c = data1.ty3;
						var y2 = a < b ? b < c ? c : b : a < c ? c : a;
						if(command.bounds.width == 0) {
							command.bounds.x = x1;
							command.bounds.width = x2 - x1;
						} else {
							if(x1 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x1;
								command.bounds.x = x1;
							}
							var _this = command.bounds;
							if(x2 > _this.x + _this.width) {
								command.bounds.width = x2 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y1;
							command.bounds.height = y2 - y1;
						} else {
							if(y1 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y1;
								command.bounds.y = y1;
							}
							var _this = command.bounds;
							if(y2 > _this.y + _this.height) {
								command.bounds.height = y2 - command.bounds.y;
							}
						}
					}
				}
			}
		}
	}
	,toString: function() {
		return "[AtlasRegion " + Std.string(this._rect) + "]";
	}
	,get_x: function() {
		return this._rect.x;
	}
	,get_y: function() {
		return this._rect.y;
	}
	,get_width: function() {
		return this._rect.width | 0;
	}
	,get_height: function() {
		return this._rect.height | 0;
	}
	,__class__: haxepunk_graphics_atlas_AtlasRegion
	,__properties__: {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
};
var haxepunk_graphics_atlas_AtlasResolutions = function(regions) {
	this.regions = [];
	if(regions == null || regions.length == 0) {
		throw haxe_Exception.thrown("Can't create an AtlasResolutions set with no AtlasRegions");
	}
	var _g = 0;
	while(_g < regions.length) {
		var region = regions[_g];
		++_g;
		this.addResolution(region);
	}
};
$hxClasses["haxepunk.graphics.atlas.AtlasResolutions"] = haxepunk_graphics_atlas_AtlasResolutions;
haxepunk_graphics_atlas_AtlasResolutions.__name__ = "haxepunk.graphics.atlas.AtlasResolutions";
haxepunk_graphics_atlas_AtlasResolutions.__interfaces__ = [haxepunk_graphics_atlas_IAtlasRegion];
haxepunk_graphics_atlas_AtlasResolutions.prototype = {
	get_width: function() {
		return this.base._rect.width | 0;
	}
	,get_height: function() {
		return this.base._rect.height | 0;
	}
	,addResolution: function(region) {
		if(this.regions.length == 0) {
			this.base = region;
			this.regions.push(region);
		} else {
			if(Math.abs((region._rect.width | 0) / (region._rect.height | 0) - (this.base._rect.width | 0) / (this.base._rect.height | 0)) > 0.001) {
				throw haxe_Exception.thrown("All AtlasRegions in an AtlasResolutions set must have the same aspect ratio: " + Std.string(this.base) + " " + Std.string(region));
			}
			var _g = 0;
			var _g1 = this.regions.length + 1;
			while(_g < _g1) {
				var i = _g++;
				if(i == this.regions.length || (this.regions[i]._rect.width | 0) > (region._rect.width | 0)) {
					this.regions.splice(i,0,region);
					break;
				}
			}
		}
	}
	,draw: function(x,y,scaleX,scaleY,angle,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		if(angle == null) {
			angle = 0;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		var currentScale = Math.max(Math.abs(scaleX),Math.abs(scaleY));
		var best = this.base;
		var _g = 0;
		var _g1 = this.regions;
		while(_g < _g1.length) {
			var region = _g1[_g];
			++_g;
			best = region;
			var scale = (region._rect.width | 0) / (this.base._rect.width | 0);
			if(scale > currentScale) {
				break;
			}
		}
		var region = best;
		var scale = (this.base._rect.width | 0) / (region._rect.width | 0);
		var scaleX1 = scaleX * scale;
		var scaleY1 = scaleY * scale;
		var angle1 = angle;
		var color1 = color;
		var alpha1 = alpha;
		var flexibleLayer1 = flexibleLayer;
		if(flexibleLayer1 == null) {
			flexibleLayer1 = false;
		}
		if(alpha1 == null) {
			alpha1 = 1;
		}
		if(color1 == null) {
			color1 = 16777215;
		}
		if(angle1 == null) {
			angle1 = 0;
		}
		if(scaleY1 == null) {
			scaleY1 = 1;
		}
		if(scaleX1 == null) {
			scaleX1 = 1;
		}
		if(region.rotated) {
			angle1 += 90;
		}
		var rect = region._rect;
		var flexibleLayer = flexibleLayer1;
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		var a;
		var b;
		var c;
		var d;
		if(angle1 == 0) {
			a = scaleX1;
			b = 0;
			c = 0;
			d = scaleY1;
		} else {
			var cos = Math.cos(-angle1 * (Math.PI / -180));
			var sin = Math.sin(-angle1 * (Math.PI / -180));
			a = cos * scaleX1;
			b = -sin * scaleY1;
			c = sin * scaleX1;
			d = cos * scaleY1;
		}
		var texture = region._parent.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		var flexibleLayer1 = flexibleLayer;
		if(flexibleLayer1 == null) {
			flexibleLayer1 = false;
		}
		if(alpha1 > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / (texture == null ? 0 : texture.width);
				uvy1 = ry / (texture == null ? 0 : texture.height);
				uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
				uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
			}
			var xa = rw * a + x;
			var yb = rw * b + y;
			var xc = rh * c + x;
			var yd = rh * d + y;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,x,y,xa,yb,xc,yd,flexibleLayer1);
			if(alpha1 > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((x > xa ? xa > xc ? xc : xa : x > xc ? xc : x) <= _this.x + _this.width && (x < xa ? xa < xc ? xc : xa : x < xc ? xc : x) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (y > yb ? yb > yd ? yd : yb : y > yd ? yd : y) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (y < yb ? yb < yd ? yd : yb : y < yd ? yd : y) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = x;
					data1.ty1 = y;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color1;
					data1.alpha = alpha1;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha1 > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this.x + _this.width && (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = xc;
					data1.ty1 = yd;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy2;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = uvx2;
					data1.uvy3 = uvy2;
					data1.color = color1;
					data1.alpha = alpha1;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x2 = a < b ? b < c ? c : b : a < c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y2 = a < b ? b < c ? c : b : a < c ? c : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,drawMatrix: function(tx,ty,a,b,c,d,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		var currentScale = Math.max(Math.abs(a * c),Math.abs(b * d));
		var best = this.base;
		var _g = 0;
		var _g1 = this.regions;
		while(_g < _g1.length) {
			var region = _g1[_g];
			++_g;
			best = region;
			var scale = (region._rect.width | 0) / (this.base._rect.width | 0);
			if(scale > currentScale) {
				break;
			}
		}
		var region = best;
		var scale = (this.base._rect.width | 0) / (region._rect.width | 0);
		var tx1 = tx * scale;
		var ty1 = ty * scale;
		var a1 = a * scale;
		var b1 = b * scale;
		var c1 = c * scale;
		var d1 = d * scale;
		var color1 = color;
		var alpha1 = alpha;
		var flexibleLayer1 = flexibleLayer;
		if(flexibleLayer1 == null) {
			flexibleLayer1 = false;
		}
		if(alpha1 == null) {
			alpha1 = 1;
		}
		if(color1 == null) {
			color1 = 16777215;
		}
		if(region.rotated) {
			var rect = region._rect;
			var tx = -ty1;
			var c = -d1;
			var smooth1 = smooth;
			var flexibleLayer = flexibleLayer1;
			if(flexibleLayer == null) {
				flexibleLayer = false;
			}
			if(smooth1 == null) {
				smooth1 = false;
			}
			var texture = region._parent.texture;
			var rx = rect.x;
			var ry = rect.y;
			var rw = rect.width;
			var rh = rect.height;
			var flexibleLayer1 = flexibleLayer;
			if(flexibleLayer1 == null) {
				flexibleLayer1 = false;
			}
			if(alpha1 > 0) {
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				if(texture == null) {
					uvy1 = 0;
					uvx1 = uvy1;
					uvx2 = rw;
					uvy2 = rh;
				} else {
					uvx1 = rx / (texture == null ? 0 : texture.width);
					uvy1 = ry / (texture == null ? 0 : texture.height);
					uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
					uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
				}
				var xa = rw * -b1 + tx;
				var yb = rw * a1 + tx1;
				var xc = rh * c + tx;
				var yd = rh * c1 + tx1;
				var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth1,blend,clipRect,tx,tx1,xa,yb,xc,yd,flexibleLayer1);
				if(alpha1 > 0) {
					var onScreen;
					if(command.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this = command.visibleArea;
						if((tx > xa ? xa > xc ? xc : xa : tx > xc ? xc : tx) <= _this.x + _this.width && (tx < xa ? xa < xc ? xc : xa : tx < xc ? xc : tx) >= command.visibleArea.x) {
							var _this = command.visibleArea;
							onScreen1 = (tx1 > yb ? yb > yd ? yd : yb : tx1 > yd ? yd : tx1) <= _this.y + _this.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (tx1 < yb ? yb < yd ? yd : yb : tx1 < yd ? yd : tx1) >= command.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx;
						data1.ty1 = tx1;
						data1.uvx1 = uvx1;
						data1.uvy1 = uvy1;
						data1.tx2 = xa;
						data1.ty2 = yb;
						data1.uvx2 = uvx2;
						data1.uvy2 = uvy1;
						data1.tx3 = xc;
						data1.ty3 = yd;
						data1.uvx3 = uvx1;
						data1.uvy3 = uvy2;
						data1.color = color1;
						data1.alpha = alpha1;
						if(command.data == null) {
							command.data = data1;
						} else {
							command._lastData._next = data1;
						}
						command._lastData = data1;
						++command.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c2 = data1.tx3;
						var x1 = a > b ? b > c2 ? c2 : b : a > c2 ? c2 : a;
						var a = data1.tx1;
						var b = data1.tx2;
						var c2 = data1.tx3;
						var x2 = a < b ? b < c2 ? c2 : b : a < c2 ? c2 : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c2 = data1.ty3;
						var y1 = a > b ? b > c2 ? c2 : b : a > c2 ? c2 : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c2 = data1.ty3;
						var y2 = a < b ? b < c2 ? c2 : b : a < c2 ? c2 : a;
						if(command.bounds.width == 0) {
							command.bounds.x = x1;
							command.bounds.width = x2 - x1;
						} else {
							if(x1 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x1;
								command.bounds.x = x1;
							}
							var _this = command.bounds;
							if(x2 > _this.x + _this.width) {
								command.bounds.width = x2 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y1;
							command.bounds.height = y2 - y1;
						} else {
							if(y1 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y1;
								command.bounds.y = y1;
							}
							var _this = command.bounds;
							if(y2 > _this.y + _this.height) {
								command.bounds.height = y2 - command.bounds.y;
							}
						}
					}
				}
				var tx3 = xa + rh * c;
				var ty3 = yb + rh * c1;
				if(alpha1 > 0) {
					var onScreen;
					if(command.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this = command.visibleArea;
						if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this.x + _this.width && (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x) {
							var _this = command.visibleArea;
							onScreen1 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this.y + _this.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = xc;
						data1.ty1 = yd;
						data1.uvx1 = uvx1;
						data1.uvy1 = uvy2;
						data1.tx2 = xa;
						data1.ty2 = yb;
						data1.uvx2 = uvx2;
						data1.uvy2 = uvy1;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = uvx2;
						data1.uvy3 = uvy2;
						data1.color = color1;
						data1.alpha = alpha1;
						if(command.data == null) {
							command.data = data1;
						} else {
							command._lastData._next = data1;
						}
						command._lastData = data1;
						++command.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x2 = a < b ? b < c ? c : b : a < c ? c : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c = data1.ty3;
						var y1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c = data1.ty3;
						var y2 = a < b ? b < c ? c : b : a < c ? c : a;
						if(command.bounds.width == 0) {
							command.bounds.x = x1;
							command.bounds.width = x2 - x1;
						} else {
							if(x1 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x1;
								command.bounds.x = x1;
							}
							var _this = command.bounds;
							if(x2 > _this.x + _this.width) {
								command.bounds.width = x2 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y1;
							command.bounds.height = y2 - y1;
						} else {
							if(y1 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y1;
								command.bounds.y = y1;
							}
							var _this = command.bounds;
							if(y2 > _this.y + _this.height) {
								command.bounds.height = y2 - command.bounds.y;
							}
						}
					}
				}
			}
		} else {
			var rect = region._rect;
			var smooth1 = smooth;
			if(smooth1 == null) {
				smooth1 = false;
			}
			var texture = region._parent.texture;
			var rx = rect.x;
			var ry = rect.y;
			var rw = rect.width;
			var rh = rect.height;
			var flexibleLayer = false;
			if(flexibleLayer == null) {
				flexibleLayer = false;
			}
			if(alpha1 > 0) {
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				if(texture == null) {
					uvy1 = 0;
					uvx1 = uvy1;
					uvx2 = rw;
					uvy2 = rh;
				} else {
					uvx1 = rx / (texture == null ? 0 : texture.width);
					uvy1 = ry / (texture == null ? 0 : texture.height);
					uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
					uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
				}
				var xa = rw * a1 + tx1;
				var yb = rw * b1 + ty1;
				var xc = rh * c1 + tx1;
				var yd = rh * d1 + ty1;
				var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth1,blend,clipRect,tx1,ty1,xa,yb,xc,yd,flexibleLayer);
				if(alpha1 > 0) {
					var onScreen;
					if(command.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this = command.visibleArea;
						if((tx1 > xa ? xa > xc ? xc : xa : tx1 > xc ? xc : tx1) <= _this.x + _this.width && (tx1 < xa ? xa < xc ? xc : xa : tx1 < xc ? xc : tx1) >= command.visibleArea.x) {
							var _this = command.visibleArea;
							onScreen1 = (ty1 > yb ? yb > yd ? yd : yb : ty1 > yd ? yd : ty1) <= _this.y + _this.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (ty1 < yb ? yb < yd ? yd : yb : ty1 < yd ? yd : ty1) >= command.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = uvx1;
						data1.uvy1 = uvy1;
						data1.tx2 = xa;
						data1.ty2 = yb;
						data1.uvx2 = uvx2;
						data1.uvy2 = uvy1;
						data1.tx3 = xc;
						data1.ty3 = yd;
						data1.uvx3 = uvx1;
						data1.uvy3 = uvy2;
						data1.color = color1;
						data1.alpha = alpha1;
						if(command.data == null) {
							command.data = data1;
						} else {
							command._lastData._next = data1;
						}
						command._lastData = data1;
						++command.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x2 = a < b ? b < c ? c : b : a < c ? c : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c = data1.ty3;
						var y1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c = data1.ty3;
						var y2 = a < b ? b < c ? c : b : a < c ? c : a;
						if(command.bounds.width == 0) {
							command.bounds.x = x1;
							command.bounds.width = x2 - x1;
						} else {
							if(x1 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x1;
								command.bounds.x = x1;
							}
							var _this = command.bounds;
							if(x2 > _this.x + _this.width) {
								command.bounds.width = x2 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y1;
							command.bounds.height = y2 - y1;
						} else {
							if(y1 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y1;
								command.bounds.y = y1;
							}
							var _this = command.bounds;
							if(y2 > _this.y + _this.height) {
								command.bounds.height = y2 - command.bounds.y;
							}
						}
					}
				}
				var tx3 = xa + rh * c1;
				var ty3 = yb + rh * d1;
				if(alpha1 > 0) {
					var onScreen;
					if(command.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this = command.visibleArea;
						if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this.x + _this.width && (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x) {
							var _this = command.visibleArea;
							onScreen1 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this.y + _this.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = xc;
						data1.ty1 = yd;
						data1.uvx1 = uvx1;
						data1.uvy1 = uvy2;
						data1.tx2 = xa;
						data1.ty2 = yb;
						data1.uvx2 = uvx2;
						data1.uvy2 = uvy1;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = uvx2;
						data1.uvy3 = uvy2;
						data1.color = color1;
						data1.alpha = alpha1;
						if(command.data == null) {
							command.data = data1;
						} else {
							command._lastData._next = data1;
						}
						command._lastData = data1;
						++command.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x2 = a < b ? b < c ? c : b : a < c ? c : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c = data1.ty3;
						var y1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a = data1.ty1;
						var b = data1.ty2;
						var c = data1.ty3;
						var y2 = a < b ? b < c ? c : b : a < c ? c : a;
						if(command.bounds.width == 0) {
							command.bounds.x = x1;
							command.bounds.width = x2 - x1;
						} else {
							if(x1 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x1;
								command.bounds.x = x1;
							}
							var _this = command.bounds;
							if(x2 > _this.x + _this.width) {
								command.bounds.width = x2 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y1;
							command.bounds.height = y2 - y1;
						} else {
							if(y1 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y1;
								command.bounds.y = y1;
							}
							var _this = command.bounds;
							if(y2 > _this.y + _this.height) {
								command.bounds.height = y2 - command.bounds.y;
							}
						}
					}
				}
			}
		}
	}
	,clip: function(clipRect,center) {
		var clippedRegions = [];
		clippedRegions.push(this.base.clip(clipRect,center));
		var _g = 0;
		var _g1 = this.regions;
		while(_g < _g1.length) {
			var region = _g1[_g];
			++_g;
			if(region == this.base) {
				continue;
			}
			var scale = (region._rect.width | 0) / (this.base._rect.width | 0);
			haxepunk_graphics_atlas_AtlasResolutions._rect.setTo(clipRect.x * scale,clipRect.y * scale,clipRect.width * scale,clipRect.height * scale);
			if(center != null) {
				haxepunk_math_Vector2.setTo(haxepunk_graphics_atlas_AtlasResolutions._point,center.x * scale,center.y * scale);
			}
			clippedRegions.push(region.clip(haxepunk_graphics_atlas_AtlasResolutions._rect,center == null ? null : haxepunk_graphics_atlas_AtlasResolutions._point));
		}
		return new haxepunk_graphics_atlas_AtlasResolutions(clippedRegions);
	}
	,toString: function() {
		return "[AtlasResolutions for " + ("[AtlasRegion " + Std.string(this.base._rect) + "]") + " x " + this.regions.length + " resolutions]";
	}
	,regionForScale: function(currentScale) {
		var best = this.base;
		var _g = 0;
		var _g1 = this.regions;
		while(_g < _g1.length) {
			var region = _g1[_g];
			++_g;
			best = region;
			var scale = (region._rect.width | 0) / (this.base._rect.width | 0);
			if(scale > currentScale) {
				break;
			}
		}
		return best;
	}
	,__class__: haxepunk_graphics_atlas_AtlasResolutions
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var haxepunk_graphics_atlas_TextureAtlas = function(source) {
	this._regions = new haxe_ds_StringMap();
	haxepunk_graphics_atlas_Atlas.call(this,source);
	if(source == null) {
		this._pages = new haxe_ds_StringMap();
	}
};
$hxClasses["haxepunk.graphics.atlas.TextureAtlas"] = haxepunk_graphics_atlas_TextureAtlas;
haxepunk_graphics_atlas_TextureAtlas.__name__ = "haxepunk.graphics.atlas.TextureAtlas";
haxepunk_graphics_atlas_TextureAtlas.loadTexturePacker = function(file) {
	var xml = Xml.parse(haxepunk_assets_AssetLoader.getText(file));
	var root = xml.firstElement();
	var s = root.get("imagePath");
	var this1 = haxepunk_assets_AssetCache.global.getAtlasData(s,false);
	var atlas = new haxepunk_graphics_atlas_TextureAtlas(this1);
	var sprite = root.elements();
	while(sprite.hasNext()) {
		var sprite1 = sprite.next();
		var tmp = sprite1.get("x");
		haxepunk_HXP.rect.x = Std.parseInt(tmp);
		var tmp1 = sprite1.get("y");
		haxepunk_HXP.rect.y = Std.parseInt(tmp1);
		if(sprite1.exists("w")) {
			var tmp2 = sprite1.get("w");
			haxepunk_HXP.rect.width = Std.parseInt(tmp2);
		} else if(sprite1.exists("width")) {
			var tmp3 = sprite1.get("width");
			haxepunk_HXP.rect.width = Std.parseInt(tmp3);
		}
		if(sprite1.exists("h")) {
			var tmp4 = sprite1.get("h");
			haxepunk_HXP.rect.height = Std.parseInt(tmp4);
		} else if(sprite1.exists("height")) {
			var tmp5 = sprite1.get("height");
			haxepunk_HXP.rect.height = Std.parseInt(tmp5);
		}
		var name;
		if(sprite1.exists("n")) {
			name = sprite1.get("n");
		} else if(sprite1.exists("name")) {
			name = sprite1.get("name");
		} else {
			throw haxe_Exception.thrown("Unable to find the region's name.");
		}
		var region = atlas.defineRegion(name,haxepunk_HXP.rect);
		if(sprite1.exists("r") && sprite1.get("r") == "y") {
			region.rotated = true;
		}
	}
	return atlas;
};
haxepunk_graphics_atlas_TextureAtlas.loadGdxTexturePacker = function(file) {
	return haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.load(file);
};
haxepunk_graphics_atlas_TextureAtlas.__super__ = haxepunk_graphics_atlas_Atlas;
haxepunk_graphics_atlas_TextureAtlas.prototype = $extend(haxepunk_graphics_atlas_Atlas.prototype,{
	getRegion: function(name) {
		if(Object.prototype.hasOwnProperty.call(this._regions.h,name)) {
			return this._regions.h[name];
		}
		throw haxe_Exception.thrown("Region has not been defined yet \"" + name + "\".");
	}
	,defineRegion: function(name,rect,center,page) {
		var data = this._pages == null ? this._data : this._pages.h[page];
		var region = new haxepunk_graphics_atlas_AtlasRegion(data,rect.clone());
		this._regions.h[name] = region;
		return region;
	}
	,__class__: haxepunk_graphics_atlas_TextureAtlas
});
var haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker = function() { };
$hxClasses["haxepunk.graphics.atlas._TextureAtlas.GdxTexturePacker"] = haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker;
haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.__name__ = "haxepunk.graphics.atlas._TextureAtlas.GdxTexturePacker";
haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.load = function(file) {
	var data = haxepunk_assets_AssetLoader.getText(file);
	var inputDir = haxe_io_Path.directory(file);
	var atlas = new haxepunk_graphics_atlas_TextureAtlas();
	var reader = new haxe_io_StringInput(data);
	var page;
	var pageName;
	var extension;
	while(true) {
		var line = null;
		try {
			line = reader.readLine();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				break;
			} else {
				throw _g;
			}
		}
		if(line == null) {
			break;
		}
		line = StringTools.trim(line);
		if(line.length == 0) {
			continue;
		}
		pageName = line;
		extension = haxe_io_Path.extension(pageName);
		var assetName = haxe_io_Path.join([inputDir,pageName]);
		page = haxepunk_assets_AssetCache.global.getAtlasData(assetName,false);
		atlas._pages.h[pageName] = page;
		var line1 = "";
		while(true) {
			try {
				line1 = reader.readLine();
			} catch( _g1 ) {
				haxe_NativeStackTrace.lastError = _g1;
				if(((haxe_Exception.caught(_g1).unwrap()) instanceof haxe_io_Eof)) {
					break;
				} else {
					throw _g1;
				}
			}
			if(line1.indexOf(":") == -1) {
				break;
			}
			var parts = line1.split(":");
			var value_name = StringTools.trim(parts[0]);
			var value_value = StringTools.trim(parts[1]);
			switch(value_name) {
			case "filter":
				break;
			case "format":
				break;
			case "repeat":
				break;
			case "size":
				break;
			}
		}
		while(line1 != "") {
			var regionName = line1;
			try {
				line1 = reader.readLine();
			} catch( _g2 ) {
				haxe_NativeStackTrace.lastError = _g2;
				if(((haxe_Exception.caught(_g2).unwrap()) instanceof haxe_io_Eof)) {
					break;
				} else {
					throw _g2;
				}
			}
			var values_h = Object.create(null);
			while(line1.indexOf(":") > -1) {
				var parts1 = line1.split(":");
				var value_name1 = StringTools.trim(parts1[0]);
				var value_value1 = StringTools.trim(parts1[1]);
				var v = value_value1;
				values_h[value_name1] = v;
				try {
					line1 = reader.readLine();
				} catch( _g3 ) {
					haxe_NativeStackTrace.lastError = _g3;
					if(((haxe_Exception.caught(_g3).unwrap()) instanceof haxe_io_Eof)) {
						break;
					} else {
						throw _g3;
					}
				}
			}
			var _g4 = [];
			var _g5 = 0;
			var _g6 = [];
			var _g7 = 0;
			var _g8 = values_h["xy"].split(",");
			while(_g7 < _g8.length) {
				var v1 = _g8[_g7];
				++_g7;
				_g6.push(StringTools.trim(v1));
			}
			var values = _g6;
			var _g9 = values;
			while(_g5 < _g9.length) {
				var x = _g9[_g5];
				++_g5;
				_g4.push(Std.parseInt(x));
			}
			var xy = _g4;
			var _g10 = [];
			var _g11 = 0;
			var _g12 = [];
			var _g13 = 0;
			var _g14 = values_h["size"].split(",");
			while(_g13 < _g14.length) {
				var v2 = _g14[_g13];
				++_g13;
				_g12.push(StringTools.trim(v2));
			}
			var values1 = _g12;
			var _g15 = values1;
			while(_g11 < _g15.length) {
				var x1 = _g15[_g11];
				++_g11;
				_g10.push(Std.parseInt(x1));
			}
			var size = _g10;
			var rotate = values_h["rotate"] == "true" ? -90 : 0;
			var r = rotate != 0 ? new haxepunk_math_Rectangle(xy[0],xy[1],size[1],size[0]) : new haxepunk_math_Rectangle(xy[0],xy[1],size[0],size[1]);
			var path = haxe_io_Path.join([inputDir,regionName + "." + extension]);
			atlas.defineRegion(path,r,null,pageName);
		}
	}
	return atlas;
};
haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.getValue = function(line) {
	var parts = line.split(":");
	return { name : StringTools.trim(parts[0]), value : StringTools.trim(parts[1])};
};
haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.getTuple = function(value) {
	var _g = [];
	var _g1 = 0;
	var _g2 = value.split(",");
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		_g.push(StringTools.trim(v));
	}
	var values = _g;
	return values;
};
var haxepunk_graphics_atlas_TileAtlas = function(source,tileWidth,tileHeight,tileMarginWidth,tileMarginHeight) {
	if(tileMarginHeight == null) {
		tileMarginHeight = 0;
	}
	if(tileMarginWidth == null) {
		tileMarginWidth = 0;
	}
	this._tileMarginHeight = 0;
	this._tileMarginWidth = 0;
	this._tileHeight = 0;
	this._tileWidth = 0;
	haxepunk_graphics_atlas_Atlas.call(this,source);
	this._regions = [];
	if(tileWidth != null && tileHeight != null) {
		this.prepare(tileWidth,tileHeight,tileMarginWidth,tileMarginHeight);
	}
};
$hxClasses["haxepunk.graphics.atlas.TileAtlas"] = haxepunk_graphics_atlas_TileAtlas;
haxepunk_graphics_atlas_TileAtlas.__name__ = "haxepunk.graphics.atlas.TileAtlas";
haxepunk_graphics_atlas_TileAtlas.loadFromTextureAtlas = function(textureAtlas,regions) {
	var this1 = textureAtlas._data;
	var atlas = new haxepunk_graphics_atlas_TileAtlas(this1);
	var _g = 0;
	while(_g < regions.length) {
		var spriteName = regions[_g];
		++_g;
		var region;
		if(Object.prototype.hasOwnProperty.call(textureAtlas._regions.h,spriteName)) {
			region = textureAtlas._regions.h[spriteName];
		} else {
			throw haxe_Exception.thrown("Region has not been defined yet \"" + spriteName + "\".");
		}
		atlas._regions.push(region);
	}
	var region = atlas._regions[0];
	atlas._tileWidth = region._rect.width | 0;
	atlas._tileHeight = region._rect.height | 0;
	return atlas;
};
haxepunk_graphics_atlas_TileAtlas.loadFromAtlasRegion = function(region,tileWidth,tileHeight,tileMarginWidth,tileMarginHeight) {
	if(tileMarginHeight == null) {
		tileMarginHeight = 0;
	}
	if(tileMarginWidth == null) {
		tileMarginWidth = 0;
	}
	var this1 = region._parent;
	var atlas = new haxepunk_graphics_atlas_TileAtlas(this1);
	atlas._tileWidth = tileWidth;
	atlas._tileHeight = tileHeight;
	atlas._tileMarginWidth = tileMarginWidth;
	atlas._tileMarginHeight = tileMarginHeight;
	var cols = Math.floor((region._rect.width | 0) / tileWidth);
	var rows = Math.floor((region._rect.height | 0) / tileHeight);
	haxepunk_HXP.rect.width = tileWidth;
	haxepunk_HXP.rect.height = tileHeight;
	haxepunk_HXP.point.x = haxepunk_HXP.point.y = 0;
	var _g = 0;
	var _g1 = rows;
	while(_g < _g1) {
		var y = _g++;
		haxepunk_HXP.rect.y = y * (tileHeight + tileMarginHeight);
		var _g2 = 0;
		var _g3 = cols;
		while(_g2 < _g3) {
			var x = _g2++;
			haxepunk_HXP.rect.x = x * (tileWidth + tileMarginWidth);
			var r = region.clip(haxepunk_HXP.rect,haxepunk_HXP.point);
			atlas._regions.push(r);
		}
	}
	return atlas;
};
haxepunk_graphics_atlas_TileAtlas.__super__ = haxepunk_graphics_atlas_Atlas;
haxepunk_graphics_atlas_TileAtlas.prototype = $extend(haxepunk_graphics_atlas_Atlas.prototype,{
	get_tileCount: function() {
		return this._regions.length;
	}
	,get_tileWidth: function() {
		return this._tileWidth;
	}
	,get_tileHeight: function() {
		return this._tileHeight;
	}
	,get_tileMarginWidth: function() {
		return this._tileMarginWidth;
	}
	,get_tileMarginHeight: function() {
		return this._tileMarginHeight;
	}
	,getRegion: function(index) {
		if(index >= this._regions.length) {
			throw haxe_Exception.thrown("Atlas doesn't have a region number \"" + index + "\"");
		}
		return this._regions[index];
	}
	,prepare: function(tileWidth,tileHeight,tileMarginWidth,tileMarginHeight,tileOffsetX,tileOffsetY) {
		if(tileOffsetY == null) {
			tileOffsetY = 0;
		}
		if(tileOffsetX == null) {
			tileOffsetX = 0;
		}
		if(tileMarginHeight == null) {
			tileMarginHeight = 0;
		}
		if(tileMarginWidth == null) {
			tileMarginWidth = 0;
		}
		if(this._regions.length > 0) {
			return;
		}
		if(tileWidth == 0) {
			tileWidth = this._data.width;
		}
		if(tileHeight == 0) {
			tileHeight = this._data.height;
		}
		var s = "preparing tile atlas: " + tileWidth + " x " + tileHeight + ", margin " + tileMarginWidth + " x " + tileMarginHeight + ", offset " + tileOffsetX + " x " + tileOffsetY;
		var pos_fileName = "haxepunk/graphics/atlas/TileAtlas.hx";
		var pos_lineNumber = 150;
		var pos_className = "haxepunk.graphics.atlas.TileAtlas";
		var pos_methodName = "prepare";
		var level = 10;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
		this._tileWidth = tileWidth;
		this._tileHeight = tileHeight;
		this._tileMarginWidth = tileMarginWidth;
		this._tileMarginHeight = tileMarginHeight;
		var cols = Math.floor(this._data.width / tileWidth);
		var rows = Math.floor(this._data.height / tileHeight);
		haxepunk_HXP.rect.width = tileWidth;
		haxepunk_HXP.rect.height = tileHeight;
		haxepunk_HXP.point.x = haxepunk_HXP.point.y = 0;
		var _g = 0;
		var _g1 = rows;
		while(_g < _g1) {
			var y = _g++;
			haxepunk_HXP.rect.y = tileOffsetY + y * (tileHeight + tileMarginHeight);
			var _g2 = 0;
			var _g3 = cols;
			while(_g2 < _g3) {
				var x = _g2++;
				haxepunk_HXP.rect.x = tileOffsetX + x * (tileWidth + tileMarginWidth);
				var center = haxepunk_HXP.point;
				this._regions.push(new haxepunk_graphics_atlas_AtlasRegion(this._data,haxepunk_HXP.rect.clone()));
			}
		}
	}
	,__class__: haxepunk_graphics_atlas_TileAtlas
	,__properties__: $extend(haxepunk_graphics_atlas_Atlas.prototype.__properties__,{get_tileMarginHeight:"get_tileMarginHeight",get_tileMarginWidth:"get_tileMarginWidth",get_tileHeight:"get_tileHeight",get_tileWidth:"get_tileWidth",get_tileCount:"get_tileCount"})
});
var haxepunk_graphics_emitter_BaseEmitter = function(source) {
	this.frozen = false;
	this.scale = 1;
	haxepunk_Graphic.call(this);
	this._source = source;
	this._sourceIsImage = ((this._source) instanceof haxepunk_graphics_Image);
	this._types = new haxe_ds_StringMap();
	this.active = true;
	this.particleCount = 0;
};
$hxClasses["haxepunk.graphics.emitter.BaseEmitter"] = haxepunk_graphics_emitter_BaseEmitter;
haxepunk_graphics_emitter_BaseEmitter.__name__ = "haxepunk.graphics.emitter.BaseEmitter";
haxepunk_graphics_emitter_BaseEmitter.__super__ = haxepunk_Graphic;
haxepunk_graphics_emitter_BaseEmitter.prototype = $extend(haxepunk_Graphic.prototype,{
	hasType: function(typeName) {
		return Object.prototype.hasOwnProperty.call(this._types.h,typeName);
	}
	,render: function(point,camera) {
		var p = this._particle;
		var t;
		var pt;
		var type;
		var td;
		var atd;
		var std;
		var rtd;
		var ctd;
		while(p != null) {
			t = p._time / p._duration;
			if(p._firstDraw) {
				p._ox = point.x;
				p._oy = point.y;
				p._firstDraw = false;
			}
			type = p._type;
			this._source.smooth = this.smooth;
			this._source.flexibleLayer = this.flexibleLayer;
			this._source.pixelSnapping = this.pixelSnapping;
			this._source.blend = type._blendMode == null ? this.blend : type._blendMode;
			var n = type._trailLength;
			while(n >= 0) {
				pt = p._time - n-- * type._trailDelay;
				t = pt / p._duration;
				if(t < 0 || pt >= p._stopTime) {
					continue;
				}
				td = type._ease != null ? type._ease(t) : t;
				this.updateParticle(p,td);
				ctd = type._colorEase != null ? type._colorEase(t) : t;
				this._source.set_color(p.color(ctd));
				atd = type._alphaEase != null ? type._alphaEase(t) : t;
				this._source.set_alpha(p.alpha(atd) * Math.pow(type._trailAlpha,n));
				if(this._sourceIsImage) {
					var _source = this._source;
					rtd = type._rotationEase != null ? type._rotationEase(t) : t;
					_source.angle = p.angle(rtd);
					std = type._scaleEase != null ? type._scaleEase(t) : t;
					_source.scale = this.scale * p.scale(std);
				}
				this._source.x = p.x(td) - point.x + this.x - this.originX;
				this._source.y = p.y(td) - point.y + this.y - this.originY;
				this._source.render(point,camera);
			}
			p = p._next;
		}
	}
	,updateParticle: function(p,td) {
	}
	,update: function() {
		if(this._particle == null) {
			return;
		}
		var p = this._particle;
		var n;
		while(p != null) {
			if(!this.frozen) {
				p._time += haxepunk_HXP.elapsed;
			}
			var type = p._type;
			var t = p._time / p._duration;
			if(p._time - type._trailLength * type._trailDelay >= p._stopTime) {
				if(p._next != null) {
					p._next._prev = p._prev;
				}
				if(p._prev != null) {
					p._prev._next = p._next;
				} else {
					this._particle = p._next;
				}
				n = p._next;
				p._next = this._cache;
				p._prev = null;
				this._cache = p;
				p = n;
				this.particleCount--;
				continue;
			}
			p = p._next;
		}
	}
	,clear: function() {
		if(this._particle == null) {
			return;
		}
		var p = this._particle;
		var n;
		while(p != null) {
			n = p._next;
			p._next = this._cache;
			p._prev = null;
			this._cache = p;
			p = n;
			this.particleCount--;
		}
		this._particle = null;
	}
	,centerOrigin: function() {
		this.originX = this.originY = 0;
	}
	,addType: function(name,blendMode) {
		if(blendMode == null) {
			blendMode = this.blend;
		}
		var pt = this._types.h[name];
		if(pt != null) {
			throw haxe_Exception.thrown("Cannot add multiple particle types of the same name");
		}
		pt = new haxepunk_graphics_emitter_ParticleType(name,blendMode);
		this._types.h[name] = pt;
		return pt;
	}
	,emit: function(name,x,y,angle) {
		if(angle == null) {
			angle = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p;
		var type = this._types.h[name];
		if(type == null) {
			throw haxe_Exception.thrown("Particle type \"" + name + "\" does not exist.");
		}
		if(this._cache != null) {
			p = this._cache;
			this._cache = p._next;
		} else {
			p = new haxepunk_graphics_emitter_Particle();
		}
		p._next = this._particle;
		p._prev = null;
		if(p._next != null) {
			p._next._prev = p;
		}
		p._type = type;
		p._time = 0;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._duration = type._duration + type._durationRange * (haxepunk_math_Random._seed / 2147483647);
		p._stopTime = p._duration;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._angle = angle + type._angle + type._angleRange * (haxepunk_math_Random._seed / 2147483647);
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._startAngle = type._startAngle + type._startAngleRange * (haxepunk_math_Random._seed / 2147483647);
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._spanAngle = type._spanAngle + type._spanAngleRange * (haxepunk_math_Random._seed / 2147483647);
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		var d = type._distance + type._distanceRange * (haxepunk_math_Random._seed / 2147483647);
		p._moveX = Math.cos(p._angle * (Math.PI / -180)) * d;
		p._moveY = Math.sin(p._angle * (Math.PI / -180)) * d;
		p._x = x;
		p._y = y;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._gravity = type._gravity + type._gravityRange * (haxepunk_math_Random._seed / 2147483647);
		p._firstDraw = true;
		p._ox = p._oy = 0;
		this.particleCount++;
		return this._particle = p;
	}
	,emitInCircle: function(name,x,y,radius) {
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		var angle = haxepunk_math_Random._seed / 2147483647 * Math.PI * 2;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		radius *= haxepunk_math_Random._seed / 2147483647;
		return this.emit(name,x + Math.cos(angle) * radius,y + Math.sin(angle) * radius);
	}
	,emitInRectangle: function(name,x,y,width,height) {
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		var tmp = x + haxepunk_math_Random._seed / 2147483647 * width;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		return this.emit(name,tmp,y + haxepunk_math_Random._seed / 2147483647 * height);
	}
	,setMotion: function(name,angle,distance,duration,angleRange,distanceRange,durationRange,ease,backwards) {
		if(backwards == null) {
			backwards = false;
		}
		if(durationRange == null) {
			durationRange = 0;
		}
		if(distanceRange == null) {
			distanceRange = 0;
		}
		if(angleRange == null) {
			angleRange = 0;
		}
		var pt = this._types.h[name];
		if(pt == null) {
			return null;
		}
		return pt.setMotion(angle,distance,duration,angleRange,distanceRange,durationRange,ease,backwards);
	}
	,setGravity: function(name,gravity,gravityRange) {
		if(gravityRange == null) {
			gravityRange = 0;
		}
		if(gravity == null) {
			gravity = 0;
		}
		return this._types.h[name].setGravity(gravity,gravityRange);
	}
	,setAlpha: function(name,start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 1;
		}
		var pt = this._types.h[name];
		if(pt == null) {
			return null;
		}
		return pt.setAlpha(start,finish,ease);
	}
	,setScale: function(name,start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 1;
		}
		var pt = this._types.h[name];
		if(pt == null) {
			return null;
		}
		return pt.setScale(start,finish,ease);
	}
	,setRotation: function(name,startAngle,spanAngle,startAngleRange,spanAngleRange,ease) {
		if(spanAngleRange == null) {
			spanAngleRange = 0;
		}
		if(startAngleRange == null) {
			startAngleRange = 0;
		}
		var pt = this._types.h[name];
		if(pt == null) {
			return null;
		}
		return pt.setRotation(startAngle,spanAngle,startAngleRange,spanAngleRange,ease);
	}
	,setTrail: function(name,length,delay,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(delay == null) {
			delay = 0.1;
		}
		if(length == null) {
			length = 1;
		}
		var pt = this._types.h[name];
		if(pt == null) {
			return null;
		}
		return pt.setTrail(length,delay,alpha);
	}
	,setColor: function(name,start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 16777215;
		}
		var pt = this._types.h[name];
		if(pt == null) {
			return null;
		}
		return pt.setColor(start,finish,ease);
	}
	,__class__: haxepunk_graphics_emitter_BaseEmitter
});
var haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Spritemap = function(source) {
	this.frozen = false;
	this.scale = 1;
	haxepunk_Graphic.call(this);
	this._source = source;
	this._sourceIsImage = ((this._source) instanceof haxepunk_graphics_Image);
	this._types = new haxe_ds_StringMap();
	this.active = true;
	this.particleCount = 0;
};
$hxClasses["haxepunk.graphics.emitter.BaseEmitter_haxepunk_graphics_Spritemap"] = haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Spritemap;
haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Spritemap.__name__ = "haxepunk.graphics.emitter.BaseEmitter_haxepunk_graphics_Spritemap";
haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Spritemap.__super__ = haxepunk_Graphic;
haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Spritemap.prototype = $extend(haxepunk_Graphic.prototype,{
	hasType: function(typeName) {
		return this._types.exists(typeName);
	}
	,render: function(point,camera) {
		var p = this._particle;
		var t;
		var pt;
		var type;
		var td;
		var atd;
		var std;
		var rtd;
		var ctd;
		while(p != null) {
			t = p._time / p._duration;
			if(p._firstDraw) {
				p._ox = point.x;
				p._oy = point.y;
				p._firstDraw = false;
			}
			type = p._type;
			this._source.smooth = this.smooth;
			this._source.flexibleLayer = this.flexibleLayer;
			this._source.pixelSnapping = this.pixelSnapping;
			this._source.blend = type._blendMode == null ? this.blend : type._blendMode;
			var n = type._trailLength;
			while(n >= 0) {
				pt = p._time - n-- * type._trailDelay;
				t = pt / p._duration;
				if(t < 0 || pt >= p._stopTime) {
					continue;
				}
				td = type._ease != null ? type._ease(t) : t;
				this.updateParticle(p,td);
				ctd = type._colorEase != null ? type._colorEase(t) : t;
				this._source.set_color(p.color(ctd));
				atd = type._alphaEase != null ? type._alphaEase(t) : t;
				this._source.set_alpha(p.alpha(atd) * Math.pow(type._trailAlpha,n));
				if(this._sourceIsImage) {
					var _source = this._source;
					rtd = type._rotationEase != null ? type._rotationEase(t) : t;
					_source.angle = p.angle(rtd);
					std = type._scaleEase != null ? type._scaleEase(t) : t;
					_source.scale = this.scale * p.scale(std);
				}
				this._source.x = p.x(td) - point.x + this.x - this.originX;
				this._source.y = p.y(td) - point.y + this.y - this.originY;
				this._source.render(point,camera);
			}
			p = p._next;
		}
	}
	,updateParticle: function(p,td) {
	}
	,update: function() {
		if(this._particle == null) {
			return;
		}
		var p = this._particle;
		var n;
		while(p != null) {
			if(!this.frozen) {
				p._time += haxepunk_HXP.elapsed;
			}
			var type = p._type;
			var t = p._time / p._duration;
			if(p._time - type._trailLength * type._trailDelay >= p._stopTime) {
				if(p._next != null) {
					p._next._prev = p._prev;
				}
				if(p._prev != null) {
					p._prev._next = p._next;
				} else {
					this._particle = p._next;
				}
				n = p._next;
				p._next = this._cache;
				p._prev = null;
				this._cache = p;
				p = n;
				this.particleCount--;
				continue;
			}
			p = p._next;
		}
	}
	,clear: function() {
		if(this._particle == null) {
			return;
		}
		var p = this._particle;
		var n;
		while(p != null) {
			n = p._next;
			p._next = this._cache;
			p._prev = null;
			this._cache = p;
			p = n;
			this.particleCount--;
		}
		this._particle = null;
	}
	,centerOrigin: function() {
		this.originX = this.originY = 0;
	}
	,addType: function(name,blendMode) {
		if(blendMode == null) {
			blendMode = this.blend;
		}
		var pt = this._types.get(name);
		if(pt != null) {
			throw haxe_Exception.thrown("Cannot add multiple particle types of the same name");
		}
		pt = new haxepunk_graphics_emitter_ParticleType(name,blendMode);
		this._types.set(name,pt);
		return pt;
	}
	,emit: function(name,x,y,angle) {
		if(angle == null) {
			angle = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p;
		var type = this._types.get(name);
		if(type == null) {
			throw haxe_Exception.thrown("Particle type \"" + name + "\" does not exist.");
		}
		if(this._cache != null) {
			p = this._cache;
			this._cache = p._next;
		} else {
			p = new haxepunk_graphics_emitter_Particle();
		}
		p._next = this._particle;
		p._prev = null;
		if(p._next != null) {
			p._next._prev = p;
		}
		p._type = type;
		p._time = 0;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._duration = type._duration + type._durationRange * (haxepunk_math_Random._seed / 2147483647);
		p._stopTime = p._duration;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._angle = angle + type._angle + type._angleRange * (haxepunk_math_Random._seed / 2147483647);
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._startAngle = type._startAngle + type._startAngleRange * (haxepunk_math_Random._seed / 2147483647);
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._spanAngle = type._spanAngle + type._spanAngleRange * (haxepunk_math_Random._seed / 2147483647);
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		var d = type._distance + type._distanceRange * (haxepunk_math_Random._seed / 2147483647);
		p._moveX = Math.cos(p._angle * (Math.PI / -180)) * d;
		p._moveY = Math.sin(p._angle * (Math.PI / -180)) * d;
		p._x = x;
		p._y = y;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._gravity = type._gravity + type._gravityRange * (haxepunk_math_Random._seed / 2147483647);
		p._firstDraw = true;
		p._ox = p._oy = 0;
		this.particleCount++;
		return this._particle = p;
	}
	,emitInCircle: function(name,x,y,radius) {
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		var angle = haxepunk_math_Random._seed / 2147483647 * Math.PI * 2;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		radius *= haxepunk_math_Random._seed / 2147483647;
		return this.emit(name,x + Math.cos(angle) * radius,y + Math.sin(angle) * radius);
	}
	,emitInRectangle: function(name,x,y,width,height) {
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		var tmp = x + haxepunk_math_Random._seed / 2147483647 * width;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		return this.emit(name,tmp,y + haxepunk_math_Random._seed / 2147483647 * height);
	}
	,setMotion: function(name,angle,distance,duration,angleRange,distanceRange,durationRange,ease,backwards) {
		if(backwards == null) {
			backwards = false;
		}
		if(durationRange == null) {
			durationRange = 0;
		}
		if(distanceRange == null) {
			distanceRange = 0;
		}
		if(angleRange == null) {
			angleRange = 0;
		}
		var pt = this._types.get(name);
		if(pt == null) {
			return null;
		}
		return pt.setMotion(angle,distance,duration,angleRange,distanceRange,durationRange,ease,backwards);
	}
	,setGravity: function(name,gravity,gravityRange) {
		if(gravityRange == null) {
			gravityRange = 0;
		}
		if(gravity == null) {
			gravity = 0;
		}
		return this._types.get(name).setGravity(gravity,gravityRange);
	}
	,setAlpha: function(name,start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 1;
		}
		var pt = this._types.get(name);
		if(pt == null) {
			return null;
		}
		return pt.setAlpha(start,finish,ease);
	}
	,setScale: function(name,start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 1;
		}
		var pt = this._types.get(name);
		if(pt == null) {
			return null;
		}
		return pt.setScale(start,finish,ease);
	}
	,setRotation: function(name,startAngle,spanAngle,startAngleRange,spanAngleRange,ease) {
		if(spanAngleRange == null) {
			spanAngleRange = 0;
		}
		if(startAngleRange == null) {
			startAngleRange = 0;
		}
		var pt = this._types.get(name);
		if(pt == null) {
			return null;
		}
		return pt.setRotation(startAngle,spanAngle,startAngleRange,spanAngleRange,ease);
	}
	,setTrail: function(name,length,delay,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(delay == null) {
			delay = 0.1;
		}
		if(length == null) {
			length = 1;
		}
		var pt = this._types.get(name);
		if(pt == null) {
			return null;
		}
		return pt.setTrail(length,delay,alpha);
	}
	,setColor: function(name,start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 16777215;
		}
		var pt = this._types.get(name);
		if(pt == null) {
			return null;
		}
		return pt.setColor(start,finish,ease);
	}
	,__class__: haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Spritemap
});
var haxepunk_graphics_emitter_Emitter = function(source,frameWidth,frameHeight) {
	if(frameHeight == null) {
		frameHeight = 0;
	}
	if(frameWidth == null) {
		frameWidth = 0;
	}
	haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Spritemap.call(this,new haxepunk_graphics_Spritemap(source,frameWidth,frameHeight));
	this._source.centerOrigin();
	this._frames = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.graphics.emitter.Emitter"] = haxepunk_graphics_emitter_Emitter;
haxepunk_graphics_emitter_Emitter.__name__ = "haxepunk.graphics.emitter.Emitter";
haxepunk_graphics_emitter_Emitter.__super__ = haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Spritemap;
haxepunk_graphics_emitter_Emitter.prototype = $extend(haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Spritemap.prototype,{
	addType: function(name,blendMode) {
		return this.newType(name,null,blendMode);
	}
	,newType: function(name,frames,blendMode) {
		var pt = haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Spritemap.prototype.addType.call(this,name,blendMode);
		if(frames == null) {
			frames = [];
		}
		if(frames.length == 0) {
			frames.push(0);
		}
		this._frames.h[name] = frames;
		return pt;
	}
	,updateParticle: function(p,td) {
		var type = p._type;
		var frames = this._frames.h[type._name];
		var frame = td * frames.length | 0;
		if(frame >= frames.length - 1) {
			frame = frames.length - 1;
		}
		this._source.set_frame(frames[frame]);
	}
	,__class__: haxepunk_graphics_emitter_Emitter
});
var haxepunk_graphics_emitter_Particle = function() {
	this._gravity = 0;
	this._spanAngle = 0;
	this._startAngle = 0;
	this._oy = 0;
	this._ox = 0;
	this._firstDraw = false;
	this._angle = 0;
	this._moveY = 0;
	this._moveX = 0;
	this._y = 0;
	this._x = 0;
	this._duration = 0;
	this._stopTime = 0;
	this._time = 0;
	this.startScaleCoef = 1;
	this.startScaleCoef = 1 - Math.random() * 0.5;
};
$hxClasses["haxepunk.graphics.emitter.Particle"] = haxepunk_graphics_emitter_Particle;
haxepunk_graphics_emitter_Particle.__name__ = "haxepunk.graphics.emitter.Particle";
haxepunk_graphics_emitter_Particle.prototype = {
	x: function(td) {
		return this._x + this._ox + this._moveX * (this._type._backwards ? 1 - td : td);
	}
	,y: function(td) {
		return this._y + this._oy + this._moveY * (this._type._backwards ? 1 - td : td) + Math.pow(td * this._gravity,2);
	}
	,angle: function(td) {
		return this._startAngle + this._spanAngle * td;
	}
	,color: function(td) {
		var r = this._type._red + this._type._redRange * td;
		var g = this._type._green + this._type._greenRange * td;
		var b = this._type._blue + this._type._blueRange * td;
		var r1 = r * 255 | 0;
		var g1 = g * 255 | 0;
		var b1 = b * 255 | 0;
		if(b1 == null) {
			b1 = 0;
		}
		if(g1 == null) {
			g1 = 0;
		}
		if(r1 == null) {
			r1 = 0;
		}
		return (r1 & 255) << 16 | (g1 & 255) << 8 | b1 & 255;
	}
	,alpha: function(td) {
		return this._type._alpha + this._type._alphaRange * td;
	}
	,scale: function(td) {
		return (this._type._scale + this._type._scaleRange * td) * this.startScaleCoef;
	}
	,__class__: haxepunk_graphics_emitter_Particle
};
var haxepunk_graphics_emitter_ParticleType = function(name,blendMode) {
	this.startScaleRange = 0;
	this._red = this._green = this._blue = this._alpha = this._scale = this._trailLength = 1;
	this._blendMode = blendMode;
	this._redRange = this._greenRange = this._blueRange = this._alphaRange = this._scaleRange = this._trailDelay = 0;
	this._trailAlpha = 1;
	this._startAngle = this._spanAngle = this._startAngleRange = this._spanAngleRange = 0;
	this._name = name;
	this._angle = this._angleRange = 0;
	this._gravity = this._gravityRange = 0;
	this._duration = this._durationRange = 0;
	this._distance = this._distanceRange = 0;
};
$hxClasses["haxepunk.graphics.emitter.ParticleType"] = haxepunk_graphics_emitter_ParticleType;
haxepunk_graphics_emitter_ParticleType.__name__ = "haxepunk.graphics.emitter.ParticleType";
haxepunk_graphics_emitter_ParticleType.prototype = {
	ease: function(f,t) {
		if(f == null) {
			return t;
		} else {
			return f(t);
		}
	}
	,setMotion: function(angle,distance,duration,angleRange,distanceRange,durationRange,ease,backwards) {
		if(backwards == null) {
			backwards = false;
		}
		if(durationRange == null) {
			durationRange = 0;
		}
		if(distanceRange == null) {
			distanceRange = 0;
		}
		if(angleRange == null) {
			angleRange = 0;
		}
		this._angle = angle;
		this._distance = distance;
		this._duration = duration;
		this._angleRange = angleRange;
		this._distanceRange = distanceRange;
		this._durationRange = durationRange;
		this._ease = ease;
		this._backwards = backwards;
		return this;
	}
	,setMotionVector: function(x,y,duration,durationRange,ease) {
		if(durationRange == null) {
			durationRange = 0;
		}
		this._angle = Math.atan2(y,x);
		this._angleRange = 0;
		this._duration = duration;
		this._durationRange = durationRange;
		this._ease = ease;
		return this;
	}
	,setGravity: function(gravity,gravityRange) {
		if(gravityRange == null) {
			gravityRange = 0;
		}
		if(gravity == null) {
			gravity = 0;
		}
		this._gravity = gravity;
		this._gravityRange = gravityRange;
		return this;
	}
	,setAlpha: function(start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 1;
		}
		if(start < 0) {
			start = 0;
		} else if(start > 1) {
			start = 1;
		}
		if(finish < 0) {
			finish = 0;
		} else if(finish > 1) {
			finish = 1;
		}
		this._alpha = start;
		this._alphaRange = finish - start;
		this._alphaEase = ease;
		return this;
	}
	,setScale: function(start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 1;
		}
		this._scale = start;
		this._scaleRange = finish - start;
		this._scaleEase = ease;
		return this;
	}
	,setRotation: function(startAngle,spanAngle,startAngleRange,spanAngleRange,ease) {
		if(spanAngleRange == null) {
			spanAngleRange = 0;
		}
		if(startAngleRange == null) {
			startAngleRange = 0;
		}
		this._startAngle = startAngle;
		this._spanAngle = spanAngle;
		this._startAngleRange = startAngleRange;
		this._spanAngleRange = spanAngleRange;
		this._rotationEase = ease;
		return this;
	}
	,setColor: function(start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 16777215;
		}
		start &= 16777215;
		finish &= 16777215;
		this._red = (start >> 16 & 255) / 255;
		this._green = (start >> 8 & 255) / 255;
		this._blue = (start & 255) / 255;
		this._redRange = (finish >> 16 & 255) / 255 - this._red;
		this._greenRange = (finish >> 8 & 255) / 255 - this._green;
		this._blueRange = (finish & 255) / 255 - this._blue;
		this._colorEase = ease;
		return this;
	}
	,setTrail: function(length,delay,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(delay == null) {
			delay = 0.1;
		}
		if(length == null) {
			length = 1;
		}
		this._trailLength = length;
		this._trailDelay = delay;
		this._trailAlpha = alpha;
		return this;
	}
	,__class__: haxepunk_graphics_emitter_ParticleType
};
var haxepunk_graphics_hardware__$DrawCommand_DrawTriangle = function() {
	this.alpha = 0;
	this.color = 0;
	this.uvy3 = 0;
	this.uvx3 = 0;
	this.ty3 = 0;
	this.tx3 = 0;
	this.uvy2 = 0;
	this.uvx2 = 0;
	this.ty2 = 0;
	this.tx2 = 0;
	this.uvy1 = 0;
	this.uvx1 = 0;
	this.ty1 = 0;
	this.tx1 = 0;
};
$hxClasses["haxepunk.graphics.hardware._DrawCommand.DrawTriangle"] = haxepunk_graphics_hardware__$DrawCommand_DrawTriangle;
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.__name__ = "haxepunk.graphics.hardware._DrawCommand.DrawTriangle";
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.linesIntersect = function(x11,y11,x12,y12,x21,y21,x22,y22) {
	var d = (y22 - y21) * (x12 - x11) - (x22 - x21) * (y12 - y11);
	if(d != 0) {
		var ua = ((x22 - x21) * (y11 - y21) - (y22 - y21) * (x11 - x21)) / d;
		var ub = ((x12 - x11) * (y11 - y21) - (y12 - y11) * (x11 - x21)) / d;
		if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
			d = 0;
		}
	}
	return d == 0;
};
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.triangleContains = function(x1,y1,x2,y2,x3,y3,px,py) {
	var v0x = x3 - x1;
	var v0y = y3 - y1;
	var v1x = x2 - x1;
	var v1y = y2 - y1;
	var v2x = px - x1;
	var v2y = py - y1;
	var u = v2x * v0y - v2y * v0x;
	var v = v1x * v2y - v1y * v2x;
	var d = v1x * v0y - v1y * v0x;
	if(d < 0) {
		u = -u;
		v = -v;
		d = -d;
	}
	if(u >= 0 && v >= 0) {
		return u + v <= d;
	} else {
		return false;
	}
};
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.cross = function(ux,uy,vx,vy) {
	return ux * vy - uy * vx;
};
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.prototype = {
	get_x1: function() {
		var a = this.tx1;
		var b = this.tx2;
		var c = this.tx3;
		if(a > b) {
			if(b > c) {
				return c;
			} else {
				return b;
			}
		} else if(a > c) {
			return c;
		} else {
			return a;
		}
	}
	,get_x2: function() {
		var a = this.tx1;
		var b = this.tx2;
		var c = this.tx3;
		if(a < b) {
			if(b < c) {
				return c;
			} else {
				return b;
			}
		} else if(a < c) {
			return c;
		} else {
			return a;
		}
	}
	,get_y1: function() {
		var a = this.ty1;
		var b = this.ty2;
		var c = this.ty3;
		if(a > b) {
			if(b > c) {
				return c;
			} else {
				return b;
			}
		} else if(a > c) {
			return c;
		} else {
			return a;
		}
	}
	,get_y2: function() {
		var a = this.ty1;
		var b = this.ty2;
		var c = this.ty3;
		if(a < b) {
			if(b < c) {
				return c;
			} else {
				return b;
			}
		} else if(a < c) {
			return c;
		} else {
			return a;
		}
	}
	,intersectsTriangle: function(x1,y1,x2,y2,x3,y3) {
		var tmp;
		var tmp1;
		var tmp2;
		var tmp3;
		var tmp4;
		var tmp5;
		var tmp6;
		var tmp7;
		var tmp8;
		var tmp9;
		var tmp10;
		var tmp11;
		var tmp12;
		var x21 = this.tx1;
		var y21 = this.ty1;
		var x22 = this.tx2;
		var y22 = this.ty2;
		var d = (y22 - y21) * (x2 - x1) - (x22 - x21) * (y2 - y1);
		if(d != 0) {
			var ua = ((x22 - x21) * (y1 - y21) - (y22 - y21) * (x1 - x21)) / d;
			var ub = ((x2 - x1) * (y1 - y21) - (y2 - y1) * (x1 - x21)) / d;
			if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
				d = 0;
			}
		}
		if(d != 0) {
			var x21 = this.tx1;
			var y21 = this.ty1;
			var x22 = this.tx2;
			var y22 = this.ty2;
			var d = (y22 - y21) * (x3 - x2) - (x22 - x21) * (y3 - y2);
			if(d != 0) {
				var ua = ((x22 - x21) * (y2 - y21) - (y22 - y21) * (x2 - x21)) / d;
				var ub = ((x3 - x2) * (y2 - y21) - (y3 - y2) * (x2 - x21)) / d;
				if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
					d = 0;
				}
			}
			tmp12 = d == 0;
		} else {
			tmp12 = true;
		}
		if(!tmp12) {
			var x21 = this.tx1;
			var y21 = this.ty1;
			var x22 = this.tx2;
			var y22 = this.ty2;
			var d = (y22 - y21) * (x3 - x1) - (x22 - x21) * (y3 - y1);
			if(d != 0) {
				var ua = ((x22 - x21) * (y1 - y21) - (y22 - y21) * (x1 - x21)) / d;
				var ub = ((x3 - x1) * (y1 - y21) - (y3 - y1) * (x1 - x21)) / d;
				if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
					d = 0;
				}
			}
			tmp11 = d == 0;
		} else {
			tmp11 = true;
		}
		if(!tmp11) {
			var x21 = this.tx2;
			var y21 = this.ty2;
			var x22 = this.tx3;
			var y22 = this.ty3;
			var d = (y22 - y21) * (x2 - x1) - (x22 - x21) * (y2 - y1);
			if(d != 0) {
				var ua = ((x22 - x21) * (y1 - y21) - (y22 - y21) * (x1 - x21)) / d;
				var ub = ((x2 - x1) * (y1 - y21) - (y2 - y1) * (x1 - x21)) / d;
				if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
					d = 0;
				}
			}
			tmp10 = d == 0;
		} else {
			tmp10 = true;
		}
		if(!tmp10) {
			var x21 = this.tx2;
			var y21 = this.ty2;
			var x22 = this.tx3;
			var y22 = this.ty3;
			var d = (y22 - y21) * (x3 - x2) - (x22 - x21) * (y3 - y2);
			if(d != 0) {
				var ua = ((x22 - x21) * (y2 - y21) - (y22 - y21) * (x2 - x21)) / d;
				var ub = ((x3 - x2) * (y2 - y21) - (y3 - y2) * (x2 - x21)) / d;
				if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
					d = 0;
				}
			}
			tmp9 = d == 0;
		} else {
			tmp9 = true;
		}
		if(!tmp9) {
			var x21 = this.tx2;
			var y21 = this.ty2;
			var x22 = this.tx3;
			var y22 = this.ty3;
			var d = (y22 - y21) * (x3 - x1) - (x22 - x21) * (y3 - y1);
			if(d != 0) {
				var ua = ((x22 - x21) * (y1 - y21) - (y22 - y21) * (x1 - x21)) / d;
				var ub = ((x3 - x1) * (y1 - y21) - (y3 - y1) * (x1 - x21)) / d;
				if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
					d = 0;
				}
			}
			tmp8 = d == 0;
		} else {
			tmp8 = true;
		}
		if(!tmp8) {
			var x21 = this.tx1;
			var y21 = this.ty1;
			var x22 = this.tx3;
			var y22 = this.ty3;
			var d = (y22 - y21) * (x2 - x1) - (x22 - x21) * (y2 - y1);
			if(d != 0) {
				var ua = ((x22 - x21) * (y1 - y21) - (y22 - y21) * (x1 - x21)) / d;
				var ub = ((x2 - x1) * (y1 - y21) - (y2 - y1) * (x1 - x21)) / d;
				if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
					d = 0;
				}
			}
			tmp7 = d == 0;
		} else {
			tmp7 = true;
		}
		if(!tmp7) {
			var x21 = this.tx1;
			var y21 = this.ty1;
			var x22 = this.tx3;
			var y22 = this.ty3;
			var d = (y22 - y21) * (x3 - x2) - (x22 - x21) * (y3 - y2);
			if(d != 0) {
				var ua = ((x22 - x21) * (y2 - y21) - (y22 - y21) * (x2 - x21)) / d;
				var ub = ((x3 - x2) * (y2 - y21) - (y3 - y2) * (x2 - x21)) / d;
				if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
					d = 0;
				}
			}
			tmp6 = d == 0;
		} else {
			tmp6 = true;
		}
		if(!tmp6) {
			var x21 = this.tx1;
			var y21 = this.ty1;
			var x22 = this.tx3;
			var y22 = this.ty3;
			var d = (y22 - y21) * (x3 - x1) - (x22 - x21) * (y3 - y1);
			if(d != 0) {
				var ua = ((x22 - x21) * (y1 - y21) - (y22 - y21) * (x1 - x21)) / d;
				var ub = ((x3 - x1) * (y1 - y21) - (y3 - y1) * (x1 - x21)) / d;
				if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
					d = 0;
				}
			}
			tmp5 = d == 0;
		} else {
			tmp5 = true;
		}
		if(!tmp5) {
			var v0x = x3 - x1;
			var v0y = y3 - y1;
			var v1x = x2 - x1;
			var v1y = y2 - y1;
			var v2x = this.tx1 - x1;
			var v2y = this.ty1 - y1;
			var u = v2x * v0y - v2y * v0x;
			var v = v1x * v2y - v1y * v2x;
			var d = v1x * v0y - v1y * v0x;
			if(d < 0) {
				u = -u;
				v = -v;
				d = -d;
			}
			tmp4 = u >= 0 && v >= 0 && u + v <= d;
		} else {
			tmp4 = true;
		}
		if(!tmp4) {
			var v0x = x3 - x1;
			var v0y = y3 - y1;
			var v1x = x2 - x1;
			var v1y = y2 - y1;
			var v2x = this.tx2 - x1;
			var v2y = this.ty2 - y1;
			var u = v2x * v0y - v2y * v0x;
			var v = v1x * v2y - v1y * v2x;
			var d = v1x * v0y - v1y * v0x;
			if(d < 0) {
				u = -u;
				v = -v;
				d = -d;
			}
			tmp3 = u >= 0 && v >= 0 && u + v <= d;
		} else {
			tmp3 = true;
		}
		if(!tmp3) {
			var v0x = x3 - x1;
			var v0y = y3 - y1;
			var v1x = x2 - x1;
			var v1y = y2 - y1;
			var v2x = this.tx3 - x1;
			var v2y = this.ty3 - y1;
			var u = v2x * v0y - v2y * v0x;
			var v = v1x * v2y - v1y * v2x;
			var d = v1x * v0y - v1y * v0x;
			if(d < 0) {
				u = -u;
				v = -v;
				d = -d;
			}
			tmp2 = u >= 0 && v >= 0 && u + v <= d;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			var x11 = this.tx1;
			var y11 = this.ty1;
			var v0x = this.tx3 - x11;
			var v0y = this.ty3 - y11;
			var v1x = this.tx2 - x11;
			var v1y = this.ty2 - y11;
			var v2x = x1 - x11;
			var v2y = y1 - y11;
			var u = v2x * v0y - v2y * v0x;
			var v = v1x * v2y - v1y * v2x;
			var d = v1x * v0y - v1y * v0x;
			if(d < 0) {
				u = -u;
				v = -v;
				d = -d;
			}
			tmp1 = u >= 0 && v >= 0 && u + v <= d;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var x1 = this.tx1;
			var y1 = this.ty1;
			var v0x = this.tx3 - x1;
			var v0y = this.ty3 - y1;
			var v1x = this.tx2 - x1;
			var v1y = this.ty2 - y1;
			var v2x = x2 - x1;
			var v2y = y2 - y1;
			var u = v2x * v0y - v2y * v0x;
			var v = v1x * v2y - v1y * v2x;
			var d = v1x * v0y - v1y * v0x;
			if(d < 0) {
				u = -u;
				v = -v;
				d = -d;
			}
			tmp = u >= 0 && v >= 0 && u + v <= d;
		} else {
			tmp = true;
		}
		if(!tmp) {
			var x1 = this.tx1;
			var y1 = this.ty1;
			var v0x = this.tx3 - x1;
			var v0y = this.ty3 - y1;
			var v1x = this.tx2 - x1;
			var v1y = this.ty2 - y1;
			var v2x = x3 - x1;
			var v2y = y3 - y1;
			var u = v2x * v0y - v2y * v0x;
			var v = v1x * v2y - v1y * v2x;
			var d = v1x * v0y - v1y * v0x;
			if(d < 0) {
				u = -u;
				v = -v;
				d = -d;
			}
			if(u >= 0 && v >= 0) {
				return u + v <= d;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: haxepunk_graphics_hardware__$DrawCommand_DrawTriangle
	,__properties__: {get_y2:"get_y2",get_y1:"get_y1",get_x2:"get_x2",get_x1:"get_x1"}
};
var haxepunk_graphics_hardware_TriangleIterator = function() {
	this.triangle = null;
};
$hxClasses["haxepunk.graphics.hardware.TriangleIterator"] = haxepunk_graphics_hardware_TriangleIterator;
haxepunk_graphics_hardware_TriangleIterator.__name__ = "haxepunk.graphics.hardware.TriangleIterator";
haxepunk_graphics_hardware_TriangleIterator.prototype = {
	reset: function(triangle) {
		this.triangle = triangle;
	}
	,hasNext: function() {
		return this.triangle != null;
	}
	,next: function() {
		var current = this.triangle;
		this.triangle = this.triangle._next;
		return current;
	}
	,__class__: haxepunk_graphics_hardware_TriangleIterator
};
var haxepunk_graphics_hardware_DrawCommand = function() {
	this._iterator = new haxepunk_graphics_hardware_TriangleIterator();
	this.triangleCount = 0;
	this.bounds = new haxepunk_math_Rectangle();
	this.clipRect = null;
	this.blend = 1;
	this.smooth = false;
};
$hxClasses["haxepunk.graphics.hardware.DrawCommand"] = haxepunk_graphics_hardware_DrawCommand;
haxepunk_graphics_hardware_DrawCommand.__name__ = "haxepunk.graphics.hardware.DrawCommand";
haxepunk_graphics_hardware_DrawCommand.create = function(texture,shader,smooth,blend,clipRect) {
	var command;
	if(haxepunk_graphics_hardware_DrawCommand._pool != null) {
		command = haxepunk_graphics_hardware_DrawCommand._pool;
		haxepunk_graphics_hardware_DrawCommand._pool = haxepunk_graphics_hardware_DrawCommand._pool._next;
		command._prev = command._next = null;
	} else {
		command = new haxepunk_graphics_hardware_DrawCommand();
	}
	command.shader = shader;
	command.texture = texture;
	command.smooth = smooth;
	command.blend = blend;
	command.clipRect = clipRect;
	return command;
};
haxepunk_graphics_hardware_DrawCommand._prePopulatePool = function(n,m) {
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		var cmd = new haxepunk_graphics_hardware_DrawCommand();
		var _g2 = 0;
		var _g3 = m;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
			if(cmd.data == null) {
				cmd.data = data;
			} else {
				cmd._lastData._next = data;
			}
			cmd._lastData = data;
			++cmd.triangleCount;
			var a = data.tx1;
			var b = data.tx2;
			var c = data.tx3;
			var x1 = a > b ? b > c ? c : b : a > c ? c : a;
			var a1 = data.tx1;
			var b1 = data.tx2;
			var c1 = data.tx3;
			var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
			var a2 = data.ty1;
			var b2 = data.ty2;
			var c2 = data.ty3;
			var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
			var a3 = data.ty1;
			var b3 = data.ty2;
			var c3 = data.ty3;
			var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
			if(cmd.bounds.width == 0) {
				cmd.bounds.x = x1;
				cmd.bounds.width = x2 - x1;
			} else {
				if(x1 < cmd.bounds.x) {
					cmd.bounds.width += cmd.bounds.x - x1;
					cmd.bounds.x = x1;
				}
				var _this = cmd.bounds;
				if(x2 > _this.x + _this.width) {
					cmd.bounds.width = x2 - cmd.bounds.x;
				}
			}
			if(cmd.bounds.height == 0) {
				cmd.bounds.y = y1;
				cmd.bounds.height = y2 - y1;
			} else {
				if(y1 < cmd.bounds.y) {
					cmd.bounds.height += cmd.bounds.y - y1;
					cmd.bounds.y = y1;
				}
				var _this1 = cmd.bounds;
				if(y2 > _this1.y + _this1.height) {
					cmd.bounds.height = y2 - cmd.bounds.y;
				}
			}
		}
		cmd.recycle();
	}
	return haxepunk_graphics_hardware_DrawCommand._pool;
};
haxepunk_graphics_hardware_DrawCommand.prototype = {
	match: function(texture,shader,smooth,blend,clipRect) {
		if(this.smooth != smooth) {
			return false;
		} else if(this.texture != texture) {
			return false;
		} else if(this.shader.id != shader.id) {
			return false;
		} else if(this.blend != blend) {
			return false;
		} else {
			var aRectIsNull = this.clipRect == null;
			var bRectIsNull = clipRect == null;
			if(aRectIsNull != bRectIsNull) {
				return false;
			}
			if(aRectIsNull) {
				return true;
			} else if((this.clipRect.x | 0) == (clipRect.x | 0) && (this.clipRect.y | 0) == (clipRect.y | 0) && (this.clipRect.width | 0) == (clipRect.width | 0)) {
				return (this.clipRect.height | 0) == (clipRect.height | 0);
			} else {
				return false;
			}
		}
	}
	,addTriangle: function(tx1,ty1,uvx1,uvy1,tx2,ty2,uvx2,uvy2,tx3,ty3,uvx3,uvy3,color,alpha) {
		if(alpha > 0) {
			var onScreen;
			if(this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var _this = this.visibleArea;
				if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this.x + _this.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= this.visibleArea.x) {
					var _this = this.visibleArea;
					onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this.y + _this.height;
				} else {
					onScreen1 = false;
				}
				onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= this.visibleArea.y;
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = tx1;
				data1.ty1 = ty1;
				data1.uvx1 = uvx1;
				data1.uvy1 = uvy1;
				data1.tx2 = tx2;
				data1.ty2 = ty2;
				data1.uvx2 = uvx2;
				data1.uvy2 = uvy2;
				data1.tx3 = tx3;
				data1.ty3 = ty3;
				data1.uvx3 = uvx3;
				data1.uvy3 = uvy3;
				data1.color = color;
				data1.alpha = alpha;
				if(this.data == null) {
					this.data = data1;
				} else {
					this._lastData._next = data1;
				}
				this._lastData = data1;
				++this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x2 = a < b ? b < c ? c : b : a < c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a = data1.ty1;
				var b = data1.ty2;
				var c = data1.ty3;
				var y2 = a < b ? b < c ? c : b : a < c ? c : a;
				if(this.bounds.width == 0) {
					this.bounds.x = x1;
					this.bounds.width = x2 - x1;
				} else {
					if(x1 < this.bounds.x) {
						this.bounds.width += this.bounds.x - x1;
						this.bounds.x = x1;
					}
					var _this = this.bounds;
					if(x2 > _this.x + _this.width) {
						this.bounds.width = x2 - this.bounds.x;
					}
				}
				if(this.bounds.height == 0) {
					this.bounds.y = y1;
					this.bounds.height = y2 - y1;
				} else {
					if(y1 < this.bounds.y) {
						this.bounds.height += this.bounds.y - y1;
						this.bounds.y = y1;
					}
					var _this = this.bounds;
					if(y2 > _this.y + _this.height) {
						this.bounds.height = y2 - this.bounds.y;
					}
				}
			}
		}
	}
	,recycle: function() {
		this.triangleCount = 0;
		this.texture = null;
		if(this.data != null) {
			this._lastData._next = haxepunk_graphics_hardware_DrawCommand._dataPool;
			haxepunk_graphics_hardware_DrawCommand._dataPool = this.data;
		}
		this.data = this._lastData = null;
		this.bounds.setTo(0,0,0,0);
		var command = this;
		while(command._next != null) {
			command = command._next;
			command.triangleCount = 0;
			command.texture = null;
			if(command.data != null) {
				command._lastData._next = haxepunk_graphics_hardware_DrawCommand._dataPool;
				haxepunk_graphics_hardware_DrawCommand._dataPool = command.data;
			}
			command.data = command._lastData = null;
			command.bounds.setTo(0,0,0,0);
		}
		command._next = haxepunk_graphics_hardware_DrawCommand._pool;
		haxepunk_graphics_hardware_DrawCommand._pool = this;
	}
	,get_triangles: function() {
		this._iterator.triangle = this.data;
		return this._iterator;
	}
	,getData: function() {
		var data;
		if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
			data = haxepunk_graphics_hardware_DrawCommand._dataPool;
			haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
			data._next = null;
		} else {
			data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
		}
		return data;
	}
	,addData: function(data) {
		if(this.data == null) {
			this.data = data;
		} else {
			this._lastData._next = data;
		}
		this._lastData = data;
		++this.triangleCount;
		var a = data.tx1;
		var b = data.tx2;
		var c = data.tx3;
		var x1 = a > b ? b > c ? c : b : a > c ? c : a;
		var a = data.tx1;
		var b = data.tx2;
		var c = data.tx3;
		var x2 = a < b ? b < c ? c : b : a < c ? c : a;
		var a = data.ty1;
		var b = data.ty2;
		var c = data.ty3;
		var y1 = a > b ? b > c ? c : b : a > c ? c : a;
		var a = data.ty1;
		var b = data.ty2;
		var c = data.ty3;
		var y2 = a < b ? b < c ? c : b : a < c ? c : a;
		if(this.bounds.width == 0) {
			this.bounds.x = x1;
			this.bounds.width = x2 - x1;
		} else {
			if(x1 < this.bounds.x) {
				this.bounds.width += this.bounds.x - x1;
				this.bounds.x = x1;
			}
			var _this = this.bounds;
			if(x2 > _this.x + _this.width) {
				this.bounds.width = x2 - this.bounds.x;
			}
		}
		if(this.bounds.height == 0) {
			this.bounds.y = y1;
			this.bounds.height = y2 - y1;
		} else {
			if(y1 < this.bounds.y) {
				this.bounds.height += this.bounds.y - y1;
				this.bounds.y = y1;
			}
			var _this = this.bounds;
			if(y2 > _this.y + _this.height) {
				this.bounds.height = y2 - this.bounds.y;
			}
		}
	}
	,recycleData: function() {
		this.triangleCount = 0;
		this.texture = null;
		if(this.data != null) {
			this._lastData._next = haxepunk_graphics_hardware_DrawCommand._dataPool;
			haxepunk_graphics_hardware_DrawCommand._dataPool = this.data;
		}
		this.data = this._lastData = null;
		this.bounds.setTo(0,0,0,0);
	}
	,__class__: haxepunk_graphics_hardware_DrawCommand
	,__properties__: {get_triangles:"get_triangles"}
};
var haxepunk_graphics_hardware_DrawCommandIterator = function() {
	this.current = null;
	this.command = null;
};
$hxClasses["haxepunk.graphics.hardware.DrawCommandIterator"] = haxepunk_graphics_hardware_DrawCommandIterator;
haxepunk_graphics_hardware_DrawCommandIterator.__name__ = "haxepunk.graphics.hardware.DrawCommandIterator";
haxepunk_graphics_hardware_DrawCommandIterator.prototype = {
	reset: function() {
		this.current = this.command;
	}
	,hasNext: function() {
		return this.current != null;
	}
	,next: function() {
		var result = this.current;
		this.current = this.current._next;
		return result;
	}
	,recycle: function() {
		if(this.command != null) {
			this.command.recycle();
		}
		this.command = this.current = null;
	}
	,__class__: haxepunk_graphics_hardware_DrawCommandIterator
};
var haxepunk_graphics_hardware_DrawCommandBatch = function() {
	this.head = new haxepunk_graphics_hardware_DrawCommandIterator();
	this.visibleArea = new haxepunk_math_Rectangle();
};
$hxClasses["haxepunk.graphics.hardware.DrawCommandBatch"] = haxepunk_graphics_hardware_DrawCommandBatch;
haxepunk_graphics_hardware_DrawCommandBatch.__name__ = "haxepunk.graphics.hardware.DrawCommandBatch";
haxepunk_graphics_hardware_DrawCommandBatch.prototype = {
	recycle: function() {
		this.head.recycle();
		this.last = null;
	}
	,iterator: function() {
		this.head.reset();
		return this.head;
	}
	,getDrawCommand: function(texture,shader,smooth,blend,clipRect,x1,y1,x2,y2,x3,y3,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var tmp;
		if(this.last != null) {
			var _this = this.last;
			if(_this.smooth != smooth) {
				tmp = false;
			} else if(_this.texture != texture) {
				tmp = false;
			} else if(_this.shader.id != shader.id) {
				tmp = false;
			} else if(_this.blend != blend) {
				tmp = false;
			} else {
				var aRectIsNull = _this.clipRect == null;
				var bRectIsNull = clipRect == null;
				tmp = aRectIsNull != bRectIsNull ? false : aRectIsNull ? true : (_this.clipRect.x | 0) == (clipRect.x | 0) && (_this.clipRect.y | 0) == (clipRect.y | 0) && (_this.clipRect.width | 0) == (clipRect.width | 0) && (_this.clipRect.height | 0) == (clipRect.height | 0);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			return this.last;
		} else if((x1 != 0 || x2 != 0 || x3 != 0) && (y1 != 0 || y2 != 0 || y3 != 0)) {
			var t = 0;
			var current = this.last;
			var found = false;
			while(current != null && t < haxepunk_graphics_hardware_DrawCommandBatch.maxTriangleChecks) {
				var tmp;
				if(current.smooth != smooth) {
					tmp = false;
				} else if(current.texture != texture) {
					tmp = false;
				} else if(current.shader.id != shader.id) {
					tmp = false;
				} else if(current.blend != blend) {
					tmp = false;
				} else {
					var aRectIsNull = current.clipRect == null;
					var bRectIsNull = clipRect == null;
					tmp = aRectIsNull != bRectIsNull ? false : aRectIsNull ? true : (current.clipRect.x | 0) == (clipRect.x | 0) && (current.clipRect.y | 0) == (clipRect.y | 0) && (current.clipRect.width | 0) == (clipRect.width | 0) && (current.clipRect.height | 0) == (clipRect.height | 0);
				}
				if(tmp) {
					found = true;
					if(flexibleLayer) {
						return current;
					}
					break;
				}
				t += current.triangleCount;
				current = current._prev;
			}
			if(found) {
				var rx1 = x1 > x2 ? x2 > x3 ? x3 : x2 : x1 > x3 ? x3 : x1;
				var rx2 = x1 < x2 ? x2 < x3 ? x3 : x2 : x1 < x3 ? x3 : x1;
				var ry1 = y1 > y2 ? y2 > y3 ? y3 : y2 : y1 > y3 ? y3 : y1;
				var ry2 = y1 < y2 ? y2 < y3 ? y3 : y2 : y1 < y3 ? y3 : y1;
				haxepunk_graphics_hardware_DrawCommandBatch._bounds.setTo(rx1,ry1,rx2 - rx1,ry2 - ry1);
				t = 0;
				current = this.last;
				while(current != null) {
					var tmp;
					if(current.smooth != smooth) {
						tmp = false;
					} else if(current.texture != texture) {
						tmp = false;
					} else if(current.shader.id != shader.id) {
						tmp = false;
					} else if(current.blend != blend) {
						tmp = false;
					} else {
						var aRectIsNull = current.clipRect == null;
						var bRectIsNull = clipRect == null;
						tmp = aRectIsNull != bRectIsNull ? false : aRectIsNull ? true : (current.clipRect.x | 0) == (clipRect.x | 0) && (current.clipRect.y | 0) == (clipRect.y | 0) && (current.clipRect.width | 0) == (clipRect.width | 0) && (current.clipRect.height | 0) == (clipRect.height | 0);
					}
					if(tmp) {
						return current;
					} else if(current.bounds.intersects(haxepunk_graphics_hardware_DrawCommandBatch._bounds)) {
						var collision = false;
						current._iterator.triangle = current.data;
						var _g = current._iterator;
						while(_g.triangle != null) {
							var current1 = _g.triangle;
							_g.triangle = _g.triangle._next;
							var triangle = current1;
							if(t++ >= haxepunk_graphics_hardware_DrawCommandBatch.maxTriangleChecks) {
								break;
							}
							var tmp1;
							var tmp2;
							var tmp3;
							var tmp4;
							var tmp5;
							var tmp6;
							var tmp7;
							var tmp8;
							var tmp9;
							var tmp10;
							var tmp11;
							var tmp12;
							var tmp13;
							var tmp14;
							var x21 = triangle.tx1;
							var y21 = triangle.ty1;
							var x22 = triangle.tx2;
							var y22 = triangle.ty2;
							var d = (y22 - y21) * (x2 - x1) - (x22 - x21) * (y2 - y1);
							if(d != 0) {
								var ua = ((x22 - x21) * (y1 - y21) - (y22 - y21) * (x1 - x21)) / d;
								var ub = ((x2 - x1) * (y1 - y21) - (y2 - y1) * (x1 - x21)) / d;
								if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
									d = 0;
								}
							}
							if(d != 0) {
								var x211 = triangle.tx1;
								var y211 = triangle.ty1;
								var x221 = triangle.tx2;
								var y221 = triangle.ty2;
								var d1 = (y221 - y211) * (x3 - x2) - (x221 - x211) * (y3 - y2);
								if(d1 != 0) {
									var ua1 = ((x221 - x211) * (y2 - y211) - (y221 - y211) * (x2 - x211)) / d1;
									var ub1 = ((x3 - x2) * (y2 - y211) - (y3 - y2) * (x2 - x211)) / d1;
									if(ua1 >= 0 && ua1 <= 1 && ub1 >= 0 && ub1 <= 1) {
										d1 = 0;
									}
								}
								tmp14 = d1 == 0;
							} else {
								tmp14 = true;
							}
							if(!tmp14) {
								var x212 = triangle.tx1;
								var y212 = triangle.ty1;
								var x222 = triangle.tx2;
								var y222 = triangle.ty2;
								var d2 = (y222 - y212) * (x3 - x1) - (x222 - x212) * (y3 - y1);
								if(d2 != 0) {
									var ua2 = ((x222 - x212) * (y1 - y212) - (y222 - y212) * (x1 - x212)) / d2;
									var ub2 = ((x3 - x1) * (y1 - y212) - (y3 - y1) * (x1 - x212)) / d2;
									if(ua2 >= 0 && ua2 <= 1 && ub2 >= 0 && ub2 <= 1) {
										d2 = 0;
									}
								}
								tmp13 = d2 == 0;
							} else {
								tmp13 = true;
							}
							if(!tmp13) {
								var x213 = triangle.tx2;
								var y213 = triangle.ty2;
								var x223 = triangle.tx3;
								var y223 = triangle.ty3;
								var d3 = (y223 - y213) * (x2 - x1) - (x223 - x213) * (y2 - y1);
								if(d3 != 0) {
									var ua3 = ((x223 - x213) * (y1 - y213) - (y223 - y213) * (x1 - x213)) / d3;
									var ub3 = ((x2 - x1) * (y1 - y213) - (y2 - y1) * (x1 - x213)) / d3;
									if(ua3 >= 0 && ua3 <= 1 && ub3 >= 0 && ub3 <= 1) {
										d3 = 0;
									}
								}
								tmp12 = d3 == 0;
							} else {
								tmp12 = true;
							}
							if(!tmp12) {
								var x214 = triangle.tx2;
								var y214 = triangle.ty2;
								var x224 = triangle.tx3;
								var y224 = triangle.ty3;
								var d4 = (y224 - y214) * (x3 - x2) - (x224 - x214) * (y3 - y2);
								if(d4 != 0) {
									var ua4 = ((x224 - x214) * (y2 - y214) - (y224 - y214) * (x2 - x214)) / d4;
									var ub4 = ((x3 - x2) * (y2 - y214) - (y3 - y2) * (x2 - x214)) / d4;
									if(ua4 >= 0 && ua4 <= 1 && ub4 >= 0 && ub4 <= 1) {
										d4 = 0;
									}
								}
								tmp11 = d4 == 0;
							} else {
								tmp11 = true;
							}
							if(!tmp11) {
								var x215 = triangle.tx2;
								var y215 = triangle.ty2;
								var x225 = triangle.tx3;
								var y225 = triangle.ty3;
								var d5 = (y225 - y215) * (x3 - x1) - (x225 - x215) * (y3 - y1);
								if(d5 != 0) {
									var ua5 = ((x225 - x215) * (y1 - y215) - (y225 - y215) * (x1 - x215)) / d5;
									var ub5 = ((x3 - x1) * (y1 - y215) - (y3 - y1) * (x1 - x215)) / d5;
									if(ua5 >= 0 && ua5 <= 1 && ub5 >= 0 && ub5 <= 1) {
										d5 = 0;
									}
								}
								tmp10 = d5 == 0;
							} else {
								tmp10 = true;
							}
							if(!tmp10) {
								var x216 = triangle.tx1;
								var y216 = triangle.ty1;
								var x226 = triangle.tx3;
								var y226 = triangle.ty3;
								var d6 = (y226 - y216) * (x2 - x1) - (x226 - x216) * (y2 - y1);
								if(d6 != 0) {
									var ua6 = ((x226 - x216) * (y1 - y216) - (y226 - y216) * (x1 - x216)) / d6;
									var ub6 = ((x2 - x1) * (y1 - y216) - (y2 - y1) * (x1 - x216)) / d6;
									if(ua6 >= 0 && ua6 <= 1 && ub6 >= 0 && ub6 <= 1) {
										d6 = 0;
									}
								}
								tmp9 = d6 == 0;
							} else {
								tmp9 = true;
							}
							if(!tmp9) {
								var x217 = triangle.tx1;
								var y217 = triangle.ty1;
								var x227 = triangle.tx3;
								var y227 = triangle.ty3;
								var d7 = (y227 - y217) * (x3 - x2) - (x227 - x217) * (y3 - y2);
								if(d7 != 0) {
									var ua7 = ((x227 - x217) * (y2 - y217) - (y227 - y217) * (x2 - x217)) / d7;
									var ub7 = ((x3 - x2) * (y2 - y217) - (y3 - y2) * (x2 - x217)) / d7;
									if(ua7 >= 0 && ua7 <= 1 && ub7 >= 0 && ub7 <= 1) {
										d7 = 0;
									}
								}
								tmp8 = d7 == 0;
							} else {
								tmp8 = true;
							}
							if(!tmp8) {
								var x218 = triangle.tx1;
								var y218 = triangle.ty1;
								var x228 = triangle.tx3;
								var y228 = triangle.ty3;
								var d8 = (y228 - y218) * (x3 - x1) - (x228 - x218) * (y3 - y1);
								if(d8 != 0) {
									var ua8 = ((x228 - x218) * (y1 - y218) - (y228 - y218) * (x1 - x218)) / d8;
									var ub8 = ((x3 - x1) * (y1 - y218) - (y3 - y1) * (x1 - x218)) / d8;
									if(ua8 >= 0 && ua8 <= 1 && ub8 >= 0 && ub8 <= 1) {
										d8 = 0;
									}
								}
								tmp7 = d8 == 0;
							} else {
								tmp7 = true;
							}
							if(!tmp7) {
								var v0x = x3 - x1;
								var v0y = y3 - y1;
								var v1x = x2 - x1;
								var v1y = y2 - y1;
								var v2x = triangle.tx1 - x1;
								var v2y = triangle.ty1 - y1;
								var u = v2x * v0y - v2y * v0x;
								var v = v1x * v2y - v1y * v2x;
								var d9 = v1x * v0y - v1y * v0x;
								if(d9 < 0) {
									u = -u;
									v = -v;
									d9 = -d9;
								}
								tmp6 = u >= 0 && v >= 0 && u + v <= d9;
							} else {
								tmp6 = true;
							}
							if(!tmp6) {
								var v0x1 = x3 - x1;
								var v0y1 = y3 - y1;
								var v1x1 = x2 - x1;
								var v1y1 = y2 - y1;
								var v2x1 = triangle.tx2 - x1;
								var v2y1 = triangle.ty2 - y1;
								var u1 = v2x1 * v0y1 - v2y1 * v0x1;
								var v1 = v1x1 * v2y1 - v1y1 * v2x1;
								var d10 = v1x1 * v0y1 - v1y1 * v0x1;
								if(d10 < 0) {
									u1 = -u1;
									v1 = -v1;
									d10 = -d10;
								}
								tmp5 = u1 >= 0 && v1 >= 0 && u1 + v1 <= d10;
							} else {
								tmp5 = true;
							}
							if(!tmp5) {
								var v0x2 = x3 - x1;
								var v0y2 = y3 - y1;
								var v1x2 = x2 - x1;
								var v1y2 = y2 - y1;
								var v2x2 = triangle.tx3 - x1;
								var v2y2 = triangle.ty3 - y1;
								var u2 = v2x2 * v0y2 - v2y2 * v0x2;
								var v2 = v1x2 * v2y2 - v1y2 * v2x2;
								var d11 = v1x2 * v0y2 - v1y2 * v0x2;
								if(d11 < 0) {
									u2 = -u2;
									v2 = -v2;
									d11 = -d11;
								}
								tmp4 = u2 >= 0 && v2 >= 0 && u2 + v2 <= d11;
							} else {
								tmp4 = true;
							}
							if(!tmp4) {
								var x11 = triangle.tx1;
								var y11 = triangle.ty1;
								var v0x3 = triangle.tx3 - x11;
								var v0y3 = triangle.ty3 - y11;
								var v1x3 = triangle.tx2 - x11;
								var v1y3 = triangle.ty2 - y11;
								var v2x3 = x1 - x11;
								var v2y3 = y1 - y11;
								var u3 = v2x3 * v0y3 - v2y3 * v0x3;
								var v3 = v1x3 * v2y3 - v1y3 * v2x3;
								var d12 = v1x3 * v0y3 - v1y3 * v0x3;
								if(d12 < 0) {
									u3 = -u3;
									v3 = -v3;
									d12 = -d12;
								}
								tmp3 = u3 >= 0 && v3 >= 0 && u3 + v3 <= d12;
							} else {
								tmp3 = true;
							}
							if(!tmp3) {
								var x12 = triangle.tx1;
								var y12 = triangle.ty1;
								var v0x4 = triangle.tx3 - x12;
								var v0y4 = triangle.ty3 - y12;
								var v1x4 = triangle.tx2 - x12;
								var v1y4 = triangle.ty2 - y12;
								var v2x4 = x2 - x12;
								var v2y4 = y2 - y12;
								var u4 = v2x4 * v0y4 - v2y4 * v0x4;
								var v4 = v1x4 * v2y4 - v1y4 * v2x4;
								var d13 = v1x4 * v0y4 - v1y4 * v0x4;
								if(d13 < 0) {
									u4 = -u4;
									v4 = -v4;
									d13 = -d13;
								}
								tmp2 = u4 >= 0 && v4 >= 0 && u4 + v4 <= d13;
							} else {
								tmp2 = true;
							}
							if(!tmp2) {
								var x13 = triangle.tx1;
								var y13 = triangle.ty1;
								var v0x5 = triangle.tx3 - x13;
								var v0y5 = triangle.ty3 - y13;
								var v1x5 = triangle.tx2 - x13;
								var v1y5 = triangle.ty2 - y13;
								var v2x5 = x3 - x13;
								var v2y5 = y3 - y13;
								var u5 = v2x5 * v0y5 - v2y5 * v0x5;
								var v5 = v1x5 * v2y5 - v1y5 * v2x5;
								var d14 = v1x5 * v0y5 - v1y5 * v0x5;
								if(d14 < 0) {
									u5 = -u5;
									v5 = -v5;
									d14 = -d14;
								}
								tmp1 = u5 >= 0 && v5 >= 0 && u5 + v5 <= d14;
							} else {
								tmp1 = true;
							}
							if(tmp1) {
								collision = true;
								break;
							}
						}
						if(collision) {
							break;
						}
					}
					current = current._prev;
				}
			}
		}
		while(this.last != null && this.last.data == null) {
			var l = this.last;
			this.last = this.last._prev;
			if(this.last != null) {
				this.last._next = null;
			}
			l.recycle();
		}
		var command = haxepunk_graphics_hardware_DrawCommand.create(texture,shader,smooth,blend,clipRect);
		command.visibleArea = this.visibleArea;
		if(this.last == null) {
			this.head.command = this.last = command;
			command._prev = null;
		} else {
			this.last._next = command;
			command._prev = this.last;
			this.last = command;
		}
		return command;
	}
	,addRect: function(texture,shader,smooth,blend,clipRect,rx,ry,rw,rh,a,b,c,d,tx,ty,color,alpha,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / (texture == null ? 0 : texture.width);
				uvy1 = ry / (texture == null ? 0 : texture.height);
				uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
				uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
			}
			var xa = rw * a + tx;
			var yb = rw * b + ty;
			var xc = rh * c + tx;
			var yd = rh * d + ty;
			var command = this.getDrawCommand(texture,shader,smooth,blend,clipRect,tx,ty,xa,yb,xc,yd,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((tx > xa ? xa > xc ? xc : xa : tx > xc ? xc : tx) <= _this.x + _this.width && (tx < xa ? xa < xc ? xc : xa : tx < xc ? xc : tx) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (ty > yb ? yb > yd ? yd : yb : ty > yd ? yd : ty) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (ty < yb ? yb < yd ? yd : yb : ty < yd ? yd : ty) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx;
					data1.ty1 = ty;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c1 = data1.tx3;
					var x2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y1 = a > b ? b > c1 ? c1 : b : a > c1 ? c1 : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c1 = data1.ty3;
					var y2 = a < b ? b < c1 ? c1 : b : a < c1 ? c1 : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this.x + _this.width && (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = xc;
					data1.ty1 = yd;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy2;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = uvx2;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x2 = a < b ? b < c ? c : b : a < c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y2 = a < b ? b < c ? c : b : a < c ? c : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,addTriangle: function(texture,shader,smooth,blend,clipRect,tx1,ty1,uvx1,uvy1,tx2,ty2,uvx2,uvy2,tx3,ty3,uvx3,uvy3,color,alpha,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha > 0) {
			var command = this.getDrawCommand(texture,shader,smooth,blend,clipRect,tx1,ty1,tx2,ty2,tx3,ty3,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this = command.visibleArea;
					if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this.x + _this.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= command.visibleArea.x) {
						var _this = command.visibleArea;
						onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this.y + _this.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= command.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx1;
					data1.ty1 = ty1;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = tx2;
					data1.ty2 = ty2;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy2;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = uvx3;
					data1.uvy3 = uvy3;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x2 = a < b ? b < c ? c : b : a < c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a = data1.ty1;
					var b = data1.ty2;
					var c = data1.ty3;
					var y2 = a < b ? b < c ? c : b : a < c ? c : a;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this = command.bounds;
						if(x2 > _this.x + _this.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this = command.bounds;
						if(y2 > _this.y + _this.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,__class__: haxepunk_graphics_hardware_DrawCommandBatch
};
var haxepunk_graphics_hardware_FrameBuffer = function() {
	this._height = 0;
	this._width = 0;
};
$hxClasses["haxepunk.graphics.hardware.FrameBuffer"] = haxepunk_graphics_hardware_FrameBuffer;
haxepunk_graphics_hardware_FrameBuffer.__name__ = "haxepunk.graphics.hardware.FrameBuffer";
haxepunk_graphics_hardware_FrameBuffer.prototype = {
	build: function() {
		this.framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		this.resize();
	}
	,destroy: function() {
		this.texture = null;
	}
	,resize: function() {
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.texture != null) {
			lime_graphics_opengl_GL.context.deleteTexture(this.texture);
		}
		this._width = haxepunk_HXP.screen.width;
		this._height = haxepunk_HXP.screen.height;
		var width = this._width;
		var height = this._height;
		this.texture = lime_graphics_opengl_GL.context.createTexture();
		lime_graphics_opengl_GL.context.bindTexture(3553,this.texture);
		var border = 0;
		var srcData = null;
		var srcOffset = null;
		var this1 = lime_graphics_opengl_GL.context;
		if(srcOffset != null) {
			this1.texImage2D(3553,0,6408,width,height,border,6408,5121,srcData,srcOffset);
		} else {
			this1.texImage2D(3553,0,6408,width,height,border,6408,5121,srcData);
		}
		lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9729);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,this.texture,0);
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
	}
	,createTexture: function(width,height) {
		this.texture = lime_graphics_opengl_GL.context.createTexture();
		lime_graphics_opengl_GL.context.bindTexture(3553,this.texture);
		var border = 0;
		var srcData = null;
		var srcOffset = null;
		var this1 = lime_graphics_opengl_GL.context;
		if(srcOffset != null) {
			this1.texImage2D(3553,0,6408,width,height,border,6408,5121,srcData,srcOffset);
		} else {
			this1.texImage2D(3553,0,6408,width,height,border,6408,5121,srcData);
		}
		lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9729);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,this.texture,0);
	}
	,bindFrameBuffer: function() {
		if(this.texture == null || this.framebuffer == null) {
			this.destroy();
			this.build();
		} else if(haxepunk_HXP.screen.width != this._width || haxepunk_HXP.screen.height != this._height) {
			this.resize();
		}
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.framebuffer);
		lime_graphics_opengl_GL.context.clearColor(0,0,0,0);
		lime_graphics_opengl_GL.context.clear(16640);
	}
	,__class__: haxepunk_graphics_hardware_FrameBuffer
};
var haxepunk_graphics_hardware_HardwareRenderer = function() {
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.defaultFramebuffer = null;
	if(haxepunk_graphics_hardware_HardwareRenderer._ortho == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this1 = new Float32Array(16);
		haxepunk_graphics_hardware_HardwareRenderer._ortho = this1;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[0] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[1] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[2] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[3] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[4] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[5] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[6] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[7] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[8] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[9] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[10] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[11] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[12] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[13] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[14] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[15] = 1;
	}
};
$hxClasses["haxepunk.graphics.hardware.HardwareRenderer"] = haxepunk_graphics_hardware_HardwareRenderer;
haxepunk_graphics_hardware_HardwareRenderer.__name__ = "haxepunk.graphics.hardware.HardwareRenderer";
haxepunk_graphics_hardware_HardwareRenderer.ortho = function(x0,x1,y0,y1) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	haxepunk_graphics_hardware_HardwareRenderer._ortho[0] = 2.0 * sx;
	haxepunk_graphics_hardware_HardwareRenderer._ortho[5] = 2.0 * sy;
	haxepunk_graphics_hardware_HardwareRenderer._ortho[12] = -(x0 + x1) * sx;
	haxepunk_graphics_hardware_HardwareRenderer._ortho[13] = -(y0 + y1) * sy;
};
haxepunk_graphics_hardware_HardwareRenderer.setBlendMode = function(blend) {
	switch(blend) {
	case 0:
		lime_graphics_opengl_GL.context.blendEquation(32774);
		lime_graphics_opengl_GL.context.blendFuncSeparate(1,1,0,1);
		break;
	case 1:
		lime_graphics_opengl_GL.context.blendEquation(32774);
		lime_graphics_opengl_GL.context.blendFunc(1,771);
		break;
	case 9:
		lime_graphics_opengl_GL.context.blendEquation(32774);
		lime_graphics_opengl_GL.context.blendFuncSeparate(774,771,0,1);
		break;
	case 12:
		lime_graphics_opengl_GL.context.blendEquation(32774);
		lime_graphics_opengl_GL.context.blendFuncSeparate(1,769,0,1);
		break;
	case 14:
		lime_graphics_opengl_GL.context.blendEquationSeparate(32779,32774);
		lime_graphics_opengl_GL.context.blendFuncSeparate(1,1,0,1);
		break;
	}
};
haxepunk_graphics_hardware_HardwareRenderer.prototype = {
	render: function(drawCommand) {
		var x = this.x;
		var y = this.y;
		var width = this.width;
		var height = this.height;
		var screen = haxepunk_HXP.screen;
		if(drawCommand != null && drawCommand.triangleCount > 0) {
			if(haxepunk_graphics_hardware_HardwareRenderer._tracking) {
				haxepunk_graphics_hardware_HardwareRenderer.triangleCount += drawCommand.triangleCount;
				++haxepunk_graphics_hardware_HardwareRenderer.drawCallCount;
				if(haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit > -1 && haxepunk_graphics_hardware_HardwareRenderer.drawCallCount > haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit) {
					return;
				}
			}
			var clipRect = drawCommand.clipRect;
			if(clipRect != null) {
				width -= clipRect.x | 0;
				height -= clipRect.y | 0;
				width = Math.min(width,clipRect.width) | 0;
				height = Math.min(height,clipRect.height) | 0;
			}
			if(width > 0 && height > 0) {
				var shader = drawCommand.shader;
				shader.bind();
				var triangles = drawCommand.triangleCount;
				var floatsPerTriangle = shader.get_floatsPerVertex() * 3;
				this.buffer.ensureSize(triangles,floatsPerTriangle);
				if(!Object.prototype.hasOwnProperty.call(shader.uniformIndices.h,"uMatrix")) {
					var this1 = shader.uniformIndices;
					var v = lime_graphics_opengl_GL.context.getUniformLocation(shader.glProgram,"uMatrix");
					this1.h["uMatrix"] = v;
				}
				var location = shader.uniformIndices.h["uMatrix"];
				var v = haxepunk_graphics_hardware_HardwareRenderer._ortho;
				var srcOffset = null;
				var this1 = lime_graphics_opengl_GL.context;
				if(srcOffset != null) {
					this1.uniformMatrix4fv(location,false,v,srcOffset,null);
				} else {
					this1.uniformMatrix4fv(location,false,v);
				}
				var texture = drawCommand.texture;
				if(texture != null) {
					haxepunk_graphics_hardware_opengl_GLUtils.bindTexture(texture,drawCommand.smooth);
				}
				shader.prepare(drawCommand,this.buffer);
				switch(drawCommand.blend) {
				case 0:
					lime_graphics_opengl_GL.context.blendEquation(32774);
					lime_graphics_opengl_GL.context.blendFuncSeparate(1,1,0,1);
					break;
				case 1:
					lime_graphics_opengl_GL.context.blendEquation(32774);
					lime_graphics_opengl_GL.context.blendFunc(1,771);
					break;
				case 9:
					lime_graphics_opengl_GL.context.blendEquation(32774);
					lime_graphics_opengl_GL.context.blendFuncSeparate(774,771,0,1);
					break;
				case 12:
					lime_graphics_opengl_GL.context.blendEquation(32774);
					lime_graphics_opengl_GL.context.blendFuncSeparate(1,769,0,1);
					break;
				case 14:
					lime_graphics_opengl_GL.context.blendEquationSeparate(32779,32774);
					lime_graphics_opengl_GL.context.blendFuncSeparate(1,1,0,1);
					break;
				}
				if(clipRect != null) {
					x += Math.max(clipRect.x,0) | 0;
					y += Math.max(clipRect.y,0) | 0;
				}
				lime_graphics_opengl_GL.context.scissor(x,this.screenHeight - y - height,width,height);
				lime_graphics_opengl_GL.context.enable(3089);
				lime_graphics_opengl_GL.context.drawArrays(4,0,triangles * 3);
				lime_graphics_opengl_GL.context.disable(3089);
				lime_graphics_opengl_GL.context.bindBuffer(34962,null);
				shader.unbind();
			}
		}
	}
	,startScene: function(scene) {
		haxepunk_graphics_hardware_HardwareRenderer._tracking = scene.trackDrawCalls;
		if(this.buffer == null || this.buffer.glBuffer == null) {
			if(this.buffer == null) {
				this.buffer = new haxepunk_graphics_hardware_RenderBuffer();
			}
			if(this.fb == null) {
				this.fb = new haxepunk_graphics_hardware_FrameBuffer();
				this.backFb = new haxepunk_graphics_hardware_FrameBuffer();
			}
		}
		var screen = haxepunk_HXP.screen;
		this.screenWidth = screen.width;
		this.screenHeight = screen.height;
		this.screenScaleX = screen.scaleX;
		this.screenScaleY = screen.scaleY;
		var postProcess = scene.shaders;
		var firstShader = null;
		if(postProcess != null) {
			var _g = 0;
			while(_g < postProcess.length) {
				var p = postProcess[_g];
				++_g;
				if(p.active) {
					firstShader = p;
					break;
				}
			}
		}
		if(firstShader != null) {
			this.fb.bindFrameBuffer();
			var p = firstShader;
			if(p.width != null || p.height != null) {
				var w = p.width == null ? haxepunk_HXP.screen.width : Math.min(haxepunk_HXP.screen.width,p.width) | 0;
				var h = p.height == null ? haxepunk_HXP.screen.height : Math.min(haxepunk_HXP.screen.height,p.height) | 0;
				var _g = screen;
				_g.set_scaleX(_g.scaleX * (w / this.screenWidth));
				var _g = screen;
				_g.set_scaleY(_g.scaleY * (h / this.screenHeight));
				screen.width = w;
				screen.height = h;
			}
		} else {
			lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.defaultFramebuffer);
		}
		this.x = screen.x + Math.max(scene.x,0) | 0;
		this.y = screen.y + Math.max(scene.y,0) | 0;
		this.width = scene._width == null ? haxepunk_HXP.screen.width - scene.x : scene._width;
		this.height = scene._height == null ? haxepunk_HXP.screen.height - scene.y : scene._height;
		var x0 = -this.x;
		var x1 = this.screenWidth - this.x;
		var y0 = this.screenHeight - this.y;
		var y1 = -this.y;
		var sx = 1.0 / (x1 - x0);
		var sy = 1.0 / (y1 - y0);
		haxepunk_graphics_hardware_HardwareRenderer._ortho[0] = 2.0 * sx;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[5] = 2.0 * sy;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[12] = -(x0 + x1) * sx;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[13] = -(y0 + y1) * sy;
	}
	,flushScene: function(scene) {
		var screen = haxepunk_HXP.screen;
		screen.width = this.screenWidth;
		screen.height = this.screenHeight;
		screen.set_scaleX(this.screenScaleX);
		screen.set_scaleY(this.screenScaleY);
		var postProcess = scene.shaders;
		var hasPostProcess = false;
		if(postProcess != null) {
			var _g = 0;
			while(_g < postProcess.length) {
				var p = postProcess[_g];
				++_g;
				if(p.active) {
					hasPostProcess = true;
					break;
				}
			}
		}
		if(hasPostProcess) {
			var l = postProcess.length;
			while(!postProcess[l - 1].active) --l;
			var _g = 0;
			var _g1 = l;
			while(_g < _g1) {
				var i = _g++;
				var last = i == l - 1;
				var shader = postProcess[i];
				if(!shader.active) {
					continue;
				}
				var renderTexture = this.fb.texture;
				var scaleX;
				var scaleY;
				if(last) {
					scaleX = this.screenWidth / (shader.width == null ? haxepunk_HXP.screen.width : Math.min(haxepunk_HXP.screen.width,shader.width) | 0);
					scaleY = this.screenHeight / (shader.height == null ? haxepunk_HXP.screen.height : Math.min(haxepunk_HXP.screen.height,shader.height) | 0);
					lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.defaultFramebuffer);
				} else {
					var next = postProcess[i + 1];
					scaleX = (next.width == null ? haxepunk_HXP.screen.width : Math.min(haxepunk_HXP.screen.width,next.width) | 0) / (shader.width == null ? haxepunk_HXP.screen.width : Math.min(haxepunk_HXP.screen.width,shader.width) | 0);
					scaleY = (next.height == null ? haxepunk_HXP.screen.height : Math.min(haxepunk_HXP.screen.height,next.height) | 0) / (shader.height == null ? haxepunk_HXP.screen.height : Math.min(haxepunk_HXP.screen.height,shader.height) | 0);
					var oldFb = this.fb;
					this.fb = this.backFb;
					this.backFb = oldFb;
					this.fb.bindFrameBuffer();
				}
				shader.setScale(shader.width == null ? haxepunk_HXP.screen.width : Math.min(haxepunk_HXP.screen.width,shader.width) | 0,shader.height == null ? haxepunk_HXP.screen.height : Math.min(haxepunk_HXP.screen.height,shader.height) | 0,scaleX,scaleY);
				shader.bind();
				lime_graphics_opengl_GL.context.activeTexture(33984);
				lime_graphics_opengl_GL.context.bindTexture(3553,renderTexture);
				if(shader.smooth) {
					lime_graphics_opengl_GL.context.texParameteri(3553,10241,9729);
					lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				} else {
					lime_graphics_opengl_GL.context.texParameteri(3553,10241,9729);
					lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				}
				lime_graphics_opengl_GL.context.blendEquation(32774);
				lime_graphics_opengl_GL.context.blendFunc(1,771);
				lime_graphics_opengl_GL.context.drawArrays(4,0,6);
				lime_graphics_opengl_GL.context.bindBuffer(34962,null);
				lime_graphics_opengl_GL.context.bindTexture(3553,null);
				shader.unbind();
				lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
			}
		}
	}
	,startFrame: function() {
		haxepunk_graphics_hardware_HardwareRenderer.triangleCount = 0;
		haxepunk_graphics_hardware_HardwareRenderer.drawCallCount = 0;
	}
	,endFrame: function() {
	}
	,init: function() {
		if(this.buffer == null) {
			this.buffer = new haxepunk_graphics_hardware_RenderBuffer();
		}
		if(this.fb == null) {
			this.fb = new haxepunk_graphics_hardware_FrameBuffer();
			this.backFb = new haxepunk_graphics_hardware_FrameBuffer();
		}
	}
	,bindDefaultFramebuffer: function() {
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.defaultFramebuffer);
	}
	,destroy: function() {
	}
	,__class__: haxepunk_graphics_hardware_HardwareRenderer
};
var haxepunk_graphics_hardware_RenderBuffer = function() {
	this.init();
};
$hxClasses["haxepunk.graphics.hardware.RenderBuffer"] = haxepunk_graphics_hardware_RenderBuffer;
haxepunk_graphics_hardware_RenderBuffer.__name__ = "haxepunk.graphics.hardware.RenderBuffer";
haxepunk_graphics_hardware_RenderBuffer.resize = function(length,minChunks,chunkSize) {
	return Math.max(length * 2 / chunkSize | 0,minChunks) * chunkSize | 0;
};
haxepunk_graphics_hardware_RenderBuffer.prototype = {
	get_length: function() {
		return this.buffer.length;
	}
	,init: function() {
		this.glBuffer = lime_graphics_opengl_GL.context.createBuffer();
	}
	,bufferData: function(target,size,srcData,usage) {
		var srcData1 = srcData;
		var srcOffset = null;
		var this1 = lime_graphics_opengl_GL.context;
		if(srcOffset != null) {
			this1.bufferData(target,srcData1,usage,srcOffset,null);
		} else {
			this1.bufferData(target,srcData1,usage);
		}
	}
	,ensureSize: function(triangles,floatsPerTriangle) {
		if(this.glBuffer == null) {
			this.buffer = null;
			this.init();
		}
		var bufferLength = this.buffer == null ? 0 : this.buffer.length;
		if(bufferLength < triangles * floatsPerTriangle) {
			var elements = Math.max(bufferLength * 2 / floatsPerTriangle | 0,triangles) * floatsPerTriangle | 0;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Float32Array(elements);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.buffer = this1;
			this.intArray = new Int32Array(this.buffer.buffer);
			this.use();
			this.bufferData(34962,this.buffer.length * 4,this.buffer,35048);
		}
	}
	,use: function() {
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		this.byteOffset = 0;
	}
	,addFloat: function(v) {
		this.buffer[this.byteOffset] = v;
		this.byteOffset += 1;
	}
	,addVec: function(x,y) {
		this.buffer[this.byteOffset] = x;
		this.buffer[this.byteOffset + 1] = y;
		this.byteOffset += 2;
	}
	,addInt: function(value) {
		this.intArray[this.byteOffset] = value;
		this.byteOffset += 1;
	}
	,addVertexAttribData: function(attribs,nbVertices) {
		var _g = 0;
		while(_g < attribs.length) {
			var attrib = attribs[_g];
			++_g;
			var attribData = attrib.data;
			var _g1 = 0;
			var _g2 = nbVertices * attrib.valuesPerElement;
			while(_g1 < _g2) {
				var k = _g1++;
				var _g3 = attrib;
				var v = attribData[_g3.set_dataPos(_g3.dataPos + 1)];
				this.buffer[this.byteOffset] = v;
				this.byteOffset += 1;
			}
		}
	}
	,updateGraphicsCard: function() {
		var srcData = this.buffer;
		var srcOffset = null;
		var this1 = lime_graphics_opengl_GL.context;
		if(srcOffset != null) {
			this1.bufferSubData(34962,0,srcData,srcOffset,null);
		} else {
			this1.bufferSubData(34962,0,srcData);
		}
	}
	,prepareVertexOnly: function(drawCommand) {
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			var tri = current;
			this.buffer[this.byteOffset] = tri.tx1;
			this.buffer[this.byteOffset + 1] = tri.ty1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.tx2;
			this.buffer[this.byteOffset + 1] = tri.ty2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.tx3;
			this.buffer[this.byteOffset + 1] = tri.ty3;
			this.byteOffset += 2;
		}
	}
	,prepareVertexAndColor: function(drawCommand) {
		var triangleColor = 0;
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			var tri = current;
			var a = tri.alpha;
			var alpha = a <= 0 ? 0 : a >= 1 ? -16777216 : (255 * a | 0) << 24;
			triangleColor = tri.color & 16777215 | alpha;
			this.buffer[this.byteOffset] = tri.tx1;
			this.buffer[this.byteOffset + 1] = tri.ty1;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = tri.tx2;
			this.buffer[this.byteOffset + 1] = tri.ty2;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = tri.tx3;
			this.buffer[this.byteOffset + 1] = tri.ty3;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
		}
	}
	,prepareVertexAndUV: function(drawCommand) {
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			var tri = current;
			this.buffer[this.byteOffset] = tri.tx1;
			this.buffer[this.byteOffset + 1] = tri.ty1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx1;
			this.buffer[this.byteOffset + 1] = tri.uvy1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.tx2;
			this.buffer[this.byteOffset + 1] = tri.ty2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx2;
			this.buffer[this.byteOffset + 1] = tri.uvy2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.tx3;
			this.buffer[this.byteOffset + 1] = tri.ty3;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx3;
			this.buffer[this.byteOffset + 1] = tri.uvy3;
			this.byteOffset += 2;
		}
	}
	,prepareVertexUVandColor: function(drawCommand) {
		var triangleColor = 0;
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			var tri = current;
			var a = tri.alpha;
			var alpha = a <= 0 ? 0 : a >= 1 ? -16777216 : (255 * a | 0) << 24;
			triangleColor = tri.color & 16777215 | alpha;
			this.buffer[this.byteOffset] = tri.tx1;
			this.buffer[this.byteOffset + 1] = tri.ty1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx1;
			this.buffer[this.byteOffset + 1] = tri.uvy1;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = tri.tx2;
			this.buffer[this.byteOffset + 1] = tri.ty2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx2;
			this.buffer[this.byteOffset + 1] = tri.uvy2;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = tri.tx3;
			this.buffer[this.byteOffset + 1] = tri.ty3;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = tri.uvx3;
			this.buffer[this.byteOffset + 1] = tri.uvy3;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
		}
	}
	,__class__: haxepunk_graphics_hardware_RenderBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = "openfl.geom.Point";
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var haxepunk_graphics_hardware_Texture = {};
haxepunk_graphics_hardware_Texture.__properties__ = {get_height:"get_height",get_width:"get_width"};
haxepunk_graphics_hardware_Texture.get_width = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.width;
	}
};
haxepunk_graphics_hardware_Texture.get_height = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.height;
	}
};
haxepunk_graphics_hardware_Texture.create = function(width,height,transparent,color) {
	if(color == null) {
		color = 0;
	}
	if(transparent == null) {
		transparent = false;
	}
	return new openfl_display_BitmapData(width,height,transparent,color);
};
haxepunk_graphics_hardware_Texture.removeColor = function(this1,color) {
	this1.threshold(this1,this1.rect,haxepunk_graphics_hardware_Texture._zero,"==",color,0,-1,true);
};
haxepunk_graphics_hardware_Texture.clearColor = function(this1,color) {
	this1.fillRect(this1.rect,color);
};
haxepunk_graphics_hardware_Texture.drawCircle = function(this1,x,y,radius) {
	var sprite = new openfl_display_Sprite();
	sprite.get_graphics().clear();
	sprite.get_graphics().beginFill(16777215);
	sprite.get_graphics().drawCircle(x,y,radius);
	this1.draw(sprite);
};
var haxepunk_graphics_hardware_opengl_GLInternal = function() { };
$hxClasses["haxepunk.graphics.hardware.opengl.GLInternal"] = haxepunk_graphics_hardware_opengl_GLInternal;
haxepunk_graphics_hardware_opengl_GLInternal.__name__ = "haxepunk.graphics.hardware.opengl.GLInternal";
haxepunk_graphics_hardware_opengl_GLInternal.bindTexture = function(texture) {
	var bmd = texture;
	var texture = bmd.getTexture(haxepunk_graphics_hardware_opengl_GLInternal.renderer.__context3D).__getTexture();
	lime_graphics_opengl_GL.context.bindTexture(3553,texture);
};
haxepunk_graphics_hardware_opengl_GLInternal.invalid = function(object) {
	return object == null;
};
var haxepunk_graphics_hardware_opengl_GLUtils = function() { };
$hxClasses["haxepunk.graphics.hardware.opengl.GLUtils"] = haxepunk_graphics_hardware_opengl_GLUtils;
haxepunk_graphics_hardware_opengl_GLUtils.__name__ = "haxepunk.graphics.hardware.opengl.GLUtils";
haxepunk_graphics_hardware_opengl_GLUtils.bindTexture = function(texture,smooth,index) {
	if(index == null) {
		index = 33984;
	}
	lime_graphics_opengl_GL.context.activeTexture(index);
	haxepunk_graphics_hardware_opengl_GLInternal.bindTexture(texture);
	if(smooth) {
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9729);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
	} else {
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9729);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
	}
	lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
	lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
};
haxepunk_graphics_hardware_opengl_GLUtils.checkForErrors = function(pos) {
};
haxepunk_graphics_hardware_opengl_GLUtils.invalid = function(obj) {
	return obj == null;
};
var haxepunk_graphics_shader_Shader = function(vertexSource,fragmentSource) {
	this.uniformValues = new haxe_ds_StringMap();
	this.uniformNames = [];
	this.uniformIndices = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.attributeNames = [];
	this.position = new haxepunk_graphics_shader_Attribute(this);
	this.texCoord = new haxepunk_graphics_shader_Attribute(this);
	this.color = new haxepunk_graphics_shader_Attribute(this);
	this.vertexSource = vertexSource;
	this.fragmentSource = fragmentSource;
	this.build();
	this.id = haxepunk_graphics_shader_Shader.idSeq++;
	var s = "Shader #" + haxepunk_graphics_shader_Shader.idSeq + " initialized";
	var pos_fileName = "haxepunk/graphics/shader/Shader.hx";
	var pos_lineNumber = 104;
	var pos_className = "haxepunk.graphics.shader.Shader";
	var pos_methodName = "new";
	var level = 20;
	if(level == null) {
		level = 20;
	}
	var minLevel = 10;
	if((level | 0) >= (minLevel | 0)) {
		var p = null;
		var tmp = haxe_Log.trace;
		var s1 = Std.string(s);
		var d = HxOverrides.dateStr(new Date());
		var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
		var l;
		switch(level) {
		case 20:
			l = "INF";
			break;
		case 30:
			l = "WRN";
			break;
		case 40:
			l = "ERR";
			break;
		case 50:
			l = "!!!";
			break;
		default:
			l = "DBG";
		}
		tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
		if(haxepunk_HXP.engine.console != null) {
			var _this = haxepunk_HXP.engine.console;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
		}
	}
};
$hxClasses["haxepunk.graphics.shader.Shader"] = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_Shader.__name__ = "haxepunk.graphics.shader.Shader";
haxepunk_graphics_shader_Shader.prototype = {
	get_floatsPerVertex: function() {
		var a = 2 + (this.texCoord.get_isEnabled() ? 2 : 0) + (this.color.get_isEnabled() ? 1 : 0);
		var v = haxe_ds_StringMap.valueIterator(this.attributes.h);
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.get_isEnabled()) {
				a += v1.valuesPerElement;
			}
		}
		return a;
	}
	,get_hasAttributes: function() {
		return this.attributeNames.length > 0;
	}
	,build: function() {
		var vertexShader = this.compile(35633,this.vertexSource);
		var fragmentShader = this.compile(35632,this.fragmentSource);
		this.glProgram = lime_graphics_opengl_GL.context.createProgram();
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,fragmentShader);
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,vertexShader);
		lime_graphics_opengl_GL.context.linkProgram(this.glProgram);
		this.position.rebind();
		this.texCoord.rebind();
		this.color.rebind();
		var v = haxe_ds_StringMap.valueIterator(this.attributes.h);
		while(v.hasNext()) {
			var v1 = v.next();
			v1.rebind();
		}
	}
	,compile: function(type,source) {
		var shader = lime_graphics_opengl_GL.context.createShader(type);
		lime_graphics_opengl_GL.context.shaderSource(shader,source);
		lime_graphics_opengl_GL.context.compileShader(shader);
		return shader;
	}
	,destroy: function() {
		var key = haxe_ds_StringMap.keysIterator(this.uniformIndices.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this.uniformIndices;
			if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
				delete(_this.h[key1]);
			}
		}
		var key = haxe_ds_StringMap.keysIterator(this.attributes.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this.attributes;
			if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
				delete(_this.h[key1]);
			}
		}
	}
	,prepare: function(drawCommand,buffer) {
		if(!this.position.get_isEnabled()) {
			return;
		}
		haxepunk_graphics_shader_Shader._attribs.length = 0;
		var _g = 0;
		var _g1 = this.attributeNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			if(this.attributes.h[name].get_isEnabled()) {
				haxepunk_graphics_shader_Shader._attribs.push(this.attributes.h[name]);
			}
		}
		buffer.use();
		if(this.texCoord.get_isEnabled()) {
			if(this.color.get_isEnabled()) {
				buffer.prepareVertexUVandColor(drawCommand);
			} else {
				buffer.prepareVertexAndUV(drawCommand);
			}
		} else if(this.color.get_isEnabled()) {
			buffer.prepareVertexAndColor(drawCommand);
		} else {
			buffer.prepareVertexOnly(drawCommand);
		}
		var attribs = haxepunk_graphics_shader_Shader._attribs;
		var nbVertices = drawCommand.triangleCount * 3;
		var _g = 0;
		while(_g < attribs.length) {
			var attrib = attribs[_g];
			++_g;
			var attribData = attrib.data;
			var _g1 = 0;
			var _g2 = nbVertices * attrib.valuesPerElement;
			while(_g1 < _g2) {
				var k = _g1++;
				var _g3 = attrib;
				var v = attribData[_g3.set_dataPos(_g3.dataPos + 1)];
				buffer.buffer[buffer.byteOffset] = v;
				buffer.byteOffset += 1;
			}
		}
		var srcData = buffer.buffer;
		var srcOffset = null;
		var this1 = lime_graphics_opengl_GL.context;
		if(srcOffset != null) {
			this1.bufferSubData(34962,0,srcData,srcOffset,null);
		} else {
			this1.bufferSubData(34962,0,srcData);
		}
		this.setAttributePointers(drawCommand.triangleCount);
	}
	,setAttributePointers: function(nbTriangles) {
		var offset = 0;
		var stride = (2 + (this.texCoord.get_isEnabled() ? 2 : 0) + (this.color.get_isEnabled() ? 1 : 0)) * 4;
		var index = this.position.index;
		var offset1 = lime_utils_DataPointer.fromFloat(offset);
		lime_graphics_opengl_GL.context.vertexAttribPointer(index,2,5126,false,stride,offset1);
		offset += 8;
		if(this.texCoord.get_isEnabled()) {
			var index = this.texCoord.index;
			var offset1 = lime_utils_DataPointer.fromFloat(offset);
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,2,5126,false,stride,offset1);
			offset += 8;
		}
		if(this.color.get_isEnabled()) {
			var index = this.color.index;
			var offset1 = lime_utils_DataPointer.fromFloat(offset);
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,4,5121,true,stride,offset1);
			offset += 4;
		}
		offset *= nbTriangles * 3;
		var _g = 0;
		var _g1 = this.attributeNames;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			var attrib = this.attributes.h[n];
			if(attrib.get_isEnabled()) {
				var index = attrib.index;
				var size = attrib.valuesPerElement;
				var offset1 = lime_utils_DataPointer.fromFloat(offset);
				lime_graphics_opengl_GL.context.vertexAttribPointer(index,size,5126,false,0,offset1);
				offset += nbTriangles * 3 * attrib.valuesPerElement * 4;
			}
		}
	}
	,bind: function() {
		if(this.glProgram == null) {
			this.destroy();
			this.build();
		}
		lime_graphics_opengl_GL.context.useProgram(this.glProgram);
		var _g = 0;
		var _g1 = this.uniformNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(this.uniformIndices.h,name)) {
				var this1 = this.uniformIndices;
				var v = lime_graphics_opengl_GL.context.getUniformLocation(this.glProgram,name);
				this1.h[name] = v;
			}
			lime_graphics_opengl_GL.context.uniform1f(this.uniformIndices.h[name],this.uniformValues.h[name]);
		}
		lime_graphics_opengl_GL.context.enableVertexAttribArray(this.position.index);
		if(this.texCoord.get_isEnabled()) {
			lime_graphics_opengl_GL.context.enableVertexAttribArray(this.texCoord.index);
		}
		if(this.color.get_isEnabled()) {
			lime_graphics_opengl_GL.context.enableVertexAttribArray(this.color.index);
		}
		var _g = 0;
		var _g1 = this.attributeNames;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(this.attributes.h[n].get_isEnabled()) {
				lime_graphics_opengl_GL.context.enableVertexAttribArray(this.attributes.h[n].index);
			}
		}
	}
	,unbind: function() {
		lime_graphics_opengl_GL.context.useProgram(null);
		lime_graphics_opengl_GL.context.disableVertexAttribArray(this.position.index);
		if(this.texCoord.get_isEnabled()) {
			lime_graphics_opengl_GL.context.disableVertexAttribArray(this.texCoord.index);
		}
		if(this.color.get_isEnabled()) {
			lime_graphics_opengl_GL.context.disableVertexAttribArray(this.color.index);
		}
		var _g = 0;
		var _g1 = this.attributeNames;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(this.attributes.h[n].get_isEnabled()) {
				lime_graphics_opengl_GL.context.disableVertexAttribArray(this.attributes.h[n].index);
			}
		}
	}
	,attributeIndex: function(name) {
		return lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,name);
	}
	,uniformIndex: function(name) {
		if(!Object.prototype.hasOwnProperty.call(this.uniformIndices.h,name)) {
			var this1 = this.uniformIndices;
			var v = lime_graphics_opengl_GL.context.getUniformLocation(this.glProgram,name);
			this1.h[name] = v;
		}
		return this.uniformIndices.h[name];
	}
	,setUniform: function(name,value) {
		if(!Object.prototype.hasOwnProperty.call(this.uniformValues.h,name)) {
			this.uniformNames.push(name);
		}
		this.uniformValues.h[name] = value;
	}
	,setVertexAttribData: function(name,values,valuesPerElement) {
		var attrib;
		if(!Object.prototype.hasOwnProperty.call(this.attributes.h,name)) {
			attrib = new haxepunk_graphics_shader_Attribute(this);
			attrib.name = name;
			attrib.rebind();
			if(attrib.index == -1) {
				var s = "attribute '" + attrib.name + "' is not declared or not used in shader source.";
				var pos_fileName = "haxepunk/graphics/shader/Shader.hx";
				var pos_lineNumber = 36;
				var pos_className = "haxepunk.graphics.shader.Attribute";
				var pos_methodName = "set_name";
				var level = 30;
				if(level == null) {
					level = 20;
				}
				var minLevel = 10;
				if((level | 0) >= (minLevel | 0)) {
					var p = null;
					var tmp = haxe_Log.trace;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
					if(haxepunk_HXP.engine.console != null) {
						var _this = haxepunk_HXP.engine.console;
						var s1 = Std.string(s);
						var d = HxOverrides.dateStr(new Date());
						var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
						var l;
						switch(level) {
						case 20:
							l = "INF";
							break;
						case 30:
							l = "WRN";
							break;
						case 40:
							l = "ERR";
							break;
						case 50:
							l = "!!!";
							break;
						default:
							l = "DBG";
						}
						_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
					}
				}
			}
			this.attributes.h[name] = attrib;
			this.attributeNames.push(name);
		} else {
			attrib = this.attributes.h[name];
		}
		attrib.set_data(values);
		attrib.valuesPerElement = valuesPerElement;
	}
	,appendVertexAttribData: function(name,values) {
		var attrib;
		if(!Object.prototype.hasOwnProperty.call(this.attributes.h,name)) {
			throw haxe_Exception.thrown("appendVertexAttribData : attribute '" + name + "' was not declared");
		} else {
			attrib = this.attributes.h[name];
		}
		if(values.length % attrib.valuesPerElement != 0) {
			throw haxe_Exception.thrown("appendVertexAttribData : values per element do not match");
		}
		attrib.set_data(attrib.data.concat(values));
	}
	,__class__: haxepunk_graphics_shader_Shader
	,__properties__: {get_hasAttributes:"get_hasAttributes",get_floatsPerVertex:"get_floatsPerVertex"}
};
var haxepunk_graphics_shader_ColorShader = function(fragment) {
	haxepunk_graphics_shader_Shader.call(this,haxepunk_graphics_shader_ColorShader.VERTEX_SHADER,fragment == null ? haxepunk_graphics_shader_ColorShader.FRAGMENT_SHADER : fragment);
	var _this = this.position;
	_this.name = "aPosition";
	_this.rebind();
	if(_this.index == -1) {
		var s = "attribute '" + _this.name + "' is not declared or not used in shader source.";
		var pos_fileName = "haxepunk/graphics/shader/Shader.hx";
		var pos_lineNumber = 36;
		var pos_className = "haxepunk.graphics.shader.Attribute";
		var pos_methodName = "set_name";
		var level = 30;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
	}
	var _this = this.color;
	_this.name = "aColor";
	_this.rebind();
	if(_this.index == -1) {
		var s = "attribute '" + _this.name + "' is not declared or not used in shader source.";
		var pos_fileName = "haxepunk/graphics/shader/Shader.hx";
		var pos_lineNumber = 36;
		var pos_className = "haxepunk.graphics.shader.Attribute";
		var pos_methodName = "set_name";
		var level = 30;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
	}
};
$hxClasses["haxepunk.graphics.shader.ColorShader"] = haxepunk_graphics_shader_ColorShader;
haxepunk_graphics_shader_ColorShader.__name__ = "haxepunk.graphics.shader.ColorShader";
haxepunk_graphics_shader_ColorShader.__properties__ = {get_defaultShader:"get_defaultShader"};
haxepunk_graphics_shader_ColorShader.get_defaultShader = function() {
	if(haxepunk_graphics_shader_ColorShader.defaultShader == null) {
		haxepunk_graphics_shader_ColorShader.defaultShader = new haxepunk_graphics_shader_ColorShader();
	}
	return haxepunk_graphics_shader_ColorShader.defaultShader;
};
haxepunk_graphics_shader_ColorShader.__super__ = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_ColorShader.prototype = $extend(haxepunk_graphics_shader_Shader.prototype,{
	__class__: haxepunk_graphics_shader_ColorShader
});
var haxepunk_graphics_shader_SceneShader = function(fragment) {
	this.smooth = false;
	this.height = null;
	this.width = null;
	this.active = true;
	if(fragment == null) {
		fragment = "\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec2 vTexCoord;\nuniform sampler2D uImage0;\nuniform vec2 uResolution;\n\nvoid main () {\n\tgl_FragColor = texture2D(uImage0, vTexCoord);\n}";
	}
	haxepunk_graphics_shader_Shader.call(this,"\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n\tvTexCoord = aTexCoord;\n\tgl_Position = aPosition;\n}",fragment);
	var _this = this.position;
	_this.name = "aPosition";
	_this.rebind();
	if(_this.index == -1) {
		var s = "attribute '" + _this.name + "' is not declared or not used in shader source.";
		var pos_fileName = "haxepunk/graphics/shader/Shader.hx";
		var pos_lineNumber = 36;
		var pos_className = "haxepunk.graphics.shader.Attribute";
		var pos_methodName = "set_name";
		var level = 30;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
	}
	var _this = this.texCoord;
	_this.name = "aTexCoord";
	_this.rebind();
	if(_this.index == -1) {
		var s = "attribute '" + _this.name + "' is not declared or not used in shader source.";
		var pos_fileName = "haxepunk/graphics/shader/Shader.hx";
		var pos_lineNumber = 36;
		var pos_className = "haxepunk.graphics.shader.Attribute";
		var pos_methodName = "set_name";
		var level = 30;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
	}
};
$hxClasses["haxepunk.graphics.shader.SceneShader"] = haxepunk_graphics_shader_SceneShader;
haxepunk_graphics_shader_SceneShader.__name__ = "haxepunk.graphics.shader.SceneShader";
haxepunk_graphics_shader_SceneShader.fromAsset = function(name) {
	return new haxepunk_graphics_shader_SceneShader(haxepunk_assets_AssetLoader.getText(name));
};
haxepunk_graphics_shader_SceneShader.__super__ = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_SceneShader.prototype = $extend(haxepunk_graphics_shader_Shader.prototype,{
	get_textureWidth: function() {
		if(this.width == null) {
			return haxepunk_HXP.screen.width;
		} else {
			return Math.min(haxepunk_HXP.screen.width,this.width) | 0;
		}
	}
	,get_textureHeight: function() {
		if(this.height == null) {
			return haxepunk_HXP.screen.height;
		} else {
			return Math.min(haxepunk_HXP.screen.height,this.height) | 0;
		}
	}
	,bufferData: function(target,size,srcData,usage) {
		var srcData1 = srcData;
		var srcOffset = null;
		var this1 = lime_graphics_opengl_GL.context;
		if(srcOffset != null) {
			this1.bufferData(target,srcData1,usage,srcOffset,null);
		} else {
			this1.bufferData(target,srcData1,usage);
		}
	}
	,createBuffer: function() {
		haxepunk_graphics_shader_SceneShader.buffer = lime_graphics_opengl_GL.context.createBuffer();
		lime_graphics_opengl_GL.context.bindBuffer(34962,haxepunk_graphics_shader_SceneShader.buffer);
		var elements = null;
		var array = haxepunk_graphics_shader_SceneShader._vertices;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Float32Array(buffer,0);
			} else {
				this1 = new Float32Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		this.v = this1;
		this.bufferData(34962,this.v.length * 4,this.v,35044);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
	}
	,build: function() {
		haxepunk_graphics_shader_Shader.prototype.build.call(this);
		if(!Object.prototype.hasOwnProperty.call(this.uniformIndices.h,"uImage0")) {
			var this1 = this.uniformIndices;
			var v = lime_graphics_opengl_GL.context.getUniformLocation(this.glProgram,"uImage0");
			this1.h["uImage0"] = v;
		}
		this.image = this.uniformIndices.h["uImage0"];
		if(!Object.prototype.hasOwnProperty.call(this.uniformIndices.h,"uResolution")) {
			var this1 = this.uniformIndices;
			var v = lime_graphics_opengl_GL.context.getUniformLocation(this.glProgram,"uResolution");
			this1.h["uResolution"] = v;
		}
		this.resolution = this.uniformIndices.h["uResolution"];
	}
	,setScale: function(w,h,sx,sy) {
		if(haxepunk_graphics_shader_SceneShader.buffer == null || this.v == null) {
			this.createBuffer();
		}
		lime_graphics_opengl_GL.context.bindBuffer(34962,haxepunk_graphics_shader_SceneShader.buffer);
		var x = w / haxepunk_HXP.screen.width;
		var y = h / haxepunk_HXP.screen.height;
		sx *= x;
		sy *= y;
		if(haxepunk_graphics_shader_SceneShader._lastX != x || haxepunk_graphics_shader_SceneShader._lastY != y || haxepunk_graphics_shader_SceneShader._lastSx != sx || haxepunk_graphics_shader_SceneShader._lastSy != sy) {
			var val = this.v[16] = sx * 2 - 1;
			var val1 = this.v[12] = val;
			this.v[4] = val1;
			var val = this.v[13] = -sy * 2 + 1;
			var val1 = this.v[5] = val;
			this.v[1] = val1;
			var val = this.v[18] = x;
			var val1 = this.v[14] = val;
			this.v[6] = val1;
			var val = this.v[15] = 1 - y;
			var val1 = this.v[7] = val;
			this.v[3] = val1;
			this.bufferData(34962,this.v.length * 4,this.v,35044);
			haxepunk_graphics_shader_SceneShader._lastX = x;
			haxepunk_graphics_shader_SceneShader._lastY = y;
			haxepunk_graphics_shader_SceneShader._lastSx = sx;
			haxepunk_graphics_shader_SceneShader._lastSy = sy;
		}
	}
	,bind: function() {
		haxepunk_graphics_shader_Shader.prototype.bind.call(this);
		if(haxepunk_graphics_shader_SceneShader.buffer == null) {
			this.createBuffer();
		}
		var index = this.position.index;
		var offset = lime_utils_DataPointer.fromFloat(0);
		lime_graphics_opengl_GL.context.vertexAttribPointer(index,2,5126,false,16,offset);
		var index = this.texCoord.index;
		var offset = lime_utils_DataPointer.fromFloat(8);
		lime_graphics_opengl_GL.context.vertexAttribPointer(index,2,5126,false,16,offset);
		lime_graphics_opengl_GL.context.uniform1i(this.image,0);
		lime_graphics_opengl_GL.context.uniform2f(this.resolution,haxepunk_HXP.screen.width,haxepunk_HXP.screen.height);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
	}
	,__class__: haxepunk_graphics_shader_SceneShader
	,__properties__: $extend(haxepunk_graphics_shader_Shader.prototype.__properties__,{get_textureHeight:"get_textureHeight",get_textureWidth:"get_textureWidth"})
});
var haxepunk_graphics_shader_Attribute = function(parent) {
	this.dataPos = -1;
	this.index = -1;
	this.parent = parent;
};
$hxClasses["haxepunk.graphics.shader.Attribute"] = haxepunk_graphics_shader_Attribute;
haxepunk_graphics_shader_Attribute.__name__ = "haxepunk.graphics.shader.Attribute";
haxepunk_graphics_shader_Attribute.prototype = {
	set_data: function(v) {
		this.set_dataPos(-1);
		return this.data = v;
	}
	,set_dataPos: function(v) {
		return this.dataPos = v > -1 && this.data != null ? v % this.data.length : v;
	}
	,set_name: function(value) {
		this.name = value;
		this.rebind();
		if(this.index == -1) {
			var s = "attribute '" + this.name + "' is not declared or not used in shader source.";
			var pos_fileName = "haxepunk/graphics/shader/Shader.hx";
			var pos_lineNumber = 36;
			var pos_className = "haxepunk.graphics.shader.Attribute";
			var pos_methodName = "set_name";
			var level = 30;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
		}
		return this.name;
	}
	,get_isEnabled: function() {
		if(this.name != null) {
			return this.index != -1;
		} else {
			return false;
		}
	}
	,rebind: function() {
		if(this.name != null) {
			this.index = lime_graphics_opengl_GL.context.getAttribLocation(this.parent.glProgram,this.name);
		}
		this.set_dataPos(-1);
	}
	,__class__: haxepunk_graphics_shader_Attribute
	,__properties__: {get_isEnabled:"get_isEnabled",set_name:"set_name",set_dataPos:"set_dataPos",set_data:"set_data"}
};
var haxepunk_graphics_shader_TextureShader = function(vertex,fragment) {
	haxepunk_graphics_shader_Shader.call(this,vertex == null ? haxepunk_graphics_shader_TextureShader.VERTEX_SHADER : vertex,fragment == null ? haxepunk_graphics_shader_TextureShader.FRAGMENT_SHADER : fragment);
	var _this = this.position;
	_this.name = "aPosition";
	_this.rebind();
	if(_this.index == -1) {
		var s = "attribute '" + _this.name + "' is not declared or not used in shader source.";
		var pos_fileName = "haxepunk/graphics/shader/Shader.hx";
		var pos_lineNumber = 36;
		var pos_className = "haxepunk.graphics.shader.Attribute";
		var pos_methodName = "set_name";
		var level = 30;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
	}
	var _this = this.texCoord;
	_this.name = "aTexCoord";
	_this.rebind();
	if(_this.index == -1) {
		var s = "attribute '" + _this.name + "' is not declared or not used in shader source.";
		var pos_fileName = "haxepunk/graphics/shader/Shader.hx";
		var pos_lineNumber = 36;
		var pos_className = "haxepunk.graphics.shader.Attribute";
		var pos_methodName = "set_name";
		var level = 30;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
	}
	var _this = this.color;
	_this.name = "aColor";
	_this.rebind();
	if(_this.index == -1) {
		var s = "attribute '" + _this.name + "' is not declared or not used in shader source.";
		var pos_fileName = "haxepunk/graphics/shader/Shader.hx";
		var pos_lineNumber = 36;
		var pos_className = "haxepunk.graphics.shader.Attribute";
		var pos_methodName = "set_name";
		var level = 30;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
	}
};
$hxClasses["haxepunk.graphics.shader.TextureShader"] = haxepunk_graphics_shader_TextureShader;
haxepunk_graphics_shader_TextureShader.__name__ = "haxepunk.graphics.shader.TextureShader";
haxepunk_graphics_shader_TextureShader.__properties__ = {get_defaultShader:"get_defaultShader"};
haxepunk_graphics_shader_TextureShader.fromAsset = function(name) {
	return new haxepunk_graphics_shader_TextureShader(null,haxepunk_assets_AssetLoader.getText(name));
};
haxepunk_graphics_shader_TextureShader.get_defaultShader = function() {
	if(haxepunk_graphics_shader_TextureShader.defaultShader == null) {
		haxepunk_graphics_shader_TextureShader.defaultShader = new haxepunk_graphics_shader_TextureShader();
	}
	return haxepunk_graphics_shader_TextureShader.defaultShader;
};
haxepunk_graphics_shader_TextureShader.__super__ = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_TextureShader.prototype = $extend(haxepunk_graphics_shader_Shader.prototype,{
	__class__: haxepunk_graphics_shader_TextureShader
});
var haxepunk_graphics_text_IBitmapFont = function() { };
$hxClasses["haxepunk.graphics.text.IBitmapFont"] = haxepunk_graphics_text_IBitmapFont;
haxepunk_graphics_text_IBitmapFont.__name__ = "haxepunk.graphics.text.IBitmapFont";
haxepunk_graphics_text_IBitmapFont.__isInterface__ = true;
haxepunk_graphics_text_IBitmapFont.prototype = {
	__class__: haxepunk_graphics_text_IBitmapFont
};
var haxepunk_graphics_text_BitmapFont = function(fontName) {
	this.atlases = [];
	this.fontName = fontName;
};
$hxClasses["haxepunk.graphics.text.BitmapFont"] = haxepunk_graphics_text_BitmapFont;
haxepunk_graphics_text_BitmapFont.__name__ = "haxepunk.graphics.text.BitmapFont";
haxepunk_graphics_text_BitmapFont.__interfaces__ = [haxepunk_graphics_text_IBitmapFont];
haxepunk_graphics_text_BitmapFont.prototype = {
	addSize: function(atlas) {
		var _g = 0;
		var _g1 = this.atlases.length + 1;
		while(_g < _g1) {
			var i = _g++;
			if(i == this.atlases.length || this.atlases[i].fontSize > atlas.fontSize) {
				this.atlases.splice(i,0,atlas);
			}
		}
	}
	,getChar: function(string,size) {
		var best = null;
		var _g = 0;
		var _g1 = this.atlases;
		while(_g < _g1.length) {
			var atlas = _g1[_g];
			++_g;
			best = atlas;
			if(atlas.fontSize > size) {
				break;
			}
		}
		var atlas = best;
		var name = string;
		name = Std.string(HxOverrides.cca(name,0));
		var glyph = Object.prototype.hasOwnProperty.call(atlas.glyphData.h,name) ? atlas.glyphData.h[name] : atlas.glyphData.h[" "];
		glyph.scale = size / atlas.fontSize;
		var glyph1 = glyph;
		return glyph1;
	}
	,getLineHeight: function(size) {
		var best = null;
		var _g = 0;
		var _g1 = this.atlases;
		while(_g < _g1.length) {
			var atlas = _g1[_g];
			++_g;
			best = atlas;
			if(atlas.fontSize > size) {
				break;
			}
		}
		var atlas = best;
		return atlas.getLineHeight(size);
	}
	,atlasForScale: function(size) {
		var best = null;
		var _g = 0;
		var _g1 = this.atlases;
		while(_g < _g1.length) {
			var atlas = _g1[_g];
			++_g;
			best = atlas;
			if(atlas.fontSize > size) {
				break;
			}
		}
		return best;
	}
	,__class__: haxepunk_graphics_text_BitmapFont
};
var haxepunk_graphics_text_BitmapFontAtlas = function(source) {
	this.fontSize = 0;
	this.lineHeight = 0;
	haxepunk_graphics_atlas_TextureAtlas.call(this,source);
	this.glyphData = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.graphics.text.BitmapFontAtlas"] = haxepunk_graphics_text_BitmapFontAtlas;
haxepunk_graphics_text_BitmapFontAtlas.__name__ = "haxepunk.graphics.text.BitmapFontAtlas";
haxepunk_graphics_text_BitmapFontAtlas.__interfaces__ = [haxepunk_graphics_text_IBitmapFont];
haxepunk_graphics_text_BitmapFontAtlas.getFont = function(fontName,format,extraParams) {
	if(haxepunk_graphics_text_BitmapFontAtlas._fonts == null) {
		haxepunk_graphics_text_BitmapFontAtlas._fonts = new haxe_ds_StringMap();
	}
	if(format == null) {
		format = 1;
	}
	if(!Object.prototype.hasOwnProperty.call(haxepunk_graphics_text_BitmapFontAtlas._fonts.h,fontName)) {
		var this1 = haxepunk_graphics_text_BitmapFontAtlas._fonts;
		var v;
		switch(format) {
		case 1:
			v = haxepunk_graphics_text_BitmapFontAtlas.loadXMLFont(fontName);
			break;
		case 2:
			v = haxepunk_graphics_text_BitmapFontAtlas.loadXNAFont(fontName,extraParams);
			break;
		}
		this1.h[fontName] = v;
	}
	return haxepunk_graphics_text_BitmapFontAtlas._fonts.h[fontName];
};
haxepunk_graphics_text_BitmapFontAtlas.loadXMLFont = function(file) {
	haxe_Log.trace(file,{ fileName : "haxepunk/graphics/text/BitmapFontAtlas.hx", lineNumber : 64, className : "haxepunk.graphics.text.BitmapFontAtlas", methodName : "loadXMLFont"});
	var xmlText = haxepunk_assets_AssetLoader.getText(file);
	if(xmlText == null) {
		throw haxe_Exception.thrown("BitmapFontAtlas: \"" + file + "\" not found!");
	}
	var xml = Xml.parse(xmlText);
	var firstElement = xml.firstElement();
	if(firstElement == null) {
		throw haxe_Exception.thrown("BitmapFontAtlas: \"" + file + "\" contains invalid XML!");
	}
	if(firstElement.nodeType != Xml.Document && firstElement.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (firstElement.nodeType == null ? "null" : XmlType.toString(firstElement.nodeType)));
	}
	var this1 = firstElement;
	var fast = this1;
	var imageFile = new haxe_io_Path(file).dir + "/" + haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(fast,"pages"),"page"),"file");
	var this1 = haxepunk_assets_AssetCache.global.getAtlasData(imageFile,false);
	var atlas = new haxepunk_graphics_text_BitmapFontAtlas(this1);
	atlas.lineHeight = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(fast,"common"),"lineHeight"));
	atlas.fontSize = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(fast,"info"),"size"));
	var chars = haxe_xml__$Access_NodeAccess.resolve(fast,"chars");
	var _g = 0;
	var _g1 = haxe_xml__$Access_NodeListAccess.resolve(chars,"char");
	while(_g < _g1.length) {
		var char = _g1[_g];
		++_g;
		var tmp = haxe_xml__$Access_AttribAccess.resolve(char,"x");
		haxepunk_HXP.rect.x = Std.parseInt(tmp);
		var tmp1 = haxe_xml__$Access_AttribAccess.resolve(char,"y");
		haxepunk_HXP.rect.y = Std.parseInt(tmp1);
		var tmp2 = haxe_xml__$Access_AttribAccess.resolve(char,"width");
		haxepunk_HXP.rect.width = Std.parseInt(tmp2);
		var tmp3 = haxe_xml__$Access_AttribAccess.resolve(char,"height");
		haxepunk_HXP.rect.height = Std.parseInt(tmp3);
		var glyph = null;
		if(haxe_xml__$Access_HasAttribAccess.resolve(char,"letter")) {
			glyph = haxe_xml__$Access_AttribAccess.resolve(char,"letter");
		} else if(haxe_xml__$Access_HasAttribAccess.resolve(char,"id")) {
			glyph = js_Boot.__cast(haxe_xml__$Access_AttribAccess.resolve(char,"id") , String);
		}
		if(glyph == null) {
			throw haxe_Exception.thrown("\"" + file + "\" is not a valid .fnt file!");
		}
		switch(glyph) {
		case "&amp;":
			glyph = "&";
			break;
		case "&gt;":
			glyph = ">";
			break;
		case "&lt;":
			glyph = "<";
			break;
		case "&quot;":
			glyph = "\"";
			break;
		case "space":
			glyph = " ";
			break;
		default:
		}
		var region = atlas.defineRegion(glyph,haxepunk_HXP.rect);
		var gd = { glyph : glyph, rect : haxepunk_HXP.rect.clone(), xOffset : haxe_xml__$Access_HasAttribAccess.resolve(char,"xoffset") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"xoffset")) : 0, yOffset : haxe_xml__$Access_HasAttribAccess.resolve(char,"yoffset") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"yoffset")) : 0, xAdvance : haxe_xml__$Access_HasAttribAccess.resolve(char,"xadvance") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(char,"xadvance")) : 0, scale : 1, region : region};
		atlas.glyphData.h[glyph] = gd;
	}
	return atlas;
};
haxepunk_graphics_text_BitmapFontAtlas.loadXNAFont = function(asset,options) {
	var this1 = haxepunk_assets_AssetCache.global.getAtlasData(asset,false);
	var atlas = new haxepunk_graphics_text_BitmapFontAtlas(this1);
	var texture = null;
	try {
		texture = atlas._data.texture;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
	}
	if(texture == null) {
		throw haxe_Exception.thrown("Invalid XNA font asset \"" + asset + "\": no Texture found.");
	}
	if(options == null) {
		options = { };
	}
	if(!Object.prototype.hasOwnProperty.call(options,"letters")) {
		options.letters = haxepunk_graphics_text_BitmapFontAtlas._DEFAULT_GLYPHS;
	}
	if(!Object.prototype.hasOwnProperty.call(options,"glyphBGColor")) {
		options.glyphBGColor = -14671840;
	}
	var glyphString = options.letters;
	var globalBGColor = texture.getPixel(0,0);
	var cy = 0;
	var cx;
	var letterIdx = 0;
	var glyph;
	var alphabetLength = glyphString.length;
	while(cy < (texture == null ? 0 : texture.height) && letterIdx < alphabetLength) {
		var rowHeight = 0;
		cx = 0;
		while(cx < (texture == null ? 0 : texture.width) && letterIdx < alphabetLength) {
			if((texture.getPixel(cx,cy) | 0) != globalBGColor) {
				var gx = cx;
				var gy = cy;
				while((texture.getPixel(gx,cy) | 0) != globalBGColor) ++gx;
				while((texture.getPixel(cx,gy) | 0) != globalBGColor) ++gy;
				var gw = gx - cx;
				var gh = gy - cy;
				glyph = glyphString.charAt(letterIdx);
				haxepunk_HXP.rect.setTo(cx,cy,gw,gh);
				var region = atlas.defineRegion(glyph,haxepunk_HXP.rect);
				var gd = { glyph : glyph, rect : haxepunk_HXP.rect.clone(), xOffset : 0, yOffset : 0, xAdvance : gw, scale : 1, region : region};
				atlas.glyphData.h[glyph] = gd;
				if(gh > rowHeight) {
					rowHeight = gh;
				}
				if(gh > atlas.fontSize) {
					atlas.fontSize = gh;
				}
				cx += gw;
				++letterIdx;
			}
			++cx;
		}
		cy += rowHeight + 1;
	}
	atlas.lineHeight = atlas.fontSize;
	var bgColor32 = texture.getPixel(0,0);
	texture.threshold(texture,texture.rect,haxepunk_graphics_hardware_Texture._zero,"==",bgColor32,0,-1,true);
	if(options.glyphBGColor != null) {
		texture.threshold(texture,texture.rect,haxepunk_graphics_hardware_Texture._zero,"==",options.glyphBGColor,0,-1,true);
	}
	return atlas;
};
haxepunk_graphics_text_BitmapFontAtlas.__super__ = haxepunk_graphics_atlas_TextureAtlas;
haxepunk_graphics_text_BitmapFontAtlas.prototype = $extend(haxepunk_graphics_atlas_TextureAtlas.prototype,{
	getChar: function(name,size) {
		name = Std.string(HxOverrides.cca(name,0));
		var glyph = Object.prototype.hasOwnProperty.call(this.glyphData.h,name) ? this.glyphData.h[name] : this.glyphData.h[" "];
		glyph.scale = size / this.fontSize;
		return glyph;
	}
	,getLineHeight: function(size) {
		return this.lineHeight * size / this.fontSize;
	}
	,__class__: haxepunk_graphics_text_BitmapFontAtlas
});
var haxepunk_graphics_text_AlignType = {};
haxepunk_graphics_text_AlignType.__properties__ = {get_floatValue:"get_floatValue"};
haxepunk_graphics_text_AlignType.get_floatValue = function(this1) {
	switch(this1) {
	case 1:
		return 0.5;
	case 2:
		return 1;
	default:
		return 0;
	}
};
var haxepunk_graphics_text_RenderData = function() {
	this.scale = 1;
	this.alpha = 1;
	this.color = 16777215;
	this.y = 0;
	this.x = 0;
};
$hxClasses["haxepunk.graphics.text.RenderData"] = haxepunk_graphics_text_RenderData;
haxepunk_graphics_text_RenderData.__name__ = "haxepunk.graphics.text.RenderData";
haxepunk_graphics_text_RenderData.prototype = {
	__class__: haxepunk_graphics_text_RenderData
};
var haxepunk_graphics_text_TextOpcode = $hxEnums["haxepunk.graphics.text.TextOpcode"] = { __ename__ : "haxepunk.graphics.text.TextOpcode", __constructs__ : ["SetColor","SetAlpha","SetScale","SetFont","SetSize","TextBlock","NewLine","Image","Align","Custom","PopColor","PopAlpha","PopScale","PopFont","PopSize","PopCustom"]
	,SetColor: ($_=function(color) { return {_hx_index:0,color:color,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}; },$_.__params__ = ["color"],$_)
	,SetAlpha: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,SetScale: ($_=function(scale) { return {_hx_index:2,scale:scale,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}; },$_.__params__ = ["scale"],$_)
	,SetFont: ($_=function(font) { return {_hx_index:3,font:font,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}; },$_.__params__ = ["font"],$_)
	,SetSize: ($_=function(size) { return {_hx_index:4,size:size,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}; },$_.__params__ = ["size"],$_)
	,TextBlock: ($_=function(text) { return {_hx_index:5,text:text,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}; },$_.__params__ = ["text"],$_)
	,NewLine: ($_=function(width,height,align) { return {_hx_index:6,width:width,height:height,align:align,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}; },$_.__params__ = ["width","height","align"],$_)
	,Image: ($_=function(image,padding) { return {_hx_index:7,image:image,padding:padding,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}; },$_.__params__ = ["image","padding"],$_)
	,Align: ($_=function(alignType) { return {_hx_index:8,alignType:alignType,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}; },$_.__params__ = ["alignType"],$_)
	,Custom: ($_=function(f) { return {_hx_index:9,f:f,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}; },$_.__params__ = ["f"],$_)
	,PopColor: {_hx_index:10,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}
	,PopAlpha: {_hx_index:11,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}
	,PopScale: {_hx_index:12,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}
	,PopFont: {_hx_index:13,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}
	,PopSize: {_hx_index:14,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}
	,PopCustom: {_hx_index:15,__enum__:"haxepunk.graphics.text.TextOpcode",toString:$estr}
};
var haxepunk_utils_LogLevel = {};
haxepunk_utils_LogLevel.toString = function(this1) {
	switch(this1) {
	case 20:
		return "INF";
	case 30:
		return "WRN";
	case 40:
		return "ERR";
	case 50:
		return "!!!";
	default:
		return "DBG";
	}
};
haxepunk_utils_LogLevel.format = function(this1,s,color,pos) {
	if(color == null) {
		color = true;
	}
	var d = HxOverrides.dateStr(new Date());
	var p = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
	var l;
	switch(this1) {
	case 20:
		l = "INF";
		break;
	case 30:
		l = "WRN";
		break;
	case 40:
		l = "ERR";
		break;
	case 50:
		l = "!!!";
		break;
	default:
		l = "DBG";
	}
	return "" + d + " " + p + "  " + l + ": " + s;
};
var haxepunk_graphics_text_BitmapText = function(text,x,y,width,height,options) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._dirty = false;
	this.autoHeight = false;
	this.autoWidth = false;
	this.align = 0;
	this.opCodes = [];
	this.charCount = 0;
	this.displayCharCount = -1;
	this.charSpacing = 0;
	this.lineSpacing = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.scale = 1;
	this.wrap = false;
	this.size = 0;
	this.height = 0;
	this.width = 0;
	this.textHeight = 0;
	this.textWidth = 0;
	haxepunk_Graphic.call(this);
	if(options == null) {
		options = { };
	}
	if(!Object.prototype.hasOwnProperty.call(options,"font")) {
		options.font = haxepunk_HXP.defaultFont + ".fnt";
	}
	if(!Object.prototype.hasOwnProperty.call(options,"size")) {
		options.size = 16;
	}
	if(!Object.prototype.hasOwnProperty.call(options,"color")) {
		options.color = 16777215;
	}
	if(!Object.prototype.hasOwnProperty.call(options,"wordWrap")) {
		options.wordWrap = false;
	}
	var font = haxepunk_assets_AssetCache.global.getBitmapFont(options.font,false);
	if(font == null) {
		font = haxepunk_graphics_text_BitmapFontAtlas.getFont(options.font,options.format,options.extraParams);
		haxepunk_assets_AssetCache.global.addBitmapFont(options.font,font);
	}
	this._font = font;
	if(this._font == null) {
		throw haxe_Exception.thrown("Invalid font glyphs provided.");
	}
	this.x = x;
	this.y = y;
	if(width != this.width) {
		this._dirty = true;
	}
	this.width = width;
	if(height != this.height) {
		this._dirty = true;
	}
	this.height = height;
	var v = options.wordWrap;
	if(v != this.wrap) {
		this._dirty = true;
	}
	this.wrap = v;
	var v = options.size;
	if(v != this.size) {
		this._dirty = true;
	}
	this.size = v;
	this.autoWidth = width == 0;
	this.autoHeight = height == 0;
	this.set_color(options.color);
	this.set_text(text != null ? text : "");
	if(openfl_text_TextFormatAlign.toString(options.align) == "left") {
		this.align = 0;
	} else if(openfl_text_TextFormatAlign.toString(options.align) == "right") {
		this.align = 2;
	} else if(openfl_text_TextFormatAlign.toString(options.align) == "center") {
		this.align = 1;
	}
};
$hxClasses["haxepunk.graphics.text.BitmapText"] = haxepunk_graphics_text_BitmapText;
haxepunk_graphics_text_BitmapText.__name__ = "haxepunk.graphics.text.BitmapText";
haxepunk_graphics_text_BitmapText.defineFormatTag = function(tag,options) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_graphics_text_BitmapText.formatTags.h,tag)) {
		throw haxe_Exception.thrown("Duplicate format tag: <" + tag + "> already exists");
	}
	var tagOps = [];
	var closeTagOps = [];
	if(Object.prototype.hasOwnProperty.call(options,"color")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetColor(options.color));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopColor);
	}
	if(Object.prototype.hasOwnProperty.call(options,"alpha")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetAlpha(options.alpha));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopAlpha);
	}
	if(Object.prototype.hasOwnProperty.call(options,"scale")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetScale(options.scale));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopScale);
	}
	if(Object.prototype.hasOwnProperty.call(options,"font")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetFont(options.font));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopFont);
	}
	if(Object.prototype.hasOwnProperty.call(options,"size")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetSize(options.size));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopSize);
	}
	var closeTag = "/" + tag;
	haxepunk_graphics_text_BitmapText.formatTags.h[tag] = tagOps;
	haxepunk_graphics_text_BitmapText.formatTags.h[closeTag] = closeTagOps;
};
haxepunk_graphics_text_BitmapText.defineImageTag = function(tag,image,padding) {
	if(padding == null) {
		padding = 0;
	}
	if(Object.prototype.hasOwnProperty.call(haxepunk_graphics_text_BitmapText.formatTags.h,tag)) {
		throw haxe_Exception.thrown("Duplicate format tag: <" + tag + "> already exists");
	}
	var v = [haxepunk_graphics_text_TextOpcode.Image(image,padding)];
	haxepunk_graphics_text_BitmapText.formatTags.h[tag] = v;
};
haxepunk_graphics_text_BitmapText.defineCustomTag = function(tag,func) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_graphics_text_BitmapText.formatTags.h,tag)) {
		throw haxe_Exception.thrown("Duplicate format tag: <" + tag + "> already exists");
	}
	var closeTag = "/" + tag;
	var v = [haxepunk_graphics_text_TextOpcode.Custom(func)];
	haxepunk_graphics_text_BitmapText.formatTags.h[tag] = v;
	var v = [haxepunk_graphics_text_TextOpcode.PopCustom];
	haxepunk_graphics_text_BitmapText.formatTags.h[closeTag] = v;
};
haxepunk_graphics_text_BitmapText.removeTag = function(tag) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_graphics_text_BitmapText.formatTags.h,tag)) {
		var _this = haxepunk_graphics_text_BitmapText.formatTags;
		if(Object.prototype.hasOwnProperty.call(_this.h,tag)) {
			delete(_this.h[tag]);
		}
	}
	var closeTag = "/" + tag;
	if(Object.prototype.hasOwnProperty.call(haxepunk_graphics_text_BitmapText.formatTags.h,closeTag)) {
		var _this = haxepunk_graphics_text_BitmapText.formatTags;
		if(Object.prototype.hasOwnProperty.call(_this.h,closeTag)) {
			delete(_this.h[closeTag]);
		}
	}
};
haxepunk_graphics_text_BitmapText.dynamicImage = function(src) {
	haxepunk_graphics_text_BitmapText._imgArray.length = 0;
	var region = haxepunk_assets_AssetCache.global.getAtlasRegion(src,false);
	var img = new haxepunk_graphics_Image(region);
	haxepunk_graphics_text_BitmapText._imgArray.push(haxepunk_graphics_text_TextOpcode.Image(img,0));
	return haxepunk_graphics_text_BitmapText._imgArray;
};
haxepunk_graphics_text_BitmapText.__super__ = haxepunk_Graphic;
haxepunk_graphics_text_BitmapText.prototype = $extend(haxepunk_Graphic.prototype,{
	get_textWidth: function() {
		if(this._dirty) {
			this.parseText();
		}
		return this.textWidth;
	}
	,set_textWidth: function(v) {
		return this.textWidth = v;
	}
	,get_textHeight: function() {
		if(this._dirty) {
			this.parseText();
		}
		return this.textHeight;
	}
	,set_textHeight: function(v) {
		return this.textHeight = v;
	}
	,set_width: function(v) {
		if(v != this.width) {
			this._dirty = true;
		}
		return this.width = v;
	}
	,set_height: function(v) {
		if(v != this.height) {
			this._dirty = true;
		}
		return this.height = v;
	}
	,set_size: function(v) {
		if(v != this.size) {
			this._dirty = true;
		}
		return this.size = v;
	}
	,set_wrap: function(v) {
		if(v != this.wrap) {
			this._dirty = true;
		}
		return this.wrap = v;
	}
	,set_scale: function(v) {
		if(v != this.scale) {
			this._dirty = true;
		}
		return this.scale = v;
	}
	,set_scaleX: function(v) {
		if(v != this.scaleX) {
			this._dirty = true;
		}
		return this.scaleX = v;
	}
	,set_scaleY: function(v) {
		if(v != this.scaleY) {
			this._dirty = true;
		}
		return this.scaleY = v;
	}
	,set_lineSpacing: function(v) {
		if(v != this.lineSpacing) {
			this._dirty = true;
		}
		return this.lineSpacing = v;
	}
	,set_charSpacing: function(v) {
		if(v != this.charSpacing) {
			this._dirty = true;
		}
		return this.charSpacing = v;
	}
	,set_text: function(text) {
		if(this.text != text) {
			this.text = text;
			this._dirty = true;
		}
		return text;
	}
	,centerOrigin: function() {
		if(this._dirty) {
			this.parseText();
		}
		var tmp;
		if(this.autoWidth) {
			if(this._dirty) {
				this.parseText();
			}
			tmp = this.textWidth;
		} else {
			tmp = this.width;
		}
		this.originX = tmp * 0.5;
		var tmp;
		if(this.autoHeight) {
			if(this._dirty) {
				this.parseText();
			}
			tmp = this.textHeight;
		} else {
			tmp = this.height;
		}
		this.originY = tmp * 0.5;
	}
	,parseText: function() {
		var _gthis = this;
		this.opCodes.length = 0;
		haxepunk_graphics_text_BitmapText._fontStack.length = 0;
		haxepunk_graphics_text_BitmapText._sizeStack.length = 0;
		haxepunk_graphics_text_BitmapText._scaleStack.length = 0;
		haxepunk_graphics_text_BitmapText._colorStack.length = 0;
		haxepunk_graphics_text_BitmapText._alphaStack.length = 0;
		haxepunk_graphics_text_BitmapText._word.length = 0;
		haxepunk_graphics_text_BitmapText._fontStack.push(this._font);
		haxepunk_graphics_text_BitmapText._sizeStack.push(this.size);
		haxepunk_graphics_text_BitmapText._scaleStack.push(1);
		haxepunk_graphics_text_BitmapText._colorStack.push(this.color);
		haxepunk_graphics_text_BitmapText._alphaStack.push(this.alpha);
		var fsx = haxepunk_HXP.screen.scaleX;
		var fsy = haxepunk_HXP.screen.scaleY;
		var sx = this.size * this.scale * this.scaleX;
		var sy = this.size * this.scale * this.scaleY;
		var lineHeight = this._font.getLineHeight(sy * fsy) / fsy;
		var lineSpacing = this.lineSpacing * this.scale * this.scaleY;
		var thisLineHeight = 0;
		var remaining = this.text;
		var cursorX = 0;
		var cursorY = 0;
		var trailingWhitespace = 0;
		var block = "";
		var currentWord = [];
		var wordLength = 0;
		var wordTrailingWhitespace = 0;
		var wordHeight = 0;
		var currentScale = 1;
		var currentFont = this._font;
		var currentSizeRatio = 1;
		var currentAlign = this.align;
		var wrapping = false;
		var currentWordTrailingWhitespace = 0;
		var textWidth = 0;
		this.charCount = 0;
		this.opCodes.push(null);
		var newLineIndex = 0;
		while(true) {
			var matched = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.match(remaining);
			var line = matched ? haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matchedLeft() : remaining;
			if(UnicodeString.get_length(line) > 0) {
				var i = 0;
				while(i < UnicodeString.get_length(line)) {
					var char = UnicodeString.charAt(line,i);
					wordHeight = Math.max(wordHeight,lineHeight * currentScale * currentSizeRatio);
					switch(char) {
					case "\n":
						if(currentWord.length > 0) {
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord.slice()));
							currentWord.length = 0;
							wordTrailingWhitespace = currentWordTrailingWhitespace;
							currentWordTrailingWhitespace = 0;
						}
						if(haxepunk_graphics_text_BitmapText._word.length != 0) {
							if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
								cursorX = wordLength;
							} else {
								cursorX += wordLength;
							}
							if(cursorX > textWidth) {
								textWidth = cursorX | 0;
							}
							var _g = 0;
							var _g1 = haxepunk_graphics_text_BitmapText._word;
							while(_g < _g1.length) {
								var opCode = _g1[_g];
								++_g;
								if(opCode == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
									_gthis.opCodes.push(opCode);
								} else if(opCode._hx_index == 5) {
									var txt2 = opCode.text;
									var _g2 = _gthis.opCodes[_gthis.opCodes.length - 1];
									if(_g2._hx_index == 5) {
										var txt1 = _g2.text;
										var _g3 = 0;
										while(_g3 < txt2.length) {
											var c = txt2[_g3];
											++_g3;
											txt1.push(c);
										}
									} else {
										_gthis.opCodes.push(opCode);
									}
								} else {
									_gthis.opCodes.push(opCode);
								}
							}
							thisLineHeight = Math.max(wordHeight,thisLineHeight);
							haxepunk_graphics_text_BitmapText._word.length = 0;
							wordLength = 0;
							wordHeight = 0;
							trailingWhitespace = wordTrailingWhitespace;
							wordTrailingWhitespace = 0;
						}
						_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
						trailingWhitespace = 0;
						cursorX = trailingWhitespace;
						cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
						thisLineHeight = lineHeight * currentScale * currentSizeRatio;
						_gthis.opCodes.push(null);
						newLineIndex = _gthis.opCodes.length - 1;
						++_gthis.charCount;
						break;
					case " ":
						var whitespace = true;
						if(whitespace == null) {
							whitespace = false;
						}
						var maxFullScale = sx * fsx;
						var gd = currentFont.getChar(char,maxFullScale * currentScale * currentSizeRatio);
						var charWidth = gd.xAdvance * gd.scale / fsx;
						currentWord.push(char);
						var charLength = charWidth + _gthis.charSpacing * currentScale * currentSizeRatio;
						if(whitespace) {
							currentWordTrailingWhitespace += charLength;
						} else {
							currentWordTrailingWhitespace = 0;
						}
						wordLength += charLength;
						++_gthis.charCount;
						if(currentWord.length > 0) {
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord.slice()));
							currentWord.length = 0;
							wordTrailingWhitespace = currentWordTrailingWhitespace;
							currentWordTrailingWhitespace = 0;
						}
						if(haxepunk_graphics_text_BitmapText._word.length != 0) {
							if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
								cursorX = wordLength;
							} else {
								cursorX += wordLength;
							}
							if(cursorX > textWidth) {
								textWidth = cursorX | 0;
							}
							var _g4 = 0;
							var _g5 = haxepunk_graphics_text_BitmapText._word;
							while(_g4 < _g5.length) {
								var opCode1 = _g5[_g4];
								++_g4;
								if(opCode1 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
									_gthis.opCodes.push(opCode1);
								} else if(opCode1._hx_index == 5) {
									var txt21 = opCode1.text;
									var _g6 = _gthis.opCodes[_gthis.opCodes.length - 1];
									if(_g6._hx_index == 5) {
										var txt11 = _g6.text;
										var _g7 = 0;
										while(_g7 < txt21.length) {
											var c1 = txt21[_g7];
											++_g7;
											txt11.push(c1);
										}
									} else {
										_gthis.opCodes.push(opCode1);
									}
								} else {
									_gthis.opCodes.push(opCode1);
								}
							}
							thisLineHeight = Math.max(wordHeight,thisLineHeight);
							haxepunk_graphics_text_BitmapText._word.length = 0;
							wordLength = 0;
							wordHeight = 0;
							trailingWhitespace = wordTrailingWhitespace;
							wordTrailingWhitespace = 0;
						}
						break;
					case "-":
						var hyphen = currentWord.length > 0;
						if(hyphen && i < UnicodeString.get_length(line) - 1) {
							var nextChar = UnicodeString.charAt(line,i + 1);
							if(nextChar == " " || nextChar == "-") {
								hyphen = false;
							}
						}
						var maxFullScale1 = sx * fsx;
						var gd1 = currentFont.getChar(char,maxFullScale1 * currentScale * currentSizeRatio);
						var charWidth1 = gd1.xAdvance * gd1.scale / fsx;
						currentWord.push(char);
						var charLength1 = charWidth1 + _gthis.charSpacing * currentScale * currentSizeRatio;
						currentWordTrailingWhitespace = 0;
						wordLength += charLength1;
						++_gthis.charCount;
						if(hyphen) {
							if(currentWord.length > 0) {
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord.slice()));
								currentWord.length = 0;
								wordTrailingWhitespace = currentWordTrailingWhitespace;
								currentWordTrailingWhitespace = 0;
							}
							if(haxepunk_graphics_text_BitmapText._word.length != 0) {
								if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
									cursorX = wordLength;
								} else {
									cursorX += wordLength;
								}
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								var _g8 = 0;
								var _g9 = haxepunk_graphics_text_BitmapText._word;
								while(_g8 < _g9.length) {
									var opCode2 = _g9[_g8];
									++_g8;
									if(opCode2 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
										_gthis.opCodes.push(opCode2);
									} else if(opCode2._hx_index == 5) {
										var txt22 = opCode2.text;
										var _g10 = _gthis.opCodes[_gthis.opCodes.length - 1];
										if(_g10._hx_index == 5) {
											var txt12 = _g10.text;
											var _g11 = 0;
											while(_g11 < txt22.length) {
												var c2 = txt22[_g11];
												++_g11;
												txt12.push(c2);
											}
										} else {
											_gthis.opCodes.push(opCode2);
										}
									} else {
										_gthis.opCodes.push(opCode2);
									}
								}
								thisLineHeight = Math.max(wordHeight,thisLineHeight);
								haxepunk_graphics_text_BitmapText._word.length = 0;
								wordLength = 0;
								wordHeight = 0;
								trailingWhitespace = wordTrailingWhitespace;
								wordTrailingWhitespace = 0;
							}
						}
						break;
					default:
						if(char == "\t") {
							char = " ";
						}
						var maxFullScale2 = sx * fsx;
						var gd2 = currentFont.getChar(char,maxFullScale2 * currentScale * currentSizeRatio);
						var charWidth2 = gd2.xAdvance * gd2.scale / fsx;
						currentWord.push(char);
						var charLength2 = charWidth2 + _gthis.charSpacing * currentScale * currentSizeRatio;
						currentWordTrailingWhitespace = 0;
						wordLength += charLength2;
						++_gthis.charCount;
					}
					++i;
				}
			}
			if(matched) {
				var tag = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(2);
				if(tag == null) {
					tag = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(1);
				}
				if(tag != null && haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(4) != null && Object.prototype.hasOwnProperty.call(haxepunk_graphics_text_BitmapText.dynamicTags.h,tag)) {
					var _g12 = 0;
					var _g13 = haxepunk_graphics_text_BitmapText.dynamicTags.h[tag](haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(5));
					while(_g12 < _g13.length) {
						var tag1 = _g13[_g12];
						++_g12;
						switch(tag1._hx_index) {
						case 0:
							var color = tag1.color;
							haxepunk_graphics_text_BitmapText._colorStack.push(color);
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 1:
							var alpha = tag1.alpha;
							haxepunk_graphics_text_BitmapText._alphaStack.push(alpha);
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 2:
							var scale = tag1.scale;
							currentScale = scale;
							haxepunk_graphics_text_BitmapText._scaleStack.push(currentScale);
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 3:
							var font = tag1.font;
							haxepunk_graphics_text_BitmapText._fontStack.push(font);
							currentFont = font;
							lineHeight = font.getLineHeight(sy * fsy) / fsy;
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 4:
							var size = tag1.size;
							haxepunk_graphics_text_BitmapText._sizeStack.push(size);
							currentSizeRatio = size / _gthis.size;
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 6:
							var _g14 = tag1.align;
							var _g15 = tag1.height;
							var _g16 = tag1.width;
							if(currentWord.length > 0) {
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord.slice()));
								currentWord.length = 0;
								wordTrailingWhitespace = currentWordTrailingWhitespace;
								currentWordTrailingWhitespace = 0;
							}
							if(haxepunk_graphics_text_BitmapText._word.length != 0) {
								if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
									cursorX = wordLength;
								} else {
									cursorX += wordLength;
								}
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								var _g17 = 0;
								var _g18 = haxepunk_graphics_text_BitmapText._word;
								while(_g17 < _g18.length) {
									var opCode3 = _g18[_g17];
									++_g17;
									if(opCode3 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
										_gthis.opCodes.push(opCode3);
									} else if(opCode3._hx_index == 5) {
										var txt23 = opCode3.text;
										var _g19 = _gthis.opCodes[_gthis.opCodes.length - 1];
										if(_g19._hx_index == 5) {
											var txt13 = _g19.text;
											var _g20 = 0;
											while(_g20 < txt23.length) {
												var c3 = txt23[_g20];
												++_g20;
												txt13.push(c3);
											}
										} else {
											_gthis.opCodes.push(opCode3);
										}
									} else {
										_gthis.opCodes.push(opCode3);
									}
								}
								thisLineHeight = Math.max(wordHeight,thisLineHeight);
								haxepunk_graphics_text_BitmapText._word.length = 0;
								wordLength = 0;
								wordHeight = 0;
								trailingWhitespace = wordTrailingWhitespace;
								wordTrailingWhitespace = 0;
							}
							_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
							trailingWhitespace = 0;
							cursorX = trailingWhitespace;
							cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
							thisLineHeight = lineHeight * currentScale * currentSizeRatio;
							_gthis.opCodes.push(null);
							newLineIndex = _gthis.opCodes.length - 1;
							++_gthis.charCount;
							break;
						case 7:
							var padding = tag1.padding;
							var image = tag1.image;
							var imageWidth = (image.get_width() * image.scale * image.scaleX * _gthis.scale * _gthis.scaleX + _gthis.charSpacing) * currentScale;
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							currentWordTrailingWhitespace = 0;
							wordLength += imageWidth + padding * 2;
							wordHeight = Math.max(wordHeight,image.get_height() * currentScale * image.scale * image.scaleY * _gthis.scale * _gthis.scaleY);
							if(cursorX > textWidth) {
								textWidth = cursorX | 0;
							}
							++_gthis.charCount;
							break;
						case 8:
							var alignType = tag1.alignType;
							if(currentWord.length > 0) {
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord.slice()));
								currentWord.length = 0;
								wordTrailingWhitespace = currentWordTrailingWhitespace;
								currentWordTrailingWhitespace = 0;
							}
							if(haxepunk_graphics_text_BitmapText._word.length != 0) {
								if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
									cursorX = wordLength;
								} else {
									cursorX += wordLength;
								}
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								var _g21 = 0;
								var _g22 = haxepunk_graphics_text_BitmapText._word;
								while(_g21 < _g22.length) {
									var opCode4 = _g22[_g21];
									++_g21;
									if(opCode4 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
										_gthis.opCodes.push(opCode4);
									} else if(opCode4._hx_index == 5) {
										var txt24 = opCode4.text;
										var _g23 = _gthis.opCodes[_gthis.opCodes.length - 1];
										if(_g23._hx_index == 5) {
											var txt14 = _g23.text;
											var _g24 = 0;
											while(_g24 < txt24.length) {
												var c4 = txt24[_g24];
												++_g24;
												txt14.push(c4);
											}
										} else {
											_gthis.opCodes.push(opCode4);
										}
									} else {
										_gthis.opCodes.push(opCode4);
									}
								}
								thisLineHeight = Math.max(wordHeight,thisLineHeight);
								haxepunk_graphics_text_BitmapText._word.length = 0;
								wordLength = 0;
								wordHeight = 0;
								trailingWhitespace = wordTrailingWhitespace;
								wordTrailingWhitespace = 0;
							}
							if(cursorX > 0) {
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
							}
							if(alignType != 0 && !_gthis.autoWidth) {
								textWidth = _gthis.width | 0;
							}
							currentAlign = alignType;
							break;
						case 10:
							if(haxepunk_graphics_text_BitmapText._colorStack.length > 1) {
								haxepunk_graphics_text_BitmapText._colorStack.pop();
							}
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetColor(haxepunk_graphics_text_BitmapText._colorStack[haxepunk_graphics_text_BitmapText._colorStack.length - 1]));
							break;
						case 11:
							if(haxepunk_graphics_text_BitmapText._alphaStack.length > 1) {
								haxepunk_graphics_text_BitmapText._alphaStack.pop();
							}
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetAlpha(haxepunk_graphics_text_BitmapText._alphaStack[haxepunk_graphics_text_BitmapText._alphaStack.length - 1]));
							break;
						case 12:
							if(haxepunk_graphics_text_BitmapText._scaleStack.length > 1) {
								haxepunk_graphics_text_BitmapText._scaleStack.pop();
							}
							currentScale = haxepunk_graphics_text_BitmapText._scaleStack[haxepunk_graphics_text_BitmapText._scaleStack.length - 1];
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetScale(currentScale));
							break;
						case 13:
							if(haxepunk_graphics_text_BitmapText._fontStack.length > 1) {
								haxepunk_graphics_text_BitmapText._fontStack.pop();
							}
							currentFont = haxepunk_graphics_text_BitmapText._fontStack[haxepunk_graphics_text_BitmapText._fontStack.length - 1];
							lineHeight = currentFont.getLineHeight(sy * fsy) / fsy;
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetFont(currentFont));
							break;
						case 14:
							if(haxepunk_graphics_text_BitmapText._sizeStack.length > 1) {
								haxepunk_graphics_text_BitmapText._sizeStack.pop();
							}
							currentSizeRatio = haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1] / _gthis.size;
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetSize(haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1]));
							break;
						default:
							haxepunk_graphics_text_BitmapText._word.push(tag1);
						}
					}
				} else if(tag != null && haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(4) == null && Object.prototype.hasOwnProperty.call(haxepunk_graphics_text_BitmapText.formatTags.h,tag)) {
					if(currentWord.length > 0) {
						haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord.slice()));
						currentWord.length = 0;
						wordTrailingWhitespace = currentWordTrailingWhitespace;
						currentWordTrailingWhitespace = 0;
					}
					var _g25 = 0;
					var _g26 = haxepunk_graphics_text_BitmapText.formatTags.h[tag];
					while(_g25 < _g26.length) {
						var tag2 = _g26[_g25];
						++_g25;
						switch(tag2._hx_index) {
						case 0:
							var color1 = tag2.color;
							haxepunk_graphics_text_BitmapText._colorStack.push(color1);
							haxepunk_graphics_text_BitmapText._word.push(tag2);
							break;
						case 1:
							var alpha1 = tag2.alpha;
							haxepunk_graphics_text_BitmapText._alphaStack.push(alpha1);
							haxepunk_graphics_text_BitmapText._word.push(tag2);
							break;
						case 2:
							var scale1 = tag2.scale;
							currentScale = scale1;
							haxepunk_graphics_text_BitmapText._scaleStack.push(currentScale);
							haxepunk_graphics_text_BitmapText._word.push(tag2);
							break;
						case 3:
							var font1 = tag2.font;
							haxepunk_graphics_text_BitmapText._fontStack.push(font1);
							currentFont = font1;
							lineHeight = font1.getLineHeight(sy * fsy) / fsy;
							haxepunk_graphics_text_BitmapText._word.push(tag2);
							break;
						case 4:
							var size1 = tag2.size;
							haxepunk_graphics_text_BitmapText._sizeStack.push(size1);
							currentSizeRatio = size1 / _gthis.size;
							haxepunk_graphics_text_BitmapText._word.push(tag2);
							break;
						case 6:
							var _g27 = tag2.align;
							var _g28 = tag2.height;
							var _g29 = tag2.width;
							if(currentWord.length > 0) {
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord.slice()));
								currentWord.length = 0;
								wordTrailingWhitespace = currentWordTrailingWhitespace;
								currentWordTrailingWhitespace = 0;
							}
							if(haxepunk_graphics_text_BitmapText._word.length != 0) {
								if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
									cursorX = wordLength;
								} else {
									cursorX += wordLength;
								}
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								var _g30 = 0;
								var _g31 = haxepunk_graphics_text_BitmapText._word;
								while(_g30 < _g31.length) {
									var opCode5 = _g31[_g30];
									++_g30;
									if(opCode5 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
										_gthis.opCodes.push(opCode5);
									} else if(opCode5._hx_index == 5) {
										var txt25 = opCode5.text;
										var _g32 = _gthis.opCodes[_gthis.opCodes.length - 1];
										if(_g32._hx_index == 5) {
											var txt15 = _g32.text;
											var _g33 = 0;
											while(_g33 < txt25.length) {
												var c5 = txt25[_g33];
												++_g33;
												txt15.push(c5);
											}
										} else {
											_gthis.opCodes.push(opCode5);
										}
									} else {
										_gthis.opCodes.push(opCode5);
									}
								}
								thisLineHeight = Math.max(wordHeight,thisLineHeight);
								haxepunk_graphics_text_BitmapText._word.length = 0;
								wordLength = 0;
								wordHeight = 0;
								trailingWhitespace = wordTrailingWhitespace;
								wordTrailingWhitespace = 0;
							}
							_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
							trailingWhitespace = 0;
							cursorX = trailingWhitespace;
							cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
							thisLineHeight = lineHeight * currentScale * currentSizeRatio;
							_gthis.opCodes.push(null);
							newLineIndex = _gthis.opCodes.length - 1;
							++_gthis.charCount;
							break;
						case 7:
							var padding1 = tag2.padding;
							var image1 = tag2.image;
							var imageWidth1 = (image1.get_width() * image1.scale * image1.scaleX * _gthis.scale * _gthis.scaleX + _gthis.charSpacing) * currentScale;
							haxepunk_graphics_text_BitmapText._word.push(tag2);
							currentWordTrailingWhitespace = 0;
							wordLength += imageWidth1 + padding1 * 2;
							wordHeight = Math.max(wordHeight,image1.get_height() * currentScale * image1.scale * image1.scaleY * _gthis.scale * _gthis.scaleY);
							if(cursorX > textWidth) {
								textWidth = cursorX | 0;
							}
							++_gthis.charCount;
							break;
						case 8:
							var alignType1 = tag2.alignType;
							if(currentWord.length > 0) {
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord.slice()));
								currentWord.length = 0;
								wordTrailingWhitespace = currentWordTrailingWhitespace;
								currentWordTrailingWhitespace = 0;
							}
							if(haxepunk_graphics_text_BitmapText._word.length != 0) {
								if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
									cursorX = wordLength;
								} else {
									cursorX += wordLength;
								}
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								var _g34 = 0;
								var _g35 = haxepunk_graphics_text_BitmapText._word;
								while(_g34 < _g35.length) {
									var opCode6 = _g35[_g34];
									++_g34;
									if(opCode6 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
										_gthis.opCodes.push(opCode6);
									} else if(opCode6._hx_index == 5) {
										var txt26 = opCode6.text;
										var _g36 = _gthis.opCodes[_gthis.opCodes.length - 1];
										if(_g36._hx_index == 5) {
											var txt16 = _g36.text;
											var _g37 = 0;
											while(_g37 < txt26.length) {
												var c6 = txt26[_g37];
												++_g37;
												txt16.push(c6);
											}
										} else {
											_gthis.opCodes.push(opCode6);
										}
									} else {
										_gthis.opCodes.push(opCode6);
									}
								}
								thisLineHeight = Math.max(wordHeight,thisLineHeight);
								haxepunk_graphics_text_BitmapText._word.length = 0;
								wordLength = 0;
								wordHeight = 0;
								trailingWhitespace = wordTrailingWhitespace;
								wordTrailingWhitespace = 0;
							}
							if(cursorX > 0) {
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
							}
							if(alignType1 != 0 && !_gthis.autoWidth) {
								textWidth = _gthis.width | 0;
							}
							currentAlign = alignType1;
							break;
						case 10:
							if(haxepunk_graphics_text_BitmapText._colorStack.length > 1) {
								haxepunk_graphics_text_BitmapText._colorStack.pop();
							}
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetColor(haxepunk_graphics_text_BitmapText._colorStack[haxepunk_graphics_text_BitmapText._colorStack.length - 1]));
							break;
						case 11:
							if(haxepunk_graphics_text_BitmapText._alphaStack.length > 1) {
								haxepunk_graphics_text_BitmapText._alphaStack.pop();
							}
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetAlpha(haxepunk_graphics_text_BitmapText._alphaStack[haxepunk_graphics_text_BitmapText._alphaStack.length - 1]));
							break;
						case 12:
							if(haxepunk_graphics_text_BitmapText._scaleStack.length > 1) {
								haxepunk_graphics_text_BitmapText._scaleStack.pop();
							}
							currentScale = haxepunk_graphics_text_BitmapText._scaleStack[haxepunk_graphics_text_BitmapText._scaleStack.length - 1];
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetScale(currentScale));
							break;
						case 13:
							if(haxepunk_graphics_text_BitmapText._fontStack.length > 1) {
								haxepunk_graphics_text_BitmapText._fontStack.pop();
							}
							currentFont = haxepunk_graphics_text_BitmapText._fontStack[haxepunk_graphics_text_BitmapText._fontStack.length - 1];
							lineHeight = currentFont.getLineHeight(sy * fsy) / fsy;
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetFont(currentFont));
							break;
						case 14:
							if(haxepunk_graphics_text_BitmapText._sizeStack.length > 1) {
								haxepunk_graphics_text_BitmapText._sizeStack.pop();
							}
							currentSizeRatio = haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1] / _gthis.size;
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetSize(haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1]));
							break;
						default:
							haxepunk_graphics_text_BitmapText._word.push(tag2);
						}
					}
				} else {
					throw haxe_Exception.thrown("Unrecognized " + (haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(4) == null ? "format" : "dynamic") + " tag: <" + tag + ">");
				}
				remaining = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matchedRight();
			} else {
				break;
			}
		}
		if(currentWord.length > 0) {
			haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord.slice()));
			currentWord.length = 0;
			wordTrailingWhitespace = currentWordTrailingWhitespace;
			currentWordTrailingWhitespace = 0;
		}
		if(haxepunk_graphics_text_BitmapText._word.length != 0) {
			if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
				_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
				trailingWhitespace = 0;
				cursorX = trailingWhitespace;
				cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
				thisLineHeight = lineHeight * currentScale * currentSizeRatio;
				_gthis.opCodes.push(null);
				newLineIndex = _gthis.opCodes.length - 1;
				++_gthis.charCount;
				cursorX = wordLength;
			} else {
				cursorX += wordLength;
			}
			if(cursorX > textWidth) {
				textWidth = cursorX | 0;
			}
			var _g = 0;
			var _g1 = haxepunk_graphics_text_BitmapText._word;
			while(_g < _g1.length) {
				var opCode = _g1[_g];
				++_g;
				if(opCode == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
					_gthis.opCodes.push(opCode);
				} else if(opCode._hx_index == 5) {
					var txt2 = opCode.text;
					var _g2 = _gthis.opCodes[_gthis.opCodes.length - 1];
					if(_g2._hx_index == 5) {
						var txt1 = _g2.text;
						var _g3 = 0;
						while(_g3 < txt2.length) {
							var c = txt2[_g3];
							++_g3;
							txt1.push(c);
						}
					} else {
						_gthis.opCodes.push(opCode);
					}
				} else {
					_gthis.opCodes.push(opCode);
				}
			}
			thisLineHeight = Math.max(wordHeight,thisLineHeight);
			haxepunk_graphics_text_BitmapText._word.length = 0;
			wordLength = 0;
			wordHeight = 0;
			trailingWhitespace = wordTrailingWhitespace;
			wordTrailingWhitespace = 0;
		}
		if(this.opCodes[newLineIndex] == null) {
			this.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX,thisLineHeight,currentAlign);
		}
		this.textWidth = textWidth;
		if(this.autoWidth) {
			if(textWidth != this.width) {
				this._dirty = true;
			}
			this.width = textWidth;
		}
		this.textHeight = cursorY + (cursorX > 0 ? thisLineHeight : 0) | 0;
		this._dirty = false;
	}
	,render: function(point,camera) {
		var _gthis = this;
		if(this._dirty) {
			this.parseText();
		}
		haxepunk_graphics_text_BitmapText._customStack.length = 0;
		var pixelPerfect = this.pixelSnapping || camera.pixelSnapping;
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		var x = this.x;
		var x1 = this.originX * this.scaleX * this.scale;
		var x2 = camera.x * this.scrollX;
		this._point.x = point.x + (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x1 + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x2 + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2);
		var y = this.y;
		var y1 = this.originY * this.scaleY * this.scale;
		var y2 = camera.y * this.scrollY;
		this._point.y = point.y + (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y1 + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y2 + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2);
		var sx = this.scale * this.scaleX * this.size;
		var sy = this.scale * this.scaleY * this.size;
		var lineHeight = this._font.getLineHeight(sy * fsy) / fsy;
		var lineSpacing = this.lineSpacing * this.scale * this.scaleY;
		var thisLineHeight = 0;
		var lineOffsetX = 0;
		var currentColor = this.color;
		var currentAlpha = this.alpha;
		var currentScale = 1;
		var currentFont = this._font;
		var currentSizeRatio = 1;
		var cursorX = 0;
		var cursorY = 0;
		var charCount = 0;
		var _g = 0;
		var _g1 = this.opCodes;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(this.displayCharCount > -1 && charCount >= this.displayCharCount) {
				break;
			}
			switch(op._hx_index) {
			case 0:
				var color = op.color;
				currentColor = color;
				break;
			case 1:
				var alpha = op.alpha;
				currentAlpha = alpha;
				break;
			case 2:
				var scale = op.scale;
				currentScale = scale;
				break;
			case 3:
				var font = op.font;
				currentFont = font;
				lineHeight = font.getLineHeight(sy * fsy) / fsy;
				break;
			case 4:
				var size = op.size;
				currentSizeRatio = size / this.size;
				break;
			case 5:
				var text = op.text;
				var _g2 = 0;
				var _g3 = text.length;
				while(_g2 < _g3) {
					var i = _g2++;
					if(this.displayCharCount > -1 && charCount >= this.displayCharCount) {
						break;
					}
					++charCount;
					var char = text[i];
					var maxFullScale = sx * fsx;
					var gd = currentFont.getChar(char,maxFullScale * currentScale * currentSizeRatio);
					if(char == " ") {
						cursorX += gd.xAdvance * gd.scale / fsx + this.charSpacing * currentScale * currentSizeRatio;
					} else {
						haxepunk_graphics_text_BitmapText._renderData.char = char;
						haxepunk_graphics_text_BitmapText._renderData.img = null;
						haxepunk_graphics_text_BitmapText._renderData.x = cursorX;
						haxepunk_graphics_text_BitmapText._renderData.y = cursorY;
						haxepunk_graphics_text_BitmapText._renderData.color = currentColor;
						haxepunk_graphics_text_BitmapText._renderData.alpha = currentAlpha;
						haxepunk_graphics_text_BitmapText._renderData.scale = currentScale;
						var data = haxepunk_graphics_text_BitmapText._renderData;
						var _g4 = 0;
						var _g5 = haxepunk_graphics_text_BitmapText._customStack;
						while(_g4 < _g5.length) {
							var func = _g5[_g4];
							++_g4;
							func(_gthis,data);
						}
						var x = haxepunk_graphics_text_BitmapText._renderData.x + lineOffsetX + gd.xOffset * gd.scale / fsx;
						var y = haxepunk_graphics_text_BitmapText._renderData.y + gd.yOffset * gd.scale * sy / maxFullScale + thisLineHeight - lineHeight * currentScale * currentSizeRatio;
						var _this = gd.region;
						var x1 = (this._point.x + (this.pixelSnapping || camera.pixelSnapping ? Math.floor((x + 0.5) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x)) * fsx;
						var y1 = (this._point.y + (this.pixelSnapping || camera.pixelSnapping ? Math.floor((y + 0.5) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y)) * fsy;
						var scaleX = gd.scale;
						var scaleY = gd.scale * sy * fsy / maxFullScale;
						var angle = 0;
						var color1 = haxepunk_graphics_text_BitmapText._renderData.color;
						var alpha1 = haxepunk_graphics_text_BitmapText._renderData.alpha;
						var flexibleLayer = this.flexibleLayer;
						if(flexibleLayer == null) {
							flexibleLayer = false;
						}
						if(alpha1 == null) {
							alpha1 = 1;
						}
						if(color1 == null) {
							color1 = 16777215;
						}
						if(angle == null) {
							angle = 0;
						}
						if(scaleY == null) {
							scaleY = 1;
						}
						if(scaleX == null) {
							scaleX = 1;
						}
						if(_this.rotated) {
							angle += 90;
						}
						var rect = _this._rect;
						var flexibleLayer1 = flexibleLayer;
						if(flexibleLayer1 == null) {
							flexibleLayer1 = false;
						}
						var a;
						var b;
						var c;
						var d;
						if(angle == 0) {
							a = scaleX;
							b = 0;
							c = 0;
							d = scaleY;
						} else {
							var cos = Math.cos(-angle * (Math.PI / -180));
							var sin = Math.sin(-angle * (Math.PI / -180));
							a = cos * scaleX;
							b = -sin * scaleY;
							c = sin * scaleX;
							d = cos * scaleY;
						}
						var texture = _this._parent.texture;
						var rx = rect.x;
						var ry = rect.y;
						var rw = rect.width;
						var rh = rect.height;
						var flexibleLayer2 = flexibleLayer1;
						if(flexibleLayer2 == null) {
							flexibleLayer2 = false;
						}
						if(alpha1 > 0) {
							var uvx1;
							var uvy1;
							var uvx2;
							var uvy2;
							if(texture == null) {
								uvy1 = 0;
								uvx1 = uvy1;
								uvx2 = rw;
								uvy2 = rh;
							} else {
								uvx1 = rx / (texture == null ? 0 : texture.width);
								uvy1 = ry / (texture == null ? 0 : texture.height);
								uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
								uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
							}
							var xa = rw * a + x1;
							var yb = rw * b + y1;
							var xc = rh * c + x1;
							var yd = rh * d + y1;
							var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,this.shader,this.smooth,this.blend,this.clipRect,x1,y1,xa,yb,xc,yd,flexibleLayer2);
							if(alpha1 > 0) {
								var onScreen;
								if(command.shader.attributeNames.length <= 0) {
									var onScreen1;
									var _this1 = command.visibleArea;
									if((x1 > xa ? xa > xc ? xc : xa : x1 > xc ? xc : x1) <= _this1.x + _this1.width && (x1 < xa ? xa < xc ? xc : xa : x1 < xc ? xc : x1) >= command.visibleArea.x) {
										var _this2 = command.visibleArea;
										onScreen1 = (y1 > yb ? yb > yd ? yd : yb : y1 > yd ? yd : y1) <= _this2.y + _this2.height;
									} else {
										onScreen1 = false;
									}
									onScreen = onScreen1 && (y1 < yb ? yb < yd ? yd : yb : y1 < yd ? yd : y1) >= command.visibleArea.y;
								} else {
									onScreen = true;
								}
								if(onScreen) {
									var data1;
									if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
										data1 = haxepunk_graphics_hardware_DrawCommand._dataPool;
										haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
										data1._next = null;
									} else {
										data1 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
									}
									var data2 = data1;
									data2.tx1 = x1;
									data2.ty1 = y1;
									data2.uvx1 = uvx1;
									data2.uvy1 = uvy1;
									data2.tx2 = xa;
									data2.ty2 = yb;
									data2.uvx2 = uvx2;
									data2.uvy2 = uvy1;
									data2.tx3 = xc;
									data2.ty3 = yd;
									data2.uvx3 = uvx1;
									data2.uvy3 = uvy2;
									data2.color = color1;
									data2.alpha = alpha1;
									if(command.data == null) {
										command.data = data2;
									} else {
										command._lastData._next = data2;
									}
									command._lastData = data2;
									++command.triangleCount;
									var a1 = data2.tx1;
									var b1 = data2.tx2;
									var c1 = data2.tx3;
									var x11 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
									var a2 = data2.tx1;
									var b2 = data2.tx2;
									var c2 = data2.tx3;
									var x2 = a2 < b2 ? b2 < c2 ? c2 : b2 : a2 < c2 ? c2 : a2;
									var a3 = data2.ty1;
									var b3 = data2.ty2;
									var c3 = data2.ty3;
									var y11 = a3 > b3 ? b3 > c3 ? c3 : b3 : a3 > c3 ? c3 : a3;
									var a4 = data2.ty1;
									var b4 = data2.ty2;
									var c4 = data2.ty3;
									var y2 = a4 < b4 ? b4 < c4 ? c4 : b4 : a4 < c4 ? c4 : a4;
									if(command.bounds.width == 0) {
										command.bounds.x = x11;
										command.bounds.width = x2 - x11;
									} else {
										if(x11 < command.bounds.x) {
											command.bounds.width += command.bounds.x - x11;
											command.bounds.x = x11;
										}
										var _this3 = command.bounds;
										if(x2 > _this3.x + _this3.width) {
											command.bounds.width = x2 - command.bounds.x;
										}
									}
									if(command.bounds.height == 0) {
										command.bounds.y = y11;
										command.bounds.height = y2 - y11;
									} else {
										if(y11 < command.bounds.y) {
											command.bounds.height += command.bounds.y - y11;
											command.bounds.y = y11;
										}
										var _this4 = command.bounds;
										if(y2 > _this4.y + _this4.height) {
											command.bounds.height = y2 - command.bounds.y;
										}
									}
								}
							}
							var tx3 = xa + rh * c;
							var ty3 = yb + rh * d;
							if(alpha1 > 0) {
								var onScreen2;
								if(command.shader.attributeNames.length <= 0) {
									var onScreen3;
									var _this5 = command.visibleArea;
									if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this5.x + _this5.width && (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x) {
										var _this6 = command.visibleArea;
										onScreen3 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this6.y + _this6.height;
									} else {
										onScreen3 = false;
									}
									onScreen2 = onScreen3 && (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
								} else {
									onScreen2 = true;
								}
								if(onScreen2) {
									var data3;
									if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
										data3 = haxepunk_graphics_hardware_DrawCommand._dataPool;
										haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
										data3._next = null;
									} else {
										data3 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
									}
									var data4 = data3;
									data4.tx1 = xc;
									data4.ty1 = yd;
									data4.uvx1 = uvx1;
									data4.uvy1 = uvy2;
									data4.tx2 = xa;
									data4.ty2 = yb;
									data4.uvx2 = uvx2;
									data4.uvy2 = uvy1;
									data4.tx3 = tx3;
									data4.ty3 = ty3;
									data4.uvx3 = uvx2;
									data4.uvy3 = uvy2;
									data4.color = color1;
									data4.alpha = alpha1;
									if(command.data == null) {
										command.data = data4;
									} else {
										command._lastData._next = data4;
									}
									command._lastData = data4;
									++command.triangleCount;
									var a5 = data4.tx1;
									var b5 = data4.tx2;
									var c5 = data4.tx3;
									var x12 = a5 > b5 ? b5 > c5 ? c5 : b5 : a5 > c5 ? c5 : a5;
									var a6 = data4.tx1;
									var b6 = data4.tx2;
									var c6 = data4.tx3;
									var x21 = a6 < b6 ? b6 < c6 ? c6 : b6 : a6 < c6 ? c6 : a6;
									var a7 = data4.ty1;
									var b7 = data4.ty2;
									var c7 = data4.ty3;
									var y12 = a7 > b7 ? b7 > c7 ? c7 : b7 : a7 > c7 ? c7 : a7;
									var a8 = data4.ty1;
									var b8 = data4.ty2;
									var c8 = data4.ty3;
									var y21 = a8 < b8 ? b8 < c8 ? c8 : b8 : a8 < c8 ? c8 : a8;
									if(command.bounds.width == 0) {
										command.bounds.x = x12;
										command.bounds.width = x21 - x12;
									} else {
										if(x12 < command.bounds.x) {
											command.bounds.width += command.bounds.x - x12;
											command.bounds.x = x12;
										}
										var _this7 = command.bounds;
										if(x21 > _this7.x + _this7.width) {
											command.bounds.width = x21 - command.bounds.x;
										}
									}
									if(command.bounds.height == 0) {
										command.bounds.y = y12;
										command.bounds.height = y21 - y12;
									} else {
										if(y12 < command.bounds.y) {
											command.bounds.height += command.bounds.y - y12;
											command.bounds.y = y12;
										}
										var _this8 = command.bounds;
										if(y21 > _this8.y + _this8.height) {
											command.bounds.height = y21 - command.bounds.y;
										}
									}
								}
							}
						}
						cursorX += gd.xAdvance * gd.scale / fsx + this.charSpacing * currentScale * currentSizeRatio;
					}
				}
				break;
			case 6:
				var alignType = op.align;
				var lineHeight1 = op.height;
				var lineWidth = op.width;
				cursorX = 0;
				cursorY += thisLineHeight + (cursorY > 0 && thisLineHeight > 0 ? lineSpacing : 0);
				var lineOffsetX1 = this.width - lineWidth;
				var lineOffsetX2;
				switch(alignType) {
				case 1:
					lineOffsetX2 = 0.5;
					break;
				case 2:
					lineOffsetX2 = 1;
					break;
				default:
					lineOffsetX2 = 0;
				}
				lineOffsetX = lineOffsetX1 * lineOffsetX2;
				thisLineHeight = lineHeight1;
				if(cursorY != 0) {
					++charCount;
				}
				break;
			case 7:
				var padding = op.padding;
				var image = op.image;
				var originalX = image.x;
				var originalY = image.y;
				var originalScaleX = image.scaleX;
				var originalScaleY = image.scaleY;
				image.originX = image.originY = 0;
				haxepunk_graphics_text_BitmapText._renderData.char = null;
				haxepunk_graphics_text_BitmapText._renderData.img = image;
				haxepunk_graphics_text_BitmapText._renderData.x = cursorX;
				haxepunk_graphics_text_BitmapText._renderData.y = cursorY;
				haxepunk_graphics_text_BitmapText._renderData.color = currentColor;
				haxepunk_graphics_text_BitmapText._renderData.alpha = currentAlpha;
				haxepunk_graphics_text_BitmapText._renderData.scale = currentScale;
				var data5 = haxepunk_graphics_text_BitmapText._renderData;
				var _g6 = 0;
				var _g7 = haxepunk_graphics_text_BitmapText._customStack;
				while(_g6 < _g7.length) {
					var func1 = _g7[_g6];
					++_g6;
					func1(_gthis,data5);
				}
				image.x = this._point.x + haxepunk_graphics_text_BitmapText._renderData.x + lineOffsetX + originalX + padding;
				image.y = this._point.y + haxepunk_graphics_text_BitmapText._renderData.y + thisLineHeight + originalY - image.get_height() * image.scale * image.scaleY * haxepunk_graphics_text_BitmapText._renderData.scale * this.scale * this.scaleY;
				image.set_color(haxepunk_graphics_text_BitmapText._renderData.color);
				image.set_alpha(haxepunk_graphics_text_BitmapText._renderData.alpha);
				image.scaleX *= this.scale * this.scaleX * haxepunk_graphics_text_BitmapText._renderData.scale;
				image.scaleY *= this.scale * this.scaleY * haxepunk_graphics_text_BitmapText._renderData.scale;
				image.pixelSnapping = pixelPerfect;
				haxepunk_math_Vector2.setTo(haxepunk_HXP.point,0,0);
				image.render(haxepunk_HXP.point,haxepunk_HXP.zeroCamera);
				image.x = originalX;
				image.y = originalY;
				image.scaleX = originalScaleX;
				image.scaleY = originalScaleY;
				image.flexibleLayer = this.flexibleLayer;
				cursorX += (image.get_width() * image.scale * image.scaleX * this.scale * this.scaleX + this.charSpacing + padding * 2) * haxepunk_graphics_text_BitmapText._renderData.scale;
				++charCount;
				break;
			case 8:
				var _g8 = op.alignType;
				break;
			case 9:
				var func2 = op.f;
				haxepunk_graphics_text_BitmapText._customStack.push(func2);
				break;
			case 10:case 11:case 12:case 13:case 14:
				break;
			case 15:
				haxepunk_graphics_text_BitmapText._customStack.pop();
				break;
			}
		}
	}
	,__class__: haxepunk_graphics_text_BitmapText
	,__properties__: $extend(haxepunk_Graphic.prototype.__properties__,{set_text:"set_text",set_charSpacing:"set_charSpacing",set_lineSpacing:"set_lineSpacing",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX",set_scale:"set_scale",set_wrap:"set_wrap",set_size:"set_size",set_height:"set_height",set_width:"set_width",set_textHeight:"set_textHeight",get_textHeight:"get_textHeight",set_textWidth:"set_textWidth",get_textWidth:"get_textWidth"})
});
var haxepunk_graphics_text_BitmapFontType = {};
haxepunk_graphics_text_BitmapFontType.fromString = function(s) {
	return haxepunk_assets_AssetCache.global.getBitmapFont(s,false);
};
haxepunk_graphics_text_BitmapFontType.fromFont = function(font) {
	return font;
};
var haxepunk_input_Gamepad = function(id) {
	this._allAxes = [];
	this._axisMap = new haxe_ds_IntMap();
	this._axisControl = new haxe_ds_StringMap();
	this._allButtons = [];
	this._buttonMap = new haxe_ds_IntMap();
	this._control = new haxe_ds_StringMap();
	this.type = null;
	var this1 = { x : 0, y : 0};
	this.hat = this1;
	this.lastAxis = new haxe_ds_IntMap();
	this.axis = new haxe_ds_IntMap();
	this.buttons = new haxe_ds_IntMap();
	this.connected = true;
	this.id = 0;
	this.guid = "???";
	this.name = "???";
	this.id = id;
};
$hxClasses["haxepunk.input.Gamepad"] = haxepunk_input_Gamepad;
haxepunk_input_Gamepad.__name__ = "haxepunk.input.Gamepad";
haxepunk_input_Gamepad.getController = function(guid) {
	if(haxepunk_input_gamepad_GamepadType.controllers != null && Object.prototype.hasOwnProperty.call(haxepunk_input_gamepad_GamepadType.controllers.h,guid)) {
		return haxepunk_input_gamepad_GamepadType.controllers.h[guid];
	} else {
		return null;
	}
};
haxepunk_input_Gamepad.gamepad = function(id) {
	return haxepunk_input_Gamepad.gamepads.h[id];
};
haxepunk_input_Gamepad.prototype = {
	update: function() {
	}
	,postUpdate: function() {
		var _g = 0;
		var _g1 = this._allButtons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			var _g2 = this.buttons.h[button];
			if(_g2 != null) {
				switch(_g2) {
				case -1:
					this.buttons.h[button] = 0;
					break;
				case 2:
					this.buttons.h[button] = 1;
					break;
				default:
				}
			}
		}
		var _g = 0;
		var _g1 = this._allAxes;
		while(_g < _g1.length) {
			var axis = _g1[_g];
			++_g;
			var v = this.axis.h[axis];
			this.lastAxis.h[axis] = v;
		}
	}
	,defineButton: function(input,buttons) {
		if(Object.prototype.hasOwnProperty.call(this._control.h,input)) {
			var _g = 0;
			var _g1 = this._control.h[input];
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				HxOverrides.remove(this._buttonMap.h[button],input);
			}
		}
		this._control.h[input] = buttons;
		var _g = 0;
		while(_g < buttons.length) {
			var button = buttons[_g];
			++_g;
			if(!this._buttonMap.h.hasOwnProperty(button)) {
				var this1 = this._buttonMap;
				var v = [];
				this1.h[button] = v;
			}
			if(this._buttonMap.h[button].indexOf(input) < 0) {
				this._buttonMap.h[button].push(input);
			}
		}
	}
	,defineAxis: function(input,axis,minValue,maxValue) {
		if(maxValue == null) {
			maxValue = 1;
		}
		if(minValue == null) {
			minValue = 0;
		}
		if(minValue > maxValue) {
			var swap = maxValue;
			maxValue = minValue;
			minValue = swap;
		}
		if(!Object.prototype.hasOwnProperty.call(this._axisControl.h,input)) {
			var this1 = this._axisControl;
			var v = [];
			this1.h[input] = v;
		}
		var def = { axis : axis, minValue : minValue, maxValue : maxValue, input : input};
		this._axisControl.h[input].push(def);
		if(!this._axisMap.h.hasOwnProperty(axis)) {
			var this1 = this._axisMap;
			var v = [];
			this1.h[axis] = v;
		}
		if(this._axisMap.h[axis].indexOf(def) < 0) {
			this._axisMap.h[axis].push(def);
		}
	}
	,checkInput: function(input) {
		if(Object.prototype.hasOwnProperty.call(this._control.h,input)) {
			var _g = 0;
			var _g1 = this._control.h[input];
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				if(this.check(button)) {
					return true;
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(this._axisControl.h,input)) {
			var _g = 0;
			var _g1 = this._axisControl.h[input];
			while(_g < _g1.length) {
				var axisDef = _g1[_g];
				++_g;
				if(this.axis.h.hasOwnProperty(axisDef.axis) && this.axis.h[axisDef.axis] >= axisDef.minValue && this.axis.h[axisDef.axis] <= axisDef.maxValue) {
					return true;
				}
			}
		}
		return false;
	}
	,pressedInput: function(input) {
		if(Object.prototype.hasOwnProperty.call(this._control.h,input)) {
			var _g = 0;
			var _g1 = this._control.h[input];
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				if(this.pressed(button)) {
					return true;
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(this._axisControl.h,input)) {
			var _g = 0;
			var _g1 = this._axisControl.h[input];
			while(_g < _g1.length) {
				var axisDef = _g1[_g];
				++_g;
				if(this.pressedAxis(axisDef)) {
					return true;
				}
			}
		}
		return false;
	}
	,releasedInput: function(input) {
		if(Object.prototype.hasOwnProperty.call(this._control.h,input)) {
			var _g = 0;
			var _g1 = this._control.h[input];
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				if(this.released(button)) {
					return true;
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(this._axisControl.h,input)) {
			var _g = 0;
			var _g1 = this._axisControl.h[input];
			while(_g < _g1.length) {
				var axisDef = _g1[_g];
				++_g;
				if(this.releasedAxis(axisDef)) {
					return true;
				}
			}
		}
		return false;
	}
	,pressed: function(button) {
		if(this.buttons.h.hasOwnProperty(button)) {
			return this.buttons.h[button] == 2;
		} else {
			return false;
		}
	}
	,released: function(button) {
		if(this.buttons.h.hasOwnProperty(button)) {
			return this.buttons.h[button] == -1;
		} else {
			return false;
		}
	}
	,check: function(button) {
		if(this.buttons.h.hasOwnProperty(button) && this.buttons.h[button] != 0) {
			return this.buttons.h[button] != -1;
		} else {
			return false;
		}
	}
	,pressedAxis: function(axisDef) {
		if(this.axis.h.hasOwnProperty(axisDef.axis) && this.axis.h[axisDef.axis] >= axisDef.minValue && this.axis.h[axisDef.axis] <= axisDef.maxValue) {
			return !(this.lastAxis.h.hasOwnProperty(axisDef.axis) && this.lastAxis.h[axisDef.axis] >= axisDef.minValue && this.lastAxis.h[axisDef.axis] <= axisDef.maxValue);
		} else {
			return false;
		}
	}
	,releasedAxis: function(axisDef) {
		if(this.lastAxis.h.hasOwnProperty(axisDef.axis) && this.lastAxis.h[axisDef.axis] >= axisDef.minValue && this.lastAxis.h[axisDef.axis] <= axisDef.maxValue) {
			return !(this.axis.h.hasOwnProperty(axisDef.axis) && this.axis.h[axisDef.axis] >= axisDef.minValue && this.axis.h[axisDef.axis] <= axisDef.maxValue);
		} else {
			return false;
		}
	}
	,checkAxis: function(axisDef) {
		if(this.axis.h.hasOwnProperty(axisDef.axis) && this.axis.h[axisDef.axis] >= axisDef.minValue) {
			return this.axis.h[axisDef.axis] <= axisDef.maxValue;
		} else {
			return false;
		}
	}
	,checkLastAxis: function(axisDef) {
		if(this.lastAxis.h.hasOwnProperty(axisDef.axis) && this.lastAxis.h[axisDef.axis] >= axisDef.minValue) {
			return this.lastAxis.h[axisDef.axis] <= axisDef.maxValue;
		} else {
			return false;
		}
	}
	,getAxis: function(a) {
		if(!this.axis.h.hasOwnProperty(a)) {
			return 0;
		} else if(Math.abs(this.axis.h[a]) < haxepunk_input_Gamepad.deadZone) {
			return 0;
		} else {
			return this.axis.h[a];
		}
	}
	,onButtonUp: function(rawId) {
		var id = this.type == null ? rawId : this.type.mapButton(rawId);
		var s = "Button up: " + rawId + " -> " + id;
		var pos_fileName = "haxepunk/input/Gamepad.hx";
		var pos_lineNumber = 283;
		var pos_className = "haxepunk.input.Gamepad";
		var pos_methodName = "onButtonUp";
		var level = 10;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
		this.buttons.h[id] = -1;
		if(this._buttonMap.h.hasOwnProperty(id)) {
			var _g = 0;
			var _g1 = this._buttonMap.h[id];
			while(_g < _g1.length) {
				var inputType = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerRelease(inputType);
			}
		}
	}
	,onButtonDown: function(rawId) {
		var id = this.type == null ? rawId : this.type.mapButton(rawId);
		var s = "Button down: " + rawId + " -> " + id;
		var pos_fileName = "haxepunk/input/Gamepad.hx";
		var pos_lineNumber = 291;
		var pos_className = "haxepunk.input.Gamepad";
		var pos_methodName = "onButtonDown";
		var level = 10;
		if(level == null) {
			level = 20;
		}
		var minLevel = 10;
		if((level | 0) >= (minLevel | 0)) {
			var p = null;
			var tmp = haxe_Log.trace;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
			if(haxepunk_HXP.engine.console != null) {
				var _this = haxepunk_HXP.engine.console;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
			}
		}
		if(!this.buttons.h.hasOwnProperty(id)) {
			this._allButtons.push(id);
		}
		this.buttons.h[id] = 2;
		if(this._buttonMap.h.hasOwnProperty(id)) {
			var _g = 0;
			var _g1 = this._buttonMap.h[id];
			while(_g < _g1.length) {
				var inputType = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(inputType);
			}
		}
	}
	,onAxisMove: function(rawAxis,v) {
		var axis = this.type == null ? rawAxis : this.type.mapButton(rawAxis);
		if(Math.abs(v) < haxepunk_input_Gamepad.deadZone) {
			v = 0;
		}
		if(!this.axis.h.hasOwnProperty(axis)) {
			this._allAxes.push(axis);
		}
		this.axis.h[axis] = v;
		if(this._axisMap.h.hasOwnProperty(axis)) {
			var _g = 0;
			var _g1 = this._axisMap.h[axis];
			while(_g < _g1.length) {
				var axisDef = _g1[_g];
				++_g;
				if(v >= axisDef.minValue && v <= axisDef.maxValue) {
					haxepunk_input_Input.triggerPress(axisDef.input);
				} else if(this.lastAxis.h[axis] >= axisDef.minValue && this.lastAxis.h[axis] <= axisDef.maxValue) {
					haxepunk_input_Input.triggerRelease(axisDef.input);
				}
			}
		}
	}
	,__class__: haxepunk_input_Gamepad
};
var haxepunk_input_GestureType = function() {
	this.released = false;
	this.pressed = false;
	this.active = false;
	this.time = 0;
	this.magnitude = 0;
	this.y2 = 0;
	this.x2 = 0;
	this.y = 0;
	this.x = 0;
	this.reset();
};
$hxClasses["haxepunk.input.GestureType"] = haxepunk_input_GestureType;
haxepunk_input_GestureType.__name__ = "haxepunk.input.GestureType";
haxepunk_input_GestureType.prototype = {
	reset: function() {
		this.x = this.y = this.x2 = this.y2 = this.time = 0;
		this.active = this.pressed = this.released = false;
	}
	,start: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.active = this.pressed = true;
		this.x = x;
		this.y = y;
		this.x2 = this.y2 = this.magnitude = 0;
		this.time = 0;
	}
	,get_distance: function() {
		var x1 = this.x;
		var y1 = this.y;
		var x2 = this.x2;
		var y2 = this.y2;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	}
	,get_velocity: function() {
		if(this.time == 0) {
			return 0;
		} else {
			return this.get_distance() / this.time;
		}
	}
	,get_angle: function() {
		return 0;
	}
	,release: function() {
		this.released = true;
	}
	,update: function() {
		if(this.pressed) {
			this.pressed = false;
		} else if(this.released) {
			this.reset();
		} else if(this.active) {
			this.time += haxepunk_HXP.elapsed;
		}
	}
	,__class__: haxepunk_input_GestureType
	,__properties__: {get_angle:"get_angle",get_velocity:"get_velocity",get_distance:"get_distance"}
};
var haxepunk_input_Gesture = {};
haxepunk_input_Gesture.enable = function() {
	haxepunk_input_Gesture.enabled = true;
	haxepunk_input_Gesture.mode = 0;
};
haxepunk_input_Gesture.disable = function() {
	haxepunk_input_Gesture.enabled = false;
};
haxepunk_input_Gesture.getTouch = function(touches,touchOrder,n) {
	if(n >= touchOrder.length) {
		return null;
	}
	return touches.h[touchOrder[n]];
};
haxepunk_input_Gesture.check = function(gestureType) {
	if(!haxepunk_input_Gesture.gestures.h.hasOwnProperty(gestureType)) {
		return false;
	}
	return haxepunk_input_Gesture.gestures.h[gestureType].active;
};
haxepunk_input_Gesture.pressed = function(gestureType) {
	if(!haxepunk_input_Gesture.gestures.h.hasOwnProperty(gestureType)) {
		return false;
	}
	return haxepunk_input_Gesture.gestures.h[gestureType].pressed;
};
haxepunk_input_Gesture.released = function(gestureType) {
	if(!haxepunk_input_Gesture.gestures.h.hasOwnProperty(gestureType)) {
		return false;
	}
	return haxepunk_input_Gesture.gestures.h[gestureType].released;
};
haxepunk_input_Gesture.get = function(gestureType) {
	if(!haxepunk_input_Gesture.check(gestureType)) {
		return null;
	}
	return haxepunk_input_Gesture.gestures.h[gestureType];
};
haxepunk_input_Gesture.start = function(gestureType,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(!haxepunk_input_Gesture.gestures.h.hasOwnProperty(gestureType)) {
		var this1 = haxepunk_input_Gesture.gestures;
		var v = new haxepunk_input_GestureType();
		this1.h[gestureType] = v;
	}
	if(!haxepunk_input_Gesture.gestures.h[gestureType].active) {
		haxepunk_input_Gesture.gestures.h[gestureType].start(x,y);
	}
};
haxepunk_input_Gesture.finish = function(gestureType) {
	if(!haxepunk_input_Gesture.gestures.h.hasOwnProperty(gestureType)) {
		var this1 = haxepunk_input_Gesture.gestures;
		var v = new haxepunk_input_GestureType();
		this1.h[gestureType] = v;
	}
	haxepunk_input_Gesture.gestures.h[gestureType].release();
};
haxepunk_input_Gesture.finishAll = function() {
	var gesture = haxepunk_input_Gesture.gestures.iterator();
	while(gesture.hasNext()) {
		var gesture1 = gesture.next();
		if(gesture1.active) {
			gesture1.release();
		}
	}
};
haxepunk_input_Gesture.update = function() {
	var gesture = haxepunk_input_Gesture.gestures.iterator();
	while(gesture.hasNext()) {
		var gesture1 = gesture.next();
		gesture1.update();
	}
	var touches = haxepunk_input_Touch._touches;
	var touchOrder = haxepunk_input_Touch._touchOrder;
	var touchCount = 0;
	var _g = 0;
	while(_g < touchOrder.length) {
		var touch = touchOrder[_g];
		++_g;
		if(touches.h.hasOwnProperty(touch)) {
			if(touches.h[touch].time == 0 || !touches.h[touch].released) {
				++touchCount;
			}
		} else {
			HxOverrides.remove(touchOrder,touch);
		}
	}
	if(haxepunk_input_Gesture._lastTap > 0) {
		haxepunk_input_Gesture._lastTap = Math.max(0,haxepunk_input_Gesture._lastTap - haxepunk_HXP.elapsed / haxepunk_input_Gesture.doubleTapTime);
	}
	switch(haxepunk_input_Gesture.mode) {
	case 0:
		if(touchCount > 0) {
			haxepunk_input_Gesture.mode = touchCount == 1 ? 1 : 3;
		}
		break;
	case 1:
		if(touchCount == 0) {
			haxepunk_input_Gesture.mode = 0;
			var touch = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var t = touch.time < haxepunk_input_Gesture.longPressTime ? 1 : 3;
			if(t == 1 && haxepunk_input_Gesture._lastTap > 0) {
				t = 2;
			}
			if(!haxepunk_input_Gesture.check(t)) {
				haxepunk_input_Gesture.start(t,touch.x,touch.y);
				if(t == 1) {
					haxepunk_input_Gesture._lastTap = 1;
				}
			}
		} else if(touchCount == 1) {
			var touch = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var x1 = touch.startX;
			var y1 = touch.startY;
			var x2 = touch.x;
			var y2 = touch.y;
			if(y2 == null) {
				y2 = 0;
			}
			if(x2 == null) {
				x2 = 0;
			}
			var dist = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
			if(dist > haxepunk_input_Gesture.deadZone) {
				haxepunk_input_Gesture.mode = 2;
			} else if(touch.time >= haxepunk_input_Gesture.longPressTime && !haxepunk_input_Gesture.check(3)) {
				haxepunk_input_Gesture.start(3,touch.x,touch.y);
			}
		} else if(touchCount > 1) {
			haxepunk_input_Gesture.mode = 3;
		}
		break;
	case 2:
		if(touchCount == 0) {
			haxepunk_input_Gesture.mode = 0;
		} else {
			var touch = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var x1 = touch.startX;
			var y1 = touch.startY;
			var x2 = touch.x;
			var y2 = touch.y;
			if(y2 == null) {
				y2 = 0;
			}
			if(x2 == null) {
				x2 = 0;
			}
			var dist = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
			if(!haxepunk_input_Gesture.check(4)) {
				haxepunk_input_Gesture.start(4,touch.startX,touch.startY);
			}
			var g = haxepunk_input_Gesture.get(4);
			g.x2 = touch.x;
			g.y2 = touch.y;
			g.magnitude = dist;
		}
		if(touchCount > 1) {
			var touch = 1 >= touchOrder.length ? null : touches.h[touchOrder[1]];
			haxepunk_input_Gesture.start(6,touch.x,touch.y);
		} else if(haxepunk_input_Gesture.check(6)) {
			haxepunk_input_Gesture.finish(6);
		}
		break;
	case 3:
		if(touchCount < 2) {
			haxepunk_input_Gesture.mode = touchCount == 0 ? 0 : 5;
			if(!haxepunk_input_Gesture.check(5)) {
				var t1 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
				var t2 = 1 >= touchOrder.length ? null : touches.h[touchOrder[1]];
				if(t2 != null) {
					var mx = (t1.startX - t2.startX) / 2;
					var my = (t1.startY - t2.startY) / 2;
					haxepunk_input_Gesture.start(6,mx,my);
				}
			}
			haxepunk_input_Gesture.finishAll();
		} else {
			var t1 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var t2 = 1 >= touchOrder.length ? null : touches.h[touchOrder[1]];
			if(t1 != null && t2 != null) {
				var x1 = t1.startX;
				var y1 = t1.startY;
				var x2 = t1.x;
				var y2 = t1.y;
				if(y2 == null) {
					y2 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				var d1 = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
				var x1 = t2.startX;
				var y1 = t2.startY;
				var x2 = t2.x;
				var y2 = t2.y;
				if(y2 == null) {
					y2 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				var d2 = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
				if(d1 > haxepunk_input_Gesture.deadZone && d2 > haxepunk_input_Gesture.deadZone) {
					if(!haxepunk_input_Gesture.check(5)) {
						var mx = (t1.startX - t2.startX) / 2;
						var my = (t1.startY - t2.startY) / 2;
						haxepunk_input_Gesture.start(5,mx,my);
					}
					var x1 = t1.startX;
					var y1 = t1.startY;
					var x2 = t2.startX;
					var y2 = t2.startY;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var inner = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
					var x1 = t1.x;
					var y1 = t1.y;
					var x2 = t2.x;
					var y2 = t2.y;
					if(y2 == null) {
						y2 = 0;
					}
					if(x2 == null) {
						x2 = 0;
					}
					var outer = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
					haxepunk_input_Gesture.get(5).magnitude = inner / outer;
				}
			}
		}
		break;
	default:
		if(touchCount == 0) {
			haxepunk_input_Gesture.mode = 0;
		}
	}
	if(touchCount == 0) {
		haxepunk_input_Gesture.finishAll();
	}
};
var haxepunk_input_Handler = function() { };
$hxClasses["haxepunk.input.Handler"] = haxepunk_input_Handler;
haxepunk_input_Handler.__name__ = "haxepunk.input.Handler";
haxepunk_input_Handler.update = function() {
};
haxepunk_input_Handler.postUpdate = function() {
	haxepunk_input_Key.postUpdate();
};
haxepunk_input_Handler.checkInput = function(input) {
	return haxepunk_input_Key.checkInput(input);
};
haxepunk_input_Handler.pressedInput = function(input) {
	return haxepunk_input_Key.pressedInput(input);
};
haxepunk_input_Handler.releasedInput = function(input) {
	return haxepunk_input_Key.releasedInput(input);
};
var haxepunk_input_Mouse = function() { };
$hxClasses["haxepunk.input.Mouse"] = haxepunk_input_Mouse;
haxepunk_input_Mouse.__name__ = "haxepunk.input.Mouse";
haxepunk_input_Mouse.__properties__ = {get_mouseWheelDelta:"get_mouseWheelDelta",get_mouseOnScreen:"get_mouseOnScreen",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX"};
haxepunk_input_Mouse.get_mouseX = function() {
	var _this = haxepunk_HXP.screen;
	return (haxepunk_HXP.app.stage.get_mouseX() - _this.x) / _this.scaleX | 0;
};
haxepunk_input_Mouse.get_mouseY = function() {
	var _this = haxepunk_HXP.screen;
	return (haxepunk_HXP.app.stage.get_mouseY() - _this.y) / _this.scaleY | 0;
};
haxepunk_input_Mouse.get_mouseOnScreen = function() {
	return haxepunk_input_Mouse._mouseOnScreen;
};
haxepunk_input_Mouse.get_mouseWheelDelta = function() {
	if(haxepunk_input_Mouse.mouseWheel) {
		haxepunk_input_Mouse.mouseWheel = false;
		return haxepunk_input_Mouse._mouseWheelDelta;
	}
	return 0;
};
haxepunk_input_Mouse.showCursor = function() {
	openfl_ui_Mouse.show();
};
haxepunk_input_Mouse.hideCursor = function() {
	openfl_ui_Mouse.hide();
};
haxepunk_input_Mouse.define = function(input,button) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_input_Mouse._control.h,input)) {
		HxOverrides.remove(haxepunk_input_Mouse._buttonMap.h[button],input);
	}
	haxepunk_input_Mouse._control.h[input] = button;
	if(!haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(button)) {
		var this1 = haxepunk_input_Mouse._buttonMap;
		var v = [];
		this1.h[button] = v;
	}
	if(haxepunk_input_Mouse._buttonMap.h[button].indexOf(input) < 0) {
		haxepunk_input_Mouse._buttonMap.h[button].push(input);
	}
};
haxepunk_input_Mouse.checkInput = function(input) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_input_Mouse._control.h,input)) {
		var tmp;
		switch(haxepunk_input_Mouse._control.h[input]) {
		case 1:
			tmp = haxepunk_input_Mouse.mouseDown;
			break;
		case 2:
			tmp = haxepunk_input_Mouse.rightMouseDown;
			break;
		case 3:
			tmp = haxepunk_input_Mouse.middleMouseDown;
			break;
		}
		if(tmp) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Mouse.pressedInput = function(input) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_input_Mouse._control.h,input)) {
		var tmp;
		switch(haxepunk_input_Mouse._control.h[input]) {
		case 1:
			tmp = haxepunk_input_Mouse.mousePressed;
			break;
		case 2:
			tmp = haxepunk_input_Mouse.rightMousePressed;
			break;
		case 3:
			tmp = haxepunk_input_Mouse.middleMousePressed;
			break;
		}
		if(tmp) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Mouse.releasedInput = function(input) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_input_Mouse._control.h,input)) {
		var tmp;
		switch(haxepunk_input_Mouse._control.h[input]) {
		case 1:
			tmp = haxepunk_input_Mouse.mouseReleased;
			break;
		case 2:
			tmp = haxepunk_input_Mouse.rightMouseReleased;
			break;
		case 3:
			tmp = haxepunk_input_Mouse.middleMouseReleased;
			break;
		}
		if(tmp) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Mouse.check = function(btn) {
	switch(btn) {
	case 1:
		return haxepunk_input_Mouse.mouseDown;
	case 2:
		return haxepunk_input_Mouse.rightMouseDown;
	case 3:
		return haxepunk_input_Mouse.middleMouseDown;
	}
};
haxepunk_input_Mouse.pressed = function(btn) {
	switch(btn) {
	case 1:
		return haxepunk_input_Mouse.mousePressed;
	case 2:
		return haxepunk_input_Mouse.rightMousePressed;
	case 3:
		return haxepunk_input_Mouse.middleMousePressed;
	}
};
haxepunk_input_Mouse.released = function(btn) {
	switch(btn) {
	case 1:
		return haxepunk_input_Mouse.mouseReleased;
	case 2:
		return haxepunk_input_Mouse.rightMouseReleased;
	case 3:
		return haxepunk_input_Mouse.middleMouseReleased;
	}
};
haxepunk_input_Mouse.update = function() {
};
haxepunk_input_Mouse.postUpdate = function() {
	haxepunk_input_Mouse.mousePressed = haxepunk_input_Mouse.mouseReleased = haxepunk_input_Mouse.middleMousePressed = haxepunk_input_Mouse.middleMouseReleased = haxepunk_input_Mouse.rightMousePressed = haxepunk_input_Mouse.rightMouseReleased = false;
};
haxepunk_input_Mouse.onMouseDown = function(_) {
	if(!haxepunk_input_Mouse.mouseDown) {
		haxepunk_input_Mouse.mouseDown = true;
		haxepunk_input_Mouse.mouseUp = false;
		haxepunk_input_Mouse.mousePressed = true;
		if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(1)) {
			var _g = 0;
			var _g1 = haxepunk_input_Mouse._buttonMap.h[1];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input_Mouse.onMouseUp = function(_) {
	haxepunk_input_Mouse.mouseDown = false;
	haxepunk_input_Mouse.mouseUp = true;
	haxepunk_input_Mouse.mouseReleased = true;
	if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(1)) {
		var _g = 0;
		var _g1 = haxepunk_input_Mouse._buttonMap.h[1];
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			haxepunk_input_Input.triggerRelease(input);
		}
	}
};
haxepunk_input_Mouse.onMouseWheel = function(delta) {
	haxepunk_input_Mouse.mouseWheel = true;
	haxepunk_input_Mouse._mouseWheelDelta = delta;
};
haxepunk_input_Mouse.onMiddleMouseDown = function(_) {
	if(!haxepunk_input_Mouse.middleMouseDown) {
		haxepunk_input_Mouse.middleMouseDown = true;
		haxepunk_input_Mouse.middleMouseUp = false;
		haxepunk_input_Mouse.middleMousePressed = true;
		if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(3)) {
			var _g = 0;
			var _g1 = haxepunk_input_Mouse._buttonMap.h[3];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input_Mouse.onMiddleMouseUp = function(_) {
	haxepunk_input_Mouse.middleMouseDown = false;
	haxepunk_input_Mouse.middleMouseUp = true;
	haxepunk_input_Mouse.middleMouseReleased = true;
	if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(3)) {
		var _g = 0;
		var _g1 = haxepunk_input_Mouse._buttonMap.h[3];
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			haxepunk_input_Input.triggerRelease(input);
		}
	}
};
haxepunk_input_Mouse.onRightMouseDown = function(_) {
	if(!haxepunk_input_Mouse.rightMouseDown) {
		haxepunk_input_Mouse.rightMouseDown = true;
		haxepunk_input_Mouse.rightMouseUp = false;
		haxepunk_input_Mouse.rightMousePressed = true;
		if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(2)) {
			var _g = 0;
			var _g1 = haxepunk_input_Mouse._buttonMap.h[2];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input_Mouse.onRightMouseUp = function(_) {
	haxepunk_input_Mouse.rightMouseDown = false;
	haxepunk_input_Mouse.rightMouseUp = true;
	haxepunk_input_Mouse.rightMouseReleased = true;
	if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(2)) {
		var _g = 0;
		var _g1 = haxepunk_input_Mouse._buttonMap.h[2];
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			haxepunk_input_Input.triggerRelease(input);
		}
	}
};
var haxepunk_input_Input = function() { };
$hxClasses["haxepunk.input.Input"] = haxepunk_input_Input;
haxepunk_input_Input.__name__ = "haxepunk.input.Input";
haxepunk_input_Input.pushSignal = function(s) {
	haxepunk_input_Input._signals.push(s);
};
haxepunk_input_Input.triggerPress = function(type) {
	haxepunk_input_Input._signals.push("press");
	haxepunk_input_Input._signals.push(type);
};
haxepunk_input_Input.triggerRelease = function(type) {
	haxepunk_input_Input._signals.push("release");
	haxepunk_input_Input._signals.push(type);
};
haxepunk_input_Input.define = function(input,keys) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_input_Key._control.h,input)) {
		var _g = 0;
		var _g1 = haxepunk_input_Key._control.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			HxOverrides.remove(haxepunk_input_Key._keyMap.h[key],input);
		}
	}
	haxepunk_input_Key._control.h[input] = keys;
	var _g = 0;
	while(_g < keys.length) {
		var key = keys[_g];
		++_g;
		if(!haxepunk_input_Key._keyMap.h.hasOwnProperty(key)) {
			var this1 = haxepunk_input_Key._keyMap;
			var v = [];
			this1.h[key] = v;
		}
		if(haxepunk_input_Key._keyMap.h[key].indexOf(input) < 0) {
			haxepunk_input_Key._keyMap.h[key].push(input);
		}
	}
};
haxepunk_input_Input.check = function(input) {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		if(handler.checkInput(input)) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Input.pressed = function(input) {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		if(handler.pressedInput(input)) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Input.released = function(input) {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		if(handler.releasedInput(input)) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Input.update = function() {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		handler.update();
	}
	var i = 0;
	while(i < haxepunk_input_Input._signals.length) {
		var op = haxepunk_input_Input._signals[i++];
		var type = haxepunk_input_Input._signals[i++];
		switch(op) {
		case "press":
			var signals = haxepunk_HXP.engine.onInputPressed;
			if(Object.prototype.hasOwnProperty.call(signals.h,type)) {
				var _g = 0;
				var _g1 = haxepunk_Signals.resolve(signals,type).callbacks;
				while(_g < _g1.length) {
					var callback = _g1[_g];
					++_g;
					callback();
				}
			}
			var signals1 = haxepunk_HXP.engine._scene.onInputPressed;
			if(Object.prototype.hasOwnProperty.call(signals1.h,type)) {
				var _g2 = 0;
				var _g3 = haxepunk_Signals.resolve(signals1,type).callbacks;
				while(_g2 < _g3.length) {
					var callback1 = _g3[_g2];
					++_g2;
					callback1();
				}
			}
			break;
		case "release":
			var signals2 = haxepunk_HXP.engine.onInputReleased;
			if(Object.prototype.hasOwnProperty.call(signals2.h,type)) {
				var _g4 = 0;
				var _g5 = haxepunk_Signals.resolve(signals2,type).callbacks;
				while(_g4 < _g5.length) {
					var callback2 = _g5[_g4];
					++_g4;
					callback2();
				}
			}
			var signals3 = haxepunk_HXP.engine._scene.onInputReleased;
			if(Object.prototype.hasOwnProperty.call(signals3.h,type)) {
				var _g6 = 0;
				var _g7 = haxepunk_Signals.resolve(signals3,type).callbacks;
				while(_g6 < _g7.length) {
					var callback3 = _g7[_g6];
					++_g6;
					callback3();
				}
			}
			break;
		default:
		}
	}
	haxepunk_input_Input._signals.length = 0;
};
haxepunk_input_Input.postUpdate = function() {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		handler.postUpdate();
	}
};
haxepunk_input_Input.triggerSignals = function() {
	var i = 0;
	while(i < haxepunk_input_Input._signals.length) {
		var op = haxepunk_input_Input._signals[i++];
		var type = haxepunk_input_Input._signals[i++];
		switch(op) {
		case "press":
			var signals = haxepunk_HXP.engine.onInputPressed;
			if(Object.prototype.hasOwnProperty.call(signals.h,type)) {
				var _g = 0;
				var _g1 = haxepunk_Signals.resolve(signals,type).callbacks;
				while(_g < _g1.length) {
					var callback = _g1[_g];
					++_g;
					callback();
				}
			}
			var signals1 = haxepunk_HXP.engine._scene.onInputPressed;
			if(Object.prototype.hasOwnProperty.call(signals1.h,type)) {
				var _g2 = 0;
				var _g3 = haxepunk_Signals.resolve(signals1,type).callbacks;
				while(_g2 < _g3.length) {
					var callback1 = _g3[_g2];
					++_g2;
					callback1();
				}
			}
			break;
		case "release":
			var signals2 = haxepunk_HXP.engine.onInputReleased;
			if(Object.prototype.hasOwnProperty.call(signals2.h,type)) {
				var _g4 = 0;
				var _g5 = haxepunk_Signals.resolve(signals2,type).callbacks;
				while(_g4 < _g5.length) {
					var callback2 = _g5[_g4];
					++_g4;
					callback2();
				}
			}
			var signals3 = haxepunk_HXP.engine._scene.onInputReleased;
			if(Object.prototype.hasOwnProperty.call(signals3.h,type)) {
				var _g6 = 0;
				var _g7 = haxepunk_Signals.resolve(signals3,type).callbacks;
				while(_g6 < _g7.length) {
					var callback3 = _g7[_g6];
					++_g6;
					callback3();
				}
			}
			break;
		default:
		}
	}
	haxepunk_input_Input._signals.length = 0;
};
var haxepunk_input_Key = {};
haxepunk_input_Key.nameOfKey = function(char) {
	if(char == -1) {
		return "";
	} else if(char >= 65 && char <= 90) {
		return String.fromCodePoint(char);
	} else if(char >= 112 && char <= 126) {
		return "F" + Std.string((char | 0) - 111);
	} else if(char >= 96 && char <= 105) {
		return "NUMPAD " + Std.string((char | 0) - 96);
	} else {
		switch(char) {
		case 8:
			return "BACKSPACE";
		case 9:
			return "TAB";
		case 13:
			return "ENTER";
		case 16:
			return "SHIFT";
		case 17:
			return "CONTROL";
		case 20:
			return "CAPS LOCK";
		case 27:
			return "ESCAPE";
		case 32:
			return "SPACE";
		case 33:
			return "PAGE UP";
		case 34:
			return "PAGE DOWN";
		case 35:
			return "END";
		case 36:
			return "HOME";
		case 37:
			return "LEFT";
		case 38:
			return "UP";
		case 39:
			return "RIGHT";
		case 40:
			return "DOWN";
		case 45:
			return "INSERT";
		case 46:
			return "DELETE";
		case 106:
			return "NUMPAD MULTIPLY";
		case 107:
			return "NUMPAD ADD";
		case 108:
			return "NUMPAD ENTER";
		case 109:
			return "NUMPAD SUBTRACT";
		case 110:
			return "NUMPAD DECIMAL";
		case 111:
			return "NUMPAD DIVIDE";
		case 192:
			return "~";
		case 219:
			return "{";
		case 221:
			return "}";
		default:
			return String.fromCodePoint(char);
		}
	}
};
haxepunk_input_Key.define = function(input,keys) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_input_Key._control.h,input)) {
		var _g = 0;
		var _g1 = haxepunk_input_Key._control.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			HxOverrides.remove(haxepunk_input_Key._keyMap.h[key],input);
		}
	}
	haxepunk_input_Key._control.h[input] = keys;
	var _g = 0;
	while(_g < keys.length) {
		var key = keys[_g];
		++_g;
		if(!haxepunk_input_Key._keyMap.h.hasOwnProperty(key)) {
			var this1 = haxepunk_input_Key._keyMap;
			var v = [];
			this1.h[key] = v;
		}
		if(haxepunk_input_Key._keyMap.h[key].indexOf(input) < 0) {
			haxepunk_input_Key._keyMap.h[key].push(input);
		}
	}
};
haxepunk_input_Key.checkInput = function(input) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_input_Key._control.h,input)) {
		var _g = 0;
		var _g1 = haxepunk_input_Key._control.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key < 0 && haxepunk_input_Key._keyNum > 0 || haxepunk_input_Key._key.h[key]) {
				return true;
			}
		}
	}
	return false;
};
haxepunk_input_Key.pressedInput = function(input) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_input_Key._control.h,input)) {
		var _g = 0;
		var _g1 = haxepunk_input_Key._control.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key < 0 ? haxepunk_input_Key._pressNum != 0 : haxepunk_input_Key._press.indexOf(key) >= 0) {
				return true;
			}
		}
	}
	return false;
};
haxepunk_input_Key.releasedInput = function(input) {
	if(Object.prototype.hasOwnProperty.call(haxepunk_input_Key._control.h,input)) {
		var _g = 0;
		var _g1 = haxepunk_input_Key._control.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key < 0 ? haxepunk_input_Key._releaseNum != 0 : haxepunk_input_Key._release.indexOf(key) >= 0) {
				return true;
			}
		}
	}
	return false;
};
haxepunk_input_Key.check = function(key) {
	if(!(key < 0 && haxepunk_input_Key._keyNum > 0)) {
		return haxepunk_input_Key._key.h[key];
	} else {
		return true;
	}
};
haxepunk_input_Key.pressed = function(key) {
	if(key < 0) {
		return haxepunk_input_Key._pressNum != 0;
	} else {
		return haxepunk_input_Key._press.indexOf(key) >= 0;
	}
};
haxepunk_input_Key.released = function(key) {
	if(key < 0) {
		return haxepunk_input_Key._releaseNum != 0;
	} else {
		return haxepunk_input_Key._release.indexOf(key) >= 0;
	}
};
haxepunk_input_Key.postUpdate = function() {
	while(haxepunk_input_Key._pressNum > 0) haxepunk_input_Key._press[--haxepunk_input_Key._pressNum] = -1;
	while(haxepunk_input_Key._releaseNum > 0) haxepunk_input_Key._release[--haxepunk_input_Key._releaseNum] = -1;
};
haxepunk_input_Key.onKeyDown = function(code,shift) {
	haxepunk_input_Key.lastKey = code;
	if(code == 8) {
		haxepunk_input_Key.keyString = HxOverrides.substr(haxepunk_input_Key.keyString,0,haxepunk_input_Key.keyString.length - 1);
	} else if(code > 47 && code < 58 || code > 64 && code < 91 || code == 32) {
		if(haxepunk_input_Key.keyString.length > 100) {
			haxepunk_input_Key.keyString = HxOverrides.substr(haxepunk_input_Key.keyString,1,null);
		}
		var char = String.fromCodePoint(code);
		var key = 20;
		if(shift != (key < 0 && haxepunk_input_Key._keyNum > 0 || haxepunk_input_Key._key.h[key])) {
			char = char.toUpperCase();
		} else {
			char = char.toLowerCase();
		}
		haxepunk_input_Key.keyString += char;
	}
	if(!haxepunk_input_Key._key.h[code]) {
		haxepunk_input_Key._key.h[code] = true;
		haxepunk_input_Key._keyNum++;
		haxepunk_input_Key._press[haxepunk_input_Key._pressNum++] = code;
		if(haxepunk_input_Key._keyMap.h.hasOwnProperty(code)) {
			var _g = 0;
			var _g1 = haxepunk_input_Key._keyMap.h[code];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input_Key.onKeyUp = function(code) {
	if(haxepunk_input_Key._key.h[code]) {
		haxepunk_input_Key._key.h[code] = false;
		haxepunk_input_Key._keyNum--;
		haxepunk_input_Key._release[haxepunk_input_Key._releaseNum++] = code;
		if(haxepunk_input_Key._keyMap.h.hasOwnProperty(code)) {
			var _g = 0;
			var _g1 = haxepunk_input_Key._keyMap.h[code];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerRelease(input);
			}
		}
	}
};
var haxepunk_input_MouseManager = function() {
	this._lastFallthrough = false;
	this._lastCollisions = [];
	this._collisions = [];
	this._registeredObjects = new haxe_ds_ObjectMap();
	haxepunk_Entity.call(this);
	this.set_width(this.set_height(0));
	this.set_collidable(false);
	this.set_visible(false);
};
$hxClasses["haxepunk.input.MouseManager"] = haxepunk_input_MouseManager;
haxepunk_input_MouseManager.__name__ = "haxepunk.input.MouseManager";
haxepunk_input_MouseManager.__super__ = haxepunk_Entity;
haxepunk_input_MouseManager.prototype = $extend(haxepunk_Entity.prototype,{
	add: function(entity,onPress,onRelease,onEnter,onExit,onWheel,fallThrough) {
		if(fallThrough == null) {
			fallThrough = false;
		}
		if(this._type == "") {
			this.set_type(entity._type);
		} else if(this._type != entity._type) {
			throw haxe_Exception.thrown("Entities added to a MouseManager must all be the same type.");
		}
		var data = new haxepunk_input_MouseData(entity,onPress,onRelease,onEnter,onExit,onWheel,fallThrough);
		this._registeredObjects.set(entity,data);
		return entity;
	}
	,addDefault: function(onPress,onRelease,onEnter,onExit,onWheel) {
		this._default = new haxepunk_input_MouseData(null,onPress,onRelease,onEnter,onExit,onWheel,false);
	}
	,remove: function(entity) {
		if(this._registeredObjects.h.__keys__[entity.__id__] != null) {
			this._registeredObjects.remove(entity);
		}
		return entity;
	}
	,clear: function() {
		var key = this._registeredObjects.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this._registeredObjects.remove(key1);
		}
		while(this._lastCollisions.length > 0) this._lastCollisions.pop();
		this._default = null;
	}
	,getData: function(entity) {
		if(this._registeredObjects.h.__keys__[entity.__id__] != null) {
			return this._registeredObjects.h[entity.__id__];
		} else {
			return null;
		}
	}
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		var mouseX = haxepunk_HXP.app.stage.get_mouseX();
		var mouseY = haxepunk_HXP.app.stage.get_mouseY();
		var collisions = this._collisions;
		var tmp;
		var tmp1;
		if(haxepunk_input_Mouse._mouseOnScreen && mouseX >= this._scene.x && mouseY >= this._scene.y) {
			var _this = this._scene;
			tmp1 = mouseX <= this._scene.x + (_this._width == null ? haxepunk_HXP.screen.width - _this.x : _this._width);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this = this._scene;
			tmp = mouseY <= this._scene.y + (_this._height == null ? haxepunk_HXP.screen.height - _this.y : _this._height);
		} else {
			tmp = false;
		}
		if(tmp) {
			var tmp = this._scene;
			var tmp1 = this._type;
			var _this = this._scene;
			var x = haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this.x;
			var _this1 = _this.camera;
			var tmp2 = x / (_this1.scale * _this1.scaleX * haxepunk_HXP.screen.scaleX) + _this.camera.x | 0;
			var _this = this._scene;
			var x = haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this.y;
			var _this1 = _this.camera;
			tmp.collidePointInto(tmp1,tmp2,x / (_this1.scale * _this1.scaleY * haxepunk_HXP.screen.scaleY) + _this.camera.y | 0,collisions,true);
		}
		var fallthrough = true;
		var _g = 0;
		var _g1 = collisions.length;
		while(_g < _g1) {
			var i = _g++;
			var current = this.getData(collisions[i]);
			if(current != null && !current.fallThrough) {
				while(collisions.length > i + 1) collisions.pop();
				fallthrough = false;
				break;
			}
		}
		var _g = 0;
		while(_g < collisions.length) {
			var entity = collisions[_g];
			++_g;
			var current = this.getData(entity);
			if(current == null) {
				continue;
			}
			if(current.onEnter != null) {
				if(this._lastCollisions.indexOf(entity) == -1) {
					current.onEnter();
				}
			}
		}
		if(haxepunk_input_Mouse.mouseWheel) {
			var delta = haxepunk_input_Mouse.get_mouseWheelDelta();
			var _g = 0;
			while(_g < collisions.length) {
				var entity = collisions[_g];
				++_g;
				var current = this.getData(entity);
				if(current == null) {
					continue;
				}
				if(current.onWheel != null) {
					current.onWheel(delta);
				}
			}
		}
		if(haxepunk_input_Mouse.mousePressed) {
			var _g = 0;
			while(_g < collisions.length) {
				var entity = collisions[_g];
				++_g;
				var current = this.getData(entity);
				if(current == null) {
					continue;
				}
				if(current.onPress != null) {
					current.onPress();
				}
			}
		}
		if(haxepunk_input_Mouse.mouseReleased) {
			var _g = 0;
			while(_g < collisions.length) {
				var entity = collisions[_g];
				++_g;
				var current = this.getData(entity);
				if(current == null) {
					continue;
				}
				if(current.onRelease != null) {
					current.onRelease();
				}
			}
		}
		var _g = 0;
		var _g1 = this._lastCollisions;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			var current = this.getData(entity);
			if(current == null) {
				continue;
			}
			if(current.onExit != null) {
				if(collisions.indexOf(entity) == -1) {
					current.onExit();
				}
			}
		}
		if(fallthrough) {
			if(this._default != null) {
				if(this._default.onEnter != null && !this._lastFallthrough) {
					this._default.onEnter();
				}
				if(this._default.onPress != null && haxepunk_input_Mouse.mousePressed) {
					this._default.onPress();
				}
				if(this._default.onRelease != null && haxepunk_input_Mouse.mouseReleased) {
					this._default.onRelease();
				}
			}
		} else if(this._lastFallthrough) {
			if(this._default != null) {
				if(this._default.onExit != null) {
					this._default.onExit();
				}
			}
		}
		this._collisions = this._lastCollisions;
		if(this._collisions.length > 0) {
			this._collisions.splice(0,this._collisions.length);
		}
		this._lastCollisions = collisions;
		this._lastFallthrough = fallthrough;
	}
	,__class__: haxepunk_input_MouseManager
});
var haxepunk_input_MouseData = function(entity,onPress,onRelease,onEnter,onExit,onWheel,fallThrough) {
	this.entity = entity;
	this.onPress = onPress;
	this.onRelease = onRelease;
	this.onEnter = onEnter;
	this.onExit = onExit;
	this.onWheel = onWheel;
	this.fallThrough = fallThrough;
};
$hxClasses["haxepunk.input.MouseData"] = haxepunk_input_MouseData;
haxepunk_input_MouseData.__name__ = "haxepunk.input.MouseData";
haxepunk_input_MouseData.prototype = {
	__class__: haxepunk_input_MouseData
};
var haxepunk_input_Touch = function(x,y,id) {
	this.released = false;
	this.startX = this.x = x;
	this.startY = this.y = y;
	this.id = id;
	this.time = 0;
};
$hxClasses["haxepunk.input.Touch"] = haxepunk_input_Touch;
haxepunk_input_Touch.__name__ = "haxepunk.input.Touch";
haxepunk_input_Touch.__properties__ = {get_touchOrder:"get_touchOrder",get_touches:"get_touches"};
haxepunk_input_Touch.update = function() {
	var _g = 0;
	var _g1 = haxepunk_input_Touch._touchOrder;
	while(_g < _g1.length) {
		var touchId = _g1[_g];
		++_g;
		if(haxepunk_input_Touch._touches.h[touchId] != null) {
			haxepunk_input_Touch._touches.h[touchId].updateTouch();
		} else {
			HxOverrides.remove(haxepunk_input_Touch._touchOrder,touchId);
			haxepunk_input_Touch._touches.remove(touchId);
			break;
		}
	}
	if(haxepunk_input_Gesture.enabled) {
		haxepunk_input_Gesture.update();
	}
	var i = 0;
	while(i < haxepunk_input_Touch._touchOrder.length) {
		var touchId = haxepunk_input_Touch._touchOrder[i];
		var touch = haxepunk_input_Touch._touches.h[touchId];
		if(touch == null && touch.released && touch.time != 0) {
			haxepunk_input_Touch._touches.remove(touchId);
			HxOverrides.remove(haxepunk_input_Touch._touchOrder,touchId);
		} else {
			++i;
		}
	}
};
haxepunk_input_Touch.postUpdate = function() {
};
haxepunk_input_Touch.checkInput = function(input) {
	return false;
};
haxepunk_input_Touch.pressedInput = function(input) {
	return false;
};
haxepunk_input_Touch.releasedInput = function(input) {
	return false;
};
haxepunk_input_Touch.touchPoints = function(touchCallback) {
	var _g = 0;
	var _g1 = haxepunk_input_Touch._touchOrder;
	while(_g < _g1.length) {
		var touchId = _g1[_g];
		++_g;
		touchCallback(haxepunk_input_Touch._touches.h[touchId]);
	}
};
haxepunk_input_Touch.get_touches = function() {
	return haxepunk_input_Touch._touches;
};
haxepunk_input_Touch.get_touchOrder = function() {
	return haxepunk_input_Touch._touchOrder;
};
haxepunk_input_Touch.prototype = {
	get_sceneX: function() {
		return this.x + (haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).x;
	}
	,get_sceneY: function() {
		return this.y + (haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).y;
	}
	,get_pressed: function() {
		return this.time == 0;
	}
	,updateTouch: function() {
		this.time += haxepunk_HXP.elapsed;
	}
	,__class__: haxepunk_input_Touch
	,__properties__: {get_pressed:"get_pressed",get_sceneY:"get_sceneY",get_sceneX:"get_sceneX"}
};
var haxepunk_input_gamepad_ControllerData = function() { };
$hxClasses["haxepunk.input.gamepad.ControllerData"] = haxepunk_input_gamepad_ControllerData;
haxepunk_input_gamepad_ControllerData.__name__ = "haxepunk.input.gamepad.ControllerData";
var haxepunk_input_gamepad_GamepadAxis = {};
haxepunk_input_gamepad_GamepadAxis.toString = function(this1) {
	switch(this1) {
	case 0:
		return "leftx";
	case 1:
		return "lefty";
	case 2:
		return "lefttrigger";
	case 3:
		return "rightx";
	case 4:
		return "righty";
	case 5:
		return "righttrigger";
	default:
		if(this1 == null) {
			return "null";
		} else {
			return "" + this1;
		}
	}
};
var haxepunk_input_gamepad_GamepadButton = {};
haxepunk_input_gamepad_GamepadButton.toString = function(this1) {
	switch(this1) {
	case 0:
		return "a";
	case 1:
		return "b";
	case 2:
		return "x";
	case 3:
		return "y";
	case 4:
		return "leftshoulder";
	case 5:
		return "rightshoulder";
	case 6:
		return "back";
	case 7:
		return "start";
	case 8:
		return "leftstick";
	case 9:
		return "rightstick";
	case 10:
		return "guide";
	case 11:
		return "up";
	case 12:
		return "down";
	case 13:
		return "left";
	case 14:
		return "right";
	default:
		if(this1 == null) {
			return "null";
		} else {
			return "" + this1;
		}
	}
};
var haxepunk_input_gamepad_GamepadType = function(guid,name,buttons,axes) {
	this.guid = guid;
	this.name = name;
	this.buttons = buttons;
	this.axes = axes;
};
$hxClasses["haxepunk.input.gamepad.GamepadType"] = haxepunk_input_gamepad_GamepadType;
haxepunk_input_gamepad_GamepadType.__name__ = "haxepunk.input.gamepad.GamepadType";
haxepunk_input_gamepad_GamepadType.get = function(guid) {
	if(haxepunk_input_gamepad_GamepadType.controllers != null && Object.prototype.hasOwnProperty.call(haxepunk_input_gamepad_GamepadType.controllers.h,guid)) {
		return haxepunk_input_gamepad_GamepadType.controllers.h[guid];
	} else {
		return null;
	}
};
haxepunk_input_gamepad_GamepadType.prototype = {
	mapButton: function(rawButton) {
		if(this.buttons.h.hasOwnProperty(rawButton)) {
			return this.buttons.h[rawButton];
		} else {
			return rawButton;
		}
	}
	,mapAxis: function(rawAxis) {
		if(this.axes.h.hasOwnProperty(rawAxis)) {
			return this.axes.h[rawAxis];
		} else {
			return rawAxis;
		}
	}
	,__class__: haxepunk_input_gamepad_GamepadType
};
var haxepunk_masks_Circle = function(radius,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(radius == null) {
		radius = 1;
	}
	haxepunk_masks_Hitbox.call(this);
	this.set_radius(radius);
	this._x = x + radius;
	this._y = y + radius;
	var this1 = this._check;
	var key = haxepunk_Mask.__name__;
	this1.h[key] = $bind(this,this.collideMask);
	var this1 = this._check;
	var key = haxepunk_masks_Circle.__name__;
	this1.h[key] = $bind(this,this.collideCircle);
	var this1 = this._check;
	var key = haxepunk_masks_Hitbox.__name__;
	this1.h[key] = $bind(this,this.collideHitbox);
	var this1 = this._check;
	var key = haxepunk_masks_Grid.__name__;
	this1.h[key] = $bind(this,this.collideGrid);
	var this1 = this._check;
	var key = haxepunk_masks_SlopedGrid.__name__;
	this1.h[key] = $bind(this,this.collideSlopedGrid);
};
$hxClasses["haxepunk.masks.Circle"] = haxepunk_masks_Circle;
haxepunk_masks_Circle.__name__ = "haxepunk.masks.Circle";
haxepunk_masks_Circle.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Circle.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	collideMask: function(other) {
		var distanceX = Math.abs(this._parent.get_x() + this._x - (other._parent.get_x() - other._parent.originX + other._parent.get_width() * 0.5));
		var distanceY = Math.abs(this._parent.get_y() + this._y - (other._parent.get_y() - other._parent.originY + other._parent.get_height() * 0.5));
		if(distanceX > other._parent.get_width() * 0.5 + this._radius || distanceY > other._parent.get_height() * 0.5 + this._radius) {
			return false;
		}
		if(distanceX <= other._parent.get_width() * 0.5 || distanceY <= other._parent.get_height() * 0.5) {
			return true;
		}
		var distanceToCorner = (distanceX - other._parent.get_width() * 0.5) * (distanceX - other._parent.get_width() * 0.5) + (distanceY - other._parent.get_height() * 0.5) * (distanceY - other._parent.get_height() * 0.5);
		return distanceToCorner <= this._squaredRadius;
	}
	,collideCircle: function(other) {
		var dx = this._parent.get_x() + this._x - (other._parent.get_x() + other._x);
		var dy = this._parent.get_y() + this._y - (other._parent.get_y() + other._y);
		return dx * dx + dy * dy < Math.pow(this._radius + other._radius,2);
	}
	,collideGridTile: function(mx,my,hTileWidth,hTileHeight,thisX,thisY) {
		var collide = false;
		var dx = Math.abs(thisX - mx);
		if(dx <= hTileWidth + this._radius) {
			var dy = Math.abs(thisY - my);
			if(dy <= hTileHeight + this._radius) {
				if(dx <= hTileWidth || dy <= hTileHeight) {
					collide = true;
				} else {
					var xCornerDist = dx - hTileWidth;
					var yCornerDist = dy - hTileHeight;
					if(xCornerDist * xCornerDist + yCornerDist * yCornerDist <= this._squaredRadius) {
						collide = true;
					}
				}
			}
		}
		return collide;
	}
	,collideGrid: function(other) {
		var thisX = this._x + this._parent.get_x();
		var thisY = this._y + this._parent.get_y();
		var otherX = other.get_x() + other._parent.get_x();
		var otherY = other.get_y() + other._parent.get_y();
		var entityDistX = thisX - otherX;
		var entityDistY = thisY - otherY;
		var minx = Math.floor((entityDistX - this._radius) / (other._tile.width | 0));
		var miny = Math.floor((entityDistY - this._radius) / (other._tile.height | 0));
		var maxx = Math.ceil((entityDistX + this._radius) / (other._tile.width | 0));
		var maxy = Math.ceil((entityDistY + this._radius) / (other._tile.height | 0));
		if(minx < 0) {
			minx = 0;
		}
		if(miny < 0) {
			miny = 0;
		}
		if(maxx > other.columns) {
			maxx = other.columns;
		}
		if(maxy > other.rows) {
			maxy = other.rows;
		}
		var hTileWidth = (other._tile.width | 0) * 0.5;
		var hTileHeight = (other._tile.height | 0) * 0.5;
		var dx;
		var dy = otherY + miny * (other._tile.height | 0);
		var _g = miny;
		var _g1 = maxy;
		while(_g < _g1) {
			var yy = _g++;
			dx = otherX + minx * (other._tile.width | 0);
			var _g2 = minx;
			var _g3 = maxx;
			while(_g2 < _g3) {
				var xx = _g2++;
				if(other.getTile(xx,yy)) {
					var collide = false;
					var dx1 = Math.abs(thisX - (dx + hTileWidth));
					if(dx1 <= hTileWidth + this._radius) {
						var dy1 = Math.abs(thisY - (dy + hTileHeight));
						if(dy1 <= hTileHeight + this._radius) {
							if(dx1 <= hTileWidth || dy1 <= hTileHeight) {
								collide = true;
							} else {
								var xCornerDist = dx1 - hTileWidth;
								var yCornerDist = dy1 - hTileHeight;
								if(xCornerDist * xCornerDist + yCornerDist * yCornerDist <= this._squaredRadius) {
									collide = true;
								}
							}
						}
					}
					if(collide) {
						return true;
					}
				}
				dx += other._tile.width | 0;
			}
			dy += other._tile.height | 0;
		}
		return false;
	}
	,collideSlopedGrid: function(other) {
		var thisX = this._x + this._parent.get_x();
		var thisY = this._y + this._parent.get_y();
		var otherX = other.get_x() + other._parent.get_x();
		var otherY = other.get_y() + other._parent.get_y();
		var entityDistX = thisX - otherX;
		var entityDistY = thisY - otherY;
		var minx = Math.floor((entityDistX - this._radius) / (other._tile.width | 0));
		var miny = Math.floor((entityDistY - this._radius) / (other._tile.height | 0));
		var maxx = Math.ceil((entityDistX + this._radius) / (other._tile.width | 0));
		var maxy = Math.ceil((entityDistY + this._radius) / (other._tile.height | 0));
		if(minx < 0) {
			minx = 0;
		}
		if(miny < 0) {
			miny = 0;
		}
		if(maxx > other.columns) {
			maxx = other.columns;
		}
		if(maxy > other.rows) {
			maxy = other.rows;
		}
		var hTileWidth = (other._tile.width | 0) * 0.5;
		var hTileHeight = (other._tile.height | 0) * 0.5;
		var dx;
		var dy = otherY + miny * (other._tile.height | 0);
		var _g = miny;
		var _g1 = maxy;
		while(_g < _g1) {
			var yy = _g++;
			dx = otherX + minx * (other._tile.width | 0);
			var _g2 = minx;
			var _g3 = maxx;
			while(_g2 < _g3) {
				var xx = _g2++;
				var column = xx;
				var row = yy;
				if(row == null) {
					row = 0;
				}
				if(column == null) {
					column = 0;
				}
				var tile;
				if(!(column >= 0 && column < other.columns && row >= 0 && row < other.rows)) {
					tile = haxepunk_masks_SlopedGrid._emptyTile;
				} else {
					if(other.usePositions) {
						column = column / other._tile.width | 0;
						row = row / other._tile.height | 0;
					}
					tile = other.data[row][column];
				}
				if(tile.type == 1) {
					var collide = false;
					var dx1 = Math.abs(thisX - (dx + hTileWidth));
					if(dx1 <= hTileWidth + this._radius) {
						var dy1 = Math.abs(thisY - (dy + hTileHeight));
						if(dy1 <= hTileHeight + this._radius) {
							if(dx1 <= hTileWidth || dy1 <= hTileHeight) {
								collide = true;
							} else {
								var xCornerDist = dx1 - hTileWidth;
								var yCornerDist = dy1 - hTileHeight;
								if(xCornerDist * xCornerDist + yCornerDist * yCornerDist <= this._squaredRadius) {
									collide = true;
								}
							}
						}
					}
					if(collide) {
						return true;
					}
				} else if(tile.type == 2 || tile.type == 3) {
					var y1 = dy;
					y1 += tile.yOffset;
					var x2 = dx + other._tile.width;
					var y2 = y1 + tile.slope * other._tile.width;
					var left = (x2 - dx) * (thisY - y1) > (y2 - y1) * (thisX - dx);
					if(tile.type == 2 && !left || tile.type == 3 && left) {
						return true;
					}
					var x1 = dx;
					var y11 = dy + tile.yOffset;
					var yoff = tile.slope * (other._tile.width | 0);
					var x21 = x1 + yoff / tile.slope;
					var y21 = y11 + yoff;
					var dx2 = x21 - x1;
					var dy2 = y21 - y11;
					var fx = x1 - thisX;
					var fy = y11 - thisY;
					var a = dx2 * dx2 + dy2 * dy2;
					var b = (fx * dx2 + fy * dy2) * 2;
					var c = fx * fx + fy * fy - this._radius * this._radius;
					var discriminant = b * b - 4 * a * c;
					if(discriminant >= 0) {
						discriminant = Math.sqrt(discriminant);
						var t1 = (-b - discriminant) / (2 * a);
						var t2 = (-b + discriminant) / (2 * a);
						if(t1 >= 0 && t1 <= 1 || t2 >= 0 && t2 <= 1 || t1 < 0 && t2 > 1) {
							return true;
						}
					}
				}
				dx += other._tile.width | 0;
			}
			dy += other._tile.height | 0;
		}
		return false;
	}
	,collideHitbox: function(other) {
		var _otherHalfWidth = other._width * 0.5;
		var _otherHalfHeight = other._height * 0.5;
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._x;
		var oy = other._y;
		if((other._parent != haxepunk_Entity._EMPTY ? other._parent : null) != null) {
			ox += (other._parent != haxepunk_Entity._EMPTY ? other._parent : null).get_x();
			oy += (other._parent != haxepunk_Entity._EMPTY ? other._parent : null).get_y();
		}
		var distanceX = Math.abs(px - ox - _otherHalfWidth);
		var distanceY = Math.abs(py - oy - _otherHalfHeight);
		if(distanceX > _otherHalfWidth + this._radius || distanceY > _otherHalfHeight + this._radius) {
			return false;
		}
		if(distanceX <= _otherHalfWidth || distanceY <= _otherHalfHeight) {
			return true;
		}
		var distanceToCorner = (distanceX - _otherHalfWidth) * (distanceX - _otherHalfWidth) + (distanceY - _otherHalfHeight) * (distanceY - _otherHalfHeight);
		return distanceToCorner <= this._squaredRadius;
	}
	,project: function(axis,projection) {
		projection.min = -this._radius;
		projection.max = this._radius;
	}
	,debugDraw: function(camera) {
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		haxepunk_Mask.drawContext.lineThickness = 2;
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var _this = haxepunk_Mask.drawContext;
		var color = 16711680;
		var alpha = 0.25;
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		_this.color = color;
		_this.alpha = alpha;
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		haxepunk_Mask.drawContext.circleFilled((this._parent.get_x() + this._x - camera.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),(this._parent.get_y() + this._y - camera.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this._radius,null,camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX,camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var _this = haxepunk_Mask.drawContext;
		var color = 16711680;
		var alpha = 0.5;
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		_this.color = color;
		_this.alpha = alpha;
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var _this = haxepunk_Mask.drawContext;
		var x = (this._parent.get_x() + this._x - camera.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX);
		var y = (this._parent.get_y() + this._y - camera.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
		var radius = this._radius;
		var scaleX = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var scaleY = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		var radians = 2 * Math.PI / 25;
		var halfThick = _this.lineThickness / 2;
		var innerRadius = radius - halfThick;
		var outerRadius = radius + halfThick;
		var this1 = { x : 0, y : 0};
		var inner = this1;
		var this1 = { x : 0, y : 0};
		var outer = this1;
		var this1 = { x : 0, y : 0};
		var lastOuter = this1;
		var this1 = { x : 0, y : 0};
		var lastInner = this1;
		if(_this.shader == null) {
			_this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = _this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : _this.scene;
		_this.command = scene.batch.getDrawCommand(null,_this.shader,_this.smooth,_this.blend,null);
		var _g = 0;
		var _g1 = 26;
		while(_g < _g1) {
			var segment = _g++;
			var theta = segment * radians;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			haxepunk_math_Vector2.setTo(inner,x + sin * innerRadius * scaleX,y + cos * innerRadius * scaleY);
			haxepunk_math_Vector2.setTo(outer,x + sin * outerRadius * scaleX,y + cos * outerRadius * scaleY);
			if(segment != 0) {
				var tx1 = lastInner.x;
				var ty1 = lastInner.y;
				var tx2 = lastOuter.x;
				var ty2 = lastOuter.y;
				var tx3 = outer.x;
				var ty3 = outer.y;
				var color = _this.color;
				var alpha = _this.alpha;
				if(_this.scale) {
					tx1 *= haxepunk_HXP.screen.scaleX;
					tx2 *= haxepunk_HXP.screen.scaleX;
					tx3 *= haxepunk_HXP.screen.scaleX;
					ty1 *= haxepunk_HXP.screen.scaleY;
					ty2 *= haxepunk_HXP.screen.scaleY;
					ty3 *= haxepunk_HXP.screen.scaleY;
				}
				var _this1 = _this.command;
				if(alpha > 0) {
					var onScreen;
					if(_this1.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this2 = _this1.visibleArea;
						if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this2.x + _this2.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this1.visibleArea.x) {
							var _this3 = _this1.visibleArea;
							onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this3.y + _this3.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this1.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = 0;
						data1.uvy1 = 0;
						data1.tx2 = tx2;
						data1.ty2 = ty2;
						data1.uvx2 = 0;
						data1.uvy2 = 0;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = 0;
						data1.uvy3 = 0;
						data1.color = color;
						data1.alpha = alpha;
						if(_this1.data == null) {
							_this1.data = data1;
						} else {
							_this1._lastData._next = data1;
						}
						_this1._lastData = data1;
						++_this1.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
						var a2 = data1.ty1;
						var b2 = data1.ty2;
						var c2 = data1.ty3;
						var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c3 = data1.ty3;
						var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
						if(_this1.bounds.width == 0) {
							_this1.bounds.x = x1;
							_this1.bounds.width = x2 - x1;
						} else {
							if(x1 < _this1.bounds.x) {
								_this1.bounds.width += _this1.bounds.x - x1;
								_this1.bounds.x = x1;
							}
							var _this4 = _this1.bounds;
							if(x2 > _this4.x + _this4.width) {
								_this1.bounds.width = x2 - _this1.bounds.x;
							}
						}
						if(_this1.bounds.height == 0) {
							_this1.bounds.y = y1;
							_this1.bounds.height = y2 - y1;
						} else {
							if(y1 < _this1.bounds.y) {
								_this1.bounds.height += _this1.bounds.y - y1;
								_this1.bounds.y = y1;
							}
							var _this5 = _this1.bounds;
							if(y2 > _this5.y + _this5.height) {
								_this1.bounds.height = y2 - _this1.bounds.y;
							}
						}
					}
				}
				var tx11 = lastInner.x;
				var ty11 = lastInner.y;
				var tx21 = outer.x;
				var ty21 = outer.y;
				var tx31 = inner.x;
				var ty31 = inner.y;
				var color1 = _this.color;
				var alpha1 = _this.alpha;
				if(_this.scale) {
					tx11 *= haxepunk_HXP.screen.scaleX;
					tx21 *= haxepunk_HXP.screen.scaleX;
					tx31 *= haxepunk_HXP.screen.scaleX;
					ty11 *= haxepunk_HXP.screen.scaleY;
					ty21 *= haxepunk_HXP.screen.scaleY;
					ty31 *= haxepunk_HXP.screen.scaleY;
				}
				var _this6 = _this.command;
				if(alpha1 > 0) {
					var onScreen2;
					if(_this6.shader.attributeNames.length <= 0) {
						var onScreen3;
						var _this7 = _this6.visibleArea;
						if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this7.x + _this7.width && (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this6.visibleArea.x) {
							var _this8 = _this6.visibleArea;
							onScreen3 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this8.y + _this8.height;
						} else {
							onScreen3 = false;
						}
						onScreen2 = onScreen3 && (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this6.visibleArea.y;
					} else {
						onScreen2 = true;
					}
					if(onScreen2) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = tx11;
						data3.ty1 = ty11;
						data3.uvx1 = 0;
						data3.uvy1 = 0;
						data3.tx2 = tx21;
						data3.ty2 = ty21;
						data3.uvx2 = 0;
						data3.uvy2 = 0;
						data3.tx3 = tx31;
						data3.ty3 = ty31;
						data3.uvx3 = 0;
						data3.uvy3 = 0;
						data3.color = color1;
						data3.alpha = alpha1;
						if(_this6.data == null) {
							_this6.data = data3;
						} else {
							_this6._lastData._next = data3;
						}
						_this6._lastData = data3;
						++_this6.triangleCount;
						var a4 = data3.tx1;
						var b4 = data3.tx2;
						var c4 = data3.tx3;
						var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c5 = data3.tx3;
						var x21 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
						var a6 = data3.ty1;
						var b6 = data3.ty2;
						var c6 = data3.ty3;
						var y11 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c7 = data3.ty3;
						var y21 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
						if(_this6.bounds.width == 0) {
							_this6.bounds.x = x11;
							_this6.bounds.width = x21 - x11;
						} else {
							if(x11 < _this6.bounds.x) {
								_this6.bounds.width += _this6.bounds.x - x11;
								_this6.bounds.x = x11;
							}
							var _this9 = _this6.bounds;
							if(x21 > _this9.x + _this9.width) {
								_this6.bounds.width = x21 - _this6.bounds.x;
							}
						}
						if(_this6.bounds.height == 0) {
							_this6.bounds.y = y11;
							_this6.bounds.height = y21 - y11;
						} else {
							if(y11 < _this6.bounds.y) {
								_this6.bounds.height += _this6.bounds.y - y11;
								_this6.bounds.y = y11;
							}
							var _this10 = _this6.bounds;
							if(y21 > _this10.y + _this10.height) {
								_this6.bounds.height = y21 - _this6.bounds.y;
							}
						}
					}
				}
			}
			lastOuter.x = outer.x;
			lastOuter.y = outer.y;
			lastInner.x = inner.x;
			lastInner.y = inner.y;
		}
	}
	,get_x: function() {
		return this._x - this._radius;
	}
	,get_y: function() {
		return this._y - this._radius;
	}
	,get_radius: function() {
		return this._radius;
	}
	,set_radius: function(value) {
		if(this._radius == value) {
			return value;
		}
		this._radius = value;
		this._squaredRadius = value * value;
		this.set_height(this.set_width(this._radius + this._radius));
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this.update();
		}
		return this._radius;
	}
	,update: function() {
		if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this._parent.originX = -this._x + this._radius;
			this._parent.originY = -this._y + this._radius;
			this._parent.set_height(this._parent.set_width(this._radius + this._radius));
			if(this.list != null) {
				this.list.update();
			}
		}
	}
	,__class__: haxepunk_masks_Circle
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{set_radius:"set_radius",get_radius:"get_radius"})
});
var haxepunk_masks_Grid = function(width,height,tileWidth,tileHeight,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	haxepunk_masks_Hitbox.call(this);
	if(width == 0 || height == 0 || tileWidth == 0 || tileHeight == 0) {
		throw haxe_Exception.thrown("Illegal Grid, sizes cannot be 0.");
	}
	this._rect = haxepunk_HXP.rect;
	this._point = haxepunk_HXP.point;
	this._point2 = haxepunk_HXP.point2;
	this.columns = width / tileWidth | 0;
	this.rows = height / tileHeight | 0;
	this._tile = new haxepunk_math_Rectangle(0,0,tileWidth,tileHeight);
	this._x = x;
	this._y = y;
	this._width = width;
	this._height = height;
	this.usePositions = false;
	var this1 = this._check;
	var key = haxepunk_Mask.__name__;
	this1.h[key] = $bind(this,this.collideMask);
	var this1 = this._check;
	var key = haxepunk_masks_Hitbox.__name__;
	this1.h[key] = $bind(this,this.collideHitbox);
	var this1 = this._check;
	var key = haxepunk_masks_Pixelmask.__name__;
	this1.h[key] = $bind(this,this.collidePixelmask);
	var this1 = this._check;
	var key = haxepunk_masks_Grid.__name__;
	this1.h[key] = $bind(this,this.collideGrid);
	this.data = [];
	var _g = 0;
	var _g1 = this.rows;
	while(_g < _g1) {
		var x = _g++;
		this.data.push([]);
	}
};
$hxClasses["haxepunk.masks.Grid"] = haxepunk_masks_Grid;
haxepunk_masks_Grid.__name__ = "haxepunk.masks.Grid";
haxepunk_masks_Grid.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Grid.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	setTile: function(column,row,solid) {
		if(solid == null) {
			solid = true;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		this.setTileXY(column,row,solid);
	}
	,setTileXY: function(x,y,solid) {
		if(solid == null) {
			solid = true;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x < 0 || x > this.columns - 1 || y < 0 || y > this.rows - 1) {
			return;
		}
		this.data[y][x] = solid;
	}
	,clearTile: function(column,row) {
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		this.setTile(column,row,false);
	}
	,checkTile: function(column,row) {
		return !(column < 0 || column > this.columns - 1 || row < 0 || row > this.rows - 1);
	}
	,getTile: function(column,row) {
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		return this.getTileXY(column,row);
	}
	,getTileXY: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x < 0 || x > this.columns - 1 || y < 0 || y > this.rows - 1) {
			return false;
		}
		return this.data[y][x];
	}
	,setRect: function(column,row,width,height,solid) {
		if(solid == null) {
			solid = true;
		}
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
			width = width / this._tile.width | 0;
			height = height / this._tile.height | 0;
		}
		var _g = row;
		var _g1 = row + height;
		while(_g < _g1) {
			var yy = _g++;
			var _g2 = column;
			var _g3 = column + width;
			while(_g2 < _g3) {
				var xx = _g2++;
				this.setTileXY(xx,yy,solid);
			}
		}
	}
	,clearRect: function(column,row,width,height) {
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		this.setRect(column,row,width,height,false);
	}
	,loadFromString: function(str,columnSep,rowSep) {
		if(rowSep == null) {
			rowSep = "\n";
		}
		if(columnSep == null) {
			columnSep = ",";
		}
		var row = str.split(rowSep);
		var rows = row.length;
		var col;
		var cols;
		var x;
		var y;
		var _g = 0;
		var _g1 = rows;
		while(_g < _g1) {
			var y = _g++;
			if(row[y] == "") {
				continue;
			}
			col = row[y].split(columnSep);
			cols = col.length;
			var _g2 = 0;
			var _g3 = cols;
			while(_g2 < _g3) {
				var x = _g2++;
				if(col[x] == "") {
					continue;
				}
				this.setTile(x,y,Std.parseInt(col[x]) > 0);
			}
		}
	}
	,loadFrom2DArray: function(array) {
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = array[0].length;
			while(_g2 < _g3) {
				var x = _g2++;
				this.setTile(x,y,array[y][x] > 0);
			}
		}
	}
	,saveToString: function(columnSep,rowSep,solid,empty) {
		if(empty == null) {
			empty = "false";
		}
		if(solid == null) {
			solid = "true";
		}
		if(rowSep == null) {
			rowSep = "\n";
		}
		if(columnSep == null) {
			columnSep = ",";
		}
		var s = "";
		var x;
		var y;
		var _g = 0;
		var _g1 = this.rows;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.columns;
			while(_g2 < _g3) {
				var x = _g2++;
				s += Std.string(this.getTileXY(x,y) ? solid : empty);
				if(x != this.columns - 1) {
					s += columnSep;
				}
			}
			if(y != this.rows - 1) {
				s += rowSep;
			}
		}
		return s;
	}
	,clone: function() {
		var cloneGrid = new haxepunk_masks_Grid(this._width,this._height,this._tile.width | 0,this._tile.height | 0,this._x,this._y);
		var _g = 0;
		var _g1 = this.rows;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.columns;
			while(_g2 < _g3) {
				var x = _g2++;
				cloneGrid.setTile(x,y,this.getTile(x,y));
			}
		}
		return cloneGrid;
	}
	,get_tileWidth: function() {
		return this._tile.width | 0;
	}
	,get_tileHeight: function() {
		return this._tile.height | 0;
	}
	,collideMask: function(other) {
		var tmp = other._parent.get_x() - other._parent.originX - this._parent.get_x();
		this._rect.x = tmp + this._parent.originX;
		var tmp = other._parent.get_y() - other._parent.originY - this._parent.get_y();
		this._rect.y = tmp + this._parent.originY;
		var pointX = ((this._rect.x + other._parent.get_width() - 1) / this._tile.width | 0) + 1;
		var pointY = ((this._rect.y + other._parent.get_height() - 1) / this._tile.height | 0) + 1;
		var rectX = this._rect.x / this._tile.width | 0;
		var rectY = this._rect.y / this._tile.height | 0;
		var _g = rectY;
		var _g1 = pointY;
		while(_g < _g1) {
			var dy = _g++;
			var _g2 = rectX;
			var _g3 = pointX;
			while(_g2 < _g3) {
				var dx = _g2++;
				if(this.getTile(dx,dy)) {
					return true;
				}
			}
		}
		return false;
	}
	,collideHitbox: function(other) {
		var tmp = other._parent.get_x() - other._x - this._parent.get_x();
		this._rect.x = tmp + this._x;
		var tmp = other._parent.get_y() - other._y - this._parent.get_y();
		this._rect.y = tmp + this._y;
		var pointX = ((this._rect.x + other._width - 1) / this._tile.width | 0) + 1;
		var pointY = ((this._rect.y + other._height - 1) / this._tile.height | 0) + 1;
		var rectX = this._rect.x / this._tile.width | 0;
		var rectY = this._rect.y / this._tile.height | 0;
		var _g = rectY;
		var _g1 = pointY;
		while(_g < _g1) {
			var dy = _g++;
			var _g2 = rectX;
			var _g3 = pointX;
			while(_g2 < _g3) {
				var dx = _g2++;
				if(this.getTile(dx,dy)) {
					return true;
				}
			}
		}
		return false;
	}
	,collidePixelmask: function(other) {
		var tmp = this._parent.get_x() + this._x;
		this._point.x = tmp - this._parent.originX;
		var tmp = this._parent.get_y() + this._y;
		this._point.y = tmp - this._parent.originY;
		if((((other) instanceof haxepunk_masks_Imagemask) ? other : null) != null) {
			this._rect = (js_Boot.__cast(other , haxepunk_masks_Imagemask)).getBounds();
			this._rect.x += other._parent.get_x();
			this._rect.y += other._parent.get_y();
		} else {
			var tmp = other._parent.get_x() + other.get_x();
			this._rect.x = tmp - other._parent.originX;
			var tmp = other._parent.get_y() + other.get_y();
			this._rect.y = tmp - other._parent.originY;
			this._rect.width = other.get_width();
			this._rect.height = other.get_height();
		}
		var r1 = new haxepunk_math_Rectangle(this._point.x,this._point.y,this._width,this._height);
		var intersect = r1.intersection(this._rect);
		if(intersect == null) {
			return false;
		}
		var _g = Math.floor(intersect.x - this._rect.x);
		var _g1 = Math.floor(intersect.x - this._rect.x + intersect.width);
		while(_g < _g1) {
			var dx = _g++;
			var _g2 = Math.floor(intersect.y - this._rect.y);
			var _g3 = Math.floor(intersect.y - this._rect.y + intersect.height);
			while(_g2 < _g3) {
				var dy = _g2++;
				var tx = (dx + this._rect.x) / this._tile.width | 0;
				var ty = (dy + this._rect.y) / this._tile.height | 0;
				if(this.data[ty][tx] && (other.get_data().getPixel(dx,dy) >> 24 & 255) > 0) {
					return true;
				}
			}
		}
		return false;
	}
	,collideGrid: function(other) {
		var ax1 = this._parent.get_x() + this._x;
		var ax2 = ax1 + this._width;
		var bx1 = other._parent.get_x() + other._x;
		var bx2 = bx1 + other._width;
		if(ax2 < bx1 || ax1 > bx2) {
			return false;
		}
		var ay1 = this._parent.get_y() + this._y;
		var ay2 = ay1 + this._height;
		var by1 = other._parent.get_y() + other._y;
		var by2 = by1 + other._height;
		if(ay2 < by1 || ay1 > by2) {
			return false;
		}
		var ox1 = ax1 > bx1 ? ax1 : bx1;
		var oy1 = ay1 > by1 ? ay1 : by1;
		var ox2 = ax2 < bx2 ? ax2 : bx2;
		var oy2 = ay2 < by2 ? ay2 : by2;
		var tw;
		var th;
		if(this._tile.width < other._tile.width) {
			tw = this._tile.width;
			ox1 -= this._parent.get_x() + this._x;
			ox1 = (ox1 / tw | 0) * tw;
			ox1 += this._parent.get_x() + this._x;
		} else {
			tw = other._tile.width;
			ox1 -= other._parent.get_x() + other._x;
			ox1 = (ox1 / tw | 0) * tw;
			ox1 += other._parent.get_x() + other._x;
		}
		if(this._tile.height < other._tile.height) {
			th = this._tile.height;
			oy1 -= this._parent.get_y() + this._y;
			oy1 = (oy1 / th | 0) * th;
			oy1 += this._parent.get_y() + this._y;
		} else {
			th = other._tile.height;
			oy1 -= other._parent.get_y() + other._y;
			oy1 = (oy1 / th | 0) * th;
			oy1 += other._parent.get_y() + other._y;
		}
		var y = oy1;
		var x = 0;
		while(y < oy2) {
			var ar1 = (y - this._parent.get_y() - this._y) / this._tile.height | 0;
			var br1 = (y - other._parent.get_y() - other._y) / other._tile.height | 0;
			var ar2 = (y - this._parent.get_y() - this._y + (th - 1)) / this._tile.height | 0;
			var br2 = (y - other._parent.get_y() - other._y + (th - 1)) / other._tile.height | 0;
			x = ox1;
			while(x < ox2) {
				var ac1 = (x - this._parent.get_x() - this._x) / this._tile.width | 0;
				var bc1 = (x - other._parent.get_x() - other._x) / other._tile.width | 0;
				var ac2 = (x - this._parent.get_x() - this._x + (tw - 1)) / this._tile.width | 0;
				var bc2 = (x - other._parent.get_x() - other._x + (tw - 1)) / other._tile.width | 0;
				if(this.getTile(ac1,ar1) && other.getTile(bc1,br1) || this.getTile(ac2,ar1) && other.getTile(bc2,br1) || this.getTile(ac1,ar2) && other.getTile(bc1,br2) || this.getTile(ac2,ar2) && other.getTile(bc2,br2)) {
					return true;
				}
				x += tw;
			}
			y += th;
		}
		return false;
	}
	,debugDraw: function(camera) {
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var dc = haxepunk_Mask.drawContext;
		var scaleX = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var scaleY = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		var cellX;
		var stepX = (this._tile.width | 0) * scaleX;
		var stepY = (this._tile.height | 0) * scaleY;
		var px = this._x + this._parent.get_x() - (haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).x;
		var py = this._y + this._parent.get_y() - (haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).y;
		var startx = Math.floor(-px / (this._tile.width | 0));
		var starty = Math.floor(-py / (this._tile.height | 0));
		var destx = startx + 1 + Math.ceil(haxepunk_HXP.width / (this._tile.width | 0));
		var desty = starty + 1 + Math.ceil(haxepunk_HXP.height / (this._tile.height | 0));
		if(startx > this.columns || starty > this.rows || destx < 0 || desty < 0) {
			return;
		}
		if(startx < 0) {
			startx = 0;
		}
		if(destx > this.columns) {
			destx = this.columns;
		}
		if(starty < 0) {
			starty = 0;
		}
		if(desty > this.rows) {
			desty = this.rows;
		}
		px = (px + startx * (this._tile.width | 0)) * scaleX;
		py = (py + starty * (this._tile.height | 0)) * scaleY;
		var row;
		var cellY = py;
		var _g = starty;
		var _g1 = desty;
		while(_g < _g1) {
			var y = _g++;
			cellX = px;
			row = this.data[y];
			var _g2 = startx;
			var _g3 = destx;
			while(_g2 < _g3) {
				var x = _g2++;
				if(row[x]) {
					dc.lineThickness = 2;
					var color = 16777215;
					var alpha = 0.3;
					if(alpha == null) {
						alpha = 1;
					}
					if(color == null) {
						color = 16777215;
					}
					dc.color = color;
					dc.alpha = alpha;
					dc.rect(cellX,cellY,stepX,stepY);
					var color1 = 255;
					var alpha1 = 1;
					if(alpha1 == null) {
						alpha1 = 1;
					}
					if(color1 == null) {
						color1 = 16777215;
					}
					dc.color = color1;
					dc.alpha = alpha1;
					if(x < this.columns - 1 && !row[x + 1]) {
						dc.line(cellX + stepX,cellY,cellX + stepX,cellY + stepY);
					}
					if(x > 0 && !row[x - 1]) {
						dc.line(cellX,cellY,cellX,cellY + stepY);
					}
					if(y < this.rows - 1 && !this.data[y + 1][x]) {
						dc.line(cellX,cellY + stepY,cellX + stepX,cellY + stepY);
					}
					if(y > 0 && !this.data[y - 1][x]) {
						dc.line(cellX,cellY,cellX + stepX,cellY);
					}
				}
				cellX += stepX;
			}
			cellY += stepY;
		}
	}
	,squareProjection: function(axis,point) {
		if(axis.x < axis.y) {
			point.x = axis.x;
			point.y = axis.y;
		} else {
			point.y = axis.x;
			point.x = axis.y;
		}
	}
	,__class__: haxepunk_masks_Grid
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{get_tileHeight:"get_tileHeight",get_tileWidth:"get_tileWidth"})
});
var haxepunk_masks_Pixelmask = function(source,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	haxepunk_masks_Hitbox.call(this);
	if(source == null) {
		throw haxe_Exception.thrown("Invalid Pixelmask source image.");
	}
	this._data = source;
	this.threshold = 1;
	this._rect = haxepunk_HXP.rect;
	this._point = haxepunk_HXP.point;
	this._point2 = haxepunk_HXP.point2;
	var this1 = this.get_data();
	this._width = this1 == null ? 0 : this1.width;
	var this1 = this.get_data();
	this._height = this1 == null ? 0 : this1.height;
	this._x = x;
	this._y = y;
	var this1 = this._check;
	var key = haxepunk_Mask.__name__;
	this1.h[key] = $bind(this,this.collideMask);
	var this1 = this._check;
	var key = haxepunk_masks_Pixelmask.__name__;
	this1.h[key] = $bind(this,this.collidePixelmask);
	var this1 = this._check;
	var key = haxepunk_masks_Hitbox.__name__;
	this1.h[key] = $bind(this,this.collideHitbox);
};
$hxClasses["haxepunk.masks.Pixelmask"] = haxepunk_masks_Pixelmask;
haxepunk_masks_Pixelmask.__name__ = "haxepunk.masks.Pixelmask";
haxepunk_masks_Pixelmask.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Pixelmask.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	collideMask: function(other) {
		var tmp = this._parent.get_x();
		this._point.x = tmp + this._x;
		var tmp = this._parent.get_y();
		this._point.y = tmp + this._y;
		var tmp = other._parent.get_x();
		this._rect.x = tmp - other._parent.originX;
		var tmp = other._parent.get_y();
		this._rect.y = tmp - other._parent.originY;
		this._rect.width = other._parent.get_width();
		this._rect.height = other._parent.get_height();
		var tmp = other._parent.get_x() - other._parent.originX;
		var tmp1 = this._parent.get_x() + this._x;
		this._point.x = tmp - tmp1;
		var tmp = other._parent.get_y() - other._parent.originY;
		var tmp1 = this._parent.get_y() + this._y;
		this._point.y = tmp - tmp1;
		var this1 = this._data;
		var this2 = this._data;
		var r1 = new haxepunk_math_Rectangle(0,0,this1 == null ? 0 : this1.width,this2 == null ? 0 : this2.height);
		var r2 = new haxepunk_math_Rectangle(this._point.x,this._point.y,other._parent.get_width(),other._parent.get_height());
		var intersect = r1.intersection(r2);
		if(intersect == null) {
			return false;
		}
		var _g = Math.floor(intersect.x);
		var _g1 = Math.floor(intersect.x + intersect.width + 1);
		while(_g < _g1) {
			var dx = _g++;
			var _g2 = Math.floor(intersect.y);
			var _g3 = Math.floor(intersect.y + intersect.height + 1);
			while(_g2 < _g3) {
				var dy = _g2++;
				if((this._data.getPixel(dx,dy) >> 24 & 255) > 0) {
					return true;
				}
			}
		}
		return false;
	}
	,collideHitbox: function(other) {
		var tmp = this._parent.get_x();
		this._point.x = tmp + this._x;
		var tmp = this._parent.get_y();
		this._point.y = tmp + this._y;
		var tmp = other._parent.get_x();
		this._rect.x = tmp + other._x;
		var tmp = other._parent.get_y();
		this._rect.y = tmp + other._y;
		this._rect.width = other._width;
		this._rect.height = other._height;
		var tmp = other._parent.get_x() + other._x;
		var tmp1 = this._parent.get_x() + this._x;
		this._point.x = tmp - tmp1;
		var tmp = other._parent.get_y() + other._y;
		var tmp1 = this._parent.get_y() + this._y;
		this._point.y = tmp - tmp1;
		var this1 = this._data;
		var this2 = this._data;
		var r1 = new haxepunk_math_Rectangle(0,0,this1 == null ? 0 : this1.width,this2 == null ? 0 : this2.height);
		var r2 = new haxepunk_math_Rectangle(this._point.x,this._point.y,other.get_width(),other.get_height());
		var intersect = r1.intersection(r2);
		if(intersect == null) {
			return false;
		}
		var _g = Math.floor(intersect.x);
		var _g1 = Math.floor(intersect.x + intersect.width + 1);
		while(_g < _g1) {
			var dx = _g++;
			var _g2 = Math.floor(intersect.y);
			var _g3 = Math.floor(intersect.y + intersect.height + 1);
			while(_g2 < _g3) {
				var dy = _g2++;
				if((this._data.getPixel(dx,dy) >> 24 & 255) > 0) {
					return true;
				}
			}
		}
		return false;
	}
	,collidePixelmask: function(other) {
		var tmp = other._parent.get_x() + other._x;
		var tmp1 = this._parent.get_x() + this._x;
		this._point.x = tmp - tmp1;
		var tmp = other._parent.get_y() + other._y;
		var tmp1 = this._parent.get_y() + this._y;
		this._point.y = tmp - tmp1;
		var this1 = this._data;
		var this2 = this._data;
		var r1 = new haxepunk_math_Rectangle(0,0,this1 == null ? 0 : this1.width,this2 == null ? 0 : this2.height);
		var this1 = other._data;
		var this2 = other._data;
		var r2 = new haxepunk_math_Rectangle(this._point.x,this._point.y,this1 == null ? 0 : this1.width,this2 == null ? 0 : this2.height);
		var intersect = r1.intersection(r2);
		if(intersect == null) {
			return false;
		}
		var _g = Math.floor(intersect.x);
		var _g1 = Math.floor(intersect.x + intersect.width + 1);
		while(_g < _g1) {
			var dx = _g++;
			var _g2 = Math.floor(intersect.y);
			var _g3 = Math.floor(intersect.y + intersect.height + 1);
			while(_g2 < _g3) {
				var dy = _g2++;
				var p1 = this._data.getPixel(dx,dy) >> 24 & 255;
				var p2 = other._data.getPixel(Math.floor(dx - this._point.x),Math.floor(dy - this._point.y)) >> 24 & 255;
				if(p1 > 0 && p2 > 0) {
					return true;
				}
			}
		}
		return false;
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		this._width = value == null ? 0 : value.width;
		this._height = value == null ? 0 : value.height;
		this.update();
		return this._data;
	}
	,__class__: haxepunk_masks_Pixelmask
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{set_data:"set_data",get_data:"get_data"})
});
var haxepunk_masks_Imagemask = function(source) {
	haxepunk_masks_Pixelmask.call(this,new openfl_display_BitmapData(1,1,false,0));
	var c = js_Boot.getClass(this);
	var c1 = c.__super__;
	this._class = c1.__name__;
	this._source = source;
	this.update();
	var this1 = this._check;
	var key = haxepunk_masks_Imagemask.__name__;
	this1.h[key] = $bind(this,this.collidePixelmask);
};
$hxClasses["haxepunk.masks.Imagemask"] = haxepunk_masks_Imagemask;
haxepunk_masks_Imagemask.__name__ = "haxepunk.masks.Imagemask";
haxepunk_masks_Imagemask.__super__ = haxepunk_masks_Pixelmask;
haxepunk_masks_Imagemask.prototype = $extend(haxepunk_masks_Pixelmask.prototype,{
	setSource: function(newsource) {
		this._source = newsource;
		this.update();
	}
	,update: function() {
		var r = this.getBounds();
		this._x = Math.floor(r.x);
		this._y = Math.floor(r.y);
		this._width = Math.ceil(r.width);
		this._height = Math.ceil(r.height);
		var transparent = true;
		var color = 0;
		if(color == null) {
			color = 0;
		}
		if(transparent == null) {
			transparent = false;
		}
		this._data = new openfl_display_BitmapData(this._width,this._height,transparent,color);
		haxepunk_masks_Pixelmask.prototype.update.call(this);
	}
	,getBounds: function() {
		var sx = this._source.scale * this._source.scaleX;
		var sy = this._source.scale * this._source.scaleY;
		var matrix = new openfl_geom_Matrix(sx,0,0,sy,-this._source.originX * sx,-this._source.originY * sy);
		matrix.rotate(this._source.angle * (Math.PI / -180));
		var point = new openfl_geom_Point(0,0);
		var p1 = matrix.transformPoint(point);
		point.x = this._source.get_width();
		point.y = this._source.get_height();
		var p2 = matrix.transformPoint(point);
		point.x = 0;
		point.y = this._source.get_height();
		var p3 = matrix.transformPoint(point);
		point.x = this._source.get_width();
		point.y = 0;
		var p4 = matrix.transformPoint(point);
		var r = new haxepunk_math_Rectangle(0,0,0,0);
		r.x = Math.min(Math.min(p1.x,p2.x),Math.min(p3.x,p4.x));
		r.y = Math.min(Math.min(p1.y,p2.y),Math.min(p3.y,p4.y));
		r.width = Math.max(Math.max(p1.x - r.x,p2.x - r.x),Math.max(p3.x - r.x,p4.x - r.x));
		r.height = Math.max(Math.max(p1.y - r.y,p2.y - r.y),Math.max(p3.y - r.y,p4.y - r.y));
		return r;
	}
	,collidePixelmask: function(other) {
		var rect = this.getBounds();
		rect.x += this._parent.get_x();
		rect.y += this._parent.get_y();
		if((((other) instanceof haxepunk_masks_Imagemask) ? other : null) != null) {
			this._rect = (js_Boot.__cast(other , haxepunk_masks_Imagemask)).getBounds();
			this._rect.x += other._parent.get_x();
			this._rect.y += other._parent.get_y();
		} else {
			var tmp = other._parent.get_x() + other.get_x();
			this._rect.x = tmp - other._parent.originX;
			var tmp = other._parent.get_y() + other.get_y();
			this._rect.y = tmp - other._parent.originY;
			this._rect.width = other.get_width();
			this._rect.height = other.get_height();
		}
		var intersect = rect.intersection(this._rect);
		if(intersect == null) {
			return false;
		}
		var _g = Math.floor(intersect.x);
		var _g1 = Math.floor(intersect.x + intersect.width);
		while(_g < _g1) {
			var dx = _g++;
			var _g2 = Math.floor(intersect.y);
			var _g3 = Math.floor(intersect.y + intersect.height);
			while(_g2 < _g3) {
				var dy = _g2++;
				var p1 = this._data.getPixel(dx - rect.x | 0,dy - rect.y | 0) >> 24 & 255;
				var p2 = other._data.getPixel(dx - this._rect.x | 0,dy - this._rect.y | 0) >> 24 & 255;
				if(p1 > 0 && p2 > 0) {
					return true;
				}
			}
		}
		return false;
	}
	,__class__: haxepunk_masks_Imagemask
});
var haxepunk_masks_PixelmaskSource = {};
haxepunk_masks_PixelmaskSource.fromString = function(source) {
	return haxepunk_assets_AssetCache.global.getTexture(source);
};
var haxepunk_math_Projection = function() {
	this.max = this.min = 0;
};
$hxClasses["haxepunk.math.Projection"] = haxepunk_math_Projection;
haxepunk_math_Projection.__name__ = "haxepunk.math.Projection";
haxepunk_math_Projection.prototype = {
	overlaps: function(other) {
		return !(this.min > other.max || this.max < other.min);
	}
	,getOverlap: function(other) {
		if(this.max > other.max) {
			return this.max - other.min;
		} else {
			return other.max - this.min;
		}
	}
	,toString: function() {
		return "[ " + this.min + ", " + this.max + " ]";
	}
	,__class__: haxepunk_math_Projection
};
var haxepunk_masks_Polygon = function(points,origin) {
	this.maxY = 0;
	this.maxX = 0;
	this.minY = 0;
	this.minX = 0;
	haxepunk_masks_Hitbox.call(this);
	if(points.length < 3) {
		throw haxe_Exception.thrown("The polygon needs at least 3 sides.");
	}
	this._points = points;
	this._fakeEntity = new haxepunk_Entity();
	this._fakeTileHitbox = new haxepunk_masks_Hitbox();
	var this1 = this._check;
	var key = haxepunk_Mask.__name__;
	this1.h[key] = $bind(this,this.collideMask);
	var this1 = this._check;
	var key = haxepunk_masks_Hitbox.__name__;
	this1.h[key] = $bind(this,this.collideHitbox);
	var this1 = this._check;
	var key = haxepunk_masks_Grid.__name__;
	this1.h[key] = $bind(this,this.collideGrid);
	var this1 = this._check;
	var key = haxepunk_masks_Circle.__name__;
	this1.h[key] = $bind(this,this.collideCircle);
	var this1 = this._check;
	var key = haxepunk_masks_Polygon.__name__;
	this1.h[key] = $bind(this,this.collidePolygon);
	var tmp;
	if(origin != null) {
		tmp = origin;
	} else {
		var this1 = { x : 0, y : 0};
		tmp = this1;
	}
	this.origin = tmp;
	this._angle = 0;
	this.updateAxes();
};
$hxClasses["haxepunk.masks.Polygon"] = haxepunk_masks_Polygon;
haxepunk_masks_Polygon.__name__ = "haxepunk.masks.Polygon";
haxepunk_masks_Polygon.fromPoints = function(points,origin) {
	var cp = haxepunk_math_MakeConvex.run(points);
	var list = new haxepunk_masks_Masklist();
	var _g = 0;
	while(_g < cp.length) {
		var p = cp[_g];
		++_g;
		list.add(new haxepunk_masks_Polygon(p,origin));
	}
	return list;
};
haxepunk_masks_Polygon.createPolygon = function(sides,radius,angle) {
	if(angle == null) {
		angle = 0;
	}
	if(radius == null) {
		radius = 100;
	}
	if(sides == null) {
		sides = 3;
	}
	if(sides < 3) {
		throw haxe_Exception.thrown("The polygon needs at least 3 sides.");
	}
	var rotationAngle = Math.PI * 2 / sides;
	var points = [];
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		var tempAngle = Math.PI + i * rotationAngle;
		var this1 = { x : 0, y : 0};
		var p = this1;
		p.x = Math.cos(tempAngle) * radius + radius;
		p.y = Math.sin(tempAngle) * radius + radius;
		points.push(p);
	}
	var poly = new haxepunk_masks_Polygon(points);
	poly.origin.x = radius;
	poly.origin.y = radius;
	poly.set_angle(angle);
	return poly;
};
haxepunk_masks_Polygon.createFromArray = function(points) {
	var p = [];
	var i = 0;
	while(i < points.length) {
		var x = points[i++];
		var y = points[i++];
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		p.push(this1);
	}
	return new haxepunk_masks_Polygon(p);
};
haxepunk_masks_Polygon.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Polygon.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	collideMask: function(other) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - other._parent.get_x();
		var offsetY = this._parent.get_y() + this._y - other._parent.get_y();
		this.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.firstProj);
		other.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetY;
		haxepunk_masks_Polygon.firstProj.max += offsetY;
		var _this = haxepunk_masks_Polygon.firstProj;
		var other1 = haxepunk_masks_Polygon.secondProj;
		if(_this.min > other1.max || _this.max < other1.min) {
			return false;
		}
		this.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.firstProj);
		other.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetX;
		haxepunk_masks_Polygon.firstProj.max += offsetX;
		var _this = haxepunk_masks_Polygon.firstProj;
		var other1 = haxepunk_masks_Polygon.secondProj;
		if(_this.min > other1.max || _this.max < other1.min) {
			return false;
		}
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,haxepunk_masks_Polygon.firstProj);
			other.project(a,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this = haxepunk_masks_Polygon.firstProj;
			var other1 = haxepunk_masks_Polygon.secondProj;
			if(_this.min > other1.max || _this.max < other1.min) {
				return false;
			}
		}
		return true;
	}
	,collideHitbox: function(hitbox) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - hitbox._parent.get_x();
		var offsetY = this._parent.get_y() + this._y - hitbox._parent.get_y();
		this.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.firstProj);
		hitbox.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetY;
		haxepunk_masks_Polygon.firstProj.max += offsetY;
		var _this = haxepunk_masks_Polygon.firstProj;
		var other = haxepunk_masks_Polygon.secondProj;
		if(_this.min > other.max || _this.max < other.min) {
			return false;
		}
		this.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.firstProj);
		hitbox.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetX;
		haxepunk_masks_Polygon.firstProj.max += offsetX;
		var _this = haxepunk_masks_Polygon.firstProj;
		var other = haxepunk_masks_Polygon.secondProj;
		if(_this.min > other.max || _this.max < other.min) {
			return false;
		}
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,haxepunk_masks_Polygon.firstProj);
			hitbox.project(a,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this = haxepunk_masks_Polygon.firstProj;
			var other = haxepunk_masks_Polygon.secondProj;
			if(_this.min > other.max || _this.max < other.min) {
				return false;
			}
		}
		return true;
	}
	,collideGrid: function(grid) {
		var tileW = grid._tile.width | 0;
		var tileH = grid._tile.height | 0;
		var solidTile;
		this._fakeEntity.set_width(tileW);
		this._fakeEntity.set_height(tileH);
		this._fakeEntity.set_x(this._parent.get_x());
		this._fakeEntity.set_y(this._parent.get_y());
		this._fakeEntity.originX = grid._parent.originX + grid._x;
		this._fakeEntity.originY = grid._parent.originY + grid._y;
		this._fakeTileHitbox._width = tileW;
		this._fakeTileHitbox._height = tileH;
		this._fakeTileHitbox.set_parent(this._fakeEntity);
		var _g = 0;
		var _g1 = grid.rows;
		while(_g < _g1) {
			var r = _g++;
			var _g2 = 0;
			var _g3 = grid.columns;
			while(_g2 < _g3) {
				var c = _g2++;
				this._fakeEntity.set_x(grid._parent.get_x() + grid._x + c * tileW);
				this._fakeEntity.set_y(grid._parent.get_y() + grid._y + r * tileH);
				solidTile = grid.getTile(c,r);
				if(solidTile && this.collideHitbox(this._fakeTileHitbox)) {
					return true;
				}
			}
		}
		return false;
	}
	,collideCircle: function(circle) {
		var edgesCrossed = 0;
		var p1;
		var p2;
		var nPoints = this._points.length;
		var offsetX = this._parent.get_x() + this._x;
		var offsetY = this._parent.get_y() + this._y;
		var i = 0;
		var j = nPoints - 1;
		while(i < nPoints) {
			p1 = this._points[i];
			p2 = this._points[j];
			var distFromCenter = (p2.x - p1.x) * (circle._y + circle._parent.get_y() - p1.y - offsetY) / (p2.y - p1.y) + p1.x + offsetX;
			if(p1.y + offsetY > circle._y + circle._parent.get_y() != p2.y + offsetY > circle._y + circle._parent.get_y() && circle._x + circle._parent.get_x() < distFromCenter) {
				++edgesCrossed;
			}
			j = i;
			++i;
		}
		if((edgesCrossed & 1) > 0) {
			return true;
		}
		var radiusSqr = circle._radius * circle._radius;
		var cx = circle._x + circle._parent.get_x();
		var cy = circle._y + circle._parent.get_y();
		var minDistanceSqr = 0;
		var closestX;
		var closestY;
		i = 0;
		j = nPoints - 1;
		while(i < nPoints) {
			p1 = this._points[i];
			p2 = this._points[j];
			var segmentLenSqr = (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
			var t = ((cx - p1.x - offsetX) * (p2.x - p1.x) + (cy - p1.y - offsetY) * (p2.y - p1.y)) / segmentLenSqr;
			if(t < 0) {
				closestX = p1.x;
				closestY = p1.y;
			} else if(t > 1) {
				closestX = p2.x;
				closestY = p2.y;
			} else {
				closestX = p1.x + t * (p2.x - p1.x);
				closestY = p1.y + t * (p2.y - p1.y);
			}
			closestX += offsetX;
			closestY += offsetY;
			minDistanceSqr = (cx - closestX) * (cx - closestX) + (cy - closestY) * (cy - closestY);
			if(minDistanceSqr <= radiusSqr) {
				return true;
			}
			j = i;
			++i;
		}
		return false;
	}
	,collidePolygon: function(other) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - other._parent.get_x() - other._x;
		var offsetY = this._parent.get_y() + this._y - other._parent.get_y() - other._y;
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,haxepunk_masks_Polygon.firstProj);
			other.project(a,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this = haxepunk_masks_Polygon.firstProj;
			var other1 = haxepunk_masks_Polygon.secondProj;
			if(_this.min > other1.max || _this.max < other1.min) {
				return false;
			}
		}
		var _g = 0;
		var _g1 = other._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,haxepunk_masks_Polygon.firstProj);
			other.project(a,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this = haxepunk_masks_Polygon.firstProj;
			var other1 = haxepunk_masks_Polygon.secondProj;
			if(_this.min > other1.max || _this.max < other1.min) {
				return false;
			}
		}
		return true;
	}
	,project: function(axis,projection) {
		var p = this._points[0];
		var min = axis.x * p.x + axis.y * p.y;
		var max = min;
		var _g = 1;
		var _g1 = this._points.length;
		while(_g < _g1) {
			var i = _g++;
			p = this._points[i];
			var cur = axis.x * p.x + axis.y * p.y;
			if(cur < min) {
				min = cur;
			} else if(cur > max) {
				max = cur;
			}
		}
		projection.min = min;
		projection.max = max;
	}
	,debugDraw: function(camera) {
		var offsetX = this._parent.get_x() + this._x - camera.x;
		var offsetY = this._parent.get_y() + this._y - camera.y;
		var scaleX = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var scaleY = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var dc = haxepunk_Mask.drawContext;
		var color = 255;
		var alpha = 0.3;
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		dc.color = color;
		dc.alpha = alpha;
		var _g = 1;
		var _g1 = this._points.length + 1;
		while(_g < _g1) {
			var i = _g++;
			var a = i - 1;
			var b = i % this._points.length;
			dc.line((this._points[a].x + offsetX) * scaleX,(this._points[a].y + offsetY) * scaleY,(this._points[b].x + offsetX) * scaleX,(this._points[b].y + offsetY) * scaleY);
		}
		var x = (offsetX + this.origin.x) * scaleX;
		var y = (offsetY + this.origin.y) * scaleY;
		var radians = 2 * Math.PI / 25;
		var halfThick = dc.lineThickness / 2;
		var innerRadius = 2 - halfThick;
		var outerRadius = 2 + halfThick;
		var this1 = { x : 0, y : 0};
		var inner = this1;
		var this1 = { x : 0, y : 0};
		var outer = this1;
		var this1 = { x : 0, y : 0};
		var lastOuter = this1;
		var this1 = { x : 0, y : 0};
		var lastInner = this1;
		if(dc.shader == null) {
			dc.shader = new haxepunk_graphics_shader_ColorShader();
		}
		var scene = dc.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : dc.scene;
		dc.command = scene.batch.getDrawCommand(null,dc.shader,dc.smooth,dc.blend,null);
		var _g = 0;
		var _g1 = 26;
		while(_g < _g1) {
			var segment = _g++;
			var theta = segment * radians;
			var sin = Math.sin(theta);
			var cos = Math.cos(theta);
			haxepunk_math_Vector2.setTo(inner,x + sin * innerRadius,y + cos * innerRadius);
			haxepunk_math_Vector2.setTo(outer,x + sin * outerRadius,y + cos * outerRadius);
			if(segment != 0) {
				var tx1 = lastInner.x;
				var ty1 = lastInner.y;
				var tx2 = lastOuter.x;
				var ty2 = lastOuter.y;
				var tx3 = outer.x;
				var ty3 = outer.y;
				var color = dc.color;
				var alpha = dc.alpha;
				if(dc.scale) {
					tx1 *= haxepunk_HXP.screen.scaleX;
					tx2 *= haxepunk_HXP.screen.scaleX;
					tx3 *= haxepunk_HXP.screen.scaleX;
					ty1 *= haxepunk_HXP.screen.scaleY;
					ty2 *= haxepunk_HXP.screen.scaleY;
					ty3 *= haxepunk_HXP.screen.scaleY;
				}
				var _this = dc.command;
				if(alpha > 0) {
					var onScreen;
					if(_this.shader.attributeNames.length <= 0) {
						var onScreen1;
						var _this1 = _this.visibleArea;
						if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x) {
							var _this2 = _this.visibleArea;
							onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this2.y + _this2.height;
						} else {
							onScreen1 = false;
						}
						onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = 0;
						data1.uvy1 = 0;
						data1.tx2 = tx2;
						data1.ty2 = ty2;
						data1.uvx2 = 0;
						data1.uvy2 = 0;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = 0;
						data1.uvy3 = 0;
						data1.color = color;
						data1.alpha = alpha;
						if(_this.data == null) {
							_this.data = data1;
						} else {
							_this._lastData._next = data1;
						}
						_this._lastData = data1;
						++_this.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x1 = a > b ? b > c ? c : b : a > c ? c : a;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
						var a2 = data1.ty1;
						var b2 = data1.ty2;
						var c2 = data1.ty3;
						var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c3 = data1.ty3;
						var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
						if(_this.bounds.width == 0) {
							_this.bounds.x = x1;
							_this.bounds.width = x2 - x1;
						} else {
							if(x1 < _this.bounds.x) {
								_this.bounds.width += _this.bounds.x - x1;
								_this.bounds.x = x1;
							}
							var _this3 = _this.bounds;
							if(x2 > _this3.x + _this3.width) {
								_this.bounds.width = x2 - _this.bounds.x;
							}
						}
						if(_this.bounds.height == 0) {
							_this.bounds.y = y1;
							_this.bounds.height = y2 - y1;
						} else {
							if(y1 < _this.bounds.y) {
								_this.bounds.height += _this.bounds.y - y1;
								_this.bounds.y = y1;
							}
							var _this4 = _this.bounds;
							if(y2 > _this4.y + _this4.height) {
								_this.bounds.height = y2 - _this.bounds.y;
							}
						}
					}
				}
				var tx11 = lastInner.x;
				var ty11 = lastInner.y;
				var tx21 = outer.x;
				var ty21 = outer.y;
				var tx31 = inner.x;
				var ty31 = inner.y;
				var color1 = dc.color;
				var alpha1 = dc.alpha;
				if(dc.scale) {
					tx11 *= haxepunk_HXP.screen.scaleX;
					tx21 *= haxepunk_HXP.screen.scaleX;
					tx31 *= haxepunk_HXP.screen.scaleX;
					ty11 *= haxepunk_HXP.screen.scaleY;
					ty21 *= haxepunk_HXP.screen.scaleY;
					ty31 *= haxepunk_HXP.screen.scaleY;
				}
				var _this5 = dc.command;
				if(alpha1 > 0) {
					var onScreen2;
					if(_this5.shader.attributeNames.length <= 0) {
						var onScreen3;
						var _this6 = _this5.visibleArea;
						if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this6.x + _this6.width && (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this5.visibleArea.x) {
							var _this7 = _this5.visibleArea;
							onScreen3 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this7.y + _this7.height;
						} else {
							onScreen3 = false;
						}
						onScreen2 = onScreen3 && (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this5.visibleArea.y;
					} else {
						onScreen2 = true;
					}
					if(onScreen2) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = tx11;
						data3.ty1 = ty11;
						data3.uvx1 = 0;
						data3.uvy1 = 0;
						data3.tx2 = tx21;
						data3.ty2 = ty21;
						data3.uvx2 = 0;
						data3.uvy2 = 0;
						data3.tx3 = tx31;
						data3.ty3 = ty31;
						data3.uvx3 = 0;
						data3.uvy3 = 0;
						data3.color = color1;
						data3.alpha = alpha1;
						if(_this5.data == null) {
							_this5.data = data3;
						} else {
							_this5._lastData._next = data3;
						}
						_this5._lastData = data3;
						++_this5.triangleCount;
						var a4 = data3.tx1;
						var b4 = data3.tx2;
						var c4 = data3.tx3;
						var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c5 = data3.tx3;
						var x21 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
						var a6 = data3.ty1;
						var b6 = data3.ty2;
						var c6 = data3.ty3;
						var y11 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c7 = data3.ty3;
						var y21 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
						if(_this5.bounds.width == 0) {
							_this5.bounds.x = x11;
							_this5.bounds.width = x21 - x11;
						} else {
							if(x11 < _this5.bounds.x) {
								_this5.bounds.width += _this5.bounds.x - x11;
								_this5.bounds.x = x11;
							}
							var _this8 = _this5.bounds;
							if(x21 > _this8.x + _this8.width) {
								_this5.bounds.width = x21 - _this5.bounds.x;
							}
						}
						if(_this5.bounds.height == 0) {
							_this5.bounds.y = y11;
							_this5.bounds.height = y21 - y11;
						} else {
							if(y11 < _this5.bounds.y) {
								_this5.bounds.height += _this5.bounds.y - y11;
								_this5.bounds.y = y11;
							}
							var _this9 = _this5.bounds;
							if(y21 > _this9.y + _this9.height) {
								_this5.bounds.height = y21 - _this5.bounds.y;
							}
						}
					}
				}
			}
			lastOuter.x = outer.x;
			lastOuter.y = outer.y;
			lastInner.x = inner.x;
			lastInner.y = inner.y;
		}
	}
	,get_angle: function() {
		return this._angle;
	}
	,set_angle: function(value) {
		if(value != this._angle) {
			this.rotate(value - this._angle);
			if(this.list != null || (this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
				this.update();
			}
		}
		return value;
	}
	,get_points: function() {
		return this._points;
	}
	,set_points: function(value) {
		if(this._points != value) {
			this._points = value;
			if(this.list != null || (this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
				this.updateAxes();
			}
		}
		return value;
	}
	,update: function() {
		this.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.firstProj);
		var projX = Math.round(haxepunk_masks_Polygon.firstProj.min);
		this._width = Math.round(haxepunk_masks_Polygon.firstProj.max - haxepunk_masks_Polygon.firstProj.min);
		this.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.secondProj);
		var projY = Math.round(haxepunk_masks_Polygon.secondProj.min);
		this._height = Math.round(haxepunk_masks_Polygon.secondProj.max - haxepunk_masks_Polygon.secondProj.min);
		this.minX = this._x + projX;
		this.minY = this._y + projY;
		this.maxX = Math.round(this.minX + this._width);
		this.maxY = Math.round(this.minY + this._height);
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this._parent.originX = -this._x - projX;
			this._parent.originY = -this._y - projY;
			this._parent.set_width(this._width);
			this._parent.set_height(this._height);
		}
	}
	,rotate: function(angleDelta) {
		this._angle += angleDelta;
		angleDelta *= Math.PI / -180;
		var p;
		var _g = 0;
		var _g1 = this._points.length;
		while(_g < _g1) {
			var i = _g++;
			p = this._points[i];
			var dx = p.x - this.origin.x;
			var dy = p.y - this.origin.y;
			var pointAngle = Math.atan2(dy,dx);
			var length = Math.sqrt(dx * dx + dy * dy);
			p.x = Math.cos(pointAngle + angleDelta) * length + this.origin.x;
			p.y = Math.sin(pointAngle + angleDelta) * length + this.origin.y;
		}
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var axisAngle = Math.atan2(a.y,a.x);
			a.x = Math.cos(axisAngle + angleDelta);
			a.y = Math.sin(axisAngle + angleDelta);
		}
	}
	,generateAxes: function() {
		this._axes = [];
		var temp;
		var nPoints = this._points.length;
		var edge;
		var i = 0;
		var j = nPoints - 1;
		while(i < nPoints) {
			var this1 = { x : 0, y : 0};
			edge = this1;
			edge.x = this._points[i].x - this._points[j].x;
			edge.y = this._points[i].y - this._points[j].y;
			temp = edge.y;
			edge.y = -edge.x;
			edge.x = temp;
			var size = 1;
			if(size == null) {
				size = 1;
			}
			if(!(edge.x == 0 && edge.y == 0)) {
				var normal = size / Math.sqrt(edge.x * edge.x + edge.y * edge.y);
				edge.x *= normal;
				edge.y *= normal;
			}
			this._axes.push(edge);
			j = i;
			++i;
		}
	}
	,removeDuplicateAxes: function() {
		var i = this._axes.length - 1;
		var j = i - 1;
		while(i > 0) {
			if(Math.abs(this._axes[i].x - this._axes[j].x) < haxepunk_masks_Polygon.EPSILON && Math.abs(this._axes[i].y - this._axes[j].y) < haxepunk_masks_Polygon.EPSILON || Math.abs(this._axes[j].x + this._axes[i].x) < haxepunk_masks_Polygon.EPSILON && Math.abs(this._axes[i].y + this._axes[j].y) < haxepunk_masks_Polygon.EPSILON) {
				this._axes.splice(i,1);
				--i;
			}
			--j;
			if(j < 0) {
				--i;
				j = i - 1;
			}
		}
	}
	,updateAxes: function() {
		this.generateAxes();
		this.removeDuplicateAxes();
		this.update();
	}
	,__class__: haxepunk_masks_Polygon
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{set_points:"set_points",get_points:"get_points",set_angle:"set_angle",get_angle:"get_angle"})
});
var haxepunk_masks_SlopedGrid = function(width,height,tileWidth,tileHeight,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	haxepunk_masks_Hitbox.call(this);
	if(width == 0 || height == 0 || tileWidth == 0 || tileHeight == 0) {
		throw haxe_Exception.thrown("Illegal Grid, sizes cannot be 0.");
	}
	this._rect = haxepunk_HXP.rect;
	this._point = haxepunk_HXP.point;
	this._point2 = haxepunk_HXP.point2;
	this.columns = width / tileWidth | 0;
	this.rows = height / tileHeight | 0;
	this._tile = new haxepunk_math_Rectangle(0,0,tileWidth,tileHeight);
	this._x = x;
	this._y = y;
	this._width = width;
	this._height = height;
	this.usePositions = false;
	var this1 = this._check;
	var key = haxepunk_Mask.__name__;
	this1.h[key] = $bind(this,this.collideMask);
	var this1 = this._check;
	var key = haxepunk_masks_Hitbox.__name__;
	this1.h[key] = $bind(this,this.collideHitbox);
	this.data = [];
	var _g = 0;
	var _g1 = this.rows;
	while(_g < _g1) {
		var x = _g++;
		this.data.push([]);
		var _g2 = 0;
		var _g3 = this.columns;
		while(_g2 < _g3) {
			var y = _g2++;
			this.data[x][y] = haxepunk_masks_SlopedGrid._emptyTile;
		}
	}
};
$hxClasses["haxepunk.masks.SlopedGrid"] = haxepunk_masks_SlopedGrid;
haxepunk_masks_SlopedGrid.__name__ = "haxepunk.masks.SlopedGrid";
haxepunk_masks_SlopedGrid.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_SlopedGrid.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	collidePoint: function(cx,cy) {
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var column = (cx - px) / this._tile.width | 0;
		var row = (cy - py) / this._tile.height | 0;
		var x = px + column * this._tile.width;
		var y = py + row * this._tile.height;
		var column1 = column;
		var row1 = row;
		if(row1 == null) {
			row1 = 0;
		}
		if(column1 == null) {
			column1 = 0;
		}
		var tile;
		if(!(column1 >= 0 && column1 < this.columns && row1 >= 0 && row1 < this.rows)) {
			tile = haxepunk_masks_SlopedGrid._emptyTile;
		} else {
			if(this.usePositions) {
				column1 = column1 / this._tile.width | 0;
				row1 = row1 / this._tile.height | 0;
			}
			tile = this.data[row1][column1];
		}
		if(tile != null) {
			if(tile.type == 1) {
				return true;
			} else if(tile.type == 2 || tile.type == 3) {
				var y1 = y;
				y1 += tile.yOffset;
				var x2 = x + this._tile.width;
				var y2 = y1 + tile.slope * this._tile.width;
				var left = (x2 - x) * (cy - y1) > (y2 - y1) * (cx - x);
				if(tile.type == 2 && !left || tile.type == 3 && left) {
					return true;
				}
			}
		}
		return false;
	}
	,collidePointInSlope: function(x1,y1,px,py,tile) {
		y1 += tile.yOffset;
		var x2 = x1 + this._tile.width;
		var y2 = y1 + tile.slope * this._tile.width;
		var left = (x2 - x1) * (py - y1) > (y2 - y1) * (px - x1);
		if(!(tile.type == 2 && !left)) {
			if(tile.type == 3) {
				return left;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,setTile: function(column,row,type,slope,yOffset) {
		if(yOffset == null) {
			yOffset = 0;
		}
		if(slope == null) {
			slope = 0;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(!(column >= 0 && column < this.columns && row >= 0 && row < this.rows)) {
			return;
		}
		if(type == null) {
			type = 1;
		}
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		if(type == null) {
			this.data[row][column] = { type : type, slope : slope, yOffset : yOffset * this._tile.height};
		} else {
			switch(type) {
			case 4:
				this.data[row][column] = { type : 2, slope : -1, yOffset : this._tile.height};
				break;
			case 5:
				this.data[row][column] = { type : 2, slope : 1, yOffset : 0};
				break;
			case 6:
				this.data[row][column] = { type : 3, slope : 1, yOffset : 0};
				break;
			case 7:
				this.data[row][column] = { type : 3, slope : -1, yOffset : this._tile.height};
				break;
			default:
				this.data[row][column] = { type : type, slope : slope, yOffset : yOffset * this._tile.height};
			}
		}
	}
	,clearTile: function(column,row) {
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		this.setTile(column,row,0);
	}
	,checkTile: function(column,row) {
		if(column >= 0 && column < this.columns && row >= 0) {
			return row < this.rows;
		} else {
			return false;
		}
	}
	,getTile: function(column,row) {
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(!(column >= 0 && column < this.columns && row >= 0 && row < this.rows)) {
			return haxepunk_masks_SlopedGrid._emptyTile;
		} else {
			if(this.usePositions) {
				column = column / this._tile.width | 0;
				row = row / this._tile.height | 0;
			}
			return this.data[row][column];
		}
	}
	,setRect: function(column,row,width,height,type,slope,yOffset) {
		if(yOffset == null) {
			yOffset = 0;
		}
		if(slope == null) {
			slope = 0;
		}
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(type == null) {
			type = 1;
		}
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
			width = width / this._tile.width | 0;
			height = height / this._tile.height | 0;
		}
		var _g = row;
		var _g1 = row + height;
		while(_g < _g1) {
			var yy = _g++;
			var _g2 = column;
			var _g3 = column + width;
			while(_g2 < _g3) {
				var xx = _g2++;
				this.setTile(xx,yy,type,slope,yOffset);
			}
		}
	}
	,clearRect: function(column,row,width,height) {
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		this.setRect(column,row,width,height,0);
	}
	,get_tileWidth: function() {
		return this._tile.width | 0;
	}
	,get_tileHeight: function() {
		return this._tile.height | 0;
	}
	,collideBox: function(opx,opy,opw,oph,px,py) {
		this._rect.x = opx - px;
		this._rect.y = opy - py;
		var startx = this._rect.x / this._tile.width | 0;
		var starty = this._rect.y / this._tile.height | 0;
		var endx = ((this._rect.x + opw - 1) / this._tile.width | 0) + 1;
		var endy = ((this._rect.y + oph - 1) / this._tile.height | 0) + 1;
		var yy = py + starty * this._tile.height;
		var _g = starty;
		var _g1 = endy;
		while(_g < _g1) {
			var dy = _g++;
			var xx = px + startx * this._tile.width;
			var _g2 = startx;
			var _g3 = endx;
			while(_g2 < _g3) {
				var dx = _g2++;
				var column = dx;
				var row = dy;
				if(row == null) {
					row = 0;
				}
				if(column == null) {
					column = 0;
				}
				var tile;
				if(!(column >= 0 && column < this.columns && row >= 0 && row < this.rows)) {
					tile = haxepunk_masks_SlopedGrid._emptyTile;
				} else {
					if(this.usePositions) {
						column = column / this._tile.width | 0;
						row = row / this._tile.height | 0;
					}
					tile = this.data[row][column];
				}
				if(tile == null) {
					continue;
				}
				switch(tile.type) {
				case 1:
					return true;
				case 2:
					var x = opx;
					var y = opy;
					if(tile.slope > 0) {
						x += opw;
					}
					x = haxepunk_math_MathUtil.clamp(x,xx,xx + (this._tile.width | 0));
					y = haxepunk_math_MathUtil.clamp(y,yy,yy + (this._tile.height | 0));
					var y1 = yy;
					y1 += tile.yOffset;
					var x2 = xx + this._tile.width;
					var y2 = y1 + tile.slope * this._tile.width;
					var left = (x2 - xx) * (y - y1) > (y2 - y1) * (x - xx);
					if(tile.type == 2 && !left || tile.type == 3 && left) {
						return true;
					}
					break;
				case 3:
					var x1 = opx;
					var y3 = opy + oph;
					if(tile.slope < 0) {
						x1 += opw;
					}
					x1 = haxepunk_math_MathUtil.clamp(x1,xx,xx + (this._tile.width | 0));
					y3 = haxepunk_math_MathUtil.clamp(y3,yy,yy + (this._tile.height | 0));
					var y11 = yy;
					y11 += tile.yOffset;
					var x21 = xx + this._tile.width;
					var y21 = y11 + tile.slope * this._tile.width;
					var left1 = (x21 - xx) * (y3 - y11) > (y21 - y11) * (x1 - xx);
					if(tile.type == 2 && !left1 || tile.type == 3 && left1) {
						return true;
					}
					break;
				default:
				}
				xx += this._tile.width;
			}
			yy += this._tile.height;
		}
		return false;
	}
	,collideMask: function(other) {
		var x = this._x + this._parent.get_x();
		var y = this._y + this._parent.get_y();
		return this.collideBox(other._parent.get_x() - other._parent.originX,other._parent.get_y() - other._parent.originY,other._parent.get_width(),other._parent.get_height(),this._parent.get_x() + this._parent.originX,this._parent.get_y() + this._parent.originY);
	}
	,collideHitbox: function(other) {
		var x = this._x + this._parent.get_x();
		var y = this._y + this._parent.get_y();
		var ox = other._x + other._parent.get_x();
		var oy = other._y + other._parent.get_y();
		return this.collideBox(ox,oy,other._width,other._height,x,y);
	}
	,debugDraw: function(camera) {
		if(haxepunk_Mask.drawContext == null) {
			haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
			haxepunk_Mask.drawContext.lineThickness = 2;
		}
		var dc = haxepunk_Mask.drawContext;
		var scaleX = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var scaleY = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		var cellX;
		var stepX = (this._tile.width | 0) * scaleX;
		var stepY = (this._tile.height | 0) * scaleY;
		var px = this._x + this._parent.get_x() - camera.x;
		var py = this._y + this._parent.get_y() - camera.y;
		var startx = Math.floor(-px / (this._tile.width | 0));
		var starty = Math.floor(-py / (this._tile.height | 0));
		var destx = startx + 1 + Math.ceil(haxepunk_HXP.width / (this._tile.width | 0));
		var desty = starty + 1 + Math.ceil(haxepunk_HXP.height / (this._tile.height | 0));
		if(startx > this.columns || starty > this.rows || destx < 0 || desty < 0) {
			return;
		}
		if(startx < 0) {
			startx = 0;
		}
		if(destx > this.columns) {
			destx = this.columns;
		}
		if(starty < 0) {
			starty = 0;
		}
		if(desty > this.rows) {
			desty = this.rows;
		}
		px = (px + startx * (this._tile.width | 0)) * scaleX;
		py = (py + starty * (this._tile.height | 0)) * scaleY;
		dc.lineThickness = 2;
		var row;
		var cellY = py;
		var _g = starty;
		var _g1 = desty;
		while(_g < _g1) {
			var y = _g++;
			cellX = px;
			row = this.data[y];
			var _g2 = startx;
			var _g3 = destx;
			while(_g2 < _g3) {
				var x = _g2++;
				var tile = row[x];
				if(tile != null) {
					if(tile.type == 1) {
						var color = 16777215;
						var alpha = 0.3;
						if(alpha == null) {
							alpha = 1;
						}
						if(color == null) {
							color = 16777215;
						}
						dc.color = color;
						dc.alpha = alpha;
						dc.rect(cellX,cellY,stepX,stepY);
						var color1 = 255;
						var alpha1 = 1;
						if(alpha1 == null) {
							alpha1 = 1;
						}
						if(color1 == null) {
							color1 = 16777215;
						}
						dc.color = color1;
						dc.alpha = alpha1;
						if(x < this.columns - 1 && row[x + 1].type == 0) {
							dc.line(cellX + stepX,cellY,cellX + stepX,cellY + stepY);
						}
						if(x > 0 && row[x - 1].type == 0) {
							dc.line(cellX,cellY,cellX,cellY + stepY);
						}
						if(y < this.rows - 1 && this.data[y + 1][x].type == 0) {
							dc.line(cellX,cellY + stepY,cellX + stepX,cellY + stepY);
						}
						if(y > 0 && this.data[y - 1][x].type == 0) {
							dc.line(cellX,cellY,cellX + stepX,cellY);
						}
					} else if(tile.type == 3 || tile.type == 2) {
						var offset = tile.yOffset * scaleY;
						var slope = tile.slope * scaleY / scaleX;
						var xpos = cellX;
						var endx = stepX;
						var ypos = cellY + offset;
						var endy = slope * endx;
						if(offset < 0) {
							var fx = -offset / slope;
							endx = stepX - fx;
							xpos = cellX + fx;
							ypos = cellY;
							if(y <= 0 || this.data[y - 1][x].type == 1) {
								dc.line(cellX,ypos,xpos,ypos);
							}
						} else if(offset > stepY) {
							var fx1 = -(offset - stepX) / slope;
							endx = stepX - fx1;
							xpos = cellX + fx1;
							ypos = cellY + stepY;
							if(y >= this.rows - 1 || this.data[y + 1][x].type == 1) {
								dc.line(cellX,ypos,xpos,ypos);
							}
						} else if(offset + endy < 0) {
							var fx2 = -offset / slope;
							endx = fx2;
							if(y <= 0 || this.data[y - 1][x].type == 1) {
								dc.line(cellX + fx2,cellY,cellX + stepX,cellY);
							}
						} else if(offset + endy > stepY) {
							var fx3 = -(offset - stepX) / slope;
							endx = fx3;
							if(y >= this.rows - 1 || this.data[y + 1][x].type == 1) {
								dc.line(cellX + fx3,cellY + stepY,cellX + stepX,cellY + stepY);
							}
						}
						endy = slope * endx;
						dc.line(xpos,ypos,xpos + endx,ypos + endy);
					}
				}
				cellX += stepX;
			}
			cellY += stepY;
		}
	}
	,__class__: haxepunk_masks_SlopedGrid
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{get_tileHeight:"get_tileHeight",get_tileWidth:"get_tileWidth"})
});
var haxepunk_math_MakeConvex = function() { };
$hxClasses["haxepunk.math.MakeConvex"] = haxepunk_math_MakeConvex;
haxepunk_math_MakeConvex.__name__ = "haxepunk.math.MakeConvex";
haxepunk_math_MakeConvex.findInvalid = function(p) {
	var invalidVertices = [];
	var np = p.length;
	var _g = 0;
	var _g1 = np;
	while(_g < _g1) {
		var currentVIndex = _g++;
		var currentV = p[currentVIndex];
		var nextV = p[(currentVIndex + 1) % np];
		var nextNextV = p[(currentVIndex + 2) % np];
		var currentEdge = haxepunk_math_Point.subR(nextV,currentV);
		var nextEdge = haxepunk_math_Point.subR(nextNextV,nextV);
		if(haxepunk_math_Point.dot(haxepunk_math_Point.orthoR(currentEdge),nextEdge) < 0) {
			invalidVertices.push((currentVIndex + 1) % np);
		}
	}
	return invalidVertices;
};
haxepunk_math_MakeConvex.run = function(polygon) {
	var p = polygon.slice();
	var r = [];
	var invalidVertices = haxepunk_math_MakeConvex.findInvalid(p);
	var np = p.length;
	var n = invalidVertices.length;
	while(true) {
		n = invalidVertices.length;
		if(!(n > 0)) {
			break;
		}
		var startIndex = 0;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			if(n == 1 || (invalidVertices[i] + 1) % np != invalidVertices[(i + 1) % n]) {
				startIndex = invalidVertices[i];
				break;
			}
		}
		var startVertex = p[startIndex];
		var firstEdge = haxepunk_math_Point.subR(p[(startIndex + 1) % np],startVertex);
		var found = false;
		var target = 0;
		var _g2 = 2;
		var _g3 = np;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var curIndex = (startIndex + i1) % np;
			var curVertex = p[curIndex];
			if(invalidVertices.indexOf(curIndex) > -1) {
				found = true;
				target = curIndex;
			} else if(haxepunk_math_Point.dot(haxepunk_math_Point.orthoR(haxepunk_math_Point.subR(startVertex,curVertex)),firstEdge) < 0) {
				found = true;
				target = (startIndex + i1 - 1) % np;
			}
			if(found) {
				var newPoly = [];
				var k = startIndex;
				while(true) {
					newPoly.push(p[k]);
					if(k == target) {
						break;
					}
					k = (k + 1) % np;
				}
				r.push(newPoly);
				var _g4 = [];
				var _g5 = 0;
				var _g6 = p;
				while(_g5 < _g6.length) {
					var v = _g6[_g5];
					++_g5;
					if(newPoly.indexOf(v) == -1 || v == startVertex || v == p[target]) {
						_g4.push(v);
					}
				}
				p = _g4;
				np = p.length;
				invalidVertices = haxepunk_math_MakeConvex.findInvalid(p);
				if(invalidVertices.length == 0) {
					r.push(p);
				}
				break;
			}
		}
	}
	if(r.length == 0) {
		return [polygon];
	} else {
		return r;
	}
};
var haxepunk_math_Point = {};
haxepunk_math_Point._new = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var this1 = { x : x1, y : y1};
	var this2 = this1;
	return this2;
};
haxepunk_math_Point.fromStruct = function(v) {
	return haxepunk_math_Point._new(v.x,v.y);
};
haxepunk_math_Point.addR = function(this1,b) {
	return haxepunk_math_Point._new(this1.x + b.x,this1.y + b.y);
};
haxepunk_math_Point.subR = function(this1,b) {
	return haxepunk_math_Point.addR(this1,haxepunk_math_Point.negR(b));
};
haxepunk_math_Point.negR = function(this1) {
	return haxepunk_math_Point._new(-this1.x,-this1.y);
};
haxepunk_math_Point.dot = function(this1,b) {
	return this1.x * b.x + this1.y * b.y;
};
haxepunk_math_Point.orthoR = function(this1) {
	return haxepunk_math_Point._new(this1.y,-this1.x);
};
var haxepunk_math_MathUtil = function() { };
$hxClasses["haxepunk.math.MathUtil"] = haxepunk_math_MathUtil;
haxepunk_math_MathUtil.__name__ = "haxepunk.math.MathUtil";
haxepunk_math_MathUtil.__properties__ = {get_RAD:"get_RAD",get_DEG:"get_DEG",get_NUMBER_MAX_VALUE:"get_NUMBER_MAX_VALUE"};
haxepunk_math_MathUtil.get_NUMBER_MAX_VALUE = function() {
	return 179 * Math.pow(10,306);
};
haxepunk_math_MathUtil.get_DEG = function() {
	return -180 / Math.PI;
};
haxepunk_math_MathUtil.get_RAD = function() {
	return Math.PI / -180;
};
haxepunk_math_MathUtil.sign = function(value) {
	if(value < 0) {
		return -1;
	} else if(value > 0) {
		return 1;
	} else {
		return 0;
	}
};
haxepunk_math_MathUtil.approach = function(value,target,amount) {
	if(value < target - amount) {
		return value + amount;
	} else if(value > target + amount) {
		return value - amount;
	} else {
		return target;
	}
};
haxepunk_math_MathUtil.lerp = function(a,b,t) {
	if(t == null) {
		t = 1;
	}
	return a + (b - a) * t;
};
haxepunk_math_MathUtil.ilerp = function(a,b,t) {
	if(t == null) {
		t = 1;
	}
	var t1 = t;
	if(t1 == null) {
		t1 = 1;
	}
	return Math.round(a + (b - a) * t1) | 0;
};
haxepunk_math_MathUtil.stepTowards = function(object,x,y,distance) {
	if(distance == null) {
		distance = 1;
	}
	haxepunk_math_MathUtil.point.x = x - object.x;
	haxepunk_math_MathUtil.point.y = y - object.y;
	var this1 = haxepunk_math_MathUtil.point;
	if(Math.sqrt(this1.x * this1.x + this1.y * this1.y) <= distance) {
		object.x = x;
		object.y = y;
		return;
	}
	var this1 = haxepunk_math_MathUtil.point;
	var size = distance;
	if(size == null) {
		size = 1;
	}
	if(!(this1.x == 0 && this1.y == 0)) {
		var normal = size / Math.sqrt(this1.x * this1.x + this1.y * this1.y);
		this1.x *= normal;
		this1.y *= normal;
	}
	object.x += haxepunk_math_MathUtil.point.x;
	object.y += haxepunk_math_MathUtil.point.y;
};
haxepunk_math_MathUtil.anchorTo = function(object,anchor,distance) {
	if(distance == null) {
		distance = 0;
	}
	haxepunk_math_MathUtil.point.x = object.x - anchor.x;
	haxepunk_math_MathUtil.point.y = object.y - anchor.y;
	var this1 = haxepunk_math_MathUtil.point;
	if(Math.sqrt(this1.x * this1.x + this1.y * this1.y) > distance) {
		var this1 = haxepunk_math_MathUtil.point;
		var size = distance;
		if(size == null) {
			size = 1;
		}
		if(!(this1.x == 0 && this1.y == 0)) {
			var normal = size / Math.sqrt(this1.x * this1.x + this1.y * this1.y);
			this1.x *= normal;
			this1.y *= normal;
		}
	}
	object.x = anchor.x + haxepunk_math_MathUtil.point.x;
	object.y = anchor.y + haxepunk_math_MathUtil.point.y;
};
haxepunk_math_MathUtil.angle = function(x1,y1,x2,y2) {
	var a = Math.atan2(y2 - y1,x2 - x1) * (-180 / Math.PI);
	if(a < 0) {
		return a + 360;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.angleXY = function(object,angle,length,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(length == null) {
		length = 1;
	}
	angle *= Math.PI / -180;
	object.x = Math.cos(angle) * length + x;
	object.y = Math.sin(angle) * length + y;
};
haxepunk_math_MathUtil.angleDifference = function(angle1,angle2) {
	var diff = angle2 - angle1;
	while(diff < -180) diff += 360;
	while(diff > 180) diff -= 360;
	return diff;
};
haxepunk_math_MathUtil.rotateAround = function(object,anchor,angle,relative) {
	if(relative == null) {
		relative = true;
	}
	if(angle == null) {
		angle = 0;
	}
	if(relative) {
		var a = Math.atan2(object.y - anchor.y,object.x - anchor.x) * (-180 / Math.PI);
		angle += a < 0 ? a + 360 : a;
	}
	var angle1 = angle;
	var x1 = anchor.x;
	var y1 = anchor.y;
	var x2 = object.x;
	var y2 = object.y;
	if(y2 == null) {
		y2 = 0;
	}
	if(x2 == null) {
		x2 = 0;
	}
	var length = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	var x = anchor.x;
	var y = anchor.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(length == null) {
		length = 1;
	}
	angle1 *= Math.PI / -180;
	object.x = Math.cos(angle1) * length + x;
	object.y = Math.sin(angle1) * length + y;
};
haxepunk_math_MathUtil.roundTo = function(num,precision) {
	if(precision == null) {
		precision = 0;
	}
	var exp = Math.pow(10,precision);
	return Math.round(num * exp) / exp;
};
haxepunk_math_MathUtil.distance = function(x1,y1,x2,y2) {
	if(y2 == null) {
		y2 = 0;
	}
	if(x2 == null) {
		x2 = 0;
	}
	return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
};
haxepunk_math_MathUtil.distanceSquared = function(x1,y1,x2,y2) {
	if(y2 == null) {
		y2 = 0;
	}
	if(x2 == null) {
		x2 = 0;
	}
	return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
};
haxepunk_math_MathUtil.distanceRects = function(x1,y1,w1,h1,x2,y2,w2,h2) {
	if(x1 < x2 + w2 && x2 < x1 + w1) {
		if(y1 < y2 + h2 && y2 < y1 + h1) {
			return 0;
		}
		if(y1 > y2) {
			return y1 - (y2 + h2);
		}
		return y2 - (y1 + h1);
	}
	if(y1 < y2 + h2 && y2 < y1 + h1) {
		if(x1 > x2) {
			return x1 - (x2 + w2);
		}
		return x2 - (x1 + w1);
	}
	if(x1 > x2) {
		if(y1 > y2) {
			var x21 = x2 + w2;
			var y21 = y2 + h2;
			if(y21 == null) {
				y21 = 0;
			}
			if(x21 == null) {
				x21 = 0;
			}
			return Math.sqrt((x21 - x1) * (x21 - x1) + (y21 - y1) * (y21 - y1));
		}
		var y11 = y1 + h1;
		var x21 = x2 + w2;
		var y21 = y2;
		if(y21 == null) {
			y21 = 0;
		}
		if(x21 == null) {
			x21 = 0;
		}
		return Math.sqrt((x21 - x1) * (x21 - x1) + (y21 - y11) * (y21 - y11));
	}
	if(y1 > y2) {
		var x11 = x1 + w1;
		var x21 = x2;
		var y21 = y2 + h2;
		if(y21 == null) {
			y21 = 0;
		}
		if(x21 == null) {
			x21 = 0;
		}
		return Math.sqrt((x21 - x11) * (x21 - x11) + (y21 - y1) * (y21 - y1));
	}
	var x11 = x1 + w1;
	var y11 = y1 + h1;
	var x21 = x2;
	var y21 = y2;
	if(y21 == null) {
		y21 = 0;
	}
	if(x21 == null) {
		x21 = 0;
	}
	return Math.sqrt((x21 - x11) * (x21 - x11) + (y21 - y11) * (y21 - y11));
};
haxepunk_math_MathUtil.distanceRectPoint = function(px,py,rx,ry,rw,rh) {
	if(px >= rx && px <= rx + rw) {
		if(py >= ry && py <= ry + rh) {
			return 0;
		}
		if(py > ry) {
			return py - (ry + rh);
		}
		return ry - py;
	}
	if(py >= ry && py <= ry + rh) {
		if(px > rx) {
			return px - (rx + rw);
		}
		return rx - px;
	}
	if(px > rx) {
		if(py > ry) {
			var x2 = rx + rw;
			var y2 = ry + rh;
			if(y2 == null) {
				y2 = 0;
			}
			if(x2 == null) {
				x2 = 0;
			}
			return Math.sqrt((x2 - px) * (x2 - px) + (y2 - py) * (y2 - py));
		}
		var x2 = rx + rw;
		var y2 = ry;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		return Math.sqrt((x2 - px) * (x2 - px) + (y2 - py) * (y2 - py));
	}
	if(py > ry) {
		var x2 = rx;
		var y2 = ry + rh;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		return Math.sqrt((x2 - px) * (x2 - px) + (y2 - py) * (y2 - py));
	}
	var x2 = rx;
	var y2 = ry;
	if(y2 == null) {
		y2 = 0;
	}
	if(x2 == null) {
		x2 = 0;
	}
	return Math.sqrt((x2 - px) * (x2 - px) + (y2 - py) * (y2 - py));
};
haxepunk_math_MathUtil.clamp = function(value,min,max) {
	if(max > min) {
		if(value < min) {
			return min;
		} else if(value > max) {
			return max;
		} else {
			return value;
		}
	} else if(value < max) {
		return max;
	} else if(value > min) {
		return min;
	} else {
		return value;
	}
};
haxepunk_math_MathUtil.iclamp = function(value,min,max) {
	if(max > min) {
		if(value < min) {
			return min;
		} else if(value > max) {
			return max;
		} else {
			return value;
		}
	} else if(value < max) {
		return max;
	} else if(value > min) {
		return min;
	} else {
		return value;
	}
};
haxepunk_math_MathUtil.clampInRect = function(object,x,y,width,height,padding) {
	if(padding == null) {
		padding = 0;
	}
	object.x = haxepunk_math_MathUtil.clamp(object.x,x + padding,x + width - padding);
	object.y = haxepunk_math_MathUtil.clamp(object.y,y + padding,y + height - padding);
};
haxepunk_math_MathUtil.scale = function(value,min,max,min2,max2) {
	return min2 + (value - min) / (max - min) * (max2 - min2);
};
haxepunk_math_MathUtil.scaleClamp = function(value,min,max,min2,max2) {
	value = min2 + (value - min) / (max - min) * (max2 - min2);
	if(max2 > min2) {
		if(!(value < max2)) {
			value = max2;
		}
		if(value > min2) {
			return value;
		} else {
			return min2;
		}
	}
	if(!(value < min2)) {
		value = min2;
	}
	if(value > max2) {
		return value;
	} else {
		return max2;
	}
};
haxepunk_math_MathUtil.iround = function(f) {
	return Math.round(f) | 0;
};
haxepunk_math_MathUtil.abs = function(f) {
	if(f < 0) {
		return -f;
	} else {
		return f;
	}
};
haxepunk_math_MathUtil.iabs = function(i) {
	if(i < 0) {
		return -i;
	} else {
		return i;
	}
};
haxepunk_math_MathUtil.max = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.maxOf3 = function(a,b,c) {
	if(a < b) {
		if(b < c) {
			return c;
		} else {
			return b;
		}
	} else if(a < c) {
		return c;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.imax = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.min = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.minOf3 = function(a,b,c) {
	if(a > b) {
		if(b > c) {
			return c;
		} else {
			return b;
		}
	} else if(a > c) {
		return c;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.imin = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
haxepunk_math_MathUtil.sin = function(theta) {
	return Math.sin(theta);
};
haxepunk_math_MathUtil.cos = function(theta) {
	return Math.cos(theta);
};
haxepunk_math_MathUtil.tan = function(theta) {
	return Math.tan(theta);
};
haxepunk_math_MathUtil.acos = function(theta) {
	return Math.acos(theta);
};
haxepunk_math_MathUtil.asin = function(theta) {
	return Math.asin(theta);
};
haxepunk_math_MathUtil.atan = function(theta) {
	return Math.atan(theta);
};
haxepunk_math_MathUtil.atan2 = function(dy,dx) {
	return Math.atan2(dy,dx);
};
haxepunk_math_MathUtil.sqrt = function(f) {
	return Math.sqrt(f);
};
haxepunk_math_MathUtil.floor = function(f) {
	return Math.floor(f);
};
haxepunk_math_MathUtil.ceil = function(f) {
	return Math.ceil(f);
};
haxepunk_math_MathUtil.random = function() {
	return Math.random();
};
haxepunk_math_MathUtil.round = function(f) {
	return Math.round(f);
};
haxepunk_math_MathUtil.roundDecimal = function(f,places) {
	return (f * Math.pow(10,places) | 0) / Math.pow(10,places);
};
haxepunk_math_MathUtil.pow = function(v,p) {
	return Math.pow(v,p);
};
haxepunk_math_MathUtil.log = function(v) {
	return Math.log(v);
};
var haxepunk_math_Random = function() { };
$hxClasses["haxepunk.math.Random"] = haxepunk_math_Random;
haxepunk_math_Random.__name__ = "haxepunk.math.Random";
haxepunk_math_Random.__properties__ = {get_random:"get_random",set_randomSeed:"set_randomSeed",get_randomSeed:"get_randomSeed"};
haxepunk_math_Random.get_randomSeed = function() {
	return haxepunk_math_Random._seed;
};
haxepunk_math_Random.set_randomSeed = function(value) {
	haxepunk_math_Random._seed = haxepunk_math_MathUtil.clamp(value,1.0,2147483646) | 0;
	return haxepunk_math_Random._seed;
};
haxepunk_math_Random.randomizeSeed = function() {
	haxepunk_math_Random._seed = haxepunk_math_MathUtil.clamp(2147483647 * Math.random() | 0,1.0,2147483646) | 0;
};
haxepunk_math_Random.get_random = function() {
	haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
	return haxepunk_math_Random._seed / 2147483647;
};
haxepunk_math_Random.randInt = function(amount) {
	haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
	return haxepunk_math_Random._seed / 2147483647 * amount | 0;
};
var haxepunk_math_Vector2 = {};
haxepunk_math_Vector2.__properties__ = {set_length:"set_length",get_length:"get_length"};
haxepunk_math_Vector2._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	return this1;
};
haxepunk_math_Vector2.fromObj = function(obj) {
	var x = obj.get_x();
	var y = obj.get_y();
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	return this1;
};
haxepunk_math_Vector2.get_length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
haxepunk_math_Vector2.set_length = function(this1,value) {
	var size = value;
	if(size == null) {
		size = 1;
	}
	if(!(this1.x == 0 && this1.y == 0)) {
		var normal = size / Math.sqrt(this1.x * this1.x + this1.y * this1.y);
		this1.x *= normal;
		this1.y *= normal;
	}
	return value;
};
haxepunk_math_Vector2.setTo = function(this1,x,y) {
	this1.x = x;
	this1.y = y;
	return this1;
};
haxepunk_math_Vector2.perpendicular = function(this1) {
	haxepunk_math_Vector2.setTo(this1,-this1.y,this1.x);
	return this1;
};
haxepunk_math_Vector2.inverse = function(this1) {
	this1.x = -this1.x;
	this1.y = -this1.y;
	return this1;
};
haxepunk_math_Vector2.neg = function(this1) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x = -this2.x;
	this2.y = -this2.y;
	return this2;
};
haxepunk_math_Vector2.copyFrom = function(this1,other) {
	this1.x = other.x;
	this1.y = other.y;
	return this1;
};
haxepunk_math_Vector2.scale = function(this1,scalar) {
	this1.x *= scalar;
	this1.y *= scalar;
	return this1;
};
haxepunk_math_Vector2.mult = function(this1,scalar) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x *= scalar;
	this2.y *= scalar;
	return this2;
};
haxepunk_math_Vector2.div = function(this1,scalar) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	var scalar1 = 1 / scalar;
	this2.x *= scalar1;
	this2.y *= scalar1;
	return this2;
};
haxepunk_math_Vector2.add = function(this1,other) {
	this1.x += other.x;
	this1.y += other.y;
	return this1;
};
haxepunk_math_Vector2.plus = function(this1,other) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x += other.x;
	this2.y += other.y;
	return this2;
};
haxepunk_math_Vector2.subtract = function(this1,other) {
	this1.x -= other.x;
	this1.y -= other.y;
	return this1;
};
haxepunk_math_Vector2.minus = function(this1,other) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x -= other.x;
	this2.y -= other.y;
	return this2;
};
haxepunk_math_Vector2.distance = function(this1,other) {
	var dx = this1.x - other.x;
	var dy = this1.y - other.y;
	return Math.sqrt(dx * dx + dy * dy);
};
haxepunk_math_Vector2.normalize = function(this1,size) {
	if(size == null) {
		size = 1;
	}
	if(!(this1.x == 0 && this1.y == 0)) {
		var normal = size / Math.sqrt(this1.x * this1.x + this1.y * this1.y);
		this1.x *= normal;
		this1.y *= normal;
	}
	return this1;
};
haxepunk_math_Vector2.rotate = function(this1,angle) {
	var sin = Math.sin(angle);
	var cos = Math.cos(angle);
	haxepunk_math_Vector2.setTo(this1,cos * this1.x - sin * this1.y,sin * this1.x + cos * this1.y);
	return this1;
};
haxepunk_math_Vector2.rotated = function(this1,angle) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	var sin = Math.sin(angle);
	var cos = Math.cos(angle);
	haxepunk_math_Vector2.setTo(this2,cos * this2.x - sin * this2.y,sin * this2.x + cos * this2.y);
	return this2;
};
haxepunk_math_Vector2.dot = function(this1,other) {
	return this1.x * other.x + this1.y * other.y;
};
haxepunk_math_Vector2.zcross = function(this1,other) {
	return this1.x * other.y - this1.y * other.x;
};
haxepunk_math_Vector2.clone = function(this1) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	return this1;
};
var haxepunk_screen_ScaleMode = function(integer) {
	if(integer == null) {
		integer = false;
	}
	this.baseHeight = 0;
	this.baseWidth = 0;
	this.integer = false;
	this.integer = integer;
	this.setBaseSize(haxepunk_HXP.width,haxepunk_HXP.height);
};
$hxClasses["haxepunk.screen.ScaleMode"] = haxepunk_screen_ScaleMode;
haxepunk_screen_ScaleMode.__name__ = "haxepunk.screen.ScaleMode";
haxepunk_screen_ScaleMode.prototype = {
	setBaseSize: function(width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(width == -1) {
			width = haxepunk_HXP.width;
		}
		if(height == -1) {
			height = haxepunk_HXP.height;
		}
		this.baseWidth = width;
		this.baseHeight = height;
	}
	,resize: function(stageWidth,stageHeight) {
		haxepunk_HXP.screen.x = haxepunk_HXP.screen.y = 0;
		haxepunk_HXP.screen.set_scaleX(stageWidth / this.baseWidth);
		haxepunk_HXP.screen.set_scaleY(stageHeight / this.baseHeight);
		haxepunk_HXP.screen.width = stageWidth;
		haxepunk_HXP.screen.height = stageHeight;
		if(this.integer) {
			haxepunk_HXP.screen.set_scaleX(Math.max(1,haxepunk_HXP.screen.scaleX) | 0);
			haxepunk_HXP.screen.set_scaleY(Math.max(1,haxepunk_HXP.screen.scaleY) | 0);
		}
	}
	,__class__: haxepunk_screen_ScaleMode
};
var haxepunk_screen_UniformScaleMode = function(type,integer) {
	if(integer == null) {
		integer = false;
	}
	if(type == null) {
		type = 1;
	}
	haxepunk_screen_ScaleMode.call(this,integer);
	this.type = type;
};
$hxClasses["haxepunk.screen.UniformScaleMode"] = haxepunk_screen_UniformScaleMode;
haxepunk_screen_UniformScaleMode.__name__ = "haxepunk.screen.UniformScaleMode";
haxepunk_screen_UniformScaleMode.__super__ = haxepunk_screen_ScaleMode;
haxepunk_screen_UniformScaleMode.prototype = $extend(haxepunk_screen_ScaleMode.prototype,{
	resize: function(stageWidth,stageHeight) {
		var scaleX = stageWidth / this.baseWidth;
		var scaleY = stageHeight / this.baseHeight;
		var zoomIn = this.type == 0;
		var expand = this.type == 1;
		var scale = zoomIn ? Math.max(scaleX,scaleY) : Math.min(scaleX,scaleY);
		if(this.integer) {
			scale = (zoomIn ? Math.ceil(scale) : Math.floor(scale)) | 0;
			if(scale < 1) {
				scale = 1;
			}
		}
		haxepunk_HXP.screen.set_scaleX(haxepunk_HXP.screen.set_scaleY(scale));
		switch(this.type) {
		case 0:case 1:
			haxepunk_HXP.screen.x = haxepunk_HXP.screen.y = 0;
			haxepunk_HXP.screen.width = stageWidth;
			haxepunk_HXP.screen.height = stageHeight;
			break;
		case 2:
			haxepunk_HXP.screen.width = this.baseWidth * scale | 0;
			haxepunk_HXP.screen.height = this.baseHeight * scale | 0;
			haxepunk_HXP.screen.x = (stageWidth - haxepunk_HXP.screen.width) / 2 | 0;
			haxepunk_HXP.screen.y = (stageHeight - haxepunk_HXP.screen.height) / 2 | 0;
			break;
		}
	}
	,__class__: haxepunk_screen_UniformScaleMode
});
var haxepunk_tweens_misc_Alarm = function(duration,complete,type) {
	haxepunk_Tween.call(this,duration,type,complete);
};
$hxClasses["haxepunk.tweens.misc.Alarm"] = haxepunk_tweens_misc_Alarm;
haxepunk_tweens_misc_Alarm.__name__ = "haxepunk.tweens.misc.Alarm";
haxepunk_tweens_misc_Alarm.__super__ = haxepunk_Tween;
haxepunk_tweens_misc_Alarm.prototype = $extend(haxepunk_Tween.prototype,{
	reset: function(duration) {
		this._target = duration;
		this.start();
	}
	,get_elapsed: function() {
		return this._time;
	}
	,get_duration: function() {
		return this._target;
	}
	,get_remaining: function() {
		return this._target - this._time;
	}
	,__class__: haxepunk_tweens_misc_Alarm
	,__properties__: $extend(haxepunk_Tween.prototype.__properties__,{get_remaining:"get_remaining",get_duration:"get_duration",get_elapsed:"get_elapsed"})
});
var haxepunk_tweens_misc_MultiVarTween = function(type) {
	this._vars = [];
	this._start = [];
	this._range = [];
	haxepunk_Tween.call(this,0,type);
};
$hxClasses["haxepunk.tweens.misc.MultiVarTween"] = haxepunk_tweens_misc_MultiVarTween;
haxepunk_tweens_misc_MultiVarTween.__name__ = "haxepunk.tweens.misc.MultiVarTween";
haxepunk_tweens_misc_MultiVarTween.__super__ = haxepunk_Tween;
haxepunk_tweens_misc_MultiVarTween.prototype = $extend(haxepunk_Tween.prototype,{
	tween: function(object,properties,duration,ease) {
		this._object = object;
		this._vars.length = 0;
		this._start.length = 0;
		this._range.length = 0;
		this._target = duration;
		this._ease = ease;
		var p;
		var fields = null;
		if(Reflect.isObject(properties)) {
			fields = Reflect.fields(properties);
		} else {
			throw haxe_Exception.thrown("Unsupported MultiVar properties container - use Object containing key/value pairs.");
		}
		var _g = 0;
		while(_g < fields.length) {
			var p = fields[_g];
			++_g;
			var a = Reflect.getProperty(object,p);
			if(isNaN(a)) {
				throw haxe_Exception.thrown("The property " + p + " is not numeric.");
			}
			this._vars.push(p);
			this._start.push(a);
			this._range.push(Reflect.field(properties,p) - a);
		}
		this.start();
	}
	,updateInternal: function() {
		var i = this._vars.length;
		while(i-- > 0) Reflect.setProperty(this._object,this._vars[i],this._start[i] + this._range[i] * this._t);
	}
	,__class__: haxepunk_tweens_misc_MultiVarTween
});
var haxepunk_tweens_sound_SfxFader = function(sfx,type) {
	haxepunk_Tween.call(this,0,type);
	this._sfx = sfx;
};
$hxClasses["haxepunk.tweens.sound.SfxFader"] = haxepunk_tweens_sound_SfxFader;
haxepunk_tweens_sound_SfxFader.__name__ = "haxepunk.tweens.sound.SfxFader";
haxepunk_tweens_sound_SfxFader.__super__ = haxepunk_Tween;
haxepunk_tweens_sound_SfxFader.prototype = $extend(haxepunk_Tween.prototype,{
	fadeTo: function(volume,duration,ease) {
		if(volume < 0) {
			volume = 0;
		}
		this._start = this._sfx.get_volume();
		this._range = volume - this._start;
		this._target = duration;
		this._ease = ease;
		this.start();
	}
	,update: function(elapsed) {
		haxepunk_Tween.prototype.update.call(this,elapsed);
	}
	,crossFade: function(play,loop,duration,volume,ease) {
		if(volume == null) {
			volume = 1;
		}
		this._crossSfx = play;
		this._crossRange = volume;
		this._start = this._sfx.get_volume();
		this._range = -this._start;
		this._target = duration;
		this._ease = ease;
		if(loop) {
			this._crossSfx.loop(0);
		} else {
			this._crossSfx.play(0);
		}
		this.start();
	}
	,updateInternal: function() {
		if(this._sfx != null) {
			this._sfx.set_volume(this._start + this._range * this._t);
		}
		if(this._crossSfx != null) {
			this._crossSfx.set_volume(this._crossRange * this._t);
		}
	}
	,finish: function() {
		haxepunk_Tween.prototype.finish.call(this);
		if(this._crossSfx != null) {
			if(this._sfx != null) {
				this._sfx.stop();
			}
			this._sfx = this._crossSfx;
			this._crossSfx = null;
		}
	}
	,get_sfx: function() {
		return this._sfx;
	}
	,__class__: haxepunk_tweens_sound_SfxFader
	,__properties__: $extend(haxepunk_Tween.prototype.__properties__,{get_sfx:"get_sfx"})
});
var haxepunk_utils_BlendMode = {};
haxepunk_utils_BlendMode.fromFlashBlendMode = function(blend) {
	return blend;
};
var haxepunk_utils_CircularBuffer = function(len) {
	this.len = 0;
	this.pos = 0;
	var this1 = new Array(len);
	this.data = this1;
	this._iterator = new haxepunk_utils__$CircularBuffer_CircularBufferIterator(this);
};
$hxClasses["haxepunk.utils.CircularBuffer"] = haxepunk_utils_CircularBuffer;
haxepunk_utils_CircularBuffer.__name__ = "haxepunk.utils.CircularBuffer";
haxepunk_utils_CircularBuffer.prototype = {
	get_length: function() {
		return this.len;
	}
	,get_maxLength: function() {
		return this.data.length;
	}
	,get_first: function() {
		if(this.len < 1) {
			return null;
		} else {
			return this.data[this.pos % this.data.length];
		}
	}
	,get_last: function() {
		if(this.len < 1) {
			return null;
		} else {
			return this.data[(this.pos + (this.len - 1)) % this.data.length];
		}
	}
	,push: function(val) {
		this.data[(this.pos + this.len) % this.data.length] = val;
		if(this.len < this.data.length) {
			++this.len;
		} else {
			++this.pos;
		}
	}
	,pop: function() {
		if(this.len < 1) {
			return null;
		}
		return this.data[(this.pos + this.len--) % this.data.length];
	}
	,get: function(i) {
		if(i < 0 || i >= this.len) {
			return null;
		} else {
			return this.data[(this.pos + i) % this.data.length];
		}
	}
	,clear: function() {
		this.pos = this.len = 0;
	}
	,index: function(i) {
		return (this.pos + i) % this.data.length;
	}
	,iterator: function() {
		this._iterator.i = 0;
		return this._iterator;
	}
	,slice: function(start) {
		var i = start;
		if(i == null) {
			i = 0;
		}
		this._iterator.i = i;
		return this._iterator;
	}
	,__class__: haxepunk_utils_CircularBuffer
	,__properties__: {get_last:"get_last",get_first:"get_first",get_maxLength:"get_maxLength",get_length:"get_length"}
};
var haxepunk_utils__$CircularBuffer_CircularBufferIterator = function(buffer) {
	this.i = 0;
	this.buffer = buffer;
};
$hxClasses["haxepunk.utils._CircularBuffer.CircularBufferIterator"] = haxepunk_utils__$CircularBuffer_CircularBufferIterator;
haxepunk_utils__$CircularBuffer_CircularBufferIterator.__name__ = "haxepunk.utils._CircularBuffer.CircularBufferIterator";
haxepunk_utils__$CircularBuffer_CircularBufferIterator.prototype = {
	reset: function(i) {
		if(i == null) {
			i = 0;
		}
		this.i = i;
	}
	,hasNext: function() {
		return this.i < this.buffer.len;
	}
	,next: function() {
		var _this = this.buffer;
		var i = this.i++;
		if(i < 0 || i >= _this.len) {
			return null;
		} else {
			return _this.data[(_this.pos + i) % _this.data.length];
		}
	}
	,__class__: haxepunk_utils__$CircularBuffer_CircularBufferIterator
};
var haxepunk_utils_Color = {};
haxepunk_utils_Color.__properties__ = {get_alpha:"get_alpha",get_blue:"get_blue",get_green:"get_green",get_red:"get_red",get_a:"get_a",get_b:"get_b",get_g:"get_g",get_r:"get_r"};
haxepunk_utils_Color.colorLerp = function(fromColor,toColor,t) {
	if(t == null) {
		t = 1;
	}
	if(t <= 0) {
		return fromColor;
	} else if(t >= 1) {
		return toColor;
	} else {
		var a = fromColor >>> 24 & 255;
		var r = fromColor >>> 16 & 255;
		var g = fromColor >>> 8 & 255;
		var b = fromColor & 255;
		var dA = (toColor >>> 24 & 255) - a;
		var dR = (toColor >>> 16 & 255) - r;
		var dG = (toColor >>> 8 & 255) - g;
		var dB = (toColor & 255) - b;
		a += dA * t | 0;
		r += dR * t | 0;
		g += dG * t | 0;
		b += dB * t | 0;
		return a << 24 | r << 16 | g << 8 | b;
	}
};
haxepunk_utils_Color.getColorRGB = function(r,g,b) {
	if(b == null) {
		b = 0;
	}
	if(g == null) {
		g = 0;
	}
	if(r == null) {
		r = 0;
	}
	return (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
haxepunk_utils_Color.getColorRGBFloat = function(r,g,b) {
	var c = r * 256 | 0;
	var r = haxepunk_math_MathUtil.iclamp(c,0,255);
	var c = g * 256 | 0;
	var g = haxepunk_math_MathUtil.iclamp(c,0,255);
	var c = b * 256 | 0;
	var b = haxepunk_math_MathUtil.iclamp(c,0,255);
	if(b == null) {
		b = 0;
	}
	if(g == null) {
		g = 0;
	}
	if(r == null) {
		r = 0;
	}
	return (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
haxepunk_utils_Color.getColorHSV = function(h,s,v) {
	h = h * 360 | 0;
	var hi = Math.floor(h / 60) % 6;
	var f = h / 60 - Math.floor(h / 60);
	var p = v * (1 - s);
	var q = v * (1 - f * s);
	var t = v * (1 - (1 - f) * s);
	switch(hi) {
	case 0:
		return (v * 255 | 0) << 16 | (t * 255 | 0) << 8 | (p * 255 | 0);
	case 1:
		return (q * 255 | 0) << 16 | (v * 255 | 0) << 8 | (p * 255 | 0);
	case 2:
		return (p * 255 | 0) << 16 | (v * 255 | 0) << 8 | (t * 255 | 0);
	case 3:
		return (p * 255 | 0) << 16 | (q * 255 | 0) << 8 | (v * 255 | 0);
	case 4:
		return (t * 255 | 0) << 16 | (p * 255 | 0) << 8 | (v * 255 | 0);
	case 5:
		return (v * 255 | 0) << 16 | (p * 255 | 0) << 8 | (q * 255 | 0);
	default:
		return 0;
	}
};
haxepunk_utils_Color.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
haxepunk_utils_Color.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
haxepunk_utils_Color.get_b = function(this1) {
	return this1 & 255;
};
haxepunk_utils_Color.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
haxepunk_utils_Color.get_red = function(this1) {
	return UInt.toFloat(this1 >>> 16 & 255) / UInt.toFloat(255);
};
haxepunk_utils_Color.get_green = function(this1) {
	return UInt.toFloat(this1 >>> 8 & 255) / UInt.toFloat(255);
};
haxepunk_utils_Color.get_blue = function(this1) {
	return UInt.toFloat(this1 & 255) / UInt.toFloat(255);
};
haxepunk_utils_Color.get_alpha = function(this1) {
	return UInt.toFloat(this1 >>> 24 & 255) / UInt.toFloat(255);
};
haxepunk_utils_Color.withAlpha = function(this1,a) {
	var alpha = a <= 0 ? 0 : a >= 1 ? -16777216 : (255 * a | 0) << 24;
	return this1 & 16777215 | alpha;
};
haxepunk_utils_Color.getHue = function(this1) {
	var h = this1 >>> 16 & 255;
	var s = this1 >>> 8 & 255;
	var v = this1 & 255;
	var max = Math.max(h,Math.max(s,v)) | 0;
	var min = Math.min(h,Math.min(s,v)) | 0;
	var hue = 0;
	if(max == min) {
		hue = 0;
	} else if(max == h) {
		hue = (60 * (s - v) / (max - min) + 360) % 360;
	} else if(max == s) {
		hue = 60 * (v - h) / (max - min) + 120;
	} else if(max == v) {
		hue = 60 * (h - s) / (max - min) + 240;
	}
	return hue / 360;
};
haxepunk_utils_Color.getSaturation = function(this1) {
	var h = this1 >>> 16 & 255;
	var s = this1 >>> 8 & 255;
	var v = this1 & 255;
	var max = Math.max(h,Math.max(s,v)) | 0;
	if(max == 0) {
		return 0;
	} else {
		var min = Math.min(h,Math.min(s,v)) | 0;
		return (max - min) / max;
	}
};
haxepunk_utils_Color.getValue = function(this1) {
	var h = this1 >>> 16 & 255;
	var s = this1 >>> 8 & 255;
	var v = this1 & 255;
	return (Math.max(h,Math.max(s,v)) | 0) / 255;
};
haxepunk_utils_Color.getLuminance = function(this1) {
	return 0.2126 * (UInt.toFloat(this1 >>> 16 & 255) / UInt.toFloat(255)) + 0.7152 * (UInt.toFloat(this1 >>> 8 & 255) / UInt.toFloat(255)) + 0.0722 * (UInt.toFloat(this1 & 255) / UInt.toFloat(255));
};
haxepunk_utils_Color.lerp = function(this1,toColor,t) {
	if(t == null) {
		t = 1;
	}
	var t1 = t;
	if(t1 == null) {
		t1 = 1;
	}
	if(t1 <= 0) {
		return this1;
	} else if(t1 >= 1) {
		return toColor;
	} else {
		var a = this1 >>> 24 & 255;
		var r = this1 >>> 16 & 255;
		var g = this1 >>> 8 & 255;
		var b = this1 & 255;
		var dA = (toColor >>> 24 & 255) - a;
		var dR = (toColor >>> 16 & 255) - r;
		var dG = (toColor >>> 8 & 255) - g;
		var dB = (toColor & 255) - b;
		a += dA * t1 | 0;
		r += dR * t1 | 0;
		g += dG * t1 | 0;
		b += dB * t1 | 0;
		return a << 24 | r << 16 | g << 8 | b;
	}
};
haxepunk_utils_Color.multiply = function(this1,other) {
	var r = UInt.toFloat(this1 >>> 16 & 255) / UInt.toFloat(255) * (UInt.toFloat(other >>> 16 & 255) / UInt.toFloat(255));
	var g = UInt.toFloat(this1 >>> 8 & 255) / UInt.toFloat(255) * (UInt.toFloat(other >>> 8 & 255) / UInt.toFloat(255));
	var b = UInt.toFloat(this1 & 255) / UInt.toFloat(255) * (UInt.toFloat(other & 255) / UInt.toFloat(255));
	var c = r * 256 | 0;
	var r = haxepunk_math_MathUtil.iclamp(c,0,255);
	var c = g * 256 | 0;
	var g = haxepunk_math_MathUtil.iclamp(c,0,255);
	var c = b * 256 | 0;
	var b = haxepunk_math_MathUtil.iclamp(c,0,255);
	if(b == null) {
		b = 0;
	}
	if(g == null) {
		g = 0;
	}
	if(r == null) {
		r = 0;
	}
	return (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
haxepunk_utils_Color.toARGB = function(this1,alpha) {
	alpha = haxepunk_math_MathUtil.clamp(alpha,0,1);
	return (255 * alpha | 0) << 24 | this1;
};
var haxepunk_utils_Draw = function() { };
$hxClasses["haxepunk.utils.Draw"] = haxepunk_utils_Draw;
haxepunk_utils_Draw.__name__ = "haxepunk.utils.Draw";
haxepunk_utils_Draw.__properties__ = {set_lineThickness:"set_lineThickness",get_lineThickness:"get_lineThickness",set_alpha:"set_alpha",get_alpha:"get_alpha",set_color:"set_color",get_color:"get_color",set_smooth:"set_smooth",get_smooth:"get_smooth",set_shader:"set_shader",get_shader:"get_shader",set_blend:"set_blend",get_blend:"get_blend",get_instance:"get_instance"};
haxepunk_utils_Draw.get_instance = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance;
};
haxepunk_utils_Draw.get_blend = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.blend;
};
haxepunk_utils_Draw.set_blend = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.blend = v;
};
haxepunk_utils_Draw.get_shader = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.shader;
};
haxepunk_utils_Draw.set_shader = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.shader = v;
};
haxepunk_utils_Draw.get_smooth = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.smooth;
};
haxepunk_utils_Draw.set_smooth = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.smooth = v;
};
haxepunk_utils_Draw.get_color = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.color;
};
haxepunk_utils_Draw.set_color = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.color = v;
};
haxepunk_utils_Draw.get_alpha = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.alpha;
};
haxepunk_utils_Draw.set_alpha = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.alpha = v;
};
haxepunk_utils_Draw.get_lineThickness = function() {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.lineThickness;
};
haxepunk_utils_Draw.set_lineThickness = function(v) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	return haxepunk_utils_Draw.instance.lineThickness = v;
};
haxepunk_utils_Draw.setColor = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.color = color;
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.alpha = alpha;
};
haxepunk_utils_Draw.line = function(x1,y1,x2,y2) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.line(x1,y1,x2,y2);
};
haxepunk_utils_Draw.polyline = function(points,miterJoint) {
	if(miterJoint == null) {
		miterJoint = false;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.polyline(points,miterJoint);
};
haxepunk_utils_Draw.rect = function(x,y,width,height) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.rect(x,y,width,height);
};
haxepunk_utils_Draw.rectFilled = function(x,y,width,height) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.rectFilled(x,y,width,height);
};
haxepunk_utils_Draw.circle = function(x,y,radius,segments,scaleX,scaleY) {
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(segments == null) {
		segments = 25;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	var _this = haxepunk_utils_Draw.instance;
	var segments1 = segments;
	var scaleX1 = scaleX;
	var scaleY1 = scaleY;
	if(scaleY1 == null) {
		scaleY1 = 1;
	}
	if(scaleX1 == null) {
		scaleX1 = 1;
	}
	if(segments1 == null) {
		segments1 = 25;
	}
	var radians = 2 * Math.PI / segments1;
	var halfThick = _this.lineThickness / 2;
	var innerRadius = radius - halfThick;
	var outerRadius = radius + halfThick;
	var this1 = { x : 0, y : 0};
	var inner = this1;
	var this1 = { x : 0, y : 0};
	var outer = this1;
	var this1 = { x : 0, y : 0};
	var lastOuter = this1;
	var this1 = { x : 0, y : 0};
	var lastInner = this1;
	if(_this.shader == null) {
		_this.shader = new haxepunk_graphics_shader_ColorShader();
	}
	var scene = _this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : _this.scene;
	_this.command = scene.batch.getDrawCommand(null,_this.shader,_this.smooth,_this.blend,null);
	var _g = 0;
	var _g1 = segments1 + 1;
	while(_g < _g1) {
		var segment = _g++;
		var theta = segment * radians;
		var sin = Math.sin(theta);
		var cos = Math.cos(theta);
		haxepunk_math_Vector2.setTo(inner,x + sin * innerRadius * scaleX1,y + cos * innerRadius * scaleY1);
		haxepunk_math_Vector2.setTo(outer,x + sin * outerRadius * scaleX1,y + cos * outerRadius * scaleY1);
		if(segment != 0) {
			var tx1 = lastInner.x;
			var ty1 = lastInner.y;
			var tx2 = lastOuter.x;
			var ty2 = lastOuter.y;
			var tx3 = outer.x;
			var ty3 = outer.y;
			var color = _this.color;
			var alpha = _this.alpha;
			if(_this.scale) {
				tx1 *= haxepunk_HXP.screen.scaleX;
				tx2 *= haxepunk_HXP.screen.scaleX;
				tx3 *= haxepunk_HXP.screen.scaleX;
				ty1 *= haxepunk_HXP.screen.scaleY;
				ty2 *= haxepunk_HXP.screen.scaleY;
				ty3 *= haxepunk_HXP.screen.scaleY;
			}
			var _this1 = _this.command;
			if(alpha > 0) {
				var onScreen;
				if(_this1.shader.attributeNames.length <= 0) {
					var onScreen1;
					var _this2 = _this1.visibleArea;
					if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this2.x + _this2.width && (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this1.visibleArea.x) {
						var _this3 = _this1.visibleArea;
						onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this3.y + _this3.height;
					} else {
						onScreen1 = false;
					}
					onScreen = onScreen1 && (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this1.visibleArea.y;
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx1;
					data1.ty1 = ty1;
					data1.uvx1 = 0;
					data1.uvy1 = 0;
					data1.tx2 = tx2;
					data1.ty2 = ty2;
					data1.uvx2 = 0;
					data1.uvy2 = 0;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = 0;
					data1.uvy3 = 0;
					data1.color = color;
					data1.alpha = alpha;
					if(_this1.data == null) {
						_this1.data = data1;
					} else {
						_this1._lastData._next = data1;
					}
					_this1._lastData = data1;
					++_this1.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
					var a2 = data1.ty1;
					var b2 = data1.ty2;
					var c2 = data1.ty3;
					var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
					if(_this1.bounds.width == 0) {
						_this1.bounds.x = x1;
						_this1.bounds.width = x2 - x1;
					} else {
						if(x1 < _this1.bounds.x) {
							_this1.bounds.width += _this1.bounds.x - x1;
							_this1.bounds.x = x1;
						}
						var _this4 = _this1.bounds;
						if(x2 > _this4.x + _this4.width) {
							_this1.bounds.width = x2 - _this1.bounds.x;
						}
					}
					if(_this1.bounds.height == 0) {
						_this1.bounds.y = y1;
						_this1.bounds.height = y2 - y1;
					} else {
						if(y1 < _this1.bounds.y) {
							_this1.bounds.height += _this1.bounds.y - y1;
							_this1.bounds.y = y1;
						}
						var _this5 = _this1.bounds;
						if(y2 > _this5.y + _this5.height) {
							_this1.bounds.height = y2 - _this1.bounds.y;
						}
					}
				}
			}
			var tx11 = lastInner.x;
			var ty11 = lastInner.y;
			var tx21 = outer.x;
			var ty21 = outer.y;
			var tx31 = inner.x;
			var ty31 = inner.y;
			var color1 = _this.color;
			var alpha1 = _this.alpha;
			if(_this.scale) {
				tx11 *= haxepunk_HXP.screen.scaleX;
				tx21 *= haxepunk_HXP.screen.scaleX;
				tx31 *= haxepunk_HXP.screen.scaleX;
				ty11 *= haxepunk_HXP.screen.scaleY;
				ty21 *= haxepunk_HXP.screen.scaleY;
				ty31 *= haxepunk_HXP.screen.scaleY;
			}
			var _this6 = _this.command;
			if(alpha1 > 0) {
				var onScreen2;
				if(_this6.shader.attributeNames.length <= 0) {
					var onScreen3;
					var _this7 = _this6.visibleArea;
					if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this7.x + _this7.width && (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this6.visibleArea.x) {
						var _this8 = _this6.visibleArea;
						onScreen3 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this8.y + _this8.height;
					} else {
						onScreen3 = false;
					}
					onScreen2 = onScreen3 && (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this6.visibleArea.y;
				} else {
					onScreen2 = true;
				}
				if(onScreen2) {
					var data2;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data2._next = null;
					} else {
						data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data3 = data2;
					data3.tx1 = tx11;
					data3.ty1 = ty11;
					data3.uvx1 = 0;
					data3.uvy1 = 0;
					data3.tx2 = tx21;
					data3.ty2 = ty21;
					data3.uvx2 = 0;
					data3.uvy2 = 0;
					data3.tx3 = tx31;
					data3.ty3 = ty31;
					data3.uvx3 = 0;
					data3.uvy3 = 0;
					data3.color = color1;
					data3.alpha = alpha1;
					if(_this6.data == null) {
						_this6.data = data3;
					} else {
						_this6._lastData._next = data3;
					}
					_this6._lastData = data3;
					++_this6.triangleCount;
					var a4 = data3.tx1;
					var b4 = data3.tx2;
					var c4 = data3.tx3;
					var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
					var a5 = data3.tx1;
					var b5 = data3.tx2;
					var c5 = data3.tx3;
					var x21 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
					var a6 = data3.ty1;
					var b6 = data3.ty2;
					var c6 = data3.ty3;
					var y11 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
					var a7 = data3.ty1;
					var b7 = data3.ty2;
					var c7 = data3.ty3;
					var y21 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
					if(_this6.bounds.width == 0) {
						_this6.bounds.x = x11;
						_this6.bounds.width = x21 - x11;
					} else {
						if(x11 < _this6.bounds.x) {
							_this6.bounds.width += _this6.bounds.x - x11;
							_this6.bounds.x = x11;
						}
						var _this9 = _this6.bounds;
						if(x21 > _this9.x + _this9.width) {
							_this6.bounds.width = x21 - _this6.bounds.x;
						}
					}
					if(_this6.bounds.height == 0) {
						_this6.bounds.y = y11;
						_this6.bounds.height = y21 - y11;
					} else {
						if(y11 < _this6.bounds.y) {
							_this6.bounds.height += _this6.bounds.y - y11;
							_this6.bounds.y = y11;
						}
						var _this10 = _this6.bounds;
						if(y21 > _this10.y + _this10.height) {
							_this6.bounds.height = y21 - _this6.bounds.y;
						}
					}
				}
			}
		}
		lastOuter.x = outer.x;
		lastOuter.y = outer.y;
		lastInner.x = inner.x;
		lastInner.y = inner.y;
	}
};
haxepunk_utils_Draw.circleFilled = function(x,y,radius,segments,scaleX,scaleY) {
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(segments == null) {
		segments = 25;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.circleFilled(x,y,radius,segments,scaleX,scaleY);
};
haxepunk_utils_Draw.arc = function(x,y,radius,start,angle,segments) {
	if(segments == null) {
		segments = 25;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.arc(x,y,radius,start,angle,segments);
};
haxepunk_utils_Draw.curve = function(x1,y1,x2,y2,x3,y3,segments) {
	if(segments == null) {
		segments = 25;
	}
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.curve(x1,y1,x2,y2,x3,y3,segments);
};
var haxepunk_utils_Ease = function() { };
$hxClasses["haxepunk.utils.Ease"] = haxepunk_utils_Ease;
haxepunk_utils_Ease.__name__ = "haxepunk.utils.Ease";
haxepunk_utils_Ease.linear = function(t) {
	return t;
};
haxepunk_utils_Ease.quadIn = function(t) {
	return t * t;
};
haxepunk_utils_Ease.quadOut = function(t) {
	return -t * (t - 2);
};
haxepunk_utils_Ease.quadInOut = function(t) {
	if(t <= .5) {
		return t * t * 2;
	} else {
		return 1 - --t * t * 2;
	}
};
haxepunk_utils_Ease.cubeIn = function(t) {
	return t * t * t;
};
haxepunk_utils_Ease.cubeOut = function(t) {
	return 1 + --t * t * t;
};
haxepunk_utils_Ease.cubeInOut = function(t) {
	if(t <= .5) {
		return t * t * t * 4;
	} else {
		return 1 + --t * t * t * 4;
	}
};
haxepunk_utils_Ease.quartIn = function(t) {
	return t * t * t * t;
};
haxepunk_utils_Ease.quartOut = function(t) {
	return 1 - --t * t * t * t;
};
haxepunk_utils_Ease.quartInOut = function(t) {
	if(t <= .5) {
		return t * t * t * t * 8;
	} else {
		t = t * 2 - 2;
		return (1 - t * t * t * t) / 2 + .5;
	}
};
haxepunk_utils_Ease.quintIn = function(t) {
	return t * t * t * t * t;
};
haxepunk_utils_Ease.quintOut = function(t) {
	return --t * t * t * t * t + 1;
};
haxepunk_utils_Ease.quintInOut = function(t) {
	if((t *= 2) < 1) {
		return t * t * t * t * t / 2;
	} else {
		return ((t -= 2) * t * t * t * t + 2) / 2;
	}
};
haxepunk_utils_Ease.sineIn = function(t) {
	return -Math.cos(1.5707963267948966 * t) + 1;
};
haxepunk_utils_Ease.sineOut = function(t) {
	return Math.sin(1.5707963267948966 * t);
};
haxepunk_utils_Ease.sineInOut = function(t) {
	return -Math.cos(3.141592653589793 * t) / 2 + .5;
};
haxepunk_utils_Ease.bounceIn = function(t) {
	t = 1 - t;
	if(t < 0.36363636363636365) {
		return 1 - 7.5625 * t * t;
	}
	if(t < 0.72727272727272729) {
		return 1 - (7.5625 * (t - 0.54545454545454541) * (t - 0.54545454545454541) + .75);
	}
	if(t < 0.90909090909090906) {
		return 1 - (7.5625 * (t - 0.81818181818181823) * (t - 0.81818181818181823) + .9375);
	}
	return 1 - (7.5625 * (t - 0.95454545454545459) * (t - 0.95454545454545459) + .984375);
};
haxepunk_utils_Ease.bounceOut = function(t) {
	if(t < 0.36363636363636365) {
		return 7.5625 * t * t;
	}
	if(t < 0.72727272727272729) {
		return 7.5625 * (t - 0.54545454545454541) * (t - 0.54545454545454541) + .75;
	}
	if(t < 0.90909090909090906) {
		return 7.5625 * (t - 0.81818181818181823) * (t - 0.81818181818181823) + .9375;
	}
	return 7.5625 * (t - 0.95454545454545459) * (t - 0.95454545454545459) + .984375;
};
haxepunk_utils_Ease.bounceInOut = function(t) {
	if(t < .5) {
		t = 1 - t * 2;
		if(t < 0.36363636363636365) {
			return (1 - 7.5625 * t * t) / 2;
		}
		if(t < 0.72727272727272729) {
			return (1 - (7.5625 * (t - 0.54545454545454541) * (t - 0.54545454545454541) + .75)) / 2;
		}
		if(t < 0.90909090909090906) {
			return (1 - (7.5625 * (t - 0.81818181818181823) * (t - 0.81818181818181823) + .9375)) / 2;
		}
		return (1 - (7.5625 * (t - 0.95454545454545459) * (t - 0.95454545454545459) + .984375)) / 2;
	}
	t = t * 2 - 1;
	if(t < 0.36363636363636365) {
		return 7.5625 * t * t / 2 + .5;
	}
	if(t < 0.72727272727272729) {
		return (7.5625 * (t - 0.54545454545454541) * (t - 0.54545454545454541) + .75) / 2 + .5;
	}
	if(t < 0.90909090909090906) {
		return (7.5625 * (t - 0.81818181818181823) * (t - 0.81818181818181823) + .9375) / 2 + .5;
	}
	return (7.5625 * (t - 0.95454545454545459) * (t - 0.95454545454545459) + .984375) / 2 + .5;
};
haxepunk_utils_Ease.circIn = function(t) {
	return -(Math.sqrt(1 - t * t) - 1);
};
haxepunk_utils_Ease.circOut = function(t) {
	return Math.sqrt(1 - (t - 1) * (t - 1));
};
haxepunk_utils_Ease.circInOut = function(t) {
	if(t <= .5) {
		return (Math.sqrt(1 - t * t * 4) - 1) / -2;
	} else {
		return (Math.sqrt(1 - (t * 2 - 2) * (t * 2 - 2)) + 1) / 2;
	}
};
haxepunk_utils_Ease.expoIn = function(t) {
	return Math.pow(2,10 * (t - 1));
};
haxepunk_utils_Ease.expoOut = function(t) {
	return -Math.pow(2,-10 * t) + 1;
};
haxepunk_utils_Ease.expoInOut = function(t) {
	if(t < .5) {
		return Math.pow(2,10 * (t * 2 - 1)) / 2;
	} else {
		return (-Math.pow(2,-10 * (t * 2 - 1)) + 2) / 2;
	}
};
haxepunk_utils_Ease.backIn = function(t) {
	return t * t * (2.70158 * t - 1.70158);
};
haxepunk_utils_Ease.backOut = function(t) {
	return 1 - --t * t * (-2.70158 * t - 1.70158);
};
haxepunk_utils_Ease.backInOut = function(t) {
	t *= 2;
	if(t < 1) {
		return t * t * (2.70158 * t - 1.70158) / 2;
	}
	--t;
	return (1 - --t * t * (-2.70158 * t - 1.70158)) / 2 + .5;
};
var haxepunk_utils_HaxelibInfoBuilder = function() { };
$hxClasses["haxepunk.utils.HaxelibInfoBuilder"] = haxepunk_utils_HaxelibInfoBuilder;
haxepunk_utils_HaxelibInfoBuilder.__name__ = "haxepunk.utils.HaxelibInfoBuilder";
var haxepunk_utils_HaxelibInfo = function() { };
$hxClasses["haxepunk.utils.HaxelibInfo"] = haxepunk_utils_HaxelibInfo;
haxepunk_utils_HaxelibInfo.__name__ = "haxepunk.utils.HaxelibInfo";
var haxepunk_utils_Log = function() { };
$hxClasses["haxepunk.utils.Log"] = haxepunk_utils_Log;
haxepunk_utils_Log.__name__ = "haxepunk.utils.Log";
haxepunk_utils_Log.write = function(s,level,pos) {
	if(level == null) {
		level = 20;
	}
	var minLevel = 10;
	if((level | 0) >= (minLevel | 0)) {
		var p = null;
		var tmp = haxe_Log.trace;
		var s1 = Std.string(s);
		var d = HxOverrides.dateStr(new Date());
		var p1 = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
		var l;
		switch(level) {
		case 20:
			l = "INF";
			break;
		case 30:
			l = "WRN";
			break;
		case 40:
			l = "ERR";
			break;
		case 50:
			l = "!!!";
			break;
		default:
			l = "DBG";
		}
		tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
		if(haxepunk_HXP.engine.console != null) {
			var _this = haxepunk_HXP.engine.console;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
		}
	}
};
haxepunk_utils_Log.debug = function(s,pos) {
	var level = 10;
	if(level == null) {
		level = 20;
	}
	var minLevel = 10;
	if((level | 0) >= (minLevel | 0)) {
		var p = null;
		var tmp = haxe_Log.trace;
		var s1 = Std.string(s);
		var d = HxOverrides.dateStr(new Date());
		var p1 = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
		var l;
		switch(level) {
		case 20:
			l = "INF";
			break;
		case 30:
			l = "WRN";
			break;
		case 40:
			l = "ERR";
			break;
		case 50:
			l = "!!!";
			break;
		default:
			l = "DBG";
		}
		tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
		if(haxepunk_HXP.engine.console != null) {
			var _this = haxepunk_HXP.engine.console;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
		}
	}
};
haxepunk_utils_Log.info = function(s,pos) {
	var level = 20;
	if(level == null) {
		level = 20;
	}
	var minLevel = 10;
	if((level | 0) >= (minLevel | 0)) {
		var p = null;
		var tmp = haxe_Log.trace;
		var s1 = Std.string(s);
		var d = HxOverrides.dateStr(new Date());
		var p1 = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
		var l;
		switch(level) {
		case 20:
			l = "INF";
			break;
		case 30:
			l = "WRN";
			break;
		case 40:
			l = "ERR";
			break;
		case 50:
			l = "!!!";
			break;
		default:
			l = "DBG";
		}
		tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
		if(haxepunk_HXP.engine.console != null) {
			var _this = haxepunk_HXP.engine.console;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
		}
	}
};
haxepunk_utils_Log.warning = function(s,pos) {
	var level = 30;
	if(level == null) {
		level = 20;
	}
	var minLevel = 10;
	if((level | 0) >= (minLevel | 0)) {
		var p = null;
		var tmp = haxe_Log.trace;
		var s1 = Std.string(s);
		var d = HxOverrides.dateStr(new Date());
		var p1 = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
		var l;
		switch(level) {
		case 20:
			l = "INF";
			break;
		case 30:
			l = "WRN";
			break;
		case 40:
			l = "ERR";
			break;
		case 50:
			l = "!!!";
			break;
		default:
			l = "DBG";
		}
		tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
		if(haxepunk_HXP.engine.console != null) {
			var _this = haxepunk_HXP.engine.console;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
		}
	}
};
haxepunk_utils_Log.error = function(s,pos) {
	var level = 40;
	if(level == null) {
		level = 20;
	}
	var minLevel = 10;
	if((level | 0) >= (minLevel | 0)) {
		var p = null;
		var tmp = haxe_Log.trace;
		var s1 = Std.string(s);
		var d = HxOverrides.dateStr(new Date());
		var p1 = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
		var l;
		switch(level) {
		case 20:
			l = "INF";
			break;
		case 30:
			l = "WRN";
			break;
		case 40:
			l = "ERR";
			break;
		case 50:
			l = "!!!";
			break;
		default:
			l = "DBG";
		}
		tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
		if(haxepunk_HXP.engine.console != null) {
			var _this = haxepunk_HXP.engine.console;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
		}
	}
};
haxepunk_utils_Log.critical = function(s,pos) {
	var level = 50;
	if(level == null) {
		level = 20;
	}
	var minLevel = 10;
	if((level | 0) >= (minLevel | 0)) {
		var p = null;
		var tmp = haxe_Log.trace;
		var s1 = Std.string(s);
		var d = HxOverrides.dateStr(new Date());
		var p1 = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
		var l;
		switch(level) {
		case 20:
			l = "INF";
			break;
		case 30:
			l = "WRN";
			break;
		case 40:
			l = "ERR";
			break;
		case 50:
			l = "!!!";
			break;
		default:
			l = "DBG";
		}
		tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
		if(haxepunk_HXP.engine.console != null) {
			var _this = haxepunk_HXP.engine.console;
			var s1 = Std.string(s);
			var d = HxOverrides.dateStr(new Date());
			var p = StringTools.lpad(pos.fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
			var l;
			switch(level) {
			case 20:
				l = "INF";
				break;
			case 30:
				l = "WRN";
				break;
			case 40:
				l = "ERR";
				break;
			case 50:
				l = "!!!";
				break;
			default:
				l = "DBG";
			}
			_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
		}
	}
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var kro13_ads_IAdsManager = function() { };
$hxClasses["kro13.ads.IAdsManager"] = kro13_ads_IAdsManager;
kro13_ads_IAdsManager.__name__ = "kro13.ads.IAdsManager";
kro13_ads_IAdsManager.__isInterface__ = true;
kro13_ads_IAdsManager.prototype = {
	__class__: kro13_ads_IAdsManager
};
var kro13_ads_AdsManager = function() {
	this._enabled = true;
	this.ADS_DELAY = 180;
};
$hxClasses["kro13.ads.AdsManager"] = kro13_ads_AdsManager;
kro13_ads_AdsManager.__name__ = "kro13.ads.AdsManager";
kro13_ads_AdsManager.__interfaces__ = [kro13_ads_IAdsManager];
kro13_ads_AdsManager.__properties__ = {get_instance:"get_instance"};
kro13_ads_AdsManager.get_instance = function() {
	if(kro13_ads_AdsManager.instance == null) {
		kro13_ads_AdsManager.instance = new kro13_ads_AdsManager();
	}
	return kro13_ads_AdsManager.instance;
};
kro13_ads_AdsManager.prototype = {
	init: function() {
		this.lastAdsTs = new Date().getTime() / 1000;
		this.impl = new kro13_ya_ads_YaAds();
	}
	,showAds: function(onSuccess,onSkip,onError) {
		if(!this.get_enabled()) {
			onSuccess();
			return;
		}
		if(this.impl == null) {
			onError("err");
			return;
		}
		if(new Date().getTime() / 1000 - this.lastAdsTs >= this.ADS_DELAY) {
			kro13_analytics_Analytics.get_instance().sendEvent("ads:start");
			var _g = $bind(this,this.onAdsSuccess);
			var callback = onSuccess;
			var tmp = function() {
				_g(callback);
			};
			var _g1 = $bind(this,this.onAdsSkip);
			var callback1 = onSkip;
			var tmp1 = function() {
				_g1(callback1);
			};
			this.impl.showAds(tmp,tmp1,onError);
			this.lastAdsTs = new Date().getTime() / 1000;
		} else {
			onSuccess();
		}
	}
	,showVideoAds: function(onSuccess,onSkip,onError) {
		kro13_kk_guiObjects_popups_ConsolePopup.print("vid");
		if(!this.get_enabled()) {
			onSuccess();
			return;
		}
		if(this.impl == null) {
			onError("err");
			return;
		}
		kro13_analytics_Analytics.get_instance().sendEvent("ads:start:video");
		var _g = $bind(this,this.onAdsSuccess);
		var callback = onSuccess;
		var tmp = function() {
			_g(callback);
		};
		var _g1 = $bind(this,this.onAdsSkip);
		var callback1 = onSkip;
		var tmp1 = function() {
			_g1(callback1);
		};
		this.impl.showVideoAds(tmp,tmp1,onError);
	}
	,onAdsSuccess: function(callback) {
		this.lastAdsTs = new Date().getTime() / 1000;
		kro13_analytics_Analytics.get_instance().sendEvent("ads:success");
		callback();
	}
	,onAdsSkip: function(callback) {
		kro13_analytics_Analytics.get_instance().sendEvent("ads:skipped");
		callback();
	}
	,set_enabled: function(val) {
		haxe_Log.trace("---------------> ads manager " + Std.string(this._enabled),{ fileName : "src/kro13/ads/AdsManager.hx", lineNumber : 104, className : "kro13.ads.AdsManager", methodName : "set_enabled"});
		this._enabled = val;
		return this._enabled;
	}
	,get_enabled: function() {
		haxe_Log.trace("---------------> ads manager " + Std.string(this._enabled) + " " + Std.string(kro13_iap_IAPManager.get_instance().hasPremium()),{ fileName : "src/kro13/ads/AdsManager.hx", lineNumber : 114, className : "kro13.ads.AdsManager", methodName : "get_enabled"});
		if(this._enabled) {
			return !kro13_iap_IAPManager.get_instance().hasPremium();
		} else {
			return false;
		}
	}
	,__class__: kro13_ads_AdsManager
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var kro13_analytics_IAnalytics = function() { };
$hxClasses["kro13.analytics.IAnalytics"] = kro13_analytics_IAnalytics;
kro13_analytics_IAnalytics.__name__ = "kro13.analytics.IAnalytics";
kro13_analytics_IAnalytics.__isInterface__ = true;
kro13_analytics_IAnalytics.prototype = {
	__class__: kro13_analytics_IAnalytics
};
var kro13_analytics_Analytics = function() {
};
$hxClasses["kro13.analytics.Analytics"] = kro13_analytics_Analytics;
kro13_analytics_Analytics.__name__ = "kro13.analytics.Analytics";
kro13_analytics_Analytics.__interfaces__ = [kro13_analytics_IAnalytics];
kro13_analytics_Analytics.__properties__ = {get_instance:"get_instance"};
kro13_analytics_Analytics.get_instance = function() {
	if(kro13_analytics_Analytics.instance == null) {
		kro13_analytics_Analytics.instance = new kro13_analytics_Analytics();
	}
	return kro13_analytics_Analytics.instance;
};
kro13_analytics_Analytics.prototype = {
	init: function() {
		this.impl = new kro13_analytics_GAnalytics();
	}
	,sendEvent: function(evt) {
		if(this.impl != null) {
			this.impl.sendEvent(evt);
		}
	}
	,sendEventError: function(error) {
		if(this.impl != null) {
			this.impl.sendEventError(error);
		}
	}
	,sendEventWithAmount: function(evt,val) {
		if(this.impl != null) {
			this.impl.sendEventWithAmount(evt,val);
		}
	}
	,__class__: kro13_analytics_Analytics
};
var kro13_analytics_GAnalytics = function() {
	this.initialized = false;
	var platform = "html5";
	platform = "ya";
	try {
		extension_ga_GameAnalytics.configureBuild("" + platform + " " + kro13_kk_KKGame.version);
		extension_ga_GameAnalytics.configureAvailableResourceItemTypes("rollbacks");
		extension_ga_GameAnalytics.initialise("38aa07306b76edf38d9447264a97b958","7e022dc74112432f0ddca50274a9a4bd3f3d1abf");
		this.initialized = true;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		haxe_Log.trace("ga init failed: " + Std.string(e),{ fileName : "src/kro13/analytics/GAnalytics.hx", lineNumber : 38, className : "kro13.analytics.GAnalytics", methodName : "new"});
		this.initialized = false;
	}
};
$hxClasses["kro13.analytics.GAnalytics"] = kro13_analytics_GAnalytics;
kro13_analytics_GAnalytics.__name__ = "kro13.analytics.GAnalytics";
kro13_analytics_GAnalytics.__interfaces__ = [kro13_analytics_IAnalytics];
kro13_analytics_GAnalytics.prototype = {
	sendEvent: function(evt) {
		if(this.initialized) {
			extension_ga_GameAnalytics.sendDesignEvent(evt);
		}
	}
	,sendEventError: function(error) {
		if(this.initialized) {
			extension_ga_GameAnalytics.sendErrorEvent(4,error);
		}
	}
	,sendEventWithAmount: function(evt,val) {
		if(this.initialized) {
			extension_ga_GameAnalytics.sendDesignEventWithAmount(evt,val);
		}
	}
	,__class__: kro13_analytics_GAnalytics
};
var kro13_kk_sound_ISoundManager = function() { };
$hxClasses["kro13.kk.sound.ISoundManager"] = kro13_kk_sound_ISoundManager;
kro13_kk_sound_ISoundManager.__name__ = "kro13.kk.sound.ISoundManager";
kro13_kk_sound_ISoundManager.__isInterface__ = true;
kro13_kk_sound_ISoundManager.prototype = {
	__class__: kro13_kk_sound_ISoundManager
};
var kro13_kk_sound_AbstractSoundManager = function() {
	this.soundsMap = new haxe_ds_StringMap();
	var name = "main3";
	this.registerSound(name);
	var name = "snow1";
	this.registerSound(name);
	var name = "hit";
	this.registerSound(name);
	var name = "land0";
	this.registerSound(name);
	var name = "land1";
	this.registerSound(name);
	var name = "avalanche1";
	this.registerSound(name);
	var name = "crash";
	this.registerSound(name);
	var name = "wind";
	this.registerSound(name);
	var name = "eagle";
	this.registerSound(name);
	var name = "hare";
	this.registerSound(name);
	var name = "circle_big1";
	this.registerSound(name);
	var name = "circle_small";
	this.registerSound(name);
};
$hxClasses["kro13.kk.sound.AbstractSoundManager"] = kro13_kk_sound_AbstractSoundManager;
kro13_kk_sound_AbstractSoundManager.__name__ = "kro13.kk.sound.AbstractSoundManager";
kro13_kk_sound_AbstractSoundManager.__interfaces__ = [kro13_kk_sound_ISoundManager];
kro13_kk_sound_AbstractSoundManager.prototype = {
	setVolume: function(sound,value) {
	}
	,init: function(dataProvider) {
		this.dataProvider = dataProvider;
	}
	,addType: function(type) {
		if(this.dataProvider.getProfile().misc.soundTypes.indexOf(type) < 0) {
			this.dataProvider.getProfile().misc.soundTypes.push(type);
		}
	}
	,removeType: function(type) {
		HxOverrides.remove(this.dataProvider.getProfile().misc.soundTypes,type);
	}
	,hasType: function(type) {
		return this.dataProvider.getProfile().misc.soundTypes.indexOf(type) >= 0;
	}
	,play: function(sound,loop) {
		if(loop == null) {
			loop = false;
		}
		if(this.hasType(this.getSoundType(sound))) {
			this.doPlay(sound,loop);
		} else {
			this.doStop(sound);
		}
	}
	,pause: function(sound) {
		this.doPause(sound);
	}
	,stop: function(sound) {
		this.doStop(sound);
	}
	,fade: function(sound) {
	}
	,isPlaying: function(sound) {
		return false;
	}
	,doPlay: function(sound,loop) {
	}
	,doPause: function(sound) {
	}
	,doStop: function(sound) {
	}
	,registerSound: function(name) {
		haxe_Log.trace("register sound " + name,{ fileName : "src/kro13/kk/sound/AbstractSoundManager.hx", lineNumber : 98, className : "kro13.kk.sound.AbstractSoundManager", methodName : "registerSound"});
		var this1 = this.soundsMap;
		var value = this.makeSound(name);
		this1.h[name] = value;
	}
	,makeSound: function(name) {
		return null;
	}
	,getSoundType: function(name) {
		if(name == "main3") {
			return 1;
		} else {
			return 0;
		}
	}
	,__class__: kro13_kk_sound_AbstractSoundManager
};
var kro13_howler_HowlerSoundManager = function() {
	kro13_kk_sound_AbstractSoundManager.call(this);
};
$hxClasses["kro13.howler.HowlerSoundManager"] = kro13_howler_HowlerSoundManager;
kro13_howler_HowlerSoundManager.__name__ = "kro13.howler.HowlerSoundManager";
kro13_howler_HowlerSoundManager.__super__ = kro13_kk_sound_AbstractSoundManager;
kro13_howler_HowlerSoundManager.prototype = $extend(kro13_kk_sound_AbstractSoundManager.prototype,{
	isPlaying: function(sound) {
		var snd = this.soundsMap.h[sound];
		return snd.playing();
	}
	,setVolume: function(sound,value) {
		var snd = this.soundsMap.h[sound];
		snd.volume(value);
	}
	,fade: function(sound) {
		var snd = this.soundsMap.h[sound];
		snd.fade(snd.volume(),0,1000);
	}
	,doPlay: function(sound,loop) {
		var snd = this.soundsMap.h[sound];
		if(!snd.playing()) {
			snd.play();
		}
	}
	,doPause: function(sound) {
		var snd = this.soundsMap.h[sound];
		haxe_Log.trace("pause " + sound + " " + Std.string(snd != null),{ fileName : "src/kro13/howler/HowlerSoundManager.hx", lineNumber : 48, className : "kro13.howler.HowlerSoundManager", methodName : "doPause"});
		if(snd != null) {
			snd.pause();
		}
	}
	,doStop: function(sound) {
		var snd = this.soundsMap.h[sound];
		haxe_Log.trace("stop " + sound + " " + Std.string(snd != null),{ fileName : "src/kro13/howler/HowlerSoundManager.hx", lineNumber : 58, className : "kro13.howler.HowlerSoundManager", methodName : "doStop"});
		if(snd != null) {
			snd.stop();
		}
	}
	,makeSound: function(name) {
		var options = { };
		options.src = ["audio/" + name + "." + "mp3"];
		options.autoplay = false;
		options.loop = this.isLoop(name);
		var snd = new Howl(options);
		return snd;
	}
	,isLoop: function(name) {
		switch(name) {
		case "snow1":case "wind":
			return true;
		default:
			return false;
		}
	}
	,__class__: kro13_howler_HowlerSoundManager
});
var kro13_hxp_HxpEngine = function(width,height,frameRate,fixed) {
	if(fixed == null) {
		fixed = false;
	}
	if(frameRate == null) {
		frameRate = 60;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	haxepunk_Engine.call(this,width,height,frameRate,fixed);
};
$hxClasses["kro13.hxp.HxpEngine"] = kro13_hxp_HxpEngine;
kro13_hxp_HxpEngine.__name__ = "kro13.hxp.HxpEngine";
kro13_hxp_HxpEngine.__super__ = haxepunk_Engine;
kro13_hxp_HxpEngine.prototype = $extend(haxepunk_Engine.prototype,{
	update: function() {
		if(haxepunk_HXP.needsResize) {
			haxepunk_HXP.resize(haxepunk_HXP.windowWidth,haxepunk_HXP.windowHeight);
		}
		var _g = 0;
		var _g1 = this.preUpdate.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		if(this._scene != null && this._scenes.length > 0 && this._scenes[this._scenes.length - 1] != this._scene) {
			var c = js_Boot.getClass(this._scene);
			var s = "ending scene: " + c.__name__;
			var pos_fileName = "haxepunk/Engine.hx";
			var pos_lineNumber = 257;
			var pos_className = "haxepunk.Engine";
			var pos_methodName = "checkScene";
			var level = 10;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
			this._scene.end();
			this._scene.updateLists(false);
			if(this._scene.autoClear && this._scene.get_hasTween()) {
				this._scene.clearTweens();
			}
			this._scene = this._scenes[this._scenes.length - 1];
			var _g = 0;
			var _g1 = this.onSceneSwitch.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
			var c = js_Boot.getClass(this._scene);
			var s = "starting scene: " + c.__name__;
			var pos_fileName = "haxepunk/Engine.hx";
			var pos_lineNumber = 266;
			var pos_className = "haxepunk.Engine";
			var pos_methodName = "checkScene";
			var level = 10;
			if(level == null) {
				level = 20;
			}
			var minLevel = 10;
			if((level | 0) >= (minLevel | 0)) {
				var p = null;
				var tmp = haxe_Log.trace;
				var s1 = Std.string(s);
				var d = HxOverrides.dateStr(new Date());
				var p1 = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(Std.string(pos_lineNumber)," ",4) + ":";
				var l;
				switch(level) {
				case 20:
					l = "INF";
					break;
				case 30:
					l = "WRN";
					break;
				case 40:
					l = "ERR";
					break;
				case 50:
					l = "!!!";
					break;
				default:
					l = "DBG";
				}
				tmp("" + d + " " + p1 + "  " + l + ": " + s1,p);
				if(haxepunk_HXP.engine.console != null) {
					var _this = haxepunk_HXP.engine.console;
					var s1 = Std.string(s);
					var d = HxOverrides.dateStr(new Date());
					var p = StringTools.lpad(pos_fileName," ",haxepunk_utils_LogLevel.longest) + ":" + StringTools.lpad(pos_lineNumber == null ? "null" : "" + pos_lineNumber," ",4) + ":";
					var l;
					switch(level) {
					case 20:
						l = "INF";
						break;
					case 30:
						l = "WRN";
						break;
					case 40:
						l = "ERR";
						break;
					case 50:
						l = "!!!";
						break;
					default:
						l = "DBG";
					}
					_this.logPanel.log("" + d + " " + p + "  " + l + ": " + s1);
				}
			}
			this._scene.assetCache.enable();
			this._scene.updateLists();
			if(this._scene.started) {
				this._scene.resume();
			} else {
				this._scene.begin();
			}
			this._scene.started = true;
			this._scene.updateLists(true);
		}
		var _g = 0;
		var _g1 = this._scenes;
		while(_g < _g1.length) {
			var scene = _g1[_g];
			++_g;
			if(scene != this.console) {
				scene.updateLists();
				var _g2 = 0;
				var _g3 = scene.preUpdate.callbacks;
				while(_g2 < _g3.length) {
					var callback = _g3[_g2];
					++_g2;
					callback();
				}
				if(haxepunk_HXP.tweener.get_active() && haxepunk_HXP.tweener.get_hasTween()) {
					haxepunk_HXP.tweener.updateTweens(haxepunk_HXP.elapsed);
				}
				if(scene.get_active()) {
					if(scene.get_hasTween()) {
						scene.updateTweens(haxepunk_HXP.elapsed);
					}
					scene.update();
				}
				scene.updateLists(false);
				var _g4 = 0;
				var _g5 = scene.postUpdate.callbacks;
				while(_g4 < _g5.length) {
					var callback1 = _g5[_g4];
					++_g4;
					callback1();
				}
			}
		}
		var _g = 0;
		var _g1 = this.postUpdate.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,__class__: kro13_hxp_HxpEngine
});
var kro13_hxp_HxpEntity = function() {
	this.isList = false;
	haxepunk_Entity.call(this);
};
$hxClasses["kro13.hxp.HxpEntity"] = kro13_hxp_HxpEntity;
kro13_hxp_HxpEntity.__name__ = "kro13.hxp.HxpEntity";
kro13_hxp_HxpEntity.__super__ = haxepunk_Entity;
kro13_hxp_HxpEntity.prototype = $extend(haxepunk_Entity.prototype,{
	__class__: kro13_hxp_HxpEntity
});
var kro13_hxp_HxpResourceManager = function() {
	this.cache = haxepunk_assets_AssetCache.global;
	var transparent = false;
	var color = 16777215;
	if(color == null) {
		color = 0;
	}
	if(transparent == null) {
		transparent = false;
	}
	this.addTexture("blank_rect",new openfl_display_BitmapData(40,40,transparent,color));
	var transparent = true;
	var color = 16777215;
	if(color == null) {
		color = 0;
	}
	if(transparent == null) {
		transparent = false;
	}
	var circle = new openfl_display_BitmapData(400,400,transparent,color);
	haxepunk_graphics_hardware_Texture.drawCircle(circle,200,200,200);
	this.addTexture("blank_circ",circle);
};
$hxClasses["kro13.hxp.HxpResourceManager"] = kro13_hxp_HxpResourceManager;
kro13_hxp_HxpResourceManager.__name__ = "kro13.hxp.HxpResourceManager";
kro13_hxp_HxpResourceManager.__properties__ = {get_instance:"get_instance"};
kro13_hxp_HxpResourceManager.get_instance = function() {
	if(kro13_hxp_HxpResourceManager.instance == null) {
		kro13_hxp_HxpResourceManager.instance = new kro13_hxp_HxpResourceManager();
	}
	return kro13_hxp_HxpResourceManager.instance;
};
kro13_hxp_HxpResourceManager.prototype = {
	loadAtlas: function(source) {
		haxe_Log.trace("start loading",{ fileName : "src/kro13/hxp/HxpResourceManager.hx", lineNumber : 42, className : "kro13.hxp.HxpResourceManager", methodName : "loadAtlas"});
		this.atlas = haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.load(source);
		haxe_Log.trace("loaded " + Std.string(this.atlas) + " " + Std.string(this.cache),{ fileName : "src/kro13/hxp/HxpResourceManager.hx", lineNumber : 44, className : "kro13.hxp.HxpResourceManager", methodName : "loadAtlas"});
		this.cache.addTextureAtlas(this.atlas);
		haxe_Log.trace("atlas " + source + " loaded to " + this.cache.name,{ fileName : "src/kro13/hxp/HxpResourceManager.hx", lineNumber : 46, className : "kro13.hxp.HxpResourceManager", methodName : "loadAtlas"});
	}
	,getRectImage: function(size,color) {
		var this1 = new haxepunk_graphics_atlas_AtlasData(this.getTexture("blank_rect"));
		var img = new haxepunk_graphics_Image(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1));
		img.scaleX = size.x / img.scale / img.get_width();
		img.scaleY = size.y / img.scale / img.get_height();
		img.set_color(color);
		return img;
	}
	,getCircImage: function(size,color) {
		var this1 = new haxepunk_graphics_atlas_AtlasData(this.getTexture("blank_circ"));
		var img = new haxepunk_graphics_Image(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1));
		img.scaleX = size.x / img.scale / img.get_width();
		img.scaleY = size.y / img.scale / img.get_height();
		img.set_color(color);
		return img;
	}
	,loadAllSounds: function() {
		var name = "main3";
		this.getSound("audio/" + name + "." + "mp3");
		var name = "snow1";
		this.getSound("audio/" + name + "." + "mp3");
		var name = "hit";
		this.getSound("audio/" + name + "." + "mp3");
		var name = "land0";
		this.getSound("audio/" + name + "." + "mp3");
		var name = "land1";
		this.getSound("audio/" + name + "." + "mp3");
		var name = "avalanche1";
		this.getSound("audio/" + name + "." + "mp3");
		var name = "crash";
		this.getSound("audio/" + name + "." + "mp3");
		var name = "wind";
		this.getSound("audio/" + name + "." + "mp3");
		var name = "eagle";
		this.getSound("audio/" + name + "." + "mp3");
		var name = "hare";
		this.getSound("audio/" + name + "." + "mp3");
		var name = "circle_big1";
		this.getSound("audio/" + name + "." + "mp3");
		var name = "circle_small";
		this.getSound("audio/" + name + "." + "mp3");
	}
	,getSound: function(source) {
		haxe_Log.trace("get " + source,{ fileName : "src/kro13/hxp/HxpResourceManager.hx", lineNumber : 77, className : "kro13.hxp.HxpResourceManager", methodName : "getSound"});
		var snd = this.cache.getSound(source);
		haxe_Log.trace("" + source + " got",{ fileName : "src/kro13/hxp/HxpResourceManager.hx", lineNumber : 79, className : "kro13.hxp.HxpResourceManager", methodName : "getSound"});
		return snd;
	}
	,getFont: function(source) {
		return this.cache.getBitmapFont(source);
	}
	,getImage: function(source) {
		return new haxepunk_graphics_Image(this.cache.getAtlasRegion(source));
	}
	,getTileAtlas: function(source) {
		var this1 = haxepunk_assets_AssetCache.global.getAtlasData(source,false);
		var tileAtlas = haxepunk_graphics_atlas_TileAtlas.loadFromAtlasRegion(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this1),40,40);
		return tileAtlas;
	}
	,getTexture: function(id) {
		return this.cache.getTexture(id);
	}
	,addTexture: function(id,texture) {
		this.cache.addTexture(id,texture);
	}
	,clear: function() {
		this.cache.dispose();
		kro13_hxp_HxpResourceManager.instance = null;
	}
	,__class__: kro13_hxp_HxpResourceManager
};
var kro13_kk_IDestructable = function() { };
$hxClasses["kro13.kk.IDestructable"] = kro13_kk_IDestructable;
kro13_kk_IDestructable.__name__ = "kro13.kk.IDestructable";
kro13_kk_IDestructable.__isInterface__ = true;
kro13_kk_IDestructable.prototype = {
	__class__: kro13_kk_IDestructable
};
var kro13_kk_ComponentsContainer = function() {
	this.name = "container";
	this.componentsMap = new haxe_ds_IntMap();
	this.onDestroy = new haxepunk_Signal0();
};
$hxClasses["kro13.kk.ComponentsContainer"] = kro13_kk_ComponentsContainer;
kro13_kk_ComponentsContainer.__name__ = "kro13.kk.ComponentsContainer";
kro13_kk_ComponentsContainer.__interfaces__ = [kro13_kk_IDestructable];
kro13_kk_ComponentsContainer.prototype = {
	addComponent: function(component) {
		this.componentsMap.h[component.type] = component;
	}
	,getComponent: function(type) {
		if(this.componentsMap == null) {
			return null;
		}
		var component = this.componentsMap.h[type];
		return component;
	}
	,removeComponent: function(type) {
		this.componentsMap.remove(type);
	}
	,iterator: function() {
		return this.componentsMap.keys();
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.onDestroy.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		var component = this.componentsMap.keys();
		while(component.hasNext()) {
			var component1 = component.next();
			this.componentsMap.h[component1].destroy();
		}
		this.componentsMap = null;
		var _this = this.onDestroy;
		while(_this.callbacks.length > 0) _this.callbacks.pop();
		this.onDestroy = null;
	}
	,__class__: kro13_kk_ComponentsContainer
};
var kro13_kk_IBuildable = function() { };
$hxClasses["kro13.kk.IBuildable"] = kro13_kk_IBuildable;
kro13_kk_IBuildable.__name__ = "kro13.kk.IBuildable";
kro13_kk_IBuildable.__isInterface__ = true;
kro13_kk_IBuildable.prototype = {
	__class__: kro13_kk_IBuildable
};
var kro13_kk_gameObjects_AbstractGameObject = function() {
	this.id = -1;
	this.type = 0;
	kro13_kk_ComponentsContainer.call(this);
	this.id = kro13_kk_utils_GameObjetIds.getNext();
};
$hxClasses["kro13.kk.gameObjects.AbstractGameObject"] = kro13_kk_gameObjects_AbstractGameObject;
kro13_kk_gameObjects_AbstractGameObject.__name__ = "kro13.kk.gameObjects.AbstractGameObject";
kro13_kk_gameObjects_AbstractGameObject.__interfaces__ = [kro13_kk_IBuildable];
kro13_kk_gameObjects_AbstractGameObject.__super__ = kro13_kk_ComponentsContainer;
kro13_kk_gameObjects_AbstractGameObject.prototype = $extend(kro13_kk_ComponentsContainer.prototype,{
	build: function() {
	}
	,__class__: kro13_kk_gameObjects_AbstractGameObject
});
var kro13_kk_gameObjects_Transformable = function() {
	kro13_kk_gameObjects_AbstractGameObject.call(this);
	this.name = "transformable";
	this.addComponent(new kro13_kk_components_Transform(this));
	var tmp;
	if(this.componentsMap == null) {
		tmp = null;
	} else {
		var component = this.componentsMap.h[2];
		tmp = component;
	}
	this.transform = tmp;
};
$hxClasses["kro13.kk.gameObjects.Transformable"] = kro13_kk_gameObjects_Transformable;
kro13_kk_gameObjects_Transformable.__name__ = "kro13.kk.gameObjects.Transformable";
kro13_kk_gameObjects_Transformable.__super__ = kro13_kk_gameObjects_AbstractGameObject;
kro13_kk_gameObjects_Transformable.prototype = $extend(kro13_kk_gameObjects_AbstractGameObject.prototype,{
	setEvenPosition: function(x,y) {
		haxepunk_math_Vector2.setTo(this.get_position(),x,y);
		var value = this.get_position();
		value.x = Math.floor(value.x);
		value.y = Math.floor(value.y);
		if(value.x % 2 != 0) {
			value.x += 1;
		}
		if(value.y % 2 != 0) {
			value.y += 1;
		}
		var _this = this.transform.onPositionChanged;
		var a = this.get_position();
		var _g = 0;
		var _g1 = _this.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback(a);
		}
	}
	,setEvenScale: function(val) {
		this.transform.set_scale(val);
		var t = this.transform.iterator();
		while(t.hasNext()) {
			var t1 = t.next();
			var value = t1.get_position();
			value.x = Math.floor(value.x);
			value.y = Math.floor(value.y);
			if(value.x % 2 != 0) {
				value.x += 1;
			}
			if(value.y % 2 != 0) {
				value.y += 1;
			}
		}
	}
	,destroy: function() {
		var i = this.transform.children.length - 1;
		while(i >= 0) {
			var ch = this.transform.children[i];
			ch.owner.destroy();
			--i;
		}
		if(this.transform.parent != null) {
			this.transform.parent.removeChild(this.transform);
		}
		kro13_kk_gameObjects_AbstractGameObject.prototype.destroy.call(this);
	}
	,get_position: function() {
		return this.transform.get_position();
	}
	,set_position: function(position) {
		return this.transform.set_position(position);
	}
	,get_size: function() {
		return this.transform.get_size();
	}
	,set_size: function(size) {
		return this.transform.set_size(size);
	}
	,__class__: kro13_kk_gameObjects_Transformable
	,__properties__: {set_size:"set_size",get_size:"get_size",set_position:"set_position",get_position:"get_position"}
});
var kro13_kk_ISwitchable = function() { };
$hxClasses["kro13.kk.ISwitchable"] = kro13_kk_ISwitchable;
kro13_kk_ISwitchable.__name__ = "kro13.kk.ISwitchable";
kro13_kk_ISwitchable.__isInterface__ = true;
kro13_kk_ISwitchable.prototype = {
	__class__: kro13_kk_ISwitchable
};
var kro13_kk_systems_IComponentSystem = function() { };
$hxClasses["kro13.kk.systems.IComponentSystem"] = kro13_kk_systems_IComponentSystem;
kro13_kk_systems_IComponentSystem.__name__ = "kro13.kk.systems.IComponentSystem";
kro13_kk_systems_IComponentSystem.__isInterface__ = true;
kro13_kk_systems_IComponentSystem.__interfaces__ = [kro13_kk_ISwitchable];
kro13_kk_systems_IComponentSystem.prototype = {
	__class__: kro13_kk_systems_IComponentSystem
};
var kro13_kk_scenes_AbstractScene = function() {
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "scene";
	this.systems = [];
};
$hxClasses["kro13.kk.scenes.AbstractScene"] = kro13_kk_scenes_AbstractScene;
kro13_kk_scenes_AbstractScene.__name__ = "kro13.kk.scenes.AbstractScene";
kro13_kk_scenes_AbstractScene.__interfaces__ = [kro13_kk_systems_IComponentSystem];
kro13_kk_scenes_AbstractScene.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_scenes_AbstractScene.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	addSystem: function(system) {
		if(this.systems.indexOf(system) < 0) {
			this.systems.push(system);
		}
	}
	,removeSystem: function(system) {
		if(this.systems.indexOf(system) >= 0) {
			HxOverrides.remove(this.systems,system);
		}
	}
	,addContainer: function(gameObject) {
		var tmp;
		if(gameObject.componentsMap == null) {
			tmp = null;
		} else {
			var component = gameObject.componentsMap.h[2];
			tmp = component;
		}
		this.transform.addChild(tmp);
		var _g = 0;
		var _g1 = this.systems;
		while(_g < _g1.length) {
			var sys = _g1[_g];
			++_g;
			sys.addContainer(gameObject);
		}
	}
	,removeContainer: function(gameObject) {
		var tmp;
		if(gameObject.componentsMap == null) {
			tmp = null;
		} else {
			var component = gameObject.componentsMap.h[2];
			tmp = component;
		}
		this.transform.removeChild(tmp);
		var _g = 0;
		var _g1 = this.systems;
		while(_g < _g1.length) {
			var sys = _g1[_g];
			++_g;
			sys.removeContainer(gameObject);
		}
	}
	,start: function() {
		var _g = 0;
		var _g1 = this.systems;
		while(_g < _g1.length) {
			var sys = _g1[_g];
			++_g;
			sys.start();
		}
	}
	,stop: function() {
		var _g = 0;
		var _g1 = this.systems;
		while(_g < _g1.length) {
			var sys = _g1[_g];
			++_g;
			sys.stop();
		}
	}
	,clear: function() {
		var _g = 0;
		var _g1 = this.systems;
		while(_g < _g1.length) {
			var sys = _g1[_g];
			++_g;
			sys.clear();
		}
	}
	,__class__: kro13_kk_scenes_AbstractScene
});
var kro13_hxp_scenes_HxpAbstractScene = function() {
	kro13_kk_scenes_AbstractScene.call(this);
	this.name = "hxp scene";
	this.scene = new haxepunk_Scene();
	this.visibiltyBuffer = new kro13_kk_systems_VisibilityBuffer();
};
$hxClasses["kro13.hxp.scenes.HxpAbstractScene"] = kro13_hxp_scenes_HxpAbstractScene;
kro13_hxp_scenes_HxpAbstractScene.__name__ = "kro13.hxp.scenes.HxpAbstractScene";
kro13_hxp_scenes_HxpAbstractScene.__super__ = kro13_kk_scenes_AbstractScene;
kro13_hxp_scenes_HxpAbstractScene.prototype = $extend(kro13_kk_scenes_AbstractScene.prototype,{
	init: function() {
		haxepunk_HXP.engine.pushScene(this.scene);
		this.renderSystem = new kro13_hxp_systems_HxpRenderSystem(this,haxepunk_HXP.engine.preRender,this.scene,this.visibiltyBuffer);
		this.transformSystem = new kro13_hxp_systems_HxpTransformSystem(this,haxepunk_HXP.engine.preRender,this.visibiltyBuffer);
		this.addSystem(this.renderSystem);
		this.addSystem(this.transformSystem);
	}
	,destroy: function() {
		kro13_kk_scenes_AbstractScene.prototype.destroy.call(this);
		this.stop();
		this.clear();
		HxOverrides.remove(haxepunk_HXP.engine._scenes,this.scene);
		if(haxepunk_assets_AssetCache.active.indexOf(this.scene.assetCache) > -1) {
			this.scene.assetCache.dispose();
		}
		this.scene = null;
	}
	,__class__: kro13_hxp_scenes_HxpAbstractScene
});
var kro13_hxp_scenes_HxpBackScene = function() {
	kro13_hxp_scenes_HxpAbstractScene.call(this);
	this.name = "back scene";
	this.scene.name = this.name;
};
$hxClasses["kro13.hxp.scenes.HxpBackScene"] = kro13_hxp_scenes_HxpBackScene;
kro13_hxp_scenes_HxpBackScene.__name__ = "kro13.hxp.scenes.HxpBackScene";
kro13_hxp_scenes_HxpBackScene.__super__ = kro13_hxp_scenes_HxpAbstractScene;
kro13_hxp_scenes_HxpBackScene.prototype = $extend(kro13_hxp_scenes_HxpAbstractScene.prototype,{
	build: function() {
		this.back = new kro13_kk_gameObjects_Back();
		this.back.build();
		this.addContainer(this.back);
		openfl_Lib.get_current().stage.addEventListener("resize",$bind(this,this.onResize));
	}
	,clear: function() {
		kro13_hxp_scenes_HxpAbstractScene.prototype.clear.call(this);
		openfl_Lib.get_current().stage.removeEventListener("resize",$bind(this,this.onResize));
	}
	,onResize: function(e) {
		this.back.get_size().x = haxepunk_HXP.width;
		this.back.get_size().y = haxepunk_HXP.height;
		this.back.renderer.isValid = false;
	}
	,__class__: kro13_hxp_scenes_HxpBackScene
});
var kro13_hxp_scenes_HxpGUIScene = function(gameEventSystem,dataProvider,reloadFn) {
	this.statsGlobal = true;
	this.isConsoleOn = false;
	this.isMainMenu = true;
	this.isPlaying = true;
	this.isFinish = false;
	kro13_hxp_scenes_HxpAbstractScene.call(this);
	this.name = "GUI Scene";
	this.scene.camera = new haxepunk_cameras_StaticCamera();
	this.scene.bgAlpha = 0;
	this.gameEventSystem = gameEventSystem;
	this.dataProvider = dataProvider;
	this.scoreData = dataProvider.getLocal().scoreData;
	this.profile = dataProvider.getLocal().getProfile();
	this.reloadGame = reloadFn;
	this.scene.name = this.name;
};
$hxClasses["kro13.hxp.scenes.HxpGUIScene"] = kro13_hxp_scenes_HxpGUIScene;
kro13_hxp_scenes_HxpGUIScene.__name__ = "kro13.hxp.scenes.HxpGUIScene";
kro13_hxp_scenes_HxpGUIScene.__super__ = kro13_hxp_scenes_HxpAbstractScene;
kro13_hxp_scenes_HxpGUIScene.prototype = $extend(kro13_hxp_scenes_HxpAbstractScene.prototype,{
	setQuickMenuPos: function() {
		var y = this.dataProvider.getProfile().misc.rightHanded ? haxepunk_HXP.width - 150 : 50;
		if(!kro13_kk_Constants.PORTRAIT) {
			this.quickMenu.setEvenPosition(y,(haxepunk_HXP.height - 800) * 0.5);
		} else {
			this.quickMenu.setEvenPosition(y,(haxepunk_HXP.height - 700) * 0.5);
		}
	}
	,addContainer: function(container) {
		kro13_hxp_scenes_HxpAbstractScene.prototype.addContainer.call(this,container);
		this.gameEventSystem.addContainer(container);
	}
	,removeContainer: function(container) {
		kro13_hxp_scenes_HxpAbstractScene.prototype.removeContainer.call(this,container);
		this.gameEventSystem.removeContainer(container);
	}
	,init: function() {
		kro13_hxp_scenes_HxpAbstractScene.prototype.init.call(this);
		var eventHandler = new kro13_kk_components_GameEventHandler();
		this.addComponent(eventHandler);
		eventHandler.addHandler($bind(this,this.onEvent));
		this.gameEventSystem.addContainer(this);
		this.addSystem(new kro13_hxp_systems_control_HxpGUIControlSystem(this,haxepunk_HXP.engine.preUpdate));
		this.addSystem(new kro13_kk_systems_SimpleUpdateSystem(this,haxepunk_HXP.engine.preUpdate));
		this.addSystem(new kro13_hxp_systems_HxpTextEmitterSystem(this,haxepunk_HXP.engine.preUpdate,this.scene));
		this.addSystem(new kro13_kk_systems_AnimationSystem(this,haxepunk_HXP.engine.preRender));
		this.addSystem(new kro13_hxp_systems_HxpParticlesSystem(this,haxepunk_HXP.engine.preRender));
		this.addSystem(new kro13_kk_systems_InGameMessagesSystem(this,haxepunk_HXP.engine.preRender,this.dataProvider));
		openfl_Lib.get_current().stage.addEventListener("resize",$bind(this,this.onResize));
	}
	,build: function() {
		var _gthis = this;
		var factory = kro13_kk_guiObjects_GUIObjectsFactory.get_instance();
		this.playerHUD = factory.buildPlayerHUD(this.dataProvider);
		this.hud = factory.buildTopHUD(this.dataProvider);
		this.quickMenu = factory.buildQuickMenu(this.dataProvider,this.gameEventSystem);
		this.mainMenu = factory.buildMainMenu(this.dataProvider,this.gameEventSystem);
		this.popConfirm = factory.buildConfirmDialog();
		this.popStats = factory.buildStatsDialog();
		this.popHelp = factory.buildHelpDilaog(this.dataProvider);
		this.popSettings = factory.buildSettingsDilaog(this.dataProvider,this.gameEventSystem);
		this.popError = factory.buildErrorDialog();
		this.popCredits = factory.buildSimpleDialog(kro13_kk_utils_L.get_instance().AUDIO_CREDITS);
		this.popPrivacy = factory.buildPrivacyPolicyDialog();
		var _g = $bind(this,this.hidePopup);
		var popup = this.popCredits;
		var onHide = null;
		var tmp = function() {
			_g(popup,onHide);
		};
		this.popCredits.buttons[0].action = tmp;
		this.popTutor = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildTutorDialog();
		this.popTutor.buttons[0].action = $bind(this,this.onTutorConfirm);
		var _g1 = $bind(this,this.hidePopup);
		var popup1 = this.popSettings;
		var onHide1 = function() {
			_gthis.setQuickMenuPos();
			_gthis.dataProvider.save();
			if(_gthis.popSettings.reloadNeeded) {
				_gthis.popSettings.reloadNeeded = false;
				_gthis.reloadGame();
			}
		};
		var tmp = function() {
			_g1(popup1,onHide1);
		};
		this.popSettings.buttons[0].action = tmp;
		var _g2 = $bind(this,this.hidePopup);
		var popup2 = this.popStats;
		var onHide2 = null;
		var tmp = function() {
			_g2(popup2,onHide2);
		};
		this.popStats.buttons[0].action = tmp;
		var _g3 = $bind(this,this.hidePopup);
		var popup3 = this.popError;
		var onHide3 = function() {
			if(!_gthis.isMainMenu) {
				_gthis.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
			}
		};
		var tmp = function() {
			_g3(popup3,onHide3);
		};
		this.popError.buttons[0].action = tmp;
		this.resize();
		this.showMainMenu();
	}
	,onTutorConfirm: function() {
		if(!this.popTutor.isFinished()) {
			this.removeContainer(this.popTutor);
			this.popTutor.showNext();
			this.addContainer(this.popTutor);
			return;
		}
		this.hidePopup(this.popTutor);
		if(kro13_kk_TutorManager.get_instance().isStarted) {
			this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
		} else {
			this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
		}
	}
	,onConsole: function() {
		if(!this.isConsoleOn) {
			this.addContainer(this.consolePopup);
		} else {
			this.removeContainer(this.consolePopup);
		}
		this.isConsoleOn = !this.isConsoleOn;
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var firstStart = e.firstStart;
			this.mainMenu.isFirstStart = firstStart;
			break;
		case 2:
			this.showQuickMenu();
			break;
		case 7:
			this.showStatsDialog();
			break;
		case 9:
			if(this.currPopup == null) {
				this.showMainMenu();
			}
			break;
		case 10:
			this.showHelpDialog();
			break;
		case 11:
			this.showCreditsDialog();
			break;
		case 12:
			var onCancel = e.onCancel;
			var onConfirm = e.onConfirm;
			var message = e.message;
			this.showConfirmDialog(message,onConfirm,onCancel);
			break;
		case 13:
			this.showSettingsDialog();
			break;
		case 14:
			var showErrorPopup = e.showErrorPopup;
			var errorMessage = e.errorMessage;
			var errorType = e.errorType;
			kro13_analytics_Analytics.get_instance().sendEventError(errorMessage);
			if(showErrorPopup) {
				this.showErrorDialog(errorType);
			}
			break;
		case 15:
			var onError = e.onError;
			var onSuccess = e.onSuccess;
			kro13_ads_AdsManager.get_instance().showAds(onSuccess,onSuccess,onError);
			break;
		case 16:
			var onError = e.onError;
			var onSkip = e.onSkip;
			var onSuccess = e.onSuccess;
			kro13_ads_AdsManager.get_instance().showVideoAds(onSuccess,onSkip,onError);
			break;
		case 24:
			var score = e.score;
			this.playerHUD.emitScore(score);
			break;
		case 30:
			var _g = e.startNew;
			this.removeContainer(this.mainMenu);
			this.removeContainer(this.playerHUD);
			this.removeContainer(this.hud);
			this.quickMenu.collapse();
			break;
		case 39:
			var content = e.content;
			this.showTutorDialog(content);
			break;
		case 43:
			var onConfirm = e.onConfirm;
			var _g = $bind(this,this.hidePopup);
			var popup = this.popPrivacy;
			var onHide = onConfirm;
			var tmp = function() {
				_g(popup,onHide);
			};
			this.popPrivacy.buttons[1].action = tmp;
			this.showPopup(this.popPrivacy);
			break;
		default:
		}
	}
	,showTutorDialog: function(content) {
		this.popTutor.setContent(content);
		this.popTutor.showNext();
		this.showPopup(this.popTutor);
		this.popTutor.setEvenPosition(this.popTutor.get_position().x,haxepunk_HXP.height * 0.33);
		this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
	}
	,showErrorDialog: function(errorType) {
		if(errorType == 1) {
			this.popError.setMessage(kro13_kk_utils_L.get_instance().ERROR_ADS);
		} else {
			this.popError.setMessage(kro13_kk_utils_L.get_instance().ERROR_DEFAULT);
		}
		this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
		this.showPopup(this.popError);
	}
	,showStatsDialog: function() {
		this.popStats.setStats(this.dataProvider.getProfile());
		this.showPopup(this.popStats);
		this.dataProvider.getTopScores(this.statsGlobal,$bind(this,this.onTopScoreGot));
	}
	,showHelpDialog: function() {
		this.showPopup(this.popHelp);
		this.popHelp.setEvenPosition(this.popHelp.offset * 0.5,this.popHelp.offset * 0.5);
		this.popHelp.setPage();
		if(!kro13_kk_data_EProfileTag.isTagged(0,this.dataProvider.getProfile())) {
			var _g = $bind(this,this.hidePopup);
			var popup = this.popHelp;
			var _g1 = $bind(this,this.stopHelp);
			var doPlay = true;
			var onHide = function() {
				_g1(doPlay);
			};
			var tmp = function() {
				_g(popup,onHide);
			};
			this.popHelp.btnOk.action = tmp;
		} else {
			var _g2 = $bind(this,this.hidePopup);
			var popup1 = this.popHelp;
			var _g3 = $bind(this,this.stopHelp);
			var doPlay1 = false;
			var onHide1 = function() {
				_g3(doPlay1);
			};
			var tmp = function() {
				_g2(popup1,onHide1);
			};
			this.popHelp.btnOk.action = tmp;
		}
	}
	,showSettingsDialog: function() {
		this.showPopup(this.popSettings);
	}
	,showCreditsDialog: function() {
		this.showPopup(this.popCredits);
	}
	,stopHelp: function(doPlay) {
		if(doPlay) {
			this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
		}
	}
	,showConfirmDialog: function(message,onConfirm,onCancel) {
		this.popConfirm.buttons[0].transform.set_visible(onCancel != null);
		this.popConfirm.validateLayout();
		var _g = $bind(this,this.hidePopup);
		var popup = this.popConfirm;
		var onHide = onCancel;
		var tmp = function() {
			_g(popup,onHide);
		};
		this.popConfirm.buttons[0].action = tmp;
		var _g1 = $bind(this,this.hidePopup);
		var popup1 = this.popConfirm;
		var onHide1 = onConfirm;
		var tmp = function() {
			_g1(popup1,onHide1);
		};
		this.popConfirm.buttons[1].action = tmp;
		this.popConfirm.setMessage(message);
		this.showPopup(this.popConfirm);
	}
	,showPopup: function(popup) {
		if(this.currPopup != null) {
			this.removeContainer(this.currPopup);
		}
		this.addContainer(popup);
		this.currPopup = popup;
		this.currPopup.setEvenPosition((haxepunk_HXP.width - 900) * 0.5,(haxepunk_HXP.height - this.currPopup.get_size().y) * 0.5);
		this.removeContainer(this.mainMenu);
		this.removeContainer(this.quickMenu);
		this.removeContainer(this.playerHUD);
	}
	,toggleStats: function() {
		this.statsGlobal = !this.statsGlobal;
		this.popStats.setStats(this.dataProvider.getProfile());
		this.dataProvider.getTopScores(this.statsGlobal,$bind(this,this.onTopScoreGot));
		if(this.statsGlobal) {
			var _this = this.popStats.buttons[0];
			var text = kro13_kk_utils_L.get_instance().BTN_GLOBAL_FRIENDS;
			if(_this.label == null) {
				_this.label = new kro13_kk_guiObjects_TextField(_this.borderColor,_this.labelSize,false,true,null,_this.color);
				_this.label.build();
				_this.transform.addChild(_this.label.transform);
			}
			var _this1 = _this.label;
			_this1.materialConfig.text = text;
			_this1.renderer.isValid = false;
			_this.validateLayout();
			_this.label.renderer.isValid = false;
		} else {
			var _this = this.popStats.buttons[0];
			var text = kro13_kk_utils_L.get_instance().BTN_GLOBAL_ALL;
			if(_this.label == null) {
				_this.label = new kro13_kk_guiObjects_TextField(_this.borderColor,_this.labelSize,false,true,null,_this.color);
				_this.label.build();
				_this.transform.addChild(_this.label.transform);
			}
			var _this1 = _this.label;
			_this1.materialConfig.text = text;
			_this1.renderer.isValid = false;
			_this.validateLayout();
			_this.label.renderer.isValid = false;
		}
	}
	,hidePopup: function(popup,onHide) {
		this.removeContainer(popup);
		if(this.isMainMenu) {
			this.showMainMenu();
		} else {
			this.showQuickMenu();
		}
		haxe_Log.trace("-------------------> hide " + this.currPopup.name,{ fileName : "src/kro13/hxp/scenes/HxpGUIScene.hx", lineNumber : 426, className : "kro13.hxp.scenes.HxpGUIScene", methodName : "hidePopup"});
		this.currPopup = null;
		if(onHide != null) {
			onHide();
		}
	}
	,showQuickMenu: function() {
		this.mainMenu.collapse();
		this.removeContainer(this.mainMenu);
		this.addContainer(this.quickMenu);
		this.quickMenu.expand();
		this.addContainer(this.hud);
		this.addContainer(this.playerHUD);
		this.playerHUD.resetScore();
		this.isMainMenu = false;
	}
	,showMainMenu: function() {
		this.mainMenu.showIap(false);
		this.addContainer(this.mainMenu);
		this.mainMenu.expand();
		this.quickMenu.collapse();
		this.removeContainer(this.quickMenu);
		this.removeContainer(this.hud);
		this.removeContainer(this.playerHUD);
		if(this.currPopup != null) {
			this.removeContainer(this.currPopup);
		}
		if(this.popError != null) {
			this.removeContainer(this.popError);
		}
		this.isMainMenu = true;
	}
	,onTopScoreGot: function(topScore) {
		this.popStats.setTopScore(topScore);
		var tmp = haxepunk_HXP.height - this.popStats.get_size().y;
		this.popStats.get_position().y = tmp * 0.5;
	}
	,onResize: function(e) {
		this.resize();
	}
	,resize: function() {
		var popupX = Math.floor((haxepunk_HXP.width - 900) * 0.5);
		this.playerHUD.setEvenPosition(haxepunk_HXP.width * 0.5,haxepunk_HXP.height * 0.33);
		this.setQuickMenuPos();
		if(!kro13_kk_Constants.PORTRAIT) {
			this.mainMenu.setEvenPosition(popupX,(haxepunk_HXP.height - 500) * 0.5);
		} else {
			this.mainMenu.setEvenPosition(popupX,(haxepunk_HXP.height - 700) * 0.5);
		}
		var x = haxepunk_HXP.width;
		var y = 120;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.hud.set_size(this1);
		if(this.currPopup != null) {
			this.currPopup.setEvenPosition(popupX,(haxepunk_HXP.height - this.popConfirm.get_size().y) * 0.5);
		}
		this.popHelp.setEvenPosition(this.popHelp.offset * 0.5,this.popHelp.offset * 0.5);
		this.popHelp.validateLayout();
		this.popTutor.setEvenPosition(popupX,haxepunk_HXP.height * 0.33);
	}
	,displayIapBtnIfNeeded: function() {
		kro13_iap_IAPManager.get_instance().checkIfPremiumPurchased($bind(this,this.onNoAdsCheckDone));
	}
	,onNoAdsCheckDone: function(result) {
		if(!this.isMainMenu) {
			haxe_Log.trace("" + Std.string(this.isMainMenu),{ fileName : "src/kro13/hxp/scenes/HxpGUIScene.hx", lineNumber : 521, className : "kro13.hxp.scenes.HxpGUIScene", methodName : "onNoAdsCheckDone"});
			return;
		}
		if(!kro13_iap_IAPManager.get_instance().isAvailable()) {
			haxe_Log.trace("" + Std.string(kro13_iap_IAPManager.get_instance().isAvailable()),{ fileName : "src/kro13/hxp/scenes/HxpGUIScene.hx", lineNumber : 526, className : "kro13.hxp.scenes.HxpGUIScene", methodName : "onNoAdsCheckDone"});
			return;
		}
		haxe_Log.trace("" + (result == null ? "null" : "" + result),{ fileName : "src/kro13/hxp/scenes/HxpGUIScene.hx", lineNumber : 529, className : "kro13.hxp.scenes.HxpGUIScene", methodName : "onNoAdsCheckDone"});
		if(result) {
			kro13_ads_AdsManager.get_instance().set_enabled(false);
			this.mainMenu.showIap(false);
		} else {
			kro13_ads_AdsManager.get_instance().set_enabled(true);
			this.mainMenu.showIap(true);
		}
	}
	,showVkInfo: function() {
		if(this.mainMenu.btnSocial != null) {
			if(!kro13_kk_BonusManager.bonusCondition(this.dataProvider)) {
				this.mainMenu.btnSocial.startBlink();
				var _this = this.mainMenu.btnSocial;
				var text = "" + kro13_kk_utils_L.get_instance().BTN_SOCIAL + " <red>( БОНУС )</red>";
				if(_this.label == null) {
					_this.label = new kro13_kk_guiObjects_TextField(_this.borderColor,_this.labelSize,false,true,null,_this.color);
					_this.label.build();
					_this.transform.addChild(_this.label.transform);
				}
				var _this1 = _this.label;
				_this1.materialConfig.text = text;
				_this1.renderer.isValid = false;
				_this.validateLayout();
				_this.label.renderer.isValid = false;
			} else {
				this.mainMenu.btnSocial.stopBlink();
				var _this = this.mainMenu.btnSocial;
				var text = kro13_kk_utils_L.get_instance().BTN_SOCIAL;
				if(_this.label == null) {
					_this.label = new kro13_kk_guiObjects_TextField(_this.borderColor,_this.labelSize,false,true,null,_this.color);
					_this.label.build();
					_this.transform.addChild(_this.label.transform);
				}
				var _this1 = _this.label;
				_this1.materialConfig.text = text;
				_this1.renderer.isValid = false;
				_this.validateLayout();
				_this.label.renderer.isValid = false;
			}
		}
		if(kro13_kk_data_EProfileTag.isTagged(0,this.dataProvider.getProfile()) && !kro13_kk_data_EProfileTag.isTagged(2,this.dataProvider.getProfile())) {
			this.mainMenu.btnHelp.startBlink();
			var _this = this.mainMenu.btnHelp;
			var text = "" + kro13_kk_utils_L.get_instance().BTN_HELP + " <red>( СНЕГОВИКИ )</red>";
			if(_this.label == null) {
				_this.label = new kro13_kk_guiObjects_TextField(_this.borderColor,_this.labelSize,false,true,null,_this.color);
				_this.label.build();
				_this.transform.addChild(_this.label.transform);
			}
			var _this1 = _this.label;
			_this1.materialConfig.text = text;
			_this1.renderer.isValid = false;
			_this.validateLayout();
			_this.label.renderer.isValid = false;
		} else if(kro13_kk_data_EProfileTag.isTagged(0,this.dataProvider.getProfile()) && !kro13_kk_data_EProfileTag.isTagged(3,this.dataProvider.getProfile())) {
			this.mainMenu.btnHelp.startBlink();
			var _this = this.mainMenu.btnHelp;
			var text = "" + kro13_kk_utils_L.get_instance().BTN_HELP + " <red>( ЛАВИНА )</red>";
			if(_this.label == null) {
				_this.label = new kro13_kk_guiObjects_TextField(_this.borderColor,_this.labelSize,false,true,null,_this.color);
				_this.label.build();
				_this.transform.addChild(_this.label.transform);
			}
			var _this1 = _this.label;
			_this1.materialConfig.text = text;
			_this1.renderer.isValid = false;
			_this.validateLayout();
			_this.label.renderer.isValid = false;
		} else {
			this.mainMenu.btnHelp.stopBlink();
			var _this = this.mainMenu.btnHelp;
			var text = kro13_kk_utils_L.get_instance().BTN_HELP;
			if(_this.label == null) {
				_this.label = new kro13_kk_guiObjects_TextField(_this.borderColor,_this.labelSize,false,true,null,_this.color);
				_this.label.build();
				_this.transform.addChild(_this.label.transform);
			}
			var _this1 = _this.label;
			_this1.materialConfig.text = text;
			_this1.renderer.isValid = false;
			_this.validateLayout();
			_this.label.renderer.isValid = false;
		}
	}
	,__class__: kro13_hxp_scenes_HxpGUIScene
});
var kro13_hxp_scenes_HxpGameScene = function(gameEventSystem,dataProvider) {
	kro13_hxp_scenes_HxpAbstractScene.call(this);
	this.name = "Game Scene " + new Date().getTime() / 1000;
	this.scene.name = this.name;
	this.gameEventSystem = gameEventSystem;
	this.dataProvider = dataProvider;
	this.scene.bgAlpha = 0;
};
$hxClasses["kro13.hxp.scenes.HxpGameScene"] = kro13_hxp_scenes_HxpGameScene;
kro13_hxp_scenes_HxpGameScene.__name__ = "kro13.hxp.scenes.HxpGameScene";
kro13_hxp_scenes_HxpGameScene.__super__ = kro13_hxp_scenes_HxpAbstractScene;
kro13_hxp_scenes_HxpGameScene.prototype = $extend(kro13_hxp_scenes_HxpAbstractScene.prototype,{
	addContainer: function(container) {
		kro13_hxp_scenes_HxpAbstractScene.prototype.addContainer.call(this,container);
		this.gameEventSystem.addContainer(container);
	}
	,removeContainer: function(container) {
		kro13_hxp_scenes_HxpAbstractScene.prototype.removeContainer.call(this,container);
		this.gameEventSystem.removeContainer(container);
	}
	,init: function() {
		kro13_hxp_scenes_HxpAbstractScene.prototype.init.call(this);
		if(kro13_kk_sound_SoundManager.instance == null) {
			kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
		}
		kro13_kk_sound_SoundManager.instance.init(this.dataProvider);
		var eventHandler = new kro13_kk_components_GameEventHandler();
		this.addComponent(eventHandler);
		eventHandler.addHandler($bind(this,this.onEvent));
		this.gameEventSystem.addContainer(this);
		this.addSystem(new kro13_kk_systems_HitSystem(this,haxepunk_HXP.engine.preUpdate,this.dataProvider,this.gameEventSystem));
		this.addSystem(new kro13_hxp_systems_HxpPhysicsSystem(this,haxepunk_HXP.engine.preUpdate,this.visibiltyBuffer,this.gameEventSystem));
		this.addSystem(new kro13_hxp_systems_control_HxpMouseControlSystem(this,haxepunk_HXP.engine.preRender,this.dataProvider));
		this.particlesSystem = new kro13_hxp_systems_HxpParticlesSystem(this,haxepunk_HXP.engine.preRender);
		this.addSystem(this.particlesSystem);
		this.addSystem(new kro13_hxp_systems_HxpTextEmitterSystem(this,haxepunk_HXP.engine.preRender,this.scene));
		this.zIndexSystem = new kro13_hxp_systems_HxpZIndexSystem(this,haxepunk_HXP.engine.preRender,this.visibiltyBuffer,this.scene);
		this.addSystem(this.zIndexSystem);
		this.addSystem(new kro13_hxp_systems_HxpCameraSystem(this,haxepunk_HXP.engine.preRender,this.dataProvider,this.scene.camera));
		this.addSystem(new kro13_kk_systems_AnimationSystem(this,haxepunk_HXP.engine.preRender));
		this.addSystem(new kro13_kk_systems_TrampSystem(this,haxepunk_HXP.engine.preRender,this.gameEventSystem,this.dataProvider));
		this.addSystem(new kro13_kk_systems_StuckSystem(this,haxepunk_HXP.engine.preRender,this.gameEventSystem));
		this.updateSystem = new kro13_kk_systems_SimpleUpdateSystem(this,haxepunk_HXP.engine.preUpdate);
		this.addSystem(this.updateSystem);
		this.scoreSystem = new kro13_kk_systems_ScoreSystem(this,haxepunk_HXP.engine.preRender,this.dataProvider,this.gameEventSystem);
		this.addSystem(this.scoreSystem);
		this.addSystem(new kro13_kk_systems_DestroySystem(this,this.gameEventSystem));
		this.avalancheSystem = new kro13_kk_systems_AvalancheSystem(this,haxepunk_HXP.engine.preRender,this.dataProvider,this.gameEventSystem);
		this.addSystem(this.avalancheSystem);
		this.soundSystem = new kro13_kk_systems_SoundControlSystem(this,haxepunk_HXP.engine.postUpdate,this.gameEventSystem,this.dataProvider,this.avalancheSystem);
		this.addSystem(this.soundSystem);
		this.addSystem(new kro13_kk_systems_TricksSystem(this,haxepunk_HXP.engine.preRender,this.dataProvider,this.gameEventSystem));
		this.fogSystem = new kro13_kk_systems_FogSystem(this,haxepunk_HXP.engine.preRender,this.visibiltyBuffer,this.dataProvider);
		this.addSystem(this.fogSystem);
		this.rollbackSystem = new kro13_kk_systems_RollbackSystem(this,haxepunk_HXP.engine.preRender,this.gameEventSystem);
		this.addSystem(this.rollbackSystem);
		this.addSystem(new kro13_kk_systems_ChaseSystem(this,haxepunk_HXP.engine.preUpdate,this.dataProvider,this.gameEventSystem));
	}
	,start: function() {
		this.renderSystem.start();
		this.transformSystem.start();
		this.fogSystem.start();
		this.updateSystem.start();
		this.zIndexSystem.start();
		this.rollbackSystem.start();
		this.soundSystem.start();
	}
	,clear: function() {
		kro13_hxp_scenes_HxpAbstractScene.prototype.clear.call(this);
		if(this.player != null) {
			this.player.destroy();
		}
		if(this.canyon != null) {
			this.canyon.destroy();
		}
	}
	,build: function() {
		this.buildPlayer();
		this.buildCanyon();
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var firstStart = e.firstStart;
			this.startNew(firstStart);
			break;
		case 1:
			this.restart();
			break;
		case 2:
			this.play();
			break;
		case 3:
			this.pause();
			break;
		case 30:
			var _g = e.startNew;
			this.updateSystem.removeContainer(this.canyon);
			break;
		default:
		}
	}
	,play: function() {
		haxe_Log.trace("play",{ fileName : "src/kro13/hxp/scenes/HxpGameScene.hx", lineNumber : 183, className : "kro13.hxp.scenes.HxpGameScene", methodName : "play"});
		kro13_hxp_scenes_HxpAbstractScene.prototype.start.call(this);
	}
	,pause: function() {
		haxe_Log.trace("pause",{ fileName : "src/kro13/hxp/scenes/HxpGameScene.hx", lineNumber : 189, className : "kro13.hxp.scenes.HxpGameScene", methodName : "pause"});
		this.stop();
		this.start();
	}
	,restart: function() {
		var this1 = { x : 0, y : 0};
		this.player.body.velocity = this1;
		this.player.body.enableForceById(0);
		this.player.body.enableForceById(1);
		this.player.body.enableForceById(2);
		this.player.body.enableForceById(3);
		this.player.set_position(this.canyon.getRestartPoint());
		this.dataProvider.updateRestarts(-1);
		this.updateSystem.addContainer(this.canyon);
		kro13_analytics_Analytics.get_instance().sendEventWithAmount("rollbacks:decrease",this.dataProvider.getProfile().restarts);
	}
	,startNew: function(firstStart) {
		if(!firstStart) {
			if(this.dataProvider.getLocal().scoreData.currentScore > this.dataProvider.getProfile().totalScore) {
				var tmp = this.dataProvider.getLocal().scoreData;
				this.dataProvider.getProfile().totalScore = tmp.currentScore;
			}
			this.dataProvider.updateRemoteProfileProp("totalScore",this.dataProvider.getProfile().totalScore,$bind(this,this.onProfileUpdated));
		}
		this.pause();
		this.clear();
		if(!firstStart) {
			kro13_analytics_Analytics.get_instance().sendEventWithAmount("score:current",this.dataProvider.getLocal().scoreData.currentScore);
			this.scoreSystem.reset();
			this.dataProvider.validateLocal();
			this.dataProvider.updateRestarts(1,true);
			this.dataProvider.getProfile().canyonChain = [];
			kro13_analytics_Analytics.get_instance().sendEventWithAmount("rollbacks:reset",this.dataProvider.getProfile().restarts);
			kro13_analytics_Analytics.get_instance().sendEvent("game:finish");
		}
		this.build();
		this.start();
		kro13_analytics_Analytics.get_instance().sendEvent("game:start");
	}
	,buildCanyon: function() {
		this.canyon = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildCanyonChain(this.dataProvider,this.gameEventSystem);
		this.canyon.setPlayer(this.player);
		this.canyon.childAdded.callbacks.push($bind(this,this.onCanyonAdded));
		this.canyon.childRemoved.callbacks.push($bind(this,this.onCanyonRemoved));
		this.addContainer(this.canyon);
	}
	,onCanyonAdded: function(canyonChild) {
		this.addContainer(canyonChild);
	}
	,onCanyonRemoved: function(canyonChild) {
		this.removeContainer(canyonChild);
		canyonChild.destroy();
	}
	,buildPlayer: function() {
		this.player = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildPlayer(this.dataProvider);
		this.gameEventSystem.addContainer(this.player);
		this.addContainer(this.player);
		var _this = this.player;
		var pile;
		if(_this.componentsMap == null) {
			pile = null;
		} else {
			var component = _this.componentsMap.h[13];
			pile = component;
		}
		pile.enable(false);
		this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.PLAYER_CREATED(this.player));
	}
	,onRemoteProfileSaved: function(remoteId) {
	}
	,onProfileUpdated: function(remoteId) {
		kro13_analytics_Analytics.get_instance().sendEventWithAmount("score:total",this.dataProvider.getProfile().totalScore);
	}
	,__class__: kro13_hxp_scenes_HxpGameScene
});
var kro13_hxp_scenes_HxpPreloaderScene = function() {
	kro13_hxp_scenes_HxpAbstractScene.call(this);
	this.name = "Preloader scene";
	this.scene.camera = new haxepunk_cameras_StaticCamera();
	this.scene.name = this.name;
};
$hxClasses["kro13.hxp.scenes.HxpPreloaderScene"] = kro13_hxp_scenes_HxpPreloaderScene;
kro13_hxp_scenes_HxpPreloaderScene.__name__ = "kro13.hxp.scenes.HxpPreloaderScene";
kro13_hxp_scenes_HxpPreloaderScene.__super__ = kro13_hxp_scenes_HxpAbstractScene;
kro13_hxp_scenes_HxpPreloaderScene.prototype = $extend(kro13_hxp_scenes_HxpAbstractScene.prototype,{
	init: function() {
		kro13_hxp_scenes_HxpAbstractScene.prototype.init.call(this);
		this.addSystem(new kro13_kk_systems_AnimationSystem(this,haxepunk_HXP.engine.preUpdate));
	}
	,start: function() {
		kro13_hxp_scenes_HxpAbstractScene.prototype.start.call(this);
	}
	,build: function() {
		this.preloader = new kro13_kk_guiObjects_KKPreloader();
		var x = haxepunk_HXP.width;
		var y = haxepunk_HXP.height;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.preloader.set_size(this1);
		this.preloader.build();
		this.addContainer(this.preloader);
	}
	,__class__: kro13_hxp_scenes_HxpPreloaderScene
});
var kro13_hxp_scenes_HxpSnowScene = function(eventSystem,dataProvider) {
	kro13_hxp_scenes_HxpAbstractScene.call(this);
	this.eventSystem = eventSystem;
	this.dataProvider = dataProvider;
	this.scene.camera = new haxepunk_cameras_StaticCamera();
	this.scene.bgAlpha = 0;
	this.name = "snow scene";
	this.scene.name = this.name;
};
$hxClasses["kro13.hxp.scenes.HxpSnowScene"] = kro13_hxp_scenes_HxpSnowScene;
kro13_hxp_scenes_HxpSnowScene.__name__ = "kro13.hxp.scenes.HxpSnowScene";
kro13_hxp_scenes_HxpSnowScene.__super__ = kro13_hxp_scenes_HxpAbstractScene;
kro13_hxp_scenes_HxpSnowScene.prototype = $extend(kro13_hxp_scenes_HxpAbstractScene.prototype,{
	build: function() {
		this.snow = new kro13_kk_guiObjects_effects_Snow(this.dataProvider);
		this.snow.build();
		this.addContainer(this.snow);
		this.eventSystem.addContainer(this.snow);
		var light = new kro13_kk_gameObjects_Renderable();
		haxepunk_math_Vector2.setTo(light.transform.get_size(),haxepunk_HXP.width,haxepunk_HXP.height * 0.33);
		light.setEvenPosition(0,0);
		var lightMaterialC = { size : light.transform.get_size(), source : "images/light.png"};
		light.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(lightMaterialC);
		light.transform.set_alpha(0.3);
		this.addContainer(light);
		this.snowFront = new kro13_kk_guiObjects_effects_Snow(this.dataProvider,2,2,0.4,5);
		this.snowFront.build();
		this.addContainer(this.snowFront);
		this.eventSystem.addContainer(this.snowFront);
	}
	,init: function() {
		kro13_hxp_scenes_HxpAbstractScene.prototype.init.call(this);
		this.addSystem(new kro13_hxp_systems_HxpParticlesSystem(this,haxepunk_HXP.engine.preRender));
	}
	,__class__: kro13_hxp_scenes_HxpSnowScene
});
var kro13_hxp_sound_HxpSfx = function(source,onComplete) {
	this.isPaused = false;
	this.isStopped = true;
	haxepunk_Sfx.call(this,source,onComplete);
	this.fader = new haxepunk_tweens_sound_SfxFader(this);
	haxepunk_HXP.tweener.addTween(this.fader,false);
};
$hxClasses["kro13.hxp.sound.HxpSfx"] = kro13_hxp_sound_HxpSfx;
kro13_hxp_sound_HxpSfx.__name__ = "kro13.hxp.sound.HxpSfx";
kro13_hxp_sound_HxpSfx.__super__ = haxepunk_Sfx;
kro13_hxp_sound_HxpSfx.prototype = $extend(haxepunk_Sfx.prototype,{
	play: function(volume,pan,loop) {
		if(loop == null) {
			loop = false;
		}
		if(pan == null) {
			pan = 0;
		}
		if(volume == null) {
			volume = 1;
		}
		if(this.isStopped) {
			this.isStopped = false;
			haxepunk_Sfx.prototype.play.call(this,volume,pan,loop);
		} else if(this.isPaused) {
			this.resume();
			this.isPaused = false;
		}
	}
	,fade: function() {
		this.fader.fadeTo(0,1);
	}
	,loop: function(volume,pan) {
		if(pan == null) {
			pan = 0;
		}
		if(volume == null) {
			volume = 1;
		}
		this.isStopped = true;
		haxepunk_Sfx.prototype.loop.call(this,volume,pan);
	}
	,stop: function() {
		this.isStopped = true;
		return haxepunk_Sfx.prototype.stop.call(this);
	}
	,pause: function() {
		this.isPaused = true;
		haxepunk_Sfx.prototype.stop.call(this);
	}
	,isPlaying: function() {
		if(!this.isPaused) {
			return !this.isStopped;
		} else {
			return false;
		}
	}
	,__class__: kro13_hxp_sound_HxpSfx
});
var kro13_hxp_sound_HxpSoundManager = function() {
	kro13_kk_sound_AbstractSoundManager.call(this);
};
$hxClasses["kro13.hxp.sound.HxpSoundManager"] = kro13_hxp_sound_HxpSoundManager;
kro13_hxp_sound_HxpSoundManager.__name__ = "kro13.hxp.sound.HxpSoundManager";
kro13_hxp_sound_HxpSoundManager.__super__ = kro13_kk_sound_AbstractSoundManager;
kro13_hxp_sound_HxpSoundManager.prototype = $extend(kro13_kk_sound_AbstractSoundManager.prototype,{
	setVolume: function(sound,value) {
		var snd = this.soundsMap.h[sound];
		snd.set_volume(value);
	}
	,fade: function(sound) {
		haxe_Log.trace("fade " + sound,{ fileName : "src/kro13/hxp/sound/HxpSoundManager.hx", lineNumber : 25, className : "kro13.hxp.sound.HxpSoundManager", methodName : "fade"});
		var snd = this.soundsMap.h[sound];
		snd.fade();
	}
	,isPlaying: function(sound) {
		var snd = this.soundsMap.h[sound];
		return snd.isPlaying();
	}
	,doPlay: function(sound,loop) {
		var sfx = this.soundsMap.h[sound];
		if(!sfx.isPlaying()) {
			haxe_Log.trace("play " + sound,{ fileName : "src/kro13/hxp/sound/HxpSoundManager.hx", lineNumber : 41, className : "kro13.hxp.sound.HxpSoundManager", methodName : "doPlay"});
			sfx.play(1,0,loop);
		}
	}
	,doStop: function(sound) {
		var sfx = this.soundsMap.h[sound];
		if(sfx != null) {
			haxe_Log.trace("stop " + sound,{ fileName : "src/kro13/hxp/sound/HxpSoundManager.hx", lineNumber : 51, className : "kro13.hxp.sound.HxpSoundManager", methodName : "doStop"});
			sfx.stop();
		}
	}
	,doPause: function(sound) {
		var sfx = this.soundsMap.h[sound];
		if(sfx != null) {
			haxe_Log.trace("pause " + sound,{ fileName : "src/kro13/hxp/sound/HxpSoundManager.hx", lineNumber : 61, className : "kro13.hxp.sound.HxpSoundManager", methodName : "doPause"});
			sfx.pause();
		}
	}
	,makeSound: function(name) {
		var snd = new kro13_hxp_sound_HxpSfx("audio/" + name + "." + "mp3");
		haxe_Log.trace("audio/" + name + "." + "mp3",{ fileName : "src/kro13/hxp/sound/HxpSoundManager.hx", lineNumber : 69, className : "kro13.hxp.sound.HxpSoundManager", methodName : "makeSound"});
		return snd;
	}
	,__class__: kro13_hxp_sound_HxpSoundManager
});
var kro13_kk_systems_AbstractComponentSystem = function(scene) {
	this.containers = [];
	this.scene = scene;
};
$hxClasses["kro13.kk.systems.AbstractComponentSystem"] = kro13_kk_systems_AbstractComponentSystem;
kro13_kk_systems_AbstractComponentSystem.__name__ = "kro13.kk.systems.AbstractComponentSystem";
kro13_kk_systems_AbstractComponentSystem.__interfaces__ = [kro13_kk_systems_IComponentSystem];
kro13_kk_systems_AbstractComponentSystem.prototype = {
	addContainer: function(container) {
		if(this.containers.indexOf(container) >= 0) {
			return;
		}
		this.containers.push(container);
		var _g = $bind(this,this.removeContainer);
		var container1 = container;
		var tmp = function() {
			_g(container1);
		};
		container.onDestroy.callbacks.push(tmp);
	}
	,removeContainer: function(container) {
		if(this.containers.indexOf(container) < 0) {
			return;
		}
		HxOverrides.remove(this.containers,container);
		var _g = $bind(this,this.removeContainer);
		var container1 = container;
		var tmp = function() {
			_g(container1);
		};
		HxOverrides.remove(container.onDestroy.callbacks,tmp);
	}
	,clear: function() {
		this.containers = [];
	}
	,start: function() {
	}
	,stop: function() {
	}
	,__class__: kro13_kk_systems_AbstractComponentSystem
};
var kro13_kk_systems_AbstractUpdateSystem = function(scene,onUpdate) {
	kro13_kk_systems_AbstractComponentSystem.call(this,scene);
	this.onUpdate = onUpdate;
};
$hxClasses["kro13.kk.systems.AbstractUpdateSystem"] = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_AbstractUpdateSystem.__name__ = "kro13.kk.systems.AbstractUpdateSystem";
kro13_kk_systems_AbstractUpdateSystem.__super__ = kro13_kk_systems_AbstractComponentSystem;
kro13_kk_systems_AbstractUpdateSystem.prototype = $extend(kro13_kk_systems_AbstractComponentSystem.prototype,{
	start: function() {
		kro13_kk_systems_AbstractComponentSystem.prototype.start.call(this);
		if(this.onUpdate.callbacks.indexOf($bind(this,this.update)) <= -1) {
			this.onUpdate.callbacks.push($bind(this,this.update));
		}
	}
	,stop: function() {
		kro13_kk_systems_AbstractComponentSystem.prototype.stop.call(this);
		HxOverrides.remove(this.onUpdate.callbacks,$bind(this,this.update));
	}
	,update: function() {
	}
	,__class__: kro13_kk_systems_AbstractUpdateSystem
});
var kro13_hxp_systems_HxpCameraSystem = function(scene,onUpdate,dataProvider,camera) {
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.camera = camera;
	this.dataProvider = dataProvider;
	var this1 = { x : 0, y : 0};
	this.anchor = this1;
	camera.scale = 1.3;
};
$hxClasses["kro13.hxp.systems.HxpCameraSystem"] = kro13_hxp_systems_HxpCameraSystem;
kro13_hxp_systems_HxpCameraSystem.__name__ = "kro13.hxp.systems.HxpCameraSystem";
kro13_hxp_systems_HxpCameraSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_hxp_systems_HxpCameraSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		if(container.type == 1) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[3];
				tmp = component;
			}
			this.playerBody = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[6];
				tmp = component;
			}
			this.playerHandler = tmp;
			var transform;
			if(container.componentsMap == null) {
				transform = null;
			} else {
				var component = container.componentsMap.h[2];
				transform = component;
			}
			var transform1 = transform;
			this.anchor = transform1.get_position();
			this.anchorCamera();
			this.playerHandler.addHandler($bind(this,this.onEvent));
		}
	}
	,clear: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.clear.call(this);
		this.playerBody = null;
		this.playerHandler = null;
	}
	,update: function() {
		var this1 = this.playerBody.velocity;
		var scale = 0.95 * this.camera.scale + 0.05 * (1.8 - 0.6 * Math.sqrt(this1.x * this1.x + this1.y * this1.y) / this.dataProvider.getLocal().maxSpeed) + 0.05 * (1 - kro13_kk_systems_DTSystem.multiplier);
		this.camera.scale = scale;
	}
	,anchorCamera: function() {
		this.camera.anchor(this.anchor,0.5,0.33);
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var _g = e.firstStart;
			this.anchorCamera();
			break;
		case 1:
			this.anchorCamera();
			break;
		case 18:
			var _g = e.target;
			var amplitude = e.amplitude;
			if(amplitude >= 2) {
				this.camera.shake(0.5,10);
			} else if(amplitude == 1) {
				this.camera.shake(0.3,3);
			}
			break;
		case 25:
			this.camera.shake(1.5,10);
			break;
		case 30:
			var _g = e.startNew;
			this.camera.anchor(null,0,0);
			break;
		default:
		}
	}
	,__class__: kro13_hxp_systems_HxpCameraSystem
});
var kro13_hxp_systems_HxpParticlesSystem = function(scene,onUpdate) {
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	if(kro13_hxp_systems_render_HxpEntitiesManager.instance == null) {
		kro13_hxp_systems_render_HxpEntitiesManager.instance = new kro13_hxp_systems_render_HxpEntitiesManager();
	}
	this.entitiesManager = kro13_hxp_systems_render_HxpEntitiesManager.instance;
};
$hxClasses["kro13.hxp.systems.HxpParticlesSystem"] = kro13_hxp_systems_HxpParticlesSystem;
kro13_hxp_systems_HxpParticlesSystem.__name__ = "kro13.hxp.systems.HxpParticlesSystem";
kro13_hxp_systems_HxpParticlesSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_hxp_systems_HxpParticlesSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		var particles;
		if(container.componentsMap == null) {
			particles = null;
		} else {
			var component = container.componentsMap.h[4];
			particles = component;
		}
		var particles1 = particles;
		if(particles1 != null) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
		}
		var transform;
		if(container.componentsMap == null) {
			transform = null;
		} else {
			var component = container.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		var ch = transform1.iterator();
		while(ch.hasNext()) {
			var ch1 = ch.next();
			this.addContainer(ch1.owner);
		}
	}
	,removeContainer: function(container) {
		kro13_kk_systems_AbstractUpdateSystem.prototype.removeContainer.call(this,container);
		var transform;
		if(container.componentsMap == null) {
			transform = null;
		} else {
			var component = container.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		var ch = transform1.iterator();
		while(ch.hasNext()) {
			var ch1 = ch.next();
			this.removeContainer(ch1.owner);
		}
	}
	,start: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.start.call(this);
	}
	,stop: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.stop.call(this);
	}
	,update: function() {
		var particles = null;
		var _g = 0;
		var _g1 = this.containers;
		while(_g < _g1.length) {
			var transformable = _g1[_g];
			++_g;
			var particles1;
			if(transformable.componentsMap == null) {
				particles1 = null;
			} else {
				var component = transformable.componentsMap.h[4];
				particles1 = component;
			}
			particles = particles1;
			particles.update(kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier);
			if(this.entitiesManager.idsToEntities[transformable.id] != null) {
				if(particles.visible && particles.isTimeToEmit()) {
					var entity = this.entitiesManager.getEntity(transformable.id);
					var emitter = entity.graphic;
					switch(particles.particlesType) {
					case "avalanche_front":
						emitter.emit(particles.particlesType,(Math.random() - 0.5) * haxepunk_HXP.width,0);
						break;
					case "blow":
						emitter.emit(particles.particlesType,0,0);
						break;
					case "plume":
						emitter.emit(particles.particlesType,0,0);
						break;
					case "snow":
						emitter.emit(particles.particlesType,Math.random() * haxepunk_HXP.width,0);
						break;
					default:
					}
				}
			}
		}
	}
	,__class__: kro13_hxp_systems_HxpParticlesSystem
});
var kro13_hxp_systems_HxpPhysicsSystem = function(scene,onUpdate,visibiltyBuffer,eventDispatcher) {
	this.updCounter = 1;
	var this1 = { x : 1, y : 0};
	this.vectorRight = this1;
	var this1 = { x : -1, y : 0};
	this.vectorLeft = this1;
	var this1 = { x : 0, y : 1};
	this.vectorUp = this1;
	var this1 = { x : 0, y : 0};
	this.collisionResistance = this1;
	var this1 = { x : 0, y : 0};
	this.playerAcceleration = this1;
	this.updateSteps = 1;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	if(kro13_hxp_systems_render_HxpEntitiesManager.instance == null) {
		kro13_hxp_systems_render_HxpEntitiesManager.instance = new kro13_hxp_systems_render_HxpEntitiesManager();
	}
	this.entitiesManager = kro13_hxp_systems_render_HxpEntitiesManager.instance;
	this.visibilityBuffer = visibiltyBuffer;
	this.eventDispatcher = eventDispatcher;
	this.physicalCoeffs = [];
};
$hxClasses["kro13.hxp.systems.HxpPhysicsSystem"] = kro13_hxp_systems_HxpPhysicsSystem;
kro13_hxp_systems_HxpPhysicsSystem.__name__ = "kro13.hxp.systems.HxpPhysicsSystem";
kro13_hxp_systems_HxpPhysicsSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_hxp_systems_HxpPhysicsSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	clear: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.clear.call(this);
		this.physicalCoeffs = [];
	}
	,addContainer: function(container) {
		var body;
		if(container.componentsMap == null) {
			body = null;
		} else {
			var component = container.componentsMap.h[3];
			body = component;
		}
		var body1 = body;
		if(body1 != null && body1.hasForces()) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
		}
		var physicalCoeff;
		if(container.componentsMap == null) {
			physicalCoeff = null;
		} else {
			var component = container.componentsMap.h[12];
			physicalCoeff = component;
		}
		var physicalCoeff1 = physicalCoeff;
		if(physicalCoeff1 != null) {
			this.physicalCoeffs.push(physicalCoeff1);
		}
	}
	,update: function() {
		var transform = null;
		var body = null;
		var dt = kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier;
		var mtv = null;
		var _g = 0;
		var _g1 = this.containers;
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			var transform1;
			if(container.componentsMap == null) {
				transform1 = null;
			} else {
				var component = container.componentsMap.h[2];
				transform1 = component;
			}
			transform = transform1;
			var body1;
			if(container.componentsMap == null) {
				body1 = null;
			} else {
				var component1 = container.componentsMap.h[3];
				body1 = component1;
			}
			body = body1;
			if(this.entitiesManager.idsToEntities[container.id] != null) {
				var bodyBB = this.entitiesManager.getEntityBB(container.id,body.position.x,body.position.y,body.size.x,body.size.y);
				body.acceleration.x = 0;
				body.acceleration.y = 0;
				var _g2 = 0;
				var _g3 = body.forces;
				while(_g2 < _g3.length) {
					var f = _g3[_g2];
					++_g2;
					if(f.enabled) {
						f.update();
						body.acceleration.x += f.get_vector().x / body.mass;
						body.acceleration.y += f.get_vector().y / body.mass;
					}
				}
				body.velocity.x += body.acceleration.x * dt * body.timeRate;
				body.velocity.y += body.acceleration.y * dt * body.timeRate;
				var this1 = body.velocity;
				var x = this1.x;
				var y = this1.y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var this2 = { x : x, y : y};
				var this3 = this2;
				this3.x *= dt;
				this3.y *= dt;
				var distance = this3;
				bodyBB.set_angle(transform.get_rotation());
				if(this.updCounter >= 1) {
					var collideables = this.visibilityBuffer.visible;
					var _g4 = 0;
					while(_g4 < collideables.length) {
						var collideable = collideables[_g4];
						++_g4;
						var body11;
						if(collideable.componentsMap == null) {
							body11 = null;
						} else {
							var component2 = collideable.componentsMap.h[3];
							body11 = component2;
						}
						var body12 = body11;
						var transform11;
						if(collideable.componentsMap == null) {
							transform11 = null;
						} else {
							var component3 = collideable.componentsMap.h[2];
							transform11 = component3;
						}
						var transform12 = transform11;
						if(collideable != container && body12 != null) {
							var bodyBB1 = this.entitiesManager.getEntityBB(collideable.id,body12.position.x,body12.position.y,body12.size.x,body12.size.y);
							var x1 = bodyBB.get_x();
							var y1 = bodyBB.get_y();
							bodyBB.set_x(Math.ceil(distance.x));
							bodyBB.set_y(Math.ceil(distance.y));
							var result = bodyBB != null && bodyBB1 != null && bodyBB.collide(bodyBB1);
							bodyBB.set_x(x1);
							bodyBB.set_y(y1);
							if(result) {
								switch(collideable.type) {
								case 2:case 3:case 4:case 7:
									if(transform.get_position() == null) {
										haxe_Log.trace(transform.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
									}
									transform.absPosition.x = transform.get_position().x;
									transform.absPosition.y = transform.get_position().y;
									var parent = transform.parent;
									while(parent != null) {
										transform.absPosition.x += parent.get_position().x;
										transform.absPosition.y += parent.get_position().y;
										parent = parent.parent;
									}
									var position = transform.absPosition;
									var obb = [];
									if(bodyBB != null) {
										var _g5 = 0;
										var _g6 = bodyBB._points;
										while(_g5 < _g6.length) {
											var p = _g6[_g5];
											++_g5;
											var x2 = position.x + p.x + distance.x;
											var y2 = position.y + p.y + distance.y;
											if(y2 == null) {
												y2 = 0;
											}
											if(x2 == null) {
												x2 = 0;
											}
											var this4 = { x : x2, y : y2};
											obb.push(this4);
										}
									}
									var obb1 = obb;
									if(transform12.get_position() == null) {
										haxe_Log.trace(transform12.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
									}
									transform12.absPosition.x = transform12.get_position().x;
									transform12.absPosition.y = transform12.get_position().y;
									var parent1 = transform12.parent;
									while(parent1 != null) {
										transform12.absPosition.x += parent1.get_position().x;
										transform12.absPosition.y += parent1.get_position().y;
										parent1 = parent1.parent;
									}
									var position1 = transform12.absPosition;
									var this5 = { x : 0, y : 0};
									var virtualShift = this5;
									var obb2 = [];
									if(bodyBB1 != null) {
										var _g7 = 0;
										var _g8 = bodyBB1._points;
										while(_g7 < _g8.length) {
											var p1 = _g8[_g7];
											++_g7;
											var x3 = position1.x + p1.x + virtualShift.x;
											var y3 = position1.y + p1.y + virtualShift.y;
											if(y3 == null) {
												y3 = 0;
											}
											if(x3 == null) {
												x3 = 0;
											}
											var this6 = { x : x3, y : y3};
											obb2.push(this6);
										}
									}
									var obb11 = obb2;
									if(kro13_kk_utils_CollisionUtils.instance == null) {
										kro13_kk_utils_CollisionUtils.instance = new kro13_kk_utils_CollisionUtils();
									}
									mtv = kro13_kk_utils_CollisionUtils.instance.getMinTranslationVector(obb1,obb11);
									var x4 = distance.x;
									var y4 = distance.y;
									if(y4 == null) {
										y4 = 0;
									}
									if(x4 == null) {
										x4 = 0;
									}
									var this7 = { x : x4, y : y4};
									var this8 = this7;
									this8.x -= mtv.x;
									this8.y -= mtv.y;
									distance = this8;
									var size = 1;
									if(size == null) {
										size = 1;
									}
									if(!(mtv.x == 0 && mtv.y == 0)) {
										var normal = size / Math.sqrt(mtv.x * mtv.x + mtv.y * mtv.y);
										mtv.x *= normal;
										mtv.y *= normal;
									}
									var resistanceDirection = mtv;
									this.collisionResistance.x = 0;
									this.collisionResistance.y = 0;
									var resX;
									if(body.velocity.x >= 0) {
										var other = this.vectorRight;
										resX = resistanceDirection.x * other.x + resistanceDirection.y * other.y;
									} else {
										var other1 = this.vectorLeft;
										resX = resistanceDirection.x * other1.x + resistanceDirection.y * other1.y;
									}
									var other2 = this.vectorUp;
									var resY = resistanceDirection.x * other2.x + resistanceDirection.y * other2.y;
									if(resX >= 0) {
										this.collisionResistance.x = -body.velocity.x * (resX + 0.1);
									}
									if(resY >= 0) {
										this.collisionResistance.y = -body.velocity.y * (resY + 0.01);
									}
									var resistanceSpeed = this.collisionResistance;
									var this9 = body.velocity;
									var x5 = this9.x;
									var y5 = this9.y;
									if(y5 == null) {
										y5 = 0;
									}
									if(x5 == null) {
										x5 = 0;
									}
									var this10 = { x : x5, y : y5};
									var this11 = this10;
									this11.x += resistanceSpeed.x;
									this11.y += resistanceSpeed.y;
									body.velocity = this11;
									break;
								default:
								}
								var _g9 = 0;
								var _g10 = body.onCollide.callbacks;
								while(_g9 < _g10.length) {
									var callback = _g10[_g9];
									++_g9;
									callback(collideable);
								}
								var _g11 = 0;
								var _g12 = body12.onCollide.callbacks;
								while(_g11 < _g12.length) {
									var callback1 = _g12[_g11];
									++_g11;
									callback1(container);
								}
							}
						}
					}
					this.updCounter = 0;
				}
				if(Math.sqrt(distance.x * distance.x + distance.y * distance.y) > 0) {
					transform.moveBy(Math.round(distance.x),Math.round(distance.y));
				}
				var _g13 = transform;
				_g13.set_rotation(_g13.get_rotation() + body.angularVelocity * dt);
			}
		}
		this.updCounter++;
		var _g = 0;
		var _g1 = this.physicalCoeffs;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.rotationQueue.push(p.transform.get_rotation());
			if(p.rotationQueue.length >= 5) {
				p.rotationQueue.shift();
			}
			var this1 = p.body.velocity;
			p.speedQueue.push(Math.sqrt(this1.x * this1.x + this1.y * this1.y));
			var this2 = p.body.velocity;
			p.speedSum += Math.sqrt(this2.x * this2.x + this2.y * this2.y);
			if(p.speedQueue.length >= 20) {
				p.speedSum -= p.speedQueue[0];
				p.speedQueue.shift();
			}
			p.speedCoeff = 1 / (p.speedSum / p.speedQueue.length + 1);
			p.rotationCoeff = 1 / (Math.pow(p.transform.get_rotation() - p.rotationQueue[0],2) * 0.1 + 1);
		}
	}
	,collidesWithAny: function(forcedId,anyId,forced,any) {
		var bb1 = this.entitiesManager.getEntityBB(forcedId,0,0,forced.get_size().x,forced.get_size().y);
		var bb2 = this.entitiesManager.getEntityBB(anyId,0,0,any.get_size().x,any.get_size().y);
		return bb1.collide(bb2);
	}
	,willCollide: function(bb,bb1,virtualShift,log) {
		if(log == null) {
			log = false;
		}
		var x = bb.get_x();
		var y = bb.get_y();
		bb.set_x(Math.ceil(virtualShift.x));
		bb.set_y(Math.ceil(virtualShift.y));
		var result = bb != null && bb1 != null && bb.collide(bb1);
		var log1 = log;
		bb.set_x(x);
		bb.set_y(y);
		return result;
	}
	,calculateCollisionResistance: function(body,resistanceDirection) {
		this.collisionResistance.x = 0;
		this.collisionResistance.y = 0;
		var resX;
		if(body.velocity.x >= 0) {
			var other = this.vectorRight;
			resX = resistanceDirection.x * other.x + resistanceDirection.y * other.y;
		} else {
			var other = this.vectorLeft;
			resX = resistanceDirection.x * other.x + resistanceDirection.y * other.y;
		}
		var other = this.vectorUp;
		var resY = resistanceDirection.x * other.x + resistanceDirection.y * other.y;
		if(resX >= 0) {
			this.collisionResistance.x = -body.velocity.x * (resX + 0.1);
		}
		if(resY >= 0) {
			this.collisionResistance.y = -body.velocity.y * (resY + 0.01);
		}
		return this.collisionResistance;
	}
	,getOBBArray: function(position,poly,virtualShift) {
		var obb = [];
		if(poly != null) {
			var _g = 0;
			var _g1 = poly._points;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				var x = position.x + p.x + virtualShift.x;
				var y = position.y + p.y + virtualShift.y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var this1 = { x : x, y : y};
				obb.push(this1);
			}
		}
		return obb;
	}
	,__class__: kro13_hxp_systems_HxpPhysicsSystem
});
var kro13_hxp_systems_HxpRenderSystem = function(scene,onUpdate,hxpScene,visibilityBuffer) {
	this.hasEntity = false;
	this.needToRender = false;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	if(kro13_hxp_systems_render_HxpEntitiesManager.instance == null) {
		kro13_hxp_systems_render_HxpEntitiesManager.instance = new kro13_hxp_systems_render_HxpEntitiesManager();
	}
	this.entitiesManager = kro13_hxp_systems_render_HxpEntitiesManager.instance;
	this.visibilityBuffer = visibilityBuffer;
	this.hxpScene = hxpScene;
};
$hxClasses["kro13.hxp.systems.HxpRenderSystem"] = kro13_hxp_systems_HxpRenderSystem;
kro13_hxp_systems_HxpRenderSystem.__name__ = "kro13.hxp.systems.HxpRenderSystem";
kro13_hxp_systems_HxpRenderSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_hxp_systems_HxpRenderSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		if(((container) instanceof kro13_kk_gameObjects_Renderable)) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
		}
		var transform;
		if(container.componentsMap == null) {
			transform = null;
		} else {
			var component = container.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		var child = transform1.iterator();
		while(child.hasNext()) {
			var child1 = child.next();
			this.addContainer(child1.owner);
		}
	}
	,removeContainer: function(container) {
		kro13_kk_systems_AbstractUpdateSystem.prototype.removeContainer.call(this,container);
		if(this.entitiesManager.idsToEntities[container.id] != null) {
			this.hxpScene.remove(this.entitiesManager.getEntity(container.id));
			this.entitiesManager.clearEntity(container.id);
			var _this = this.visibilityBuffer;
			HxOverrides.remove(_this.visible,container);
			if(_this.typeToVisible.exists(container.type)) {
				HxOverrides.remove(_this.typeToVisible.get(container.type),container);
			}
		}
		var transform;
		if(container.componentsMap == null) {
			transform = null;
		} else {
			var component = container.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		var ch = transform1.iterator();
		while(ch.hasNext()) {
			var ch1 = ch.next();
			this.removeContainer(ch1.owner);
		}
	}
	,clear: function() {
		var _g = 0;
		var _g1 = this.containers;
		while(_g < _g1.length) {
			var renderable = _g1[_g];
			++_g;
			if(this.entitiesManager.idsToEntities[renderable.id] != null) {
				this.hxpScene.remove(this.entitiesManager.getEntity(renderable.id));
				this.entitiesManager.clearEntity(renderable.id);
			}
		}
		var _this = this.visibilityBuffer;
		_this.visible = [];
		_this.typeToVisible = new haxe_ds_IntMap();
		kro13_kk_systems_AbstractUpdateSystem.prototype.clear.call(this);
	}
	,validateNow: function() {
		var _g = 0;
		var _g1 = this.containers;
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			var transform;
			if(container.componentsMap == null) {
				transform = null;
			} else {
				var component = container.componentsMap.h[2];
				transform = component;
			}
			var transform1 = transform;
			if(transform1.get_position() == null) {
				haxe_Log.trace(transform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			transform1.absPosition.x = transform1.get_position().x;
			transform1.absPosition.y = transform1.get_position().y;
			var parent = transform1.parent;
			while(parent != null) {
				transform1.absPosition.x += parent.get_position().x;
				transform1.absPosition.y += parent.get_position().y;
				parent = parent.parent;
			}
			var absPosition = transform1.absPosition;
			var l = absPosition.x - transform1.origin.x;
			var t = absPosition.y - transform1.origin.y;
			var r = absPosition.x + transform1.get_size().x - transform1.origin.x;
			var b = absPosition.y + transform1.get_size().y - transform1.origin.y;
			var cl = this.hxpScene.camera.x;
			var ct = this.hxpScene.camera.y;
			var _this = this.hxpScene.camera;
			var cr = this.hxpScene.camera.x + haxepunk_HXP.screen.width / (_this.scale * _this.scaleX * haxepunk_HXP.screen.scaleX);
			var _this1 = this.hxpScene.camera;
			var cb = this.hxpScene.camera.y + haxepunk_HXP.screen.height / (_this1.scale * _this1.scaleY * haxepunk_HXP.screen.scaleY);
			var isOnCamera = !(cl > r || cr < l || ct > b || cb < t);
			var parent1 = transform1;
			while(parent1 != this.scene.transform && parent1 != null) parent1 = parent1.parent;
			var isOnScene = parent1 != null;
			this.needToRender = isOnScene && isOnCamera;
			this.hasEntity = this.entitiesManager.idsToEntities[container.id] != null;
			if(this.needToRender && this.hasEntity) {
				var e = this.entitiesManager.getEntity(container.id);
				if(e._scene == null) {
					haxe_Log.trace("DA FUCK?! --------------------------------------> " + container.id,{ fileName : "src/kro13/hxp/systems/HxpRenderSystem.hx", lineNumber : 144, className : "kro13.hxp.systems.HxpRenderSystem", methodName : "validateEntityIfNeeded"});
					this.hxpScene.add(e);
				}
				var renderer;
				if(container.componentsMap == null) {
					renderer = null;
				} else {
					var component1 = container.componentsMap.h[1];
					renderer = component1;
				}
				var renderer1 = renderer;
				if(!renderer1.isValid) {
					this.entitiesManager.updateEntity(container);
					renderer1.isValid = true;
				}
				if(!renderer1.isLayerValid) {
					this.entitiesManager.updateEntityLayer(container);
					renderer1.isLayerValid = true;
				}
			} else if(this.needToRender && !this.hasEntity) {
				var entity = this.entitiesManager.buildEnity(container);
				this.hxpScene.add(entity);
				var _this2 = this.visibilityBuffer;
				_this2.visible.push(container);
				if(!_this2.typeToVisible.exists(container.type)) {
					_this2.typeToVisible.set(container.type,[]);
				}
				_this2.typeToVisible.get(container.type).push(container);
			} else if(!this.needToRender && this.hasEntity) {
				this.hxpScene.remove(this.entitiesManager.getEntity(container.id));
				this.entitiesManager.clearEntity(container.id);
				var _this3 = this.visibilityBuffer;
				HxOverrides.remove(_this3.visible,container);
				if(_this3.typeToVisible.exists(container.type)) {
					HxOverrides.remove(_this3.typeToVisible.get(container.type),container);
				}
			}
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.containers;
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			var transform;
			if(container.componentsMap == null) {
				transform = null;
			} else {
				var component = container.componentsMap.h[2];
				transform = component;
			}
			var transform1 = transform;
			if(transform1.get_position() == null) {
				haxe_Log.trace(transform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			transform1.absPosition.x = transform1.get_position().x;
			transform1.absPosition.y = transform1.get_position().y;
			var parent = transform1.parent;
			while(parent != null) {
				transform1.absPosition.x += parent.get_position().x;
				transform1.absPosition.y += parent.get_position().y;
				parent = parent.parent;
			}
			var absPosition = transform1.absPosition;
			var l = absPosition.x - transform1.origin.x;
			var t = absPosition.y - transform1.origin.y;
			var r = absPosition.x + transform1.get_size().x - transform1.origin.x;
			var b = absPosition.y + transform1.get_size().y - transform1.origin.y;
			var cl = this.hxpScene.camera.x;
			var ct = this.hxpScene.camera.y;
			var _this = this.hxpScene.camera;
			var cr = this.hxpScene.camera.x + haxepunk_HXP.screen.width / (_this.scale * _this.scaleX * haxepunk_HXP.screen.scaleX);
			var _this1 = this.hxpScene.camera;
			var cb = this.hxpScene.camera.y + haxepunk_HXP.screen.height / (_this1.scale * _this1.scaleY * haxepunk_HXP.screen.scaleY);
			var isOnCamera = !(cl > r || cr < l || ct > b || cb < t);
			var parent1 = transform1;
			while(parent1 != this.scene.transform && parent1 != null) parent1 = parent1.parent;
			var isOnScene = parent1 != null;
			this.needToRender = isOnScene && isOnCamera;
			this.hasEntity = this.entitiesManager.idsToEntities[container.id] != null;
			if(this.needToRender && this.hasEntity) {
				var e = this.entitiesManager.getEntity(container.id);
				if(e._scene == null) {
					haxe_Log.trace("DA FUCK?! --------------------------------------> " + container.id,{ fileName : "src/kro13/hxp/systems/HxpRenderSystem.hx", lineNumber : 144, className : "kro13.hxp.systems.HxpRenderSystem", methodName : "validateEntityIfNeeded"});
					this.hxpScene.add(e);
				}
				var renderer;
				if(container.componentsMap == null) {
					renderer = null;
				} else {
					var component1 = container.componentsMap.h[1];
					renderer = component1;
				}
				var renderer1 = renderer;
				if(!renderer1.isValid) {
					this.entitiesManager.updateEntity(container);
					renderer1.isValid = true;
				}
				if(!renderer1.isLayerValid) {
					this.entitiesManager.updateEntityLayer(container);
					renderer1.isLayerValid = true;
				}
			} else if(this.needToRender && !this.hasEntity) {
				var entity = this.entitiesManager.buildEnity(container);
				this.hxpScene.add(entity);
				var _this2 = this.visibilityBuffer;
				_this2.visible.push(container);
				if(!_this2.typeToVisible.exists(container.type)) {
					_this2.typeToVisible.set(container.type,[]);
				}
				_this2.typeToVisible.get(container.type).push(container);
			} else if(!this.needToRender && this.hasEntity) {
				this.hxpScene.remove(this.entitiesManager.getEntity(container.id));
				this.entitiesManager.clearEntity(container.id);
				var _this3 = this.visibilityBuffer;
				HxOverrides.remove(_this3.visible,container);
				if(_this3.typeToVisible.exists(container.type)) {
					HxOverrides.remove(_this3.typeToVisible.get(container.type),container);
				}
			}
		}
	}
	,checkIsOnScene: function(transform) {
		var parent = transform;
		while(parent != this.scene.transform && parent != null) parent = parent.parent;
		return parent != null;
	}
	,checkIsOnCamera: function(transform) {
		if(transform.get_position() == null) {
			haxe_Log.trace(transform.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
		}
		transform.absPosition.x = transform.get_position().x;
		transform.absPosition.y = transform.get_position().y;
		var parent = transform.parent;
		while(parent != null) {
			transform.absPosition.x += parent.get_position().x;
			transform.absPosition.y += parent.get_position().y;
			parent = parent.parent;
		}
		var absPosition = transform.absPosition;
		var l = absPosition.x - transform.origin.x;
		var t = absPosition.y - transform.origin.y;
		var r = absPosition.x + transform.get_size().x - transform.origin.x;
		var b = absPosition.y + transform.get_size().y - transform.origin.y;
		var cl = this.hxpScene.camera.x;
		var ct = this.hxpScene.camera.y;
		var _this = this.hxpScene.camera;
		var cr = this.hxpScene.camera.x + haxepunk_HXP.screen.width / (_this.scale * _this.scaleX * haxepunk_HXP.screen.scaleX);
		var _this = this.hxpScene.camera;
		var cb = this.hxpScene.camera.y + haxepunk_HXP.screen.height / (_this.scale * _this.scaleY * haxepunk_HXP.screen.scaleY);
		return !(cl > r || cr < l || ct > b || cb < t);
	}
	,validateEntityIfNeeded: function(object) {
		var e = this.entitiesManager.getEntity(object.id);
		if(e._scene == null) {
			haxe_Log.trace("DA FUCK?! --------------------------------------> " + object.id,{ fileName : "src/kro13/hxp/systems/HxpRenderSystem.hx", lineNumber : 144, className : "kro13.hxp.systems.HxpRenderSystem", methodName : "validateEntityIfNeeded"});
			this.hxpScene.add(e);
		}
		var renderer;
		if(object.componentsMap == null) {
			renderer = null;
		} else {
			var component = object.componentsMap.h[1];
			renderer = component;
		}
		var renderer1 = renderer;
		if(!renderer1.isValid) {
			this.entitiesManager.updateEntity(object);
			renderer1.isValid = true;
		}
		if(!renderer1.isLayerValid) {
			this.entitiesManager.updateEntityLayer(object);
			renderer1.isLayerValid = true;
		}
	}
	,eraseEntity: function(target) {
		this.hxpScene.remove(this.entitiesManager.getEntity(target.id));
		this.entitiesManager.clearEntity(target.id);
		var _this = this.visibilityBuffer;
		HxOverrides.remove(_this.visible,target);
		if(_this.typeToVisible.exists(target.type)) {
			HxOverrides.remove(_this.typeToVisible.get(target.type),target);
		}
	}
	,drawEntity: function(target) {
		var entity = this.entitiesManager.buildEnity(target);
		this.hxpScene.add(entity);
		var _this = this.visibilityBuffer;
		_this.visible.push(target);
		if(!_this.typeToVisible.exists(target.type)) {
			_this.typeToVisible.set(target.type,[]);
		}
		_this.typeToVisible.get(target.type).push(target);
	}
	,__class__: kro13_hxp_systems_HxpRenderSystem
});
var kro13_hxp_systems_HxpTextEmitterSystem = function(scene,onUpdate,hxpScene) {
	this.LIFETIME = 1000;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.hxpScene = hxpScene;
	this.entities = [];
	haxe_Log.trace("new text emit system",{ fileName : "src/kro13/hxp/systems/HxpTextEmitterSystem.hx", lineNumber : 29, className : "kro13.hxp.systems.HxpTextEmitterSystem", methodName : "new"});
};
$hxClasses["kro13.hxp.systems.HxpTextEmitterSystem"] = kro13_hxp_systems_HxpTextEmitterSystem;
kro13_hxp_systems_HxpTextEmitterSystem.__name__ = "kro13.hxp.systems.HxpTextEmitterSystem";
kro13_hxp_systems_HxpTextEmitterSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_hxp_systems_HxpTextEmitterSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		var textEmitter;
		if(container.componentsMap == null) {
			textEmitter = null;
		} else {
			var component = container.componentsMap.h[7];
			textEmitter = component;
		}
		var textEmitter1 = textEmitter;
		if(textEmitter1 != null) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
		}
	}
	,stop: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.stop.call(this);
		var len = this.entities.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var entity = this.entities[len - i - 1];
			this.hxpScene.remove(entity);
			HxOverrides.remove(this.entities,entity);
		}
	}
	,update: function() {
		var _gthis = this;
		var text;
		var textEmitter = null;
		var transform = null;
		var _g = 0;
		var _g1 = this.containers;
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			var textEmitter1;
			if(container.componentsMap == null) {
				textEmitter1 = null;
			} else {
				var component = container.componentsMap.h[7];
				textEmitter1 = component;
			}
			textEmitter = textEmitter1;
			text = textEmitter.pop();
			if(text != null) {
				var color = 65280;
				if(Std.parseInt(text) < 0) {
					color = 16711680;
				}
				var options = { font : "fonts/" + "Norse-Bold-ru.fnt", size : 60, format : 1, wordWrap : true, color : color};
				var bmText = new haxepunk_graphics_text_BitmapText(text,0,0,0,0,options);
				var textEntity = [new haxepunk_Entity(null,null,bmText)];
				var transform;
				if(container.componentsMap == null) {
					transform = null;
				} else {
					var component1 = container.componentsMap.h[2];
					transform = component1;
				}
				var transform1 = transform;
				var textEntity1 = textEntity[0];
				if(transform1.get_position() == null) {
					haxe_Log.trace(transform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
				}
				transform1.absPosition.x = transform1.get_position().x;
				transform1.absPosition.y = transform1.get_position().y;
				var parent = transform1.parent;
				while(parent != null) {
					transform1.absPosition.x += parent.get_position().x;
					transform1.absPosition.y += parent.get_position().y;
					parent = parent.parent;
				}
				textEntity1.set_x(transform1.absPosition.x + 50);
				var textEntity2 = textEntity[0];
				if(transform1.get_position() == null) {
					haxe_Log.trace(transform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
				}
				transform1.absPosition.x = transform1.get_position().x;
				transform1.absPosition.y = transform1.get_position().y;
				var parent1 = transform1.parent;
				while(parent1 != null) {
					transform1.absPosition.x += parent1.get_position().x;
					transform1.absPosition.y += parent1.get_position().y;
					parent1 = parent1.parent;
				}
				textEntity2.set_y(transform1.absPosition.y - 50);
				this.hxpScene.add(textEntity[0]);
				this.entities.push(textEntity[0]);
				haxe_Timer.delay((function(textEntity) {
					return function() {
						if(_gthis.entities.indexOf(textEntity[0]) >= 0) {
							_gthis.hxpScene.remove(textEntity[0]);
							HxOverrides.remove(_gthis.entities,textEntity[0]);
						}
					};
				})(textEntity),this.LIFETIME);
			}
		}
	}
	,__class__: kro13_hxp_systems_HxpTextEmitterSystem
});
var kro13_hxp_systems_HxpTransformSystem = function(scene,onUpdate,visibiltyBuffer) {
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	if(kro13_hxp_systems_render_HxpEntitiesManager.instance == null) {
		kro13_hxp_systems_render_HxpEntitiesManager.instance = new kro13_hxp_systems_render_HxpEntitiesManager();
	}
	this.entitiesManager = kro13_hxp_systems_render_HxpEntitiesManager.instance;
	this.visibiltyBuffer = visibiltyBuffer;
	this.binders = [];
};
$hxClasses["kro13.hxp.systems.HxpTransformSystem"] = kro13_hxp_systems_HxpTransformSystem;
kro13_hxp_systems_HxpTransformSystem.__name__ = "kro13.hxp.systems.HxpTransformSystem";
kro13_hxp_systems_HxpTransformSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_hxp_systems_HxpTransformSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	clear: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.clear.call(this);
		this.binders = [];
	}
	,addContainer: function(container) {
		var tmp;
		if(container.componentsMap == null) {
			tmp = null;
		} else {
			var component = container.componentsMap.h[2];
			tmp = component;
		}
		if(tmp != null) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
		}
		var tmp;
		if(container.componentsMap == null) {
			tmp = null;
		} else {
			var component = container.componentsMap.h[11];
			tmp = component;
		}
		if(tmp != null) {
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[11];
				tmp = component;
			}
			this.binders.push(tmp);
		}
	}
	,removeContainer: function(container) {
		kro13_kk_systems_AbstractUpdateSystem.prototype.removeContainer.call(this,container);
		var tmp;
		if(container.componentsMap == null) {
			tmp = null;
		} else {
			var component = container.componentsMap.h[11];
			tmp = component;
		}
		if(tmp != null) {
			var x;
			if(container.componentsMap == null) {
				x = null;
			} else {
				var component = container.componentsMap.h[11];
				x = component;
			}
			HxOverrides.remove(this.binders,x);
		}
	}
	,validateNow: function() {
		var _g = 0;
		var _g1 = this.visibiltyBuffer.visible;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			var transform;
			if(object.componentsMap == null) {
				transform = null;
			} else {
				var component = object.componentsMap.h[2];
				transform = component;
			}
			var transform1 = transform;
			var entity = this.entitiesManager.getEntity(object.id);
			if(transform1.get_position() == null) {
				haxe_Log.trace(transform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			transform1.absPosition.x = transform1.get_position().x;
			transform1.absPosition.y = transform1.get_position().y;
			var parent = transform1.parent;
			while(parent != null) {
				transform1.absPosition.x += parent.get_position().x;
				transform1.absPosition.y += parent.get_position().y;
				parent = parent.parent;
			}
			var position = transform1.absPosition;
			var y = position.y;
			entity.moveBy(position.x - entity.get_x(),y - entity.get_y(),null,false);
			var rotation = transform1.get_rotation();
			if(((entity.graphic) instanceof haxepunk_graphics_Image)) {
				(js_Boot.__cast(entity.graphic , haxepunk_graphics_Image)).angle = rotation;
			}
			var scale = transform1.get_scale();
			if(!entity.isList && ((entity.graphic) instanceof haxepunk_graphics_Image)) {
				(js_Boot.__cast(entity.graphic , haxepunk_graphics_Image)).scale = scale;
			} else if(entity.isList) {
				var grList = entity.graphic;
				var _g2 = 0;
				var _g3 = grList.get_children();
				while(_g2 < _g3.length) {
					var gr = _g3[_g2];
					++_g2;
					(js_Boot.__cast(gr , haxepunk_graphics_Image)).scale = scale;
				}
			}
			var flipped = transform1.flip;
			if(flipped && ((entity.graphic) instanceof haxepunk_graphics_Image)) {
				(js_Boot.__cast(entity.graphic , haxepunk_graphics_Image)).flipX = flipped;
			}
			entity.set_visible(transform1.get_visible());
			var alpha = transform1.get_alpha();
			entity.graphic.set_alpha(alpha);
		}
		var _g = 0;
		var _g1 = this.binders;
		while(_g < _g1.length) {
			var binder = _g1[_g];
			++_g;
			if(binder.targetTransform != null) {
				binder.bindFunction(binder.targetTransform);
			}
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.visibiltyBuffer.visible;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			var transform;
			if(object.componentsMap == null) {
				transform = null;
			} else {
				var component = object.componentsMap.h[2];
				transform = component;
			}
			var transform1 = transform;
			var entity = this.entitiesManager.getEntity(object.id);
			if(transform1.get_position() == null) {
				haxe_Log.trace(transform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			transform1.absPosition.x = transform1.get_position().x;
			transform1.absPosition.y = transform1.get_position().y;
			var parent = transform1.parent;
			while(parent != null) {
				transform1.absPosition.x += parent.get_position().x;
				transform1.absPosition.y += parent.get_position().y;
				parent = parent.parent;
			}
			var position = transform1.absPosition;
			var y = position.y;
			entity.moveBy(position.x - entity.get_x(),y - entity.get_y(),null,false);
			var rotation = transform1.get_rotation();
			if(((entity.graphic) instanceof haxepunk_graphics_Image)) {
				(js_Boot.__cast(entity.graphic , haxepunk_graphics_Image)).angle = rotation;
			}
			var scale = transform1.get_scale();
			if(!entity.isList && ((entity.graphic) instanceof haxepunk_graphics_Image)) {
				(js_Boot.__cast(entity.graphic , haxepunk_graphics_Image)).scale = scale;
			} else if(entity.isList) {
				var grList = entity.graphic;
				var _g2 = 0;
				var _g3 = grList.get_children();
				while(_g2 < _g3.length) {
					var gr = _g3[_g2];
					++_g2;
					(js_Boot.__cast(gr , haxepunk_graphics_Image)).scale = scale;
				}
			}
			var flipped = transform1.flip;
			if(flipped && ((entity.graphic) instanceof haxepunk_graphics_Image)) {
				(js_Boot.__cast(entity.graphic , haxepunk_graphics_Image)).flipX = flipped;
			}
			entity.set_visible(transform1.get_visible());
			var alpha = transform1.get_alpha();
			entity.graphic.set_alpha(alpha);
		}
		var _g = 0;
		var _g1 = this.binders;
		while(_g < _g1.length) {
			var binder = _g1[_g];
			++_g;
			if(binder.targetTransform != null) {
				binder.bindFunction(binder.targetTransform);
			}
		}
	}
	,alpha: function(entity,alpha) {
		entity.graphic.set_alpha(alpha);
	}
	,visible: function(entity,visible) {
		entity.set_visible(visible);
	}
	,move: function(entity,position) {
		var y = position.y;
		entity.moveBy(position.x - entity.get_x(),y - entity.get_y(),null,false);
	}
	,rotate: function(entity,rotation) {
		if(((entity.graphic) instanceof haxepunk_graphics_Image)) {
			(js_Boot.__cast(entity.graphic , haxepunk_graphics_Image)).angle = rotation;
		}
	}
	,scale: function(entity,scale) {
		if(!entity.isList && ((entity.graphic) instanceof haxepunk_graphics_Image)) {
			(js_Boot.__cast(entity.graphic , haxepunk_graphics_Image)).scale = scale;
		} else if(entity.isList) {
			var grList = entity.graphic;
			var _g = 0;
			var _g1 = grList.get_children();
			while(_g < _g1.length) {
				var gr = _g1[_g];
				++_g;
				(js_Boot.__cast(gr , haxepunk_graphics_Image)).scale = scale;
			}
		}
	}
	,flip: function(entity,flipped) {
		if(flipped && ((entity.graphic) instanceof haxepunk_graphics_Image)) {
			(js_Boot.__cast(entity.graphic , haxepunk_graphics_Image)).flipX = flipped;
		}
	}
	,__class__: kro13_hxp_systems_HxpTransformSystem
});
var kro13_hxp_systems_HxpZIndexSystem = function(scene,onUpdate,visibiltyBuffer,hxpScene) {
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.hxpScene = hxpScene;
	this.visibilityBuffer = visibiltyBuffer;
	haxe_Log.trace("new z index system",{ fileName : "src/kro13/hxp/systems/HxpZIndexSystem.hx", lineNumber : 32, className : "kro13.hxp.systems.HxpZIndexSystem", methodName : "new"});
};
$hxClasses["kro13.hxp.systems.HxpZIndexSystem"] = kro13_hxp_systems_HxpZIndexSystem;
kro13_hxp_systems_HxpZIndexSystem.__name__ = "kro13.hxp.systems.HxpZIndexSystem";
kro13_hxp_systems_HxpZIndexSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_hxp_systems_HxpZIndexSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	clear: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.clear.call(this);
		this.playerTransform = null;
	}
	,addContainer: function(container) {
		if(container.type == 1) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[2];
				tmp = component;
			}
			this.playerTransform = tmp;
		}
	}
	,update: function() {
		if(this.playerTransform != null) {
			var _g = 0;
			var _g1 = this.visibilityBuffer.visible;
			while(_g < _g1.length) {
				var object = _g1[_g];
				++_g;
				switch(object.type) {
				case 4:
					var ground = object;
					var renderer;
					if(object.componentsMap == null) {
						renderer = null;
					} else {
						var component = object.componentsMap.h[1];
						renderer = component;
					}
					var renderer1 = renderer;
					if(ground.depth == 0) {
						renderer1.isLayerValid = false;
						renderer1._layer = 12;
					} else {
						var transform;
						if(object.componentsMap == null) {
							transform = null;
						} else {
							var component1 = object.componentsMap.h[2];
							transform = component1;
						}
						var transform1 = transform;
						if(transform1.get_position() == null) {
							haxe_Log.trace(transform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
						}
						transform1.absPosition.x = transform1.get_position().x;
						transform1.absPosition.y = transform1.get_position().y;
						var parent = transform1.parent;
						while(parent != null) {
							transform1.absPosition.x += parent.get_position().x;
							transform1.absPosition.y += parent.get_position().y;
							parent = parent.parent;
						}
						var tmp = transform1.absPosition.y + 20.;
						var _this = this.playerTransform;
						if(_this.get_position() == null) {
							haxe_Log.trace(_this.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
						}
						_this.absPosition.x = _this.get_position().x;
						_this.absPosition.y = _this.get_position().y;
						var parent1 = _this.parent;
						while(parent1 != null) {
							_this.absPosition.x += parent1.get_position().x;
							_this.absPosition.y += parent1.get_position().y;
							parent1 = parent1.parent;
						}
						if(tmp <= _this.absPosition.y) {
							renderer1.isLayerValid = false;
							renderer1._layer = 12;
						} else {
							renderer1.isLayerValid = false;
							renderer1._layer = 6;
						}
					}
					break;
				case 9:
					var transform2;
					if(object.componentsMap == null) {
						transform2 = null;
					} else {
						var component2 = object.componentsMap.h[2];
						transform2 = component2;
					}
					var transform3 = transform2;
					var renderer2;
					if(object.componentsMap == null) {
						renderer2 = null;
					} else {
						var component3 = object.componentsMap.h[1];
						renderer2 = component3;
					}
					var renderer3 = renderer2;
					if(transform3.get_position() == null) {
						haxe_Log.trace(transform3.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
					}
					transform3.absPosition.x = transform3.get_position().x;
					transform3.absPosition.y = transform3.get_position().y;
					var parent2 = transform3.parent;
					while(parent2 != null) {
						transform3.absPosition.x += parent2.get_position().x;
						transform3.absPosition.y += parent2.get_position().y;
						parent2 = parent2.parent;
					}
					var tmp1 = transform3.absPosition.y + 20.;
					var _this1 = this.playerTransform;
					if(_this1.get_position() == null) {
						haxe_Log.trace(_this1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
					}
					_this1.absPosition.x = _this1.get_position().x;
					_this1.absPosition.y = _this1.get_position().y;
					var parent3 = _this1.parent;
					while(parent3 != null) {
						_this1.absPosition.x += parent3.get_position().x;
						_this1.absPosition.y += parent3.get_position().y;
						parent3 = parent3.parent;
					}
					if(tmp1 <= _this1.absPosition.y) {
						renderer3.isLayerValid = false;
						renderer3._layer = 13;
					} else {
						renderer3.isLayerValid = false;
						renderer3._layer = 5;
					}
					break;
				case 2:case 7:case 10:
					var transform4;
					if(object.componentsMap == null) {
						transform4 = null;
					} else {
						var component4 = object.componentsMap.h[2];
						transform4 = component4;
					}
					var transform5 = transform4;
					var renderer4;
					if(object.componentsMap == null) {
						renderer4 = null;
					} else {
						var component5 = object.componentsMap.h[1];
						renderer4 = component5;
					}
					var renderer5 = renderer4;
					if(transform5.get_position() == null) {
						haxe_Log.trace(transform5.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
					}
					transform5.absPosition.x = transform5.get_position().x;
					transform5.absPosition.y = transform5.get_position().y;
					var parent4 = transform5.parent;
					while(parent4 != null) {
						transform5.absPosition.x += parent4.get_position().x;
						transform5.absPosition.y += parent4.get_position().y;
						parent4 = parent4.parent;
					}
					var tmp2 = transform5.absPosition.y;
					var _this2 = this.playerTransform;
					if(_this2.get_position() == null) {
						haxe_Log.trace(_this2.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
					}
					_this2.absPosition.x = _this2.get_position().x;
					_this2.absPosition.y = _this2.get_position().y;
					var parent5 = _this2.parent;
					while(parent5 != null) {
						_this2.absPosition.x += parent5.get_position().x;
						_this2.absPosition.y += parent5.get_position().y;
						parent5 = parent5.parent;
					}
					if(tmp2 <= _this2.absPosition.y) {
						renderer5.isLayerValid = false;
						renderer5._layer = 12;
					} else {
						renderer5.isLayerValid = false;
						renderer5._layer = 1;
					}
					break;
				default:
				}
			}
			var entities = this.hxpScene.getLayer(12);
			if(entities != null) {
				entities.sort($bind(this,this.sortByY));
			}
			var entities = this.hxpScene.getLayer(6);
			if(entities != null) {
				entities.sort($bind(this,this.sortByY));
			}
			var entities = this.hxpScene.getLayer(12);
			if(entities != null) {
				entities.sort($bind(this,this.sortByY));
			}
			var entities = this.hxpScene.getLayer(1);
			if(entities != null) {
				entities.sort($bind(this,this.sortByY));
			}
		}
	}
	,sortInLayer: function(layer) {
		var entities = this.hxpScene.getLayer(layer);
		if(entities != null) {
			entities.sort($bind(this,this.sortByY));
		}
	}
	,checkGroundSorting: function(object) {
		var ground = object;
		var renderer;
		if(object.componentsMap == null) {
			renderer = null;
		} else {
			var component = object.componentsMap.h[1];
			renderer = component;
		}
		var renderer1 = renderer;
		if(ground.depth == 0) {
			renderer1.isLayerValid = false;
			renderer1._layer = 12;
		} else {
			var transform;
			if(object.componentsMap == null) {
				transform = null;
			} else {
				var component = object.componentsMap.h[2];
				transform = component;
			}
			var transform1 = transform;
			if(transform1.get_position() == null) {
				haxe_Log.trace(transform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			transform1.absPosition.x = transform1.get_position().x;
			transform1.absPosition.y = transform1.get_position().y;
			var parent = transform1.parent;
			while(parent != null) {
				transform1.absPosition.x += parent.get_position().x;
				transform1.absPosition.y += parent.get_position().y;
				parent = parent.parent;
			}
			var tmp = transform1.absPosition.y + 20.;
			var _this = this.playerTransform;
			if(_this.get_position() == null) {
				haxe_Log.trace(_this.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			_this.absPosition.x = _this.get_position().x;
			_this.absPosition.y = _this.get_position().y;
			var parent = _this.parent;
			while(parent != null) {
				_this.absPosition.x += parent.get_position().x;
				_this.absPosition.y += parent.get_position().y;
				parent = parent.parent;
			}
			if(tmp <= _this.absPosition.y) {
				renderer1.isLayerValid = false;
				renderer1._layer = 12;
			} else {
				renderer1.isLayerValid = false;
				renderer1._layer = 6;
			}
		}
	}
	,checkShadowsSorting: function(object) {
		var transform;
		if(object.componentsMap == null) {
			transform = null;
		} else {
			var component = object.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		var renderer;
		if(object.componentsMap == null) {
			renderer = null;
		} else {
			var component = object.componentsMap.h[1];
			renderer = component;
		}
		var renderer1 = renderer;
		if(transform1.get_position() == null) {
			haxe_Log.trace(transform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
		}
		transform1.absPosition.x = transform1.get_position().x;
		transform1.absPosition.y = transform1.get_position().y;
		var parent = transform1.parent;
		while(parent != null) {
			transform1.absPosition.x += parent.get_position().x;
			transform1.absPosition.y += parent.get_position().y;
			parent = parent.parent;
		}
		var tmp = transform1.absPosition.y + 20.;
		var _this = this.playerTransform;
		if(_this.get_position() == null) {
			haxe_Log.trace(_this.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
		}
		_this.absPosition.x = _this.get_position().x;
		_this.absPosition.y = _this.get_position().y;
		var parent = _this.parent;
		while(parent != null) {
			_this.absPosition.x += parent.get_position().x;
			_this.absPosition.y += parent.get_position().y;
			parent = parent.parent;
		}
		if(tmp <= _this.absPosition.y) {
			renderer1.isLayerValid = false;
			renderer1._layer = 13;
		} else {
			renderer1.isLayerValid = false;
			renderer1._layer = 5;
		}
	}
	,checkObjectsSorting: function(object) {
		var transform;
		if(object.componentsMap == null) {
			transform = null;
		} else {
			var component = object.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		var renderer;
		if(object.componentsMap == null) {
			renderer = null;
		} else {
			var component = object.componentsMap.h[1];
			renderer = component;
		}
		var renderer1 = renderer;
		if(transform1.get_position() == null) {
			haxe_Log.trace(transform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
		}
		transform1.absPosition.x = transform1.get_position().x;
		transform1.absPosition.y = transform1.get_position().y;
		var parent = transform1.parent;
		while(parent != null) {
			transform1.absPosition.x += parent.get_position().x;
			transform1.absPosition.y += parent.get_position().y;
			parent = parent.parent;
		}
		var tmp = transform1.absPosition.y;
		var _this = this.playerTransform;
		if(_this.get_position() == null) {
			haxe_Log.trace(_this.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
		}
		_this.absPosition.x = _this.get_position().x;
		_this.absPosition.y = _this.get_position().y;
		var parent = _this.parent;
		while(parent != null) {
			_this.absPosition.x += parent.get_position().x;
			_this.absPosition.y += parent.get_position().y;
			parent = parent.parent;
		}
		if(tmp <= _this.absPosition.y) {
			renderer1.isLayerValid = false;
			renderer1._layer = 12;
		} else {
			renderer1.isLayerValid = false;
			renderer1._layer = 1;
		}
	}
	,sortByY: function(a,b) {
		if(a.get_y() > b.get_y()) {
			return 1;
		}
		if(a.get_y() < b.get_y()) {
			return -1;
		}
		if(a.get_y() == b.get_y()) {
			if(a.get_x() <= b.get_x()) {
				return -1;
			} else {
				return 1;
			}
		}
		return 0;
	}
	,__class__: kro13_hxp_systems_HxpZIndexSystem
});
var kro13_hxp_systems_control_HxpGUIControlSystem = function(scene,onUpdate) {
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	haxe_Log.trace("new gui control system",{ fileName : "src/kro13/hxp/systems/control/HxpGUIControlSystem.hx", lineNumber : 24, className : "kro13.hxp.systems.control.HxpGUIControlSystem", methodName : "new"});
};
$hxClasses["kro13.hxp.systems.control.HxpGUIControlSystem"] = kro13_hxp_systems_control_HxpGUIControlSystem;
kro13_hxp_systems_control_HxpGUIControlSystem.__name__ = "kro13.hxp.systems.control.HxpGUIControlSystem";
kro13_hxp_systems_control_HxpGUIControlSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_hxp_systems_control_HxpGUIControlSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		if(((container) instanceof kro13_kk_guiObjects_Button)) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
		}
		var transform;
		if(container.componentsMap == null) {
			transform = null;
		} else {
			var component = container.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		var ch = transform1.iterator();
		while(ch.hasNext()) {
			var ch1 = ch.next();
			this.addContainer(ch1.owner);
		}
	}
	,update: function() {
		var x = haxepunk_input_Mouse.get_mouseX();
		var y = haxepunk_input_Mouse.get_mouseY();
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.point = this1;
		var i = this.containers.length - 1;
		while(i >= 0) {
			var btn = this.containers[i];
			var transform;
			if(btn.componentsMap == null) {
				transform = null;
			} else {
				var component = btn.componentsMap.h[2];
				transform = component;
			}
			var transform1 = transform;
			var tmp;
			if(haxepunk_input_Mouse.mousePressed) {
				var point = this.point;
				if(transform1.get_position() == null) {
					haxe_Log.trace(transform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
				}
				transform1.absPosition.x = transform1.get_position().x;
				transform1.absPosition.y = transform1.get_position().y;
				var parent = transform1.parent;
				while(parent != null) {
					transform1.absPosition.x += parent.get_position().x;
					transform1.absPosition.y += parent.get_position().y;
					parent = parent.parent;
				}
				var position = transform1.absPosition;
				if(kro13_hxp_systems_render_HxpEntitiesManager.instance == null) {
					kro13_hxp_systems_render_HxpEntitiesManager.instance = new kro13_hxp_systems_render_HxpEntitiesManager();
				}
				var visible = kro13_hxp_systems_render_HxpEntitiesManager.instance.idsToEntities[transform1.owner.id] != null && transform1.get_visible();
				tmp = visible && (point.x >= position.x && point.y >= position.y && point.x <= position.x + transform1.get_size().x && point.y <= position.y + transform1.get_size().y);
			} else {
				tmp = false;
			}
			if(tmp) {
				this.currBtn = btn;
				if(!this.currBtn.isToggle) {
					this.currBtn.altColor();
				}
				i = 0;
			}
			--i;
		}
		if(this.currBtn != null) {
			if(haxepunk_input_Mouse.mouseReleased && this.currBtn.action != null) {
				this.currBtn.action();
				if(!this.currBtn.isToggle) {
					this.currBtn.normColor();
				}
			}
			var transform = this.currBtn.transform;
			var point = this.point;
			if(transform.get_position() == null) {
				haxe_Log.trace(transform.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			transform.absPosition.x = transform.get_position().x;
			transform.absPosition.y = transform.get_position().y;
			var parent = transform.parent;
			while(parent != null) {
				transform.absPosition.x += parent.get_position().x;
				transform.absPosition.y += parent.get_position().y;
				parent = parent.parent;
			}
			var position = transform.absPosition;
			if(kro13_hxp_systems_render_HxpEntitiesManager.instance == null) {
				kro13_hxp_systems_render_HxpEntitiesManager.instance = new kro13_hxp_systems_render_HxpEntitiesManager();
			}
			var visible = kro13_hxp_systems_render_HxpEntitiesManager.instance.idsToEntities[transform.owner.id] != null && transform.get_visible();
			if(!(visible && (point.x >= position.x && point.y >= position.y && point.x <= position.x + transform.get_size().x && point.y <= position.y + transform.get_size().y))) {
				if(!this.currBtn.isToggle) {
					this.currBtn.normColor();
				}
				this.currBtn = null;
			}
		}
	}
	,isButtonHit: function(transform,point) {
		if(transform.get_position() == null) {
			haxe_Log.trace(transform.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
		}
		transform.absPosition.x = transform.get_position().x;
		transform.absPosition.y = transform.get_position().y;
		var parent = transform.parent;
		while(parent != null) {
			transform.absPosition.x += parent.get_position().x;
			transform.absPosition.y += parent.get_position().y;
			parent = parent.parent;
		}
		var position = transform.absPosition;
		if(kro13_hxp_systems_render_HxpEntitiesManager.instance == null) {
			kro13_hxp_systems_render_HxpEntitiesManager.instance = new kro13_hxp_systems_render_HxpEntitiesManager();
		}
		var visible = kro13_hxp_systems_render_HxpEntitiesManager.instance.idsToEntities[transform.owner.id] != null && transform.get_visible();
		if(visible) {
			if(point.x >= position.x && point.y >= position.y && point.x <= position.x + transform.get_size().x) {
				return point.y <= position.y + transform.get_size().y;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,getPressPoint: function() {
		var x = haxepunk_input_Mouse.get_mouseX();
		var y = haxepunk_input_Mouse.get_mouseY();
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		return this1;
	}
	,__class__: kro13_hxp_systems_control_HxpGUIControlSystem
});
var kro13_hxp_systems_control_HxpMouseControlSystem = function(scene,onUpdate,dataProvider) {
	this.enabled = true;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.dataProvider = dataProvider;
	this.mouseX = haxepunk_input_Mouse.get_mouseX();
	this.isActive = false;
	haxe_Log.trace("new mouse system",{ fileName : "src/kro13/hxp/systems/control/HxpMouseControlSystem.hx", lineNumber : 32, className : "kro13.hxp.systems.control.HxpMouseControlSystem", methodName : "new"});
};
$hxClasses["kro13.hxp.systems.control.HxpMouseControlSystem"] = kro13_hxp_systems_control_HxpMouseControlSystem;
kro13_hxp_systems_control_HxpMouseControlSystem.__name__ = "kro13.hxp.systems.control.HxpMouseControlSystem";
kro13_hxp_systems_control_HxpMouseControlSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_hxp_systems_control_HxpMouseControlSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		if(container.type == 1) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[2];
				tmp = component;
			}
			this.playerTransform = tmp;
			var handler;
			if(container.componentsMap == null) {
				handler = null;
			} else {
				var component = container.componentsMap.h[6];
				handler = component;
			}
			var handler1 = handler;
			handler1.addHandler($bind(this,this.onEvent));
		}
	}
	,start: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.start.call(this);
		this.mouseX = haxepunk_input_Mouse.get_mouseX();
	}
	,update: function() {
		if(!this.enabled) {
			return;
		}
		if(haxepunk_input_Mouse.mouseUp) {
			this.isActive = false;
		}
		if(this.playerTransform != null && this.isActive) {
			var _g = this.playerTransform;
			_g.set_rotation(_g.get_rotation() + (haxepunk_input_Mouse.get_mouseX() - this.mouseX) * kro13_kk_systems_DTSystem.multiplier * this.dataProvider.getProfile().misc.sensitivity);
		}
		if(haxepunk_input_Mouse.mouseDown) {
			this.isActive = true;
		}
		this.mouseX = haxepunk_input_Mouse.get_mouseX();
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var _g = e.firstStart;
			this.enabled = true;
			break;
		case 1:
			this.enabled = true;
			break;
		case 22:
			if(e.avalanche == true) {
				this.enabled = false;
			}
			break;
		default:
		}
	}
	,__class__: kro13_hxp_systems_control_HxpMouseControlSystem
});
var kro13_hxp_systems_render_HxpEntitiesManager = function() {
	this.count = 0;
	this.idsToEntities = [];
	this.idsToBBs = [];
	this.entitiesPool = new haxe_ds_List();
	var _g = 0;
	while(_g < 100) {
		var i = _g++;
		this.putEntityToPool(new kro13_hxp_HxpEntity());
	}
};
$hxClasses["kro13.hxp.systems.render.HxpEntitiesManager"] = kro13_hxp_systems_render_HxpEntitiesManager;
kro13_hxp_systems_render_HxpEntitiesManager.__name__ = "kro13.hxp.systems.render.HxpEntitiesManager";
kro13_hxp_systems_render_HxpEntitiesManager.__properties__ = {get_instance:"get_instance"};
kro13_hxp_systems_render_HxpEntitiesManager.get_instance = function() {
	if(kro13_hxp_systems_render_HxpEntitiesManager.instance == null) {
		kro13_hxp_systems_render_HxpEntitiesManager.instance = new kro13_hxp_systems_render_HxpEntitiesManager();
	}
	return kro13_hxp_systems_render_HxpEntitiesManager.instance;
};
kro13_hxp_systems_render_HxpEntitiesManager.prototype = {
	entitiesCount: function() {
		return this.count;
	}
	,hasEntity: function(id) {
		return this.idsToEntities[id] != null;
	}
	,getEntity: function(id) {
		return this.idsToEntities[id];
	}
	,updateEntity: function(object) {
		var id = object.id;
		var renderer;
		if(object.componentsMap == null) {
			renderer = null;
		} else {
			var component = object.componentsMap.h[1];
			renderer = component;
		}
		var renderer1 = renderer;
		var transform;
		if(object.componentsMap == null) {
			transform = null;
		} else {
			var component = object.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		var entity = this.idsToEntities[id];
		this.applyConfig(entity,transform1,renderer1);
	}
	,updateEntityLayer: function(object) {
		var id = object.id;
		var renderer;
		if(object.componentsMap == null) {
			renderer = null;
		} else {
			var component = object.componentsMap.h[1];
			renderer = component;
		}
		var renderer1 = renderer;
		var entity = this.idsToEntities[id];
		entity.set_layer(renderer1._layer);
	}
	,buildEnity: function(object) {
		var entity = this.getEntityFromPool();
		var id = object.id;
		var renderer;
		if(object.componentsMap == null) {
			renderer = null;
		} else {
			var component = object.componentsMap.h[1];
			renderer = component;
		}
		var renderer1 = renderer;
		var transform;
		if(object.componentsMap == null) {
			transform = null;
		} else {
			var component = object.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		this.applyConfig(entity,transform1,renderer1);
		entity.set_layer(renderer1._layer);
		this.idsToEntities[id] = entity;
		entity.set_name(object.name);
		this.count++;
		return entity;
	}
	,clearEntity: function(id) {
		var entity = this.idsToEntities[id];
		this.idsToBBs[id] = null;
		this.idsToEntities[id] = null;
		entity.graphic.destroy();
		entity.set_mask(null);
		entity.set_collidable(false);
		this.putEntityToPool(entity);
		this.count--;
	}
	,getEntityBB: function(id,x,y,width,height) {
		if(this.idsToBBs[id] == null) {
			var polyMask = haxepunk_masks_Polygon.createFromArray([x,y,x + width,y,x + width,y + height,x,y + height]);
			var entity = this.idsToEntities[id];
			entity.set_mask(polyMask);
			entity.set_collidable(true);
			this.idsToBBs[id] = polyMask;
		}
		return this.idsToBBs[id];
	}
	,applyConfig: function(entity,transform,renderer) {
		var _g = renderer.material;
		switch(_g._hx_index) {
		case 0:
			var blockConfig = _g.config;
			this.applyGroundBlockConfig(entity,blockConfig);
			this.setListProperties(entity,transform.origin);
			break;
		case 1:
			var imageConfig = _g.config;
			this.applyImageConfig(entity,imageConfig);
			var origin = transform.origin;
			entity.isList = false;
			var image = entity.graphic;
			image.originX = origin.x * image.get_width() / (image.get_width() * image.scaleX * image.scale);
			image.originY = origin.y * image.get_height() / (image.get_height() * image.scaleY * image.scale);
			break;
		case 2:
			var imageConfig = _g.config;
			this.applyClipImageConfig(entity,imageConfig);
			var origin = transform.origin;
			entity.isList = false;
			var image = entity.graphic;
			image.originX = origin.x * image.get_width() / (image.get_width() * image.scaleX * image.scale);
			image.originY = origin.y * image.get_height() / (image.get_height() * image.scaleY * image.scale);
			break;
		case 3:
			var rectConfig = _g.config;
			this.applyRectangleConfig(entity,rectConfig);
			var origin = transform.origin;
			entity.isList = false;
			var image = entity.graphic;
			image.originX = origin.x * image.get_width() / (image.get_width() * image.scaleX * image.scale);
			image.originY = origin.y * image.get_height() / (image.get_height() * image.scaleY * image.scale);
			break;
		case 4:
			var circConfig = _g.config;
			this.applyCircConfig(entity,circConfig);
			var origin = transform.origin;
			entity.isList = false;
			var image = entity.graphic;
			image.originX = origin.x * image.get_width() / (image.get_width() * image.scaleX * image.scale);
			image.originY = origin.y * image.get_height() / (image.get_height() * image.scaleY * image.scale);
			break;
		case 5:
			var rectConfig = _g.config;
			this.applyClipRectangleConfig(entity,rectConfig);
			var origin = transform.origin;
			entity.isList = false;
			var image = entity.graphic;
			image.originX = origin.x * image.get_width() / (image.get_width() * image.scaleX * image.scale);
			image.originY = origin.y * image.get_height() / (image.get_height() * image.scaleY * image.scale);
			break;
		case 6:
			var textConfig = _g.config;
			this.applyTextConfig(entity,textConfig);
			break;
		case 7:
			var particlesConfig = _g.config;
			this.applyParticlesConfig(entity,particlesConfig);
			break;
		case 8:
			var guiConfig = _g.config;
			this.applyGUIConfig(entity,guiConfig);
			this.setListProperties(entity,transform.origin);
			break;
		case 9:
			var guiButtonConfig = _g.config;
			this.applyGUIButtonConfig(entity,guiButtonConfig);
			this.setListProperties(entity,transform.origin);
			break;
		case 11:
			var cliffConfig = _g.config;
			this.applyCliffConfig(entity,cliffConfig);
			this.setListProperties(entity,transform.origin);
			break;
		case 12:
			var snowmanConfig = _g.config;
			this.applySnowmanConfig(entity,snowmanConfig);
			this.setListProperties(entity,transform.origin);
			break;
		default:
			throw haxe_Exception.thrown("KK ERROR: unknown material " + Std.string(renderer.material) + "!");
		}
	}
	,applySnowmanConfig: function(entity,config) {
		var graphicsList = new haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic();
		var body = kro13_hxp_HxpResourceManager.get_instance().getImage(config.source);
		body.scaleX = config.size.x / body.scale / body.get_width();
		body.scaleY = config.size.y / body.scale / body.get_height();
		graphicsList.add(body);
		var leftEye = kro13_hxp_HxpResourceManager.get_instance();
		var x = config.leftEyeSize.x;
		var y = config.leftEyeSize.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var leftEye1 = leftEye.getRectImage(this1,0);
		leftEye1.x = config.leftEyePos.x;
		leftEye1.y = config.leftEyePos.y;
		graphicsList.add(leftEye1);
		var rightEye = kro13_hxp_HxpResourceManager.get_instance();
		var x = config.rightEyeSize.x;
		var y = config.rightEyeSize.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var rightEye1 = rightEye.getRectImage(this1,0);
		rightEye1.x = config.rightEyePos.x;
		rightEye1.y = config.rightEyePos.y;
		graphicsList.add(rightEye1);
		var nose = kro13_hxp_HxpResourceManager.get_instance().getImage("images/snowman_nose.png");
		nose.flipX = config.flip;
		nose.scaleX = config.noseSize.x / nose.scale / nose.get_width();
		nose.scaleY = config.noseSize.y / nose.scale / nose.get_height();
		if(config.flip) {
			nose.x = config.size.x - config.nosePos.x - config.noseSize.x;
		} else {
			nose.x = config.nosePos.x;
		}
		nose.y = config.nosePos.y;
		graphicsList.add(nose);
		entity.graphic = graphicsList;
		entity.graphic.pixelSnapping = true;
	}
	,applyCliffConfig: function(entity,config) {
		var graphicsList = new haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic();
		var bb = kro13_hxp_HxpResourceManager.get_instance().getRectImage(config.size,16711680);
		var lvlCount = config.levels.length;
		var _g = 0;
		var _g1 = lvlCount;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = config.levels[lvlCount - i - 1];
			while(_g2 < _g3.length) {
				var lvl = _g3[_g2];
				++_g2;
				var x = lvl.size.x * 40;
				var y = lvl.size.y * 40;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var lvlSize_x = x;
				var lvlSize_y = y;
				var x1 = lvlSize_x;
				var y1 = lvl.z * 40;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var this1 = { x : x1, y : y1};
				var lvlBorderSize = this1;
				var config1 = config.borderColor;
				var lvlBorder = kro13_hxp_HxpResourceManager.get_instance().getRectImage(lvlBorderSize,config1 - (i + 1) * 100);
				lvlBorder.x = lvl.position.x * 40;
				lvlBorder.y = config.size.y - (lvl.position.y + lvl.z) * 40;
				graphicsList.add(lvlBorder);
			}
		}
		var _g = 0;
		var _g1 = lvlCount;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = config.levels[i];
			while(_g2 < _g3.length) {
				var lvl = _g3[_g2];
				++_g2;
				var x = lvl.size.x * 40;
				var y = lvl.size.y * 40;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var this1 = { x : x, y : y};
				var lvlSize = this1;
				var config1 = config.color;
				var lvlGround = kro13_hxp_HxpResourceManager.get_instance().getRectImage(lvlSize,config1 - (i + 1) * 100);
				lvlGround.x = lvl.position.x * 40;
				lvlGround.y = config.size.y - (lvl.position.y + lvl.size.y + lvl.z) * 40;
				graphicsList.add(lvlGround);
			}
		}
		entity.graphic = graphicsList;
		return entity;
	}
	,applyGUIConfig: function(entity,config) {
		var graphicsList = new haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic();
		var border = kro13_hxp_HxpResourceManager.get_instance();
		var x = config.size.x;
		var y = config.size.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var border1 = border.getRectImage(this1,config.borderColor);
		var body = kro13_hxp_HxpResourceManager.get_instance();
		var x = config.size.x - config.borderWidth * 2;
		var y = config.size.y - config.borderWidth * 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var body1 = body.getRectImage(this1,config.color);
		body1.x = config.borderWidth;
		body1.y = config.borderWidth;
		graphicsList.add(border1);
		graphicsList.add(body1);
		entity.graphic = graphicsList;
		return entity;
	}
	,applyGUIButtonConfig: function(entity,config) {
		var graphicsList = new haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic();
		var outBorder = kro13_hxp_HxpResourceManager.get_instance();
		var x = config.size.x + config.outBorderWidth * 2;
		var y = config.size.y + config.outBorderWidth * 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var outBorder1 = outBorder.getRectImage(this1,config.outBorderColor);
		var border = kro13_hxp_HxpResourceManager.get_instance();
		var x = config.size.x;
		var y = config.size.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var border1 = border.getRectImage(this1,config.borderColor);
		var body = kro13_hxp_HxpResourceManager.get_instance();
		var x = config.size.x - config.borderWidth * 2;
		var y = config.size.y - config.borderWidth * 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var body1 = body.getRectImage(this1,config.color);
		outBorder1.x = -config.outBorderWidth;
		outBorder1.y = -config.outBorderWidth;
		body1.x = config.borderWidth;
		body1.y = config.borderWidth;
		graphicsList.add(outBorder1);
		graphicsList.add(border1);
		graphicsList.add(body1);
		entity.graphic = graphicsList;
		return entity;
	}
	,applyParticlesConfig: function(entity,config) {
		var particle = kro13_hxp_HxpResourceManager.get_instance().getTexture("blank_rect");
		var emitter = null;
		if(((entity.graphic) instanceof haxepunk_graphics_emitter_Emitter)) {
			emitter = entity.graphic;
		}
		if(emitter == null || !emitter.hasType(config.particlesType)) {
			var this1 = new haxepunk_graphics_atlas_AtlasData(particle);
			emitter = new haxepunk_graphics_emitter_Emitter(new haxepunk_graphics_atlas_TileAtlas(this1));
			emitter.newType(config.particlesType,[0]);
		}
		emitter.setRotation(config.particlesType,0,0,360);
		emitter.setColor(config.particlesType,config.color,config.endColor != null && config.endColor != 0 ? config.endColor : config.color);
		emitter.setMotion(config.particlesType,config.emitAngle,config.distance,config.duration,config.angleRange != null ? config.angleRange : 0,config.distanceRange != null ? config.distanceRange : 0,config.durationRange != null ? config.durationRange : 0);
		emitter.setAlpha(config.particlesType,config.startAlpha != null ? config.startAlpha : 1,config.endAlpha != null ? config.endAlpha : 1);
		emitter.setScale(config.particlesType,config.startScale != null ? config.startScale : 1,config.endScale != null ? config.endScale : 1);
		entity.graphic = emitter;
		return entity;
	}
	,applyClipImageConfig: function(entity,config) {
		this.applyImageConfig(entity,config);
		entity.graphic.clipRect = new haxepunk_math_Rectangle(0,0,config.size.x * config.clipSize.x,config.size.y * config.clipSize.y);
		return entity;
	}
	,applyClipRectangleConfig: function(entity,config) {
		this.applyRectangleConfig(entity,config);
		entity.graphic.clipRect = new haxepunk_math_Rectangle(0,0,config.size.x * config.clipSize.x,config.size.y * config.clipSize.y);
		return entity;
	}
	,applyImageConfig: function(entity,config) {
		var image = kro13_hxp_HxpResourceManager.get_instance().getImage(config.source);
		image.scaleX = config.size.x / image.scale / image.get_width();
		image.scaleY = config.size.y / image.scale / image.get_height();
		entity.graphic = image;
		entity.graphic.pixelSnapping = true;
		if(config.color != 0 && config.color != null) {
			entity.graphic.set_color(config.color);
		}
		return entity;
	}
	,applyGroundBlockConfig: function(entity,config) {
		var graphicsList = new haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic();
		var ground = kro13_hxp_HxpResourceManager.get_instance().getRectImage(config.size,config.color);
		ground.scaleX = config.size.x / ground.scale / ground.get_width();
		ground.scaleY = config.size.y / ground.scale / ground.get_height();
		graphicsList.add(ground);
		var _g = 0;
		var _g1 = config.spots;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var spot = kro13_hxp_HxpResourceManager.get_instance();
			var x = 40;
			var y = 40;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var fromColor = config.color;
			var toColor = config.spotColor;
			var t = 0.2;
			if(t == null) {
				t = 1;
			}
			var spot1;
			if(t <= 0) {
				spot1 = fromColor;
			} else if(t >= 1) {
				spot1 = toColor;
			} else {
				var a = fromColor >>> 24 & 255;
				var r = fromColor >>> 16 & 255;
				var g = fromColor >>> 8 & 255;
				var b = fromColor & 255;
				var dA = (toColor >>> 24 & 255) - a;
				var dR = (toColor >>> 16 & 255) - r;
				var dG = (toColor >>> 8 & 255) - g;
				var dB = (toColor & 255) - b;
				a += dA * t | 0;
				r += dR * t | 0;
				g += dG * t | 0;
				b += dB * t | 0;
				spot1 = a << 24 | r << 16 | g << 8 | b;
			}
			var spot2 = spot.getRectImage(this1,spot1);
			spot2.x = s.x * 40;
			spot2.y = s.y * 40;
			graphicsList.add(spot2);
		}
		var _g = 0;
		var _g1 = config.shadows;
		while(_g < _g1.length) {
			var sh = _g1[_g];
			++_g;
			var shadow = kro13_hxp_HxpResourceManager.get_instance();
			var x = 40;
			var y = 40;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var fromColor = config.color;
			var toColor = config.spotColor;
			var t = 0.4;
			if(t == null) {
				t = 1;
			}
			var shadow1;
			if(t <= 0) {
				shadow1 = fromColor;
			} else if(t >= 1) {
				shadow1 = toColor;
			} else {
				var a = fromColor >>> 24 & 255;
				var r = fromColor >>> 16 & 255;
				var g = fromColor >>> 8 & 255;
				var b = fromColor & 255;
				var dA = (toColor >>> 24 & 255) - a;
				var dR = (toColor >>> 16 & 255) - r;
				var dG = (toColor >>> 8 & 255) - g;
				var dB = (toColor & 255) - b;
				a += dA * t | 0;
				r += dR * t | 0;
				g += dG * t | 0;
				b += dB * t | 0;
				shadow1 = a << 24 | r << 16 | g << 8 | b;
			}
			var shadow2 = shadow.getRectImage(this1,shadow1);
			shadow2.x = sh.x * 40;
			shadow2.y = sh.y * 40;
			graphicsList.add(shadow2);
		}
		var _g = 0;
		var _g1 = config.borders;
		while(_g < _g1.length) {
			var border = _g1[_g];
			++_g;
			switch(border) {
			case 0:
				var southB = kro13_hxp_HxpResourceManager.get_instance();
				var x = config.size.x;
				var y = 40;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var this1 = { x : x, y : y};
				var southB1 = southB.getRectImage(this1,config.borderColor);
				southB1.y = config.size.y;
				graphicsList.add(southB1);
				break;
			case 1:
				var eastB = kro13_hxp_HxpResourceManager.get_instance();
				var x1 = 2;
				var y1 = config.size.y;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var this2 = { x : x1, y : y1};
				var eastB1 = eastB.getRectImage(this2,config.borderColor);
				eastB1.x = config.size.x - 2;
				graphicsList.add(eastB1);
				break;
			case 2:
				var westB = kro13_hxp_HxpResourceManager.get_instance();
				var x2 = 2;
				var y2 = config.size.y;
				if(y2 == null) {
					y2 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				var this3 = { x : x2, y : y2};
				var westB1 = westB.getRectImage(this3,config.borderColor);
				graphicsList.add(westB1);
				break;
			case 3:
				var northB = kro13_hxp_HxpResourceManager.get_instance();
				var x3 = config.size.x;
				var y3 = 2;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var this4 = { x : x3, y : y3};
				var northB1 = northB.getRectImage(this4,config.borderColor);
				graphicsList.add(northB1);
				break;
			}
		}
		entity.graphic = graphicsList;
		return entity;
	}
	,applyRectangleConfig: function(entity,config) {
		var alpha = entity.graphic != null ? entity.graphic.alpha : 1;
		var image = kro13_hxp_HxpResourceManager.get_instance().getRectImage(config.size,config.color);
		entity.graphic = image;
		entity.graphic.set_alpha(alpha);
		entity.graphic.pixelSnapping = true;
		return entity;
	}
	,applyCircConfig: function(entity,config) {
		var alpha = entity.graphic != null ? entity.graphic.alpha : 1;
		var image = kro13_hxp_HxpResourceManager.get_instance().getCircImage(config.size,config.color);
		entity.graphic = image;
		entity.graphic.set_alpha(alpha);
		entity.graphic.pixelSnapping = true;
		return entity;
	}
	,applyTextConfig: function(entity,config) {
		var options = config.options;
		var bmText = new haxepunk_graphics_text_BitmapText(config.text,0,0,Math.floor(config.width),Math.floor(config.height),options);
		if(config.centerOrigin) {
			bmText.centerOrigin();
		}
		entity.graphic = bmText;
		return entity;
	}
	,setPlainProperties: function(entity,origin) {
		entity.isList = false;
		var image = entity.graphic;
		image.originX = origin.x * image.get_width() / (image.get_width() * image.scaleX * image.scale);
		image.originY = origin.y * image.get_height() / (image.get_height() * image.scaleY * image.scale);
	}
	,setListProperties: function(entity,origin) {
		entity.isList = true;
		var list = entity.graphic;
		var _g = 0;
		var _g1 = list.get_children();
		while(_g < _g1.length) {
			var ch = _g1[_g];
			++_g;
			var image = ch;
			image.originX = origin.x * image.get_width() / (image.get_width() * image.scaleX * image.scale);
			image.originY = origin.y * image.get_height() / (image.get_height() * image.scaleY * image.scale);
		}
	}
	,getEntityFromPool: function() {
		if(this.entitiesPool.length == 0) {
			this.entitiesPool.push(new kro13_hxp_HxpEntity());
		}
		return this.entitiesPool.pop();
	}
	,putEntityToPool: function(entity) {
		entity.isList = false;
		this.entitiesPool.push(entity);
	}
	,__class__: kro13_hxp_systems_render_HxpEntitiesManager
};
var kro13_iap_IIApManager = function() { };
$hxClasses["kro13.iap.IIApManager"] = kro13_iap_IIApManager;
kro13_iap_IIApManager.__name__ = "kro13.iap.IIApManager";
kro13_iap_IIApManager.__isInterface__ = true;
kro13_iap_IIApManager.prototype = {
	__class__: kro13_iap_IIApManager
};
var kro13_iap_IAPManager = function() {
	this.testIsPremiumPurchased = false;
};
$hxClasses["kro13.iap.IAPManager"] = kro13_iap_IAPManager;
kro13_iap_IAPManager.__name__ = "kro13.iap.IAPManager";
kro13_iap_IAPManager.__interfaces__ = [kro13_iap_IIApManager];
kro13_iap_IAPManager.__properties__ = {get_instance:"get_instance"};
kro13_iap_IAPManager.get_instance = function() {
	if(kro13_iap_IAPManager.instance == null) {
		kro13_iap_IAPManager.instance = new kro13_iap_IAPManager();
	}
	return kro13_iap_IAPManager.instance;
};
kro13_iap_IAPManager.prototype = {
	hasPremium: function() {
		if(this.impl == null) {
			return this.testIsPremiumPurchased;
		}
		return this.impl.hasPremium();
	}
	,isAvailable: function() {
		if(this.impl == null) {
			return true;
		}
		return this.impl.isAvailable();
	}
	,checkIfPremiumPurchased: function(onSuccess) {
		var _gthis = this;
		if(this.impl == null) {
			haxe_Timer.delay(function() {
				onSuccess(_gthis.testIsPremiumPurchased);
			},1000);
			return;
		}
		this.impl.checkIfPremiumPurchased(onSuccess);
	}
	,purchasePremium: function(onSuccess,onError) {
		if(this.impl == null) {
			this.testIsPremiumPurchased = true;
			haxe_Timer.delay(function() {
				onSuccess();
			},1000);
			return;
		}
		this.impl.purchasePremium(onSuccess,onError);
	}
	,__class__: kro13_iap_IAPManager
};
var kro13_kk_BonusManager = function() { };
$hxClasses["kro13.kk.BonusManager"] = kro13_kk_BonusManager;
kro13_kk_BonusManager.__name__ = "kro13.kk.BonusManager";
kro13_kk_BonusManager.bonusPostUrl = function() {
	return "?w=wall-168383584_25";
};
kro13_kk_BonusManager.bonusCondition = function(dataProvider) {
	return kro13_kk_data_EProfileTag.isTagged(1,dataProvider.getProfile());
};
kro13_kk_BonusManager.bonusAction = function(dataProvider) {
	if(kro13_kk_BonusManager.bonusCondition(dataProvider)) {
		dataProvider.updateRestarts(1);
	}
};
var kro13_kk_Constants = function() { };
$hxClasses["kro13.kk.Constants"] = kro13_kk_Constants;
kro13_kk_Constants.__name__ = "kro13.kk.Constants";
var kro13_kk_EGameEvent = $hxEnums["kro13.kk.EGameEvent"] = { __ename__ : "kro13.kk.EGameEvent", __constructs__ : ["START_NEW","RESTART","PLAY","PAUSE","ACTIVATE","DEACTIVATE","RESET_PROFILE","STATS","CHANGE_SOUND","MAIN_MENU","HELP","CREDITS","CONFIRM","SETTINGS","ERROR","SHOW_ADS","SHOW_VIDEO_ADS","PLAYER_CREATED","HIT","TRAMP_ON","TRAMP_OFF","TRAMP_LAND","STUCK","RELEASE","EMIT_SCORE","AVALANCHE_START","AVALANCHE_STOP","TRICK_START","TRICK_STOP","COMBO_STOP","ROLLBACK","CANYON_SWITCH","CANYON_GENERATE_NEXT","CHASE_START","CHASE_SUCCESS","CHASE_FAIL","VALIDATE_DATA","START_TUTOR","IN_GAME_MESSAGE","TUTOR_MESSAGE","COMPLEXITY_REDUCED","BONUS","SETTINGS_CHANGED","SHOW_PRIVACY_POLICY"]
	,START_NEW: ($_=function(firstStart) { return {_hx_index:0,firstStart:firstStart,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["firstStart"],$_)
	,RESTART: {_hx_index:1,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,PLAY: {_hx_index:2,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,PAUSE: {_hx_index:3,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,ACTIVATE: {_hx_index:4,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,DEACTIVATE: {_hx_index:5,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,RESET_PROFILE: {_hx_index:6,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,STATS: {_hx_index:7,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,CHANGE_SOUND: {_hx_index:8,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,MAIN_MENU: {_hx_index:9,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,HELP: {_hx_index:10,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,CREDITS: {_hx_index:11,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,CONFIRM: ($_=function(message,onConfirm,onCancel) { return {_hx_index:12,message:message,onConfirm:onConfirm,onCancel:onCancel,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["message","onConfirm","onCancel"],$_)
	,SETTINGS: {_hx_index:13,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,ERROR: ($_=function(errorType,errorMessage,showErrorPopup) { return {_hx_index:14,errorType:errorType,errorMessage:errorMessage,showErrorPopup:showErrorPopup,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["errorType","errorMessage","showErrorPopup"],$_)
	,SHOW_ADS: ($_=function(onSuccess,onError) { return {_hx_index:15,onSuccess:onSuccess,onError:onError,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["onSuccess","onError"],$_)
	,SHOW_VIDEO_ADS: ($_=function(onSuccess,onSkip,onError) { return {_hx_index:16,onSuccess:onSuccess,onSkip:onSkip,onError:onError,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["onSuccess","onSkip","onError"],$_)
	,PLAYER_CREATED: ($_=function(player) { return {_hx_index:17,player:player,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["player"],$_)
	,HIT: ($_=function(target,amplitude) { return {_hx_index:18,target:target,amplitude:amplitude,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["target","amplitude"],$_)
	,TRAMP_ON: {_hx_index:19,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,TRAMP_OFF: ($_=function(jumpTime) { return {_hx_index:20,jumpTime:jumpTime,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["jumpTime"],$_)
	,TRAMP_LAND: {_hx_index:21,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,STUCK: ($_=function(avalanche) { return {_hx_index:22,avalanche:avalanche,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["avalanche"],$_)
	,RELEASE: {_hx_index:23,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,EMIT_SCORE: ($_=function(score) { return {_hx_index:24,score:score,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["score"],$_)
	,AVALANCHE_START: {_hx_index:25,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,AVALANCHE_STOP: ($_=function(escaped,fade) { return {_hx_index:26,escaped:escaped,fade:fade,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["escaped","fade"],$_)
	,TRICK_START: {_hx_index:27,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,TRICK_STOP: {_hx_index:28,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,COMBO_STOP: {_hx_index:29,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,ROLLBACK: ($_=function(startNew) { return {_hx_index:30,startNew:startNew,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["startNew"],$_)
	,CANYON_SWITCH: {_hx_index:31,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,CANYON_GENERATE_NEXT: {_hx_index:32,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,CHASE_START: {_hx_index:33,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,CHASE_SUCCESS: {_hx_index:34,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,CHASE_FAIL: {_hx_index:35,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,VALIDATE_DATA: {_hx_index:36,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,START_TUTOR: {_hx_index:37,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,IN_GAME_MESSAGE: ($_=function(message) { return {_hx_index:38,message:message,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["message"],$_)
	,TUTOR_MESSAGE: ($_=function(content) { return {_hx_index:39,content:content,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["content"],$_)
	,COMPLEXITY_REDUCED: ($_=function(reducer) { return {_hx_index:40,reducer:reducer,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["reducer"],$_)
	,BONUS: ($_=function(level) { return {_hx_index:41,level:level,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["level"],$_)
	,SETTINGS_CHANGED: {_hx_index:42,__enum__:"kro13.kk.EGameEvent",toString:$estr}
	,SHOW_PRIVACY_POLICY: ($_=function(onConfirm) { return {_hx_index:43,onConfirm:onConfirm,__enum__:"kro13.kk.EGameEvent",toString:$estr}; },$_.__params__ = ["onConfirm"],$_)
};
var kro13_kk_MessageContent = {};
kro13_kk_MessageContent._new = function(t) {
	var this1 = t;
	return this1;
};
kro13_kk_MessageContent.fromString = function(s) {
	var txt = new kro13_kk_guiObjects_TextField(11250647,null,true,false);
	haxepunk_math_Vector2.setTo(txt.get_size(),800,0);
	txt.build();
	txt.materialConfig.text = s;
	txt.renderer.isValid = false;
	haxepunk_math_Vector2.setTo(txt.get_size(),800,kro13_kk_utils_TextUtils.getTextRect(txt).y);
	var this1 = txt;
	return this1;
};
var kro13_kk_IEventDispatcher = function() { };
$hxClasses["kro13.kk.IEventDispatcher"] = kro13_kk_IEventDispatcher;
kro13_kk_IEventDispatcher.__name__ = "kro13.kk.IEventDispatcher";
kro13_kk_IEventDispatcher.__isInterface__ = true;
kro13_kk_IEventDispatcher.prototype = {
	__class__: kro13_kk_IEventDispatcher
};
var kro13_kk_IUpdatable = function() { };
$hxClasses["kro13.kk.IUpdatable"] = kro13_kk_IUpdatable;
kro13_kk_IUpdatable.__name__ = "kro13.kk.IUpdatable";
kro13_kk_IUpdatable.__isInterface__ = true;
kro13_kk_IUpdatable.prototype = {
	__class__: kro13_kk_IUpdatable
};
var kro13_kk_KKGame = function() {
	this.isStarted = false;
	kro13_kk_KKGame.version = openfl_Lib.get_current().stage.application.meta.h["version"];
	var dims = this.calculateScaledDimensions();
	kro13_hxp_HxpEngine.call(this,dims.x,dims.y,60,false);
	var content = window.document.getElementById("content");
	window.addEventListener("resize",function(e) {
		if(content.clientHeight == 0) {
			openfl_Lib.get_current().dispatchEvent(new openfl_events_Event("deactivate"));
		}
	},false);
};
$hxClasses["kro13.kk.KKGame"] = kro13_kk_KKGame;
kro13_kk_KKGame.__name__ = "kro13.kk.KKGame";
kro13_kk_KKGame.__super__ = kro13_hxp_HxpEngine;
kro13_kk_KKGame.prototype = $extend(kro13_hxp_HxpEngine.prototype,{
	init: function() {
		haxe_Log.trace("init",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 68, className : "kro13.kk.KKGame", methodName : "init"});
		this.initAnalytics();
		this.initAds();
		kro13_ya_Ya.get_instance().init($bind(this,this.initWeb));
	}
	,initCpp: function() {
		var _gthis = this;
		this.defineLocale();
		this.createDTSystem();
		this.showPreloader();
		kro13_kk_threading_ThreadingManager.get_instance().run(function() {
			_gthis.initResourceManager();
		},function() {
			_gthis.initTextProperties();
			_gthis.hidePreloader();
			_gthis.createGameEventSystem();
			_gthis.createDataProvider();
			_gthis.createTutor();
			_gthis.initLocale();
			_gthis.createBackScene();
			_gthis.createGameScene();
			_gthis.createSnowScene();
			_gthis.createGUIScene();
			_gthis.startGame();
			_gthis.addListeners();
		},function(e) {
			haxe_Log.trace(e,{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 116, className : "kro13.kk.KKGame", methodName : "initCpp"});
		});
	}
	,initWeb: function() {
		this.defineLocale();
		this.createGameEventSystem();
		this.createDataProvider();
		this.createTutor();
		this.initLocale();
		this.createDTSystem();
		this.createBackScene();
		this.showPreloader();
		this.initResourceManager();
		this.initTextProperties();
		this.setScale();
		this.getRemoteProfile();
	}
	,initAnalytics: function() {
		kro13_analytics_Analytics.get_instance().init();
	}
	,initAds: function() {
		kro13_ads_AdsManager.get_instance().init();
	}
	,getRemoteProfile: function() {
		this.dataProvider.loadRemoteProfile($bind(this,this.onRemoteProfileGot));
	}
	,onRemoteProfileGot: function(remoteProfile) {
		haxe_Log.trace("remote profile: " + Std.string(remoteProfile),{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 154, className : "kro13.kk.KKGame", methodName : "onRemoteProfileGot"});
		kro13_kk_KKGame.isMe = remoteProfile.remoteId == "f2QpnakbMGLd1GhmFrwqOWVCLs8vsm7ZKfk3eFT4fr4=";
		this.hidePreloader();
		this.createGameScene();
		this.createSnowScene();
		this.createGUIScene();
		this.startGame();
		this.addListeners();
	}
	,updateLocalProfle: function() {
	}
	,checkWebViewVersion: function() {
		var ua = $global.navigator.userAgent.toLowerCase();
		var isAndroid = ua.indexOf("android") >= 0;
		if(isAndroid) {
			var chromeIdx = ua.indexOf("chrome");
			if(chromeIdx >= 0) {
				var wvVer = Std.parseInt(ua.substring(ua.indexOf("/",chromeIdx) + 1,ua.indexOf(".",chromeIdx)));
				haxe_Log.trace("WV version " + wvVer,{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 186, className : "kro13.kk.KKGame", methodName : "checkWebViewVersion"});
			}
		}
	}
	,defineLocale: function() {
		var locale = "en";
		locale = kro13_ya_sdk_YaSDK.get_instance().environment.i18n.lang;
		if(locale == "ru") {
			kro13_kk_Constants.LOCALE = locale;
		} else {
			kro13_kk_Constants.LOCALE = "en";
		}
	}
	,setScale: function() {
		haxepunk_HXP.screen.scaleMode = new haxepunk_screen_UniformScaleMode(1,true);
		haxepunk_HXP.screen.scaleMode.integer = false;
	}
	,showPreloader: function() {
		haxe_Log.trace("show preloader",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 218, className : "kro13.kk.KKGame", methodName : "showPreloader"});
		this.preloaderScene = new kro13_hxp_scenes_HxpPreloaderScene();
		this.preloaderScene.init();
		this.preloaderScene.build();
		this.preloaderScene.start();
	}
	,hidePreloader: function() {
		haxe_Log.trace("hide preloader",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 227, className : "kro13.kk.KKGame", methodName : "hidePreloader"});
		this.preloaderScene.destroy();
	}
	,createDataProvider: function() {
		haxe_Log.trace("create dp",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 233, className : "kro13.kk.KKGame", methodName : "createDataProvider"});
		this.dataProvider = new kro13_kk_data_DataProvider(this.gameEventSystem);
		this.dataProvider.load();
	}
	,initLocale: function() {
		haxe_Log.trace("init locale",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 240, className : "kro13.kk.KKGame", methodName : "initLocale"});
		kro13_kk_utils_L.get_instance().init("locale/" + this.dataProvider.getProfile().misc.locale.toLowerCase() + ".json");
	}
	,initResourceManager: function() {
		haxe_Log.trace("init res",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 246, className : "kro13.kk.KKGame", methodName : "initResourceManager"});
		kro13_hxp_HxpResourceManager.get_instance().loadAtlas("images/kk.atlas");
		kro13_hxp_HxpResourceManager.get_instance().loadAllSounds();
	}
	,initTextProperties: function() {
		haxe_Log.trace("create txt",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 253, className : "kro13.kk.KKGame", methodName : "initTextProperties"});
		haxepunk_graphics_text_BitmapText.defineFormatTag("white",{ color : 16777215});
		haxepunk_graphics_text_BitmapText.defineFormatTag("red",{ color : 16711680});
		haxepunk_graphics_text_BitmapText.defineFormatTag("green",{ color : 65280});
		haxepunk_graphics_text_BitmapText.defineFormatTag("pink",{ color : 16731843});
		haxepunk_graphics_text_BitmapText.defineFormatTag("guiText",{ color : 11250647});
		haxepunk_graphics_text_BitmapText.defineFormatTag("guiObjects",{ color : 10066380});
		var star = kro13_hxp_HxpResourceManager.get_instance().getImage("images/star.png");
		star.scale = 1.5;
		haxepunk_graphics_text_BitmapText.defineImageTag("star",star);
	}
	,createDTSystem: function() {
		this.dtSystem = new kro13_kk_systems_DTSystem(haxepunk_HXP.engine.preUpdate);
		this.dtSystem.start();
	}
	,createGameEventSystem: function() {
		haxe_Log.trace("create event system",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 273, className : "kro13.kk.KKGame", methodName : "createGameEventSystem"});
		this.gameEventSystem = new kro13_kk_systems_GameEventSystem();
		this.gameEventSystem.start();
	}
	,createBackScene: function() {
		haxe_Log.trace("create back",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 280, className : "kro13.kk.KKGame", methodName : "createBackScene"});
		this.backScene = new kro13_hxp_scenes_HxpBackScene();
		this.backScene.init();
		this.backScene.build();
		this.backScene.start();
	}
	,createGameScene: function() {
		haxe_Log.trace("create game",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 289, className : "kro13.kk.KKGame", methodName : "createGameScene"});
		this.gameScene = new kro13_hxp_scenes_HxpGameScene(this.gameEventSystem,this.dataProvider);
		this.gameScene.init();
		haxe_Log.trace("game initialized",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 292, className : "kro13.kk.KKGame", methodName : "createGameScene"});
	}
	,createGUIScene: function() {
		haxe_Log.trace("create gui",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 297, className : "kro13.kk.KKGame", methodName : "createGUIScene"});
		this.guiScene = new kro13_hxp_scenes_HxpGUIScene(this.gameEventSystem,this.dataProvider,$bind(this,this.reloadGame));
		this.guiScene.init();
		this.guiScene.build();
		this.guiScene.start();
	}
	,createSnowScene: function() {
		this.snowScene = new kro13_hxp_scenes_HxpSnowScene(this.gameEventSystem,this.dataProvider);
		this.snowScene.init();
		this.snowScene.build();
		this.snowScene.start();
	}
	,createTutor: function() {
		kro13_kk_TutorManager.get_instance().init(this.dataProvider,this.gameEventSystem);
		this.gameEventSystem.addContainer(kro13_kk_TutorManager.get_instance());
	}
	,startGame: function() {
		haxe_Log.trace("start",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 320, className : "kro13.kk.KKGame", methodName : "startGame"});
		this.isStarted = true;
		if(!kro13_kk_data_EProfileTag.isTagged(5,this.dataProvider.getProfile())) {
			this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.START_TUTOR);
		} else {
			this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.START_NEW(true));
		}
		this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.ACTIVATE);
	}
	,reloadGame: function() {
		this.initLocale();
		this.guiScene.destroy();
		this.createGUIScene();
	}
	,onContextLost: function(e) {
		haxe_Log.trace("context lost",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 355, className : "kro13.kk.KKGame", methodName : "onContextLost"});
	}
	,onContextCreate: function(e) {
		haxe_Log.trace("context create",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 360, className : "kro13.kk.KKGame", methodName : "onContextCreate"});
		kro13_kk_guiObjects_popups_ConsolePopup.print("Context");
	}
	,onActivate: function(e) {
		this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.ACTIVATE);
		haxe_Log.trace("activate",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 367, className : "kro13.kk.KKGame", methodName : "onActivate"});
		kro13_kk_guiObjects_popups_ConsolePopup.print("Activate");
	}
	,onDeactivate: function(e) {
		this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.DEACTIVATE);
		haxe_Log.trace("deactivate",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 378, className : "kro13.kk.KKGame", methodName : "onDeactivate"});
		kro13_kk_guiObjects_popups_ConsolePopup.print("Deactivate");
		if(!this.isStarted) {
			return;
		}
		this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
		this.gameEventSystem.dispatchGameEvent(kro13_kk_EGameEvent.MAIN_MENU);
		this.dataProvider.save();
		this.dataProvider.saveRemoteProfile();
	}
	,addListeners: function() {
		openfl_Lib.get_current().addEventListener("deactivate",$bind(this,this.onDeactivate));
		openfl_Lib.get_current().addEventListener("activate",$bind(this,this.onActivate));
		openfl_Lib.get_current().stage.addEventListener("context3DCreate",$bind(this,this.onContextCreate));
	}
	,onKKResize: function(e) {
		var dims = this.calculateScaledDimensions();
		haxepunk_HXP.width = dims.x;
		haxepunk_HXP.height = dims.y;
		haxe_Log.trace("-------------------------------",{ fileName : "src/kro13/kk/KKGame.hx", lineNumber : 409, className : "kro13.kk.KKGame", methodName : "onKKResize", customParams : [dims.x,dims.y]});
	}
	,calculateScaledDimensions: function() {
		var w = openfl_Lib.get_current().stage.stageWidth;
		var h = openfl_Lib.get_current().stage.stageHeight;
		var scale = 1;
		if(w > h) {
			kro13_kk_Constants.PORTRAIT = false;
			scale = 1400 / h;
		} else {
			kro13_kk_Constants.PORTRAIT = true;
			scale = 1080 / w;
		}
		w = Math.floor(w * scale);
		h = Math.floor(h * scale);
		var x = w;
		var y = h;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		return this1;
	}
	,__class__: kro13_kk_KKGame
});
var kro13_kk_RestartController = function(dataProvider,eventDispatcher) {
	this.eventDispatcher = eventDispatcher;
	this.dataProvider = dataProvider;
};
$hxClasses["kro13.kk.RestartController"] = kro13_kk_RestartController;
kro13_kk_RestartController.__name__ = "kro13.kk.RestartController";
kro13_kk_RestartController.prototype = {
	tryRestart: function() {
		if(!kro13_ads_AdsManager.get_instance().get_enabled()) {
			this.tryStartNew();
			return;
		}
		if(this.dataProvider.getProfile().scoreData.adsCounter < 1) {
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.CONFIRM(kro13_kk_utils_L.get_instance().NO_RESTART,$bind(this,this.onNoRestartConfirm),$bind(this,this.tryStartNew)));
		} else {
			this.tryStartNew();
		}
	}
	,tryStartNew: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
		var finishText = this.dataProvider.getLocal().getFinishText();
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.CONFIRM(finishText,$bind(this,this.onStartNewConfirm),$bind(this,this.onStartNewCancel)));
	}
	,onNoRestartConfirm: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.MAIN_MENU);
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.SHOW_VIDEO_ADS($bind(this,this.onAdsSuccess),$bind(this,this.onAdsSkip),$bind(this,this.onAdsError)));
	}
	,onStartNewConfirm: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.ROLLBACK(true));
	}
	,onStartNewCancel: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.MAIN_MENU);
	}
	,onAdsSuccess: function() {
		this.dataProvider.updateRestarts(1);
		kro13_kk_BonusManager.bonusAction(this.dataProvider);
		this.dataProvider.getProfile().scoreData.adsCounter++;
	}
	,onAdsError: function(message) {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.ERROR(1,message,true));
	}
	,onAdsSkip: function() {
	}
	,__class__: kro13_kk_RestartController
};
var kro13_kk_TutorManager = function() {
	kro13_kk_gameObjects_AbstractGameObject.call(this);
	this.isStarted = false;
	this.eventHandler = new kro13_kk_components_GameEventHandler();
	this.addComponent(this.eventHandler);
	haxe_Log.trace("new tutor manager",{ fileName : "src/kro13/kk/TutorManager.hx", lineNumber : 40, className : "kro13.kk.TutorManager", methodName : "new"});
};
$hxClasses["kro13.kk.TutorManager"] = kro13_kk_TutorManager;
kro13_kk_TutorManager.__name__ = "kro13.kk.TutorManager";
kro13_kk_TutorManager.__interfaces__ = [kro13_kk_ISwitchable];
kro13_kk_TutorManager.__properties__ = {get_instance:"get_instance"};
kro13_kk_TutorManager.get_instance = function() {
	if(kro13_kk_TutorManager.instance == null) {
		kro13_kk_TutorManager.instance = new kro13_kk_TutorManager();
	}
	return kro13_kk_TutorManager.instance;
};
kro13_kk_TutorManager.__super__ = kro13_kk_gameObjects_AbstractGameObject;
kro13_kk_TutorManager.prototype = $extend(kro13_kk_gameObjects_AbstractGameObject.prototype,{
	init: function(dataProvider,eventDispatcher) {
		this.dataProvider = dataProvider;
		this.eventDispatcher = eventDispatcher;
		this.eventHandler.addHandler($bind(this,this.onEvent));
		this.tutorDP = new kro13_kk_data_TutorDataProvider();
	}
	,start: function() {
		var realDP = this.dataProvider.local;
		this.tutorDP.reset();
		this.dataProvider.local = this.tutorDP;
		this.dataProvider.load();
		this.dataProvider.getProfile().misc = realDP.getProfile().misc;
		kro13_ads_AdsManager.get_instance().set_enabled(false);
		this.isStarted = true;
		haxe_Log.trace("------------------------------------> TUTOR START!",{ fileName : "src/kro13/kk/TutorManager.hx", lineNumber : 62, className : "kro13.kk.TutorManager", methodName : "start"});
	}
	,stop: function() {
		var tutorDP = this.dataProvider.local;
		this.dataProvider.local = new kro13_kk_data_LocalDataProvider();
		this.dataProvider.load();
		kro13_ads_AdsManager.get_instance().set_enabled(true);
		this.isStarted = false;
		haxe_Log.trace("------------------------------------> TUTR STOP!",{ fileName : "src/kro13/kk/TutorManager.hx", lineNumber : 74, className : "kro13.kk.TutorManager", methodName : "stop"});
	}
	,getProgress: function() {
		return this.tutorDP.progress;
	}
	,onEvent: function(e) {
		var _gthis = this;
		switch(e._hx_index) {
		case 18:
			var amplitude = e.amplitude;
			var target = e.target;
			if(!this.isStarted) {
				return;
			}
			if(target.type == 7 && amplitude >= 2) {
				this.tutorDP.hitsCount++;
				if(this.tutorDP.hitsCount == 3) {
					this.tutorDP.progress++;
					var demo1 = new kro13_kk_guiObjects_popups_help_demos_AvalancheDemo(800,2);
					demo1.build();
					this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.TUTOR_MESSAGE([demo1,kro13_kk_MessageContent.fromString(kro13_kk_utils_L.get_instance().TUTOR_RUN)]));
				}
			}
			break;
		case 21:
			if(!this.isStarted) {
				return;
			}
			if(this.dataProvider.getScoreData().speedBonus >= 2 && Math.abs(this.dataProvider.getScoreData().totalRotation) >= 360) {
				this.tutorDP.jumpsCount++;
				if(this.tutorDP.jumpsCount == 1) {
					haxe_Timer.delay(function() {
						_gthis.tutorDP.progress++;
						var demo1 = new kro13_kk_guiObjects_popups_help_demos_SnowmenDemo(800,2);
						demo1.build();
						_gthis.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.TUTOR_MESSAGE([demo1]));
					},200);
				}
			}
			break;
		case 26:
			var _g = e.fade;
			if(e.escaped == true) {
				if(!this.isStarted) {
					return;
				}
				var demo1 = new kro13_kk_guiObjects_popups_help_demos_MandalaDemo(800,2);
				demo1.build();
				this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.TUTOR_MESSAGE([demo1,kro13_kk_MessageContent.fromString(kro13_kk_utils_L.get_instance().TUTOR_END)]));
				this.stop();
				kro13_kk_data_EProfileTag.tag(5,this.dataProvider.getProfile());
			}
			break;
		case 30:
			if(e.startNew == true) {
				if(this.isStarted) {
					this.stop();
				}
			}
			break;
		case 31:
			if(!this.isStarted) {
				return;
			}
			if(this.tutorDP.progress == 0 && this.dataProvider.getLocal().scoreData.totalTracks >= 2) {
				this.tutorDP.progress++;
				var demo1 = new kro13_kk_guiObjects_popups_help_demos_MainHelpDemo2(800,2);
				demo1.build();
				this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.TUTOR_MESSAGE([demo1]));
			}
			break;
		case 37:
			this.start();
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.START_NEW(false));
			var pp = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildPrivacyPolicyDialog();
			var demo = new kro13_kk_guiObjects_popups_help_demos_MainHelpDemo1(800,2);
			demo.build();
			var demo1 = new kro13_kk_guiObjects_popups_help_demos_MainHelpDemo4(800,2);
			demo1.build();
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.TUTOR_MESSAGE([kro13_kk_MessageContent.fromString(kro13_kk_utils_L.get_instance().TUTOR_WELCOME),demo,demo1]));
			break;
		case 41:
			var level = e.level;
			if(!this.isStarted) {
				return;
			}
			if(level >= 3 && this.tutorDP.progress == 1) {
				haxe_Timer.delay(function() {
					_gthis.tutorDP.progress++;
					var demo1 = new kro13_kk_guiObjects_popups_help_demos_MainHelpDemo3(800,2);
					demo1.build();
					_gthis.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.TUTOR_MESSAGE([demo1]));
				},200);
			}
			break;
		default:
		}
	}
	,__class__: kro13_kk_TutorManager
});
var kro13_kk_components_IComponent = function() { };
$hxClasses["kro13.kk.components.IComponent"] = kro13_kk_components_IComponent;
kro13_kk_components_IComponent.__name__ = "kro13.kk.components.IComponent";
kro13_kk_components_IComponent.__isInterface__ = true;
kro13_kk_components_IComponent.__interfaces__ = [kro13_kk_IDestructable];
kro13_kk_components_IComponent.prototype = {
	__class__: kro13_kk_components_IComponent
};
var kro13_kk_components_AbstractComponent = function(type) {
	this.type = type;
};
$hxClasses["kro13.kk.components.AbstractComponent"] = kro13_kk_components_AbstractComponent;
kro13_kk_components_AbstractComponent.__name__ = "kro13.kk.components.AbstractComponent";
kro13_kk_components_AbstractComponent.__interfaces__ = [kro13_kk_components_IComponent];
kro13_kk_components_AbstractComponent.prototype = {
	destroy: function() {
	}
	,__class__: kro13_kk_components_AbstractComponent
};
var kro13_kk_components_AnimPlayer = function() {
	kro13_kk_components_AbstractComponent.call(this,8);
};
$hxClasses["kro13.kk.components.AnimPlayer"] = kro13_kk_components_AnimPlayer;
kro13_kk_components_AnimPlayer.__name__ = "kro13.kk.components.AnimPlayer";
kro13_kk_components_AnimPlayer.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_components_AnimPlayer.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_AnimPlayer.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	play: function(animation) {
		if(this.currentAnim != animation) {
			this.stop();
			this.currentAnim = animation;
			this.currentAnim.start();
		}
	}
	,stop: function() {
		if(this.currentAnim != null) {
			this.currentAnim.stop();
		}
	}
	,update: function(dt) {
		if(this.currentAnim != null) {
			if(!this.currentAnim.isStarted) {
				this.currentAnim = null;
			} else {
				this.currentAnim.update(dt);
			}
		}
	}
	,__class__: kro13_kk_components_AnimPlayer
});
var kro13_kk_components_Body = function(size,position) {
	this.angularVelocity = 0;
	this.mass = 1.4;
	kro13_kk_components_AbstractComponent.call(this,3);
	this.size = size;
	if(position == null) {
		var this1 = { x : 0, y : 0};
		this.position = this1;
	} else {
		this.position = position;
	}
	this.forces = [];
	this.idsToForces = new haxe_ds_IntMap();
	var this1 = { x : 0, y : 0};
	this.velocity = this1;
	var this1 = { x : 0, y : 0};
	this.acceleration = this1;
	this.onCollide = new haxepunk_Signal1();
	this.timeRate = 1.;
};
$hxClasses["kro13.kk.components.Body"] = kro13_kk_components_Body;
kro13_kk_components_Body.__name__ = "kro13.kk.components.Body";
kro13_kk_components_Body.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_Body.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	destroy: function() {
		kro13_kk_components_AbstractComponent.prototype.destroy.call(this);
		this.size = null;
		this.position = null;
		this.forces = [];
	}
	,hasForces: function() {
		return this.forces.length > 0;
	}
	,getForceById: function(id) {
		return this.idsToForces.get(id);
	}
	,addForce: function(f) {
		this.forces.push(f);
		this.idsToForces.set(f.id,f);
	}
	,removeForceById: function(id) {
		HxOverrides.remove(this.forces,this.idsToForces.get(id));
		this.idsToForces.remove(id);
	}
	,enableForceById: function(id) {
		this.getForceById(id).enabled = true;
	}
	,disableForceById: function(id) {
		this.getForceById(id).enabled = false;
	}
	,updateForces: function(dt) {
		this.acceleration.x = 0;
		this.acceleration.y = 0;
		var _g = 0;
		var _g1 = this.forces;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.enabled) {
				f.update();
				this.acceleration.x += f.get_vector().x / this.mass;
				this.acceleration.y += f.get_vector().y / this.mass;
			}
		}
		this.velocity.x += this.acceleration.x * dt * this.timeRate;
		this.velocity.y += this.acceleration.y * dt * this.timeRate;
	}
	,__class__: kro13_kk_components_Body
});
var kro13_kk_components_GameEventHandler = function() {
	kro13_kk_components_AbstractComponent.call(this,6);
	this.handlers = [];
};
$hxClasses["kro13.kk.components.GameEventHandler"] = kro13_kk_components_GameEventHandler;
kro13_kk_components_GameEventHandler.__name__ = "kro13.kk.components.GameEventHandler";
kro13_kk_components_GameEventHandler.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_GameEventHandler.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	destroy: function() {
		kro13_kk_components_AbstractComponent.prototype.destroy.call(this);
		this.handlers = null;
	}
	,sendEvent: function(e) {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			h(e);
		}
	}
	,addHandler: function(handler) {
		this.handlers.push(handler);
	}
	,removeHandler: function(handler) {
		HxOverrides.remove(this.handlers,handler);
	}
	,__class__: kro13_kk_components_GameEventHandler
});
var kro13_kk_components_Layout = function() {
	this.right = -1;
	this.bottom = -1;
	this.left = -1;
	this.top = -1;
	kro13_kk_components_AbstractComponent.call(this,5);
	this.direction = "horizontal";
};
$hxClasses["kro13.kk.components.Layout"] = kro13_kk_components_Layout;
kro13_kk_components_Layout.__name__ = "kro13.kk.components.Layout";
kro13_kk_components_Layout.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_Layout.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	__class__: kro13_kk_components_Layout
});
var kro13_kk_components_Particles = function(type,emitFunc) {
	this.timeDelta = 0;
	this.visible = true;
	kro13_kk_components_AbstractComponent.call(this,4);
	this.particlesType = type;
	if(emitFunc == null) {
		emitFunc = function() {
			return true;
		};
	}
	this.emitFunc = emitFunc;
};
$hxClasses["kro13.kk.components.Particles"] = kro13_kk_components_Particles;
kro13_kk_components_Particles.__name__ = "kro13.kk.components.Particles";
kro13_kk_components_Particles.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_components_Particles.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_Particles.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	update: function(dt) {
		this.timeDelta += dt;
		if(this.timeDelta >= this.emitFrequency) {
			this.timeDelta = 0;
			this.readyToEmit = true;
		}
	}
	,isTimeToEmit: function() {
		if(this.readyToEmit) {
			this.readyToEmit = false;
			return this.emitFunc();
		}
		return false;
	}
	,__class__: kro13_kk_components_Particles
});
var kro13_kk_components_PhysicalCoefficients = function(owner) {
	kro13_kk_components_AbstractComponent.call(this,12);
	var tmp;
	if(owner.componentsMap == null) {
		tmp = null;
	} else {
		var component = owner.componentsMap.h[2];
		tmp = component;
	}
	this.transform = tmp;
	var tmp;
	if(owner.componentsMap == null) {
		tmp = null;
	} else {
		var component = owner.componentsMap.h[3];
		tmp = component;
	}
	this.body = tmp;
	this.rotationQueue = [];
	this.speedQueue = [];
	this.speedSum = 0;
	this.speedCoeff = 0;
	this.rotationCoeff = 0;
};
$hxClasses["kro13.kk.components.PhysicalCoefficients"] = kro13_kk_components_PhysicalCoefficients;
kro13_kk_components_PhysicalCoefficients.__name__ = "kro13.kk.components.PhysicalCoefficients";
kro13_kk_components_PhysicalCoefficients.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_components_PhysicalCoefficients.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_PhysicalCoefficients.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	update: function(dt) {
		this.rotationQueue.push(this.transform.get_rotation());
		if(this.rotationQueue.length >= 5) {
			this.rotationQueue.shift();
		}
		var this1 = this.body.velocity;
		this.speedQueue.push(Math.sqrt(this1.x * this1.x + this1.y * this1.y));
		var this1 = this.body.velocity;
		this.speedSum += Math.sqrt(this1.x * this1.x + this1.y * this1.y);
		if(this.speedQueue.length >= 20) {
			this.speedSum -= this.speedQueue[0];
			this.speedQueue.shift();
		}
		this.speedCoeff = 1 / (this.speedSum / this.speedQueue.length + 1);
		this.rotationCoeff = 1 / (Math.pow(this.transform.get_rotation() - this.rotationQueue[0],2) * 0.1 + 1);
	}
	,getSpeedCoeff: function() {
		return this.speedCoeff;
	}
	,getRotationCoeff: function() {
		return this.rotationCoeff;
	}
	,__class__: kro13_kk_components_PhysicalCoefficients
});
var kro13_kk_components_PlayerPile = function(owner) {
	kro13_kk_components_AbstractComponent.call(this,13);
	var tmp;
	if(owner.componentsMap == null) {
		tmp = null;
	} else {
		var component = owner.componentsMap.h[2];
		tmp = component;
	}
	this.transform = tmp;
	var tmp;
	if(owner.componentsMap == null) {
		tmp = null;
	} else {
		var component = owner.componentsMap.h[3];
		tmp = component;
	}
	this.body = tmp;
	this.pile = new kro13_kk_gameObjects_Renderable();
	var x = 48;
	var y = 70;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var materialC = { source : "images/pile.png", size : this1};
	this.pile.set_size(materialC.size);
	this.pile.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(materialC);
	var _this = this.pile.renderer;
	_this.isLayerValid = false;
	_this._layer = 1;
	haxepunk_math_Vector2.setTo(this.pile.transform.origin,this.pile.get_size().x * 0.5,this.pile.get_size().y);
	this.transform.addChild(this.pile.transform);
};
$hxClasses["kro13.kk.components.PlayerPile"] = kro13_kk_components_PlayerPile;
kro13_kk_components_PlayerPile.__name__ = "kro13.kk.components.PlayerPile";
kro13_kk_components_PlayerPile.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_PlayerPile.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	enable: function(val) {
		if(val) {
			this.transform.set_visible(false);
			this.transform.addChild(this.pile.transform);
			this.pile.transform.set_visible(true);
		} else {
			this.transform.set_visible(true);
			this.transform.removeChild(this.pile.transform);
			this.pile.transform.set_visible(false);
		}
	}
	,__class__: kro13_kk_components_PlayerPile
});
var kro13_kk_components_Renderer = function() {
	this._layer = 0;
	this.isLayerValid = true;
	this.isValid = true;
	kro13_kk_components_AbstractComponent.call(this,1);
};
$hxClasses["kro13.kk.components.Renderer"] = kro13_kk_components_Renderer;
kro13_kk_components_Renderer.__name__ = "kro13.kk.components.Renderer";
kro13_kk_components_Renderer.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_Renderer.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	set_layer: function(val) {
		this.isLayerValid = false;
		return this._layer = val;
	}
	,get_layer: function() {
		return this._layer;
	}
	,__class__: kro13_kk_components_Renderer
	,__properties__: {set_layer:"set_layer",get_layer:"get_layer"}
});
var kro13_kk_components_TextEmitter = function() {
	kro13_kk_components_AbstractComponent.call(this,7);
	this.toEmit = [];
	this.delaysMap = new haxe_ds_IntMap();
};
$hxClasses["kro13.kk.components.TextEmitter"] = kro13_kk_components_TextEmitter;
kro13_kk_components_TextEmitter.__name__ = "kro13.kk.components.TextEmitter";
kro13_kk_components_TextEmitter.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_TextEmitter.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	emitWithDelay: function(id,text) {
		if(this.delaysMap.exists(id)) {
			if(new Date().getTime() / 1000 - this.delaysMap.get(id) >= 1) {
				this.emit(text);
				this.delaysMap.set(id,new Date().getTime() / 1000);
			}
		} else {
			this.emit(text);
			this.delaysMap.set(id,new Date().getTime() / 1000);
		}
	}
	,emit: function(text) {
		this.toEmit.push(text);
	}
	,pop: function() {
		return this.toEmit.pop();
	}
	,__class__: kro13_kk_components_TextEmitter
});
var kro13_kk_components_Transform = function(owner) {
	var this1 = { x : 0, y : 0};
	this.absPosition = this1;
	this._alpha = 1.;
	this._visible = true;
	this._scale = 1.;
	this.flip = false;
	kro13_kk_components_AbstractComponent.call(this,2);
	this.owner = owner;
	this.children = [];
	this.parent = null;
	var this1 = { x : 0, y : 0};
	this._position = this1;
	var this1 = { x : 0, y : 0};
	this._size = this1;
	this._rotation = 0.;
	var this1 = { x : 0, y : 0};
	this.origin = this1;
	this.onPositionChanged = new haxepunk_Signal1();
	this.onRotationChanged = new haxepunk_Signal1();
};
$hxClasses["kro13.kk.components.Transform"] = kro13_kk_components_Transform;
kro13_kk_components_Transform.__name__ = "kro13.kk.components.Transform";
kro13_kk_components_Transform.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_Transform.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	destroy: function() {
		kro13_kk_components_AbstractComponent.prototype.destroy.call(this);
		var _this = this.onPositionChanged;
		while(_this.callbacks.length > 0) _this.callbacks.pop();
		var _this = this.onRotationChanged;
		while(_this.callbacks.length > 0) _this.callbacks.pop();
		this.onPositionChanged = null;
		this.onRotationChanged = null;
		this.parent = null;
		this._position = null;
		this._size = null;
		this.children = null;
	}
	,addChild: function(child) {
		if(this.children.indexOf(child) < 0) {
			this.children.push(child);
			child.parent = this;
		}
	}
	,removeChild: function(child) {
		HxOverrides.remove(this.children,child);
		child.parent = null;
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.children);
	}
	,moveBy: function(dX,dY) {
		this._position.x += dX;
		this._position.y += dY;
		var a = this._position;
		var _g = 0;
		var _g1 = this.onPositionChanged.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback(a);
		}
	}
	,rotateBy: function(delta) {
		var _g = this;
		_g.set_rotation(_g.get_rotation() + delta);
	}
	,getDistance: function(transform) {
		var thisCenterX = this.get_position().x - this.origin.x + this.get_size().x * 0.5;
		var thisCenterY = this.get_position().y - this.origin.y + this.get_size().y * 0.5;
		var otherCenterX = transform.get_position().x - transform.origin.x + transform.get_size().x * 0.5;
		var otherCenterY = transform.get_position().y - transform.origin.y + transform.get_size().y * 0.5;
		var diffX = thisCenterX - otherCenterX;
		var diffY = thisCenterY - otherCenterY;
		var dist = Math.sqrt(diffX * diffX + diffY * diffY);
		return dist;
	}
	,getRadius: function() {
		return this.radius;
	}
	,getAbsPosition: function() {
		if(this.get_position() == null) {
			haxe_Log.trace(this.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
		}
		this.absPosition.x = this.get_position().x;
		this.absPosition.y = this.get_position().y;
		var parent = this.parent;
		while(parent != null) {
			this.absPosition.x += parent.get_position().x;
			this.absPosition.y += parent.get_position().y;
			parent = parent.parent;
		}
		return this.absPosition;
	}
	,set_position: function(position) {
		haxepunk_math_Vector2.setTo(this._position,position.x,position.y);
		var a = this._position;
		var _g = 0;
		var _g1 = this.onPositionChanged.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback(a);
		}
		return this._position;
	}
	,get_position: function() {
		return this._position;
	}
	,set_size: function(size) {
		haxepunk_math_Vector2.setTo(this._size,size.x,size.y);
		this.radius = Math.sqrt(size.x * size.x + size.y * size.y);
		return this._size;
	}
	,get_size: function() {
		return this._size;
	}
	,set_rotation: function(rotation) {
		this._rotation = rotation;
		var a = this._rotation;
		var _g = 0;
		var _g1 = this.onRotationChanged.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback(a);
		}
		return this._rotation;
	}
	,get_rotation: function() {
		return this._rotation;
	}
	,set_scale: function(val) {
		this._scale = val;
		var t = this.iterator();
		while(t.hasNext()) {
			var t1 = t.next();
			var x = t1.get_position().x * val / t1.get_scale();
			var y = t1.get_position().y * val / t1.get_scale();
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			t1.set_position(this1);
			t1.set_scale(val);
		}
		return this._scale;
	}
	,get_scale: function() {
		return this._scale;
	}
	,set_visible: function(val) {
		this._visible = val;
		var t = this.iterator();
		while(t.hasNext()) {
			var t1 = t.next();
			t1.set_visible(this._visible);
		}
		return this._visible;
	}
	,get_visible: function() {
		return this._visible;
	}
	,set_alpha: function(val) {
		this._alpha = val;
		var t = this.iterator();
		while(t.hasNext()) {
			var t1 = t.next();
			t1.set_alpha(this._alpha);
		}
		return this._alpha;
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,__class__: kro13_kk_components_Transform
	,__properties__: {set_alpha:"set_alpha",get_alpha:"get_alpha",set_visible:"set_visible",get_visible:"get_visible",set_scale:"set_scale",get_scale:"get_scale",set_size:"set_size",get_size:"get_size",set_rotation:"set_rotation",get_rotation:"get_rotation",set_position:"set_position",get_position:"get_position"}
});
var kro13_kk_components_TransformBinder = function(owner) {
	kro13_kk_components_AbstractComponent.call(this,11);
	var tmp;
	if(owner.componentsMap == null) {
		tmp = null;
	} else {
		var component = owner.componentsMap.h[2];
		tmp = component;
	}
	this.transform = tmp;
	this.bindFunction = $bind(this,this.defaultBindFn);
};
$hxClasses["kro13.kk.components.TransformBinder"] = kro13_kk_components_TransformBinder;
kro13_kk_components_TransformBinder.__name__ = "kro13.kk.components.TransformBinder";
kro13_kk_components_TransformBinder.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_components_TransformBinder.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_TransformBinder.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	bindTo: function(target) {
		this.targetTransform = target;
	}
	,unbind: function() {
		this.targetTransform = null;
	}
	,update: function(dt) {
		if(this.targetTransform != null) {
			this.bindFunction(this.targetTransform);
		}
	}
	,defaultBindFn: function(target) {
		haxepunk_math_Vector2.setTo(this.transform.get_position(),target.get_position().x,target.get_position().y);
	}
	,__class__: kro13_kk_components_TransformBinder
});
var kro13_kk_components_Updater = function(owner) {
	kro13_kk_components_AbstractComponent.call(this,9);
	this.owner = owner;
};
$hxClasses["kro13.kk.components.Updater"] = kro13_kk_components_Updater;
kro13_kk_components_Updater.__name__ = "kro13.kk.components.Updater";
kro13_kk_components_Updater.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_components_Updater.__super__ = kro13_kk_components_AbstractComponent;
kro13_kk_components_Updater.prototype = $extend(kro13_kk_components_AbstractComponent.prototype,{
	update: function(dt) {
		this.owner.update(dt);
	}
	,__class__: kro13_kk_components_Updater
});
var kro13_kk_components_animation_AbstractAnimation = function() {
};
$hxClasses["kro13.kk.components.animation.AbstractAnimation"] = kro13_kk_components_animation_AbstractAnimation;
kro13_kk_components_animation_AbstractAnimation.__name__ = "kro13.kk.components.animation.AbstractAnimation";
kro13_kk_components_animation_AbstractAnimation.__interfaces__ = [kro13_kk_IUpdatable,kro13_kk_ISwitchable];
kro13_kk_components_animation_AbstractAnimation.prototype = {
	start: function() {
		this.isStarted = true;
		this.timer = 0;
	}
	,stop: function() {
		this.isStarted = false;
		this.timer = 0;
	}
	,update: function(dt) {
		this.timer += dt;
	}
	,__class__: kro13_kk_components_animation_AbstractAnimation
};
var kro13_kk_components_body_IForce = function() { };
$hxClasses["kro13.kk.components.body.IForce"] = kro13_kk_components_body_IForce;
kro13_kk_components_body_IForce.__name__ = "kro13.kk.components.body.IForce";
kro13_kk_components_body_IForce.__isInterface__ = true;
kro13_kk_components_body_IForce.prototype = {
	__class__: kro13_kk_components_body_IForce
	,__properties__: {get_vector:"get_vector"}
};
var kro13_kk_components_body_AbstractForce = function(id) {
	this.id = id;
	var this1 = { x : 0, y : 0};
	this._vector = this1;
	this.enabled = true;
	this.angular = false;
};
$hxClasses["kro13.kk.components.body.AbstractForce"] = kro13_kk_components_body_AbstractForce;
kro13_kk_components_body_AbstractForce.__name__ = "kro13.kk.components.body.AbstractForce";
kro13_kk_components_body_AbstractForce.__interfaces__ = [kro13_kk_components_body_IForce];
kro13_kk_components_body_AbstractForce.prototype = {
	update: function() {
	}
	,initVector: function(x,y) {
		haxepunk_math_Vector2.setTo(this._vector,x,y);
		haxe_Log.trace("init vector " + x + " " + y,{ fileName : "src/kro13/kk/components/body/AbstractForce.hx", lineNumber : 26, className : "kro13.kk.components.body.AbstractForce", methodName : "initVector"});
	}
	,get_vector: function() {
		return this._vector;
	}
	,__class__: kro13_kk_components_body_AbstractForce
	,__properties__: {get_vector:"get_vector"}
};
var kro13_kk_components_body_Gravity = function(value) {
	kro13_kk_components_body_AbstractForce.call(this,0);
	this._vector.y = value;
};
$hxClasses["kro13.kk.components.body.Gravity"] = kro13_kk_components_body_Gravity;
kro13_kk_components_body_Gravity.__name__ = "kro13.kk.components.body.Gravity";
kro13_kk_components_body_Gravity.__super__ = kro13_kk_components_body_AbstractForce;
kro13_kk_components_body_Gravity.prototype = $extend(kro13_kk_components_body_AbstractForce.prototype,{
	__class__: kro13_kk_components_body_Gravity
});
var kro13_kk_components_body_GroundFriction = function(body) {
	kro13_kk_components_body_AbstractForce.call(this,1);
	this.body = body;
};
$hxClasses["kro13.kk.components.body.GroundFriction"] = kro13_kk_components_body_GroundFriction;
kro13_kk_components_body_GroundFriction.__name__ = "kro13.kk.components.body.GroundFriction";
kro13_kk_components_body_GroundFriction.__super__ = kro13_kk_components_body_AbstractForce;
kro13_kk_components_body_GroundFriction.prototype = $extend(kro13_kk_components_body_AbstractForce.prototype,{
	update: function() {
		var horizSpeedSign = this.body.velocity.x > 0 ? 1 : -1;
		var groundFrictionX = -horizSpeedSign * Math.pow(this.body.velocity.x,2) * 0.001;
		var groundFrictionY = -Math.pow(this.body.velocity.y,2) * 0.001;
		haxepunk_math_Vector2.setTo(this._vector,groundFrictionX,groundFrictionY);
	}
	,__class__: kro13_kk_components_body_GroundFriction
});
var kro13_kk_components_body_GroundResistance = function(transform,body) {
	this.angleRad = 0;
	kro13_kk_components_body_AbstractForce.call(this,2);
	this.transform = transform;
	this.body = body;
};
$hxClasses["kro13.kk.components.body.GroundResistance"] = kro13_kk_components_body_GroundResistance;
kro13_kk_components_body_GroundResistance.__name__ = "kro13.kk.components.body.GroundResistance";
kro13_kk_components_body_GroundResistance.__super__ = kro13_kk_components_body_AbstractForce;
kro13_kk_components_body_GroundResistance.prototype = $extend(kro13_kk_components_body_AbstractForce.prototype,{
	update: function() {
		var angleRad = 0;
		if(this.transform.get_rotation() >= 0) {
			angleRad = (180 - this.transform.get_rotation() % 360) / 180;
		} else {
			angleRad = -(180 + this.transform.get_rotation() % 360) / 180;
		}
		var horizOrientation = 1;
		if(angleRad < 0 && angleRad <= -0.5 || angleRad >= 0 && angleRad < 0.5) {
			horizOrientation = -1;
		}
		var horizSpeedSign = this.body.velocity.x > 0 ? 1 : -1;
		var cosCoef = 1 - Math.abs(Math.cos(Math.PI * angleRad));
		var sinCoef = 1 - Math.abs(Math.sin(Math.PI * angleRad));
		var angleResCoefX = Math.pow(sinCoef,2);
		var angleResCoefY = Math.pow(cosCoef,2);
		var horizMoveCoef = cosCoef * horizOrientation;
		var horizMoveX = Math.pow(0.2 * this.body.velocity.y,2) * horizMoveCoef;
		var angleResistanceX = -horizSpeedSign * Math.pow(this.body.velocity.x,2) * angleResCoefX * 0.1;
		var angleResistanceY = -Math.pow(this.body.velocity.y,2) * angleResCoefY * 0.1;
		haxepunk_math_Vector2.setTo(this._vector,horizMoveX + angleResistanceX,angleResistanceY);
	}
	,__class__: kro13_kk_components_body_GroundResistance
});
var kro13_kk_components_body_RotationInertia = function(body) {
	this.buffer = [];
	this.listeningToInput = false;
	this.slideTime = -1;
	this.mouseDownX = -1;
	kro13_kk_components_body_AbstractForce.call(this,3);
	this.angular = true;
	this.body = body;
	this.groundForce = body.getForceById(2);
};
$hxClasses["kro13.kk.components.body.RotationInertia"] = kro13_kk_components_body_RotationInertia;
kro13_kk_components_body_RotationInertia.__name__ = "kro13.kk.components.body.RotationInertia";
kro13_kk_components_body_RotationInertia.__super__ = kro13_kk_components_body_AbstractForce;
kro13_kk_components_body_RotationInertia.prototype = $extend(kro13_kk_components_body_AbstractForce.prototype,{
	update: function() {
		var dt = kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier / 1;
		if(haxepunk_input_Mouse.mouseDown) {
			this.mouseDownX = haxepunk_input_Mouse.get_mouseX();
			this.slideTime = 0;
			this.body.angularVelocity = 0;
			this.listeningToInput = true;
			this.buffer.push(haxepunk_input_Mouse.get_mouseX());
			if(this.buffer.length > 10) {
				this.buffer.shift();
			}
		}
		if(haxepunk_input_Mouse.mouseUp && this.listeningToInput) {
			if(this.isFlying()) {
				var speed = (haxepunk_input_Mouse.get_mouseX() - this.buffer[0]) / (dt * this.buffer.length);
				this.impulse = speed * 0.1;
				this.body.angularVelocity = this.impulse;
			}
			this.buffer = [];
			this.listeningToInput = false;
		}
		if(!this.listeningToInput && Math.abs(this.body.angularVelocity) > 0) {
			this.body.angularVelocity *= this.getFrictionCoeff();
			if(Math.abs(this.body.angularVelocity) < 1) {
				this.body.angularVelocity = 0;
			}
		}
		this.slideTime += dt;
	}
	,isFlying: function() {
		return !this.groundForce.enabled;
	}
	,getFrictionCoeff: function() {
		if(this.isFlying()) {
			return 0.999;
		} else {
			return 0.9;
		}
	}
	,__class__: kro13_kk_components_body_RotationInertia
});
var kro13_kk_components_renderer_materials_EMaterial = $hxEnums["kro13.kk.components.renderer.materials.EMaterial"] = { __ename__ : "kro13.kk.components.renderer.materials.EMaterial", __constructs__ : ["GROUND_BLOCK","IMAGE","CLIP_IMAGE","RECTANGLE","CIRCLE","CLIP_RECTANGLE","TEXT","PARTICLES","GUI","GUI_BUTTON","PLAYER_GUY","CLIFF","SNOWMAN"]
	,GROUND_BLOCK: ($_=function(config) { return {_hx_index:0,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,IMAGE: ($_=function(config) { return {_hx_index:1,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,CLIP_IMAGE: ($_=function(config) { return {_hx_index:2,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,RECTANGLE: ($_=function(config) { return {_hx_index:3,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,CIRCLE: ($_=function(config) { return {_hx_index:4,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,CLIP_RECTANGLE: ($_=function(config) { return {_hx_index:5,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,TEXT: ($_=function(config) { return {_hx_index:6,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,PARTICLES: ($_=function(config) { return {_hx_index:7,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,GUI: ($_=function(config) { return {_hx_index:8,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,GUI_BUTTON: ($_=function(config) { return {_hx_index:9,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,PLAYER_GUY: ($_=function(config) { return {_hx_index:10,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,CLIFF: ($_=function(config) { return {_hx_index:11,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
	,SNOWMAN: ($_=function(config) { return {_hx_index:12,config:config,__enum__:"kro13.kk.components.renderer.materials.EMaterial",toString:$estr}; },$_.__params__ = ["config"],$_)
};
var kro13_kk_components_renderer_materials_MaterialUtils = function() { };
$hxClasses["kro13.kk.components.renderer.materials.MaterialUtils"] = kro13_kk_components_renderer_materials_MaterialUtils;
kro13_kk_components_renderer_materials_MaterialUtils.__name__ = "kro13.kk.components.renderer.materials.MaterialUtils";
kro13_kk_components_renderer_materials_MaterialUtils.buildImage = function(source,size) {
	var renderable = new kro13_kk_gameObjects_Renderable();
	var materialC = { source : source, size : size};
	renderable.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(materialC);
	return renderable;
};
kro13_kk_components_renderer_materials_MaterialUtils.buildRectangle = function(size,color) {
	var renderable = new kro13_kk_gameObjects_Renderable();
	var materialC = { color : color, size : size};
	renderable.renderer.material = kro13_kk_components_renderer_materials_EMaterial.RECTANGLE(materialC);
	return renderable;
};
var kro13_kk_data_DataProvider = function(eventDispatcher) {
	this.local = new kro13_kk_data_LocalDataProvider();
	this.remote = new kro13_ya_YaRemoteDataProvider();
	this.eventDispatcher = eventDispatcher;
};
$hxClasses["kro13.kk.data.DataProvider"] = kro13_kk_data_DataProvider;
kro13_kk_data_DataProvider.__name__ = "kro13.kk.data.DataProvider";
kro13_kk_data_DataProvider.prototype = {
	loadRemoteProfile: function(onSuccess) {
		if(onSuccess == null) {
			onSuccess = $bind(this,this.defaultOnSuccess);
		}
		var _g = $bind(this,this.onRemoteProfileLoad);
		var onSuccess1 = onSuccess;
		var tmp = function(remoteProfile) {
			_g(onSuccess1,remoteProfile);
		};
		this.remote.loadProfile(this.local.getProfile().remoteId,tmp,$bind(this,this.onRemoteError));
	}
	,saveRemoteProfile: function(onSuccess) {
		if(onSuccess == null) {
			onSuccess = $bind(this,this.defaultOnSuccess);
		}
		var remotePart = kro13_kk_data_DataUtils.cloneRemotePart(this.local.getProfile());
		this.remote.updateProfile(remotePart,onSuccess,$bind(this,this.onRemoteError));
	}
	,updateRemoteProfileProp: function(prop,value,onSuccess) {
		if(onSuccess == null) {
			onSuccess = $bind(this,this.defaultOnSuccess);
		}
		this.remote.updateProfileProp(this.local.getProfile().remoteId,prop,value,onSuccess,$bind(this,this.onRemoteError));
	}
	,getTopScores: function(global,onSuccess) {
		if(global == null) {
			global = true;
		}
		if(onSuccess == null) {
			onSuccess = $bind(this,this.defaultOnSuccess);
		}
		this.remote.getTopScores(10,global,onSuccess,$bind(this,this.onRemoteError));
	}
	,updateRestarts: function(val,reset) {
		if(reset == null) {
			reset = false;
		}
		this.local.updateRestarts(val,reset);
	}
	,getProfile: function() {
		return this.local.getProfile();
	}
	,save: function() {
		this.local.save();
	}
	,load: function() {
		this.local.load();
		this.validateLocal();
	}
	,getScoreData: function() {
		return this.local.scoreData;
	}
	,getLocal: function() {
		return this.local;
	}
	,validateLocal: function() {
		this.local.validate();
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.VALIDATE_DATA);
	}
	,onRemoteProfileLoad: function(onSuccess,remoteProfile) {
		var profile = this.local.getProfile();
		profile.remoteId = remoteProfile.remoteId;
		profile.userName = remoteProfile.userName;
		profile.totalScore = remoteProfile.totalScore;
		if(kro13_kk_data_EProfileTag.isTagged(1,remoteProfile)) {
			kro13_kk_data_EProfileTag.tag(1,profile);
		} else {
			kro13_kk_data_EProfileTag.untag(1,profile);
		}
		onSuccess(remoteProfile);
	}
	,onRemoteError: function(error) {
		if(kro13_kk_KKGame.isMe) {
			var v = "KK error\n" + JSON.stringify(error);
			window.alert(Std.string(v));
		}
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.ERROR(0,JSON.stringify(error),true));
	}
	,defaultOnSuccess: function(data) {
	}
	,__class__: kro13_kk_data_DataProvider
};
var kro13_kk_data_IRemoteDataProvider = function() { };
$hxClasses["kro13.kk.data.IRemoteDataProvider"] = kro13_kk_data_IRemoteDataProvider;
kro13_kk_data_IRemoteDataProvider.__name__ = "kro13.kk.data.IRemoteDataProvider";
kro13_kk_data_IRemoteDataProvider.__isInterface__ = true;
kro13_kk_data_IRemoteDataProvider.prototype = {
	__class__: kro13_kk_data_IRemoteDataProvider
};
var kro13_kk_data_RemoteDataProviderStub = function(local) {
	this.local = local;
};
$hxClasses["kro13.kk.data.RemoteDataProviderStub"] = kro13_kk_data_RemoteDataProviderStub;
kro13_kk_data_RemoteDataProviderStub.__name__ = "kro13.kk.data.RemoteDataProviderStub";
kro13_kk_data_RemoteDataProviderStub.__interfaces__ = [kro13_kk_data_IRemoteDataProvider];
kro13_kk_data_RemoteDataProviderStub.prototype = {
	loadProfile: function(remoteId,onSuccess,onError) {
		haxe_Log.trace("get profile stub " + remoteId,{ fileName : "src/kro13/kk/data/DataProvider.hx", lineNumber : 155, className : "kro13.kk.data.RemoteDataProviderStub", methodName : "loadProfile"});
		if(onSuccess != null) {
			var remoteProf = { remoteId : "", userName : "Kanyon Karver", totalScore : 0, tags : []};
			if(remoteId == "") {
				remoteProf.userName = "Stubby Stub";
			} else {
				remoteProf.remoteId = this.local.getProfile().remoteId;
				remoteProf.userName = this.local.getProfile().userName;
				remoteProf.totalScore = this.local.getProfile().totalScore;
			}
			onSuccess(remoteProf);
		}
	}
	,updateProfile: function(profile,onSuccess,onError) {
		if(onSuccess != null) {
			onSuccess(profile.remoteId);
		}
	}
	,updateProfileProp: function(remoteId,prop,value,onSuccess,onError) {
		Reflect.setProperty(this.local.getProfile(),prop,value);
		if(onSuccess != null) {
			onSuccess(remoteId);
		}
	}
	,getTopScores: function(count,global,onSuccess,onError) {
		if(onSuccess != null) {
			onSuccess([]);
		}
	}
	,__class__: kro13_kk_data_RemoteDataProviderStub
};
var kro13_kk_data_DataUtils = function() { };
$hxClasses["kro13.kk.data.DataUtils"] = kro13_kk_data_DataUtils;
kro13_kk_data_DataUtils.__name__ = "kro13.kk.data.DataUtils";
kro13_kk_data_DataUtils.overwriteObject = function(target,source) {
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		Reflect.setProperty(target,field,Reflect.getProperty(source,field));
	}
};
kro13_kk_data_DataUtils.cloneRemotePart = function(local) {
	var remote = { remoteId : "", userName : "Kanyon Karver", totalScore : 0, tags : []};
	var _g = 0;
	var _g1 = Reflect.fields(remote);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		Reflect.setProperty(remote,field,Reflect.getProperty(local,field));
	}
	return remote;
};
kro13_kk_data_DataUtils.generateUserName = function() {
	var adjInd = Math.floor(Math.random() * kro13_kk_data_DataUtils.adjectives.length);
	var nounInd = Math.floor(Math.random() * kro13_kk_data_DataUtils.nouns.length);
	return "" + kro13_kk_data_DataUtils.adjectives[adjInd] + " " + kro13_kk_data_DataUtils.nouns[nounInd];
};
kro13_kk_data_DataUtils.getDefaultProfile = function() {
	var profile = { remoteId : "", userName : "Kanyon Karver", totalScore : 0, tags : []};
	var localPart = { version : 0, canyonChain : [], misc : { soundTypes : [0,1], sensitivity : 1.0, rightHanded : true, locale : kro13_kk_Constants.LOCALE.toUpperCase()}, restarts : 1, scoreData : { currentScore : 0, speedBonus : 0, avalancheBonus : 0, speedRatio : 0, bonusCounter : 0, totalRotation : 0, totalTracks : 0, totalSatori : 0, restartUpdatesCount : 0, adsCounter : 0, totalDistance : 0, bestCombo : 0, totalJumps : 0, totalSnowmen : 0, bestJumpLen : 0, bestRotation : 0, avalanchesEscaped : 0, complexity : 0}, restsrtHP : 0, deactivated : false};
	var _g = 0;
	var _g1 = Reflect.fields(localPart);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		Reflect.setProperty(profile,field,Reflect.getProperty(localPart,field));
	}
	haxe_Log.trace("new default prof " + Std.string(profile),{ fileName : "src/kro13/kk/data/DataUtils.hx", lineNumber : 54, className : "kro13.kk.data.DataUtils", methodName : "getDefaultProfile"});
	return profile;
};
kro13_kk_data_DataUtils.getDefaultRemoteProfile = function() {
	return { remoteId : "", userName : "Kanyon Karver", totalScore : 0, tags : []};
};
kro13_kk_data_DataUtils.getDefaultMisc = function() {
	return { soundTypes : [0,1], sensitivity : 1.0, rightHanded : true, locale : kro13_kk_Constants.LOCALE.toUpperCase()};
};
kro13_kk_data_DataUtils.getBlankScoreData = function() {
	return { currentScore : 0, speedBonus : 0, avalancheBonus : 0, speedRatio : 0, bonusCounter : 0, totalRotation : 0, totalTracks : 0, totalSatori : 0, restartUpdatesCount : 0, adsCounter : 0, totalDistance : 0, bestCombo : 0, totalJumps : 0, totalSnowmen : 0, bestJumpLen : 0, bestRotation : 0, avalanchesEscaped : 0, complexity : 0};
};
kro13_kk_data_DataUtils.encodeCanyon = function(canyon) {
	var blocks = [];
	var _g_current = 0;
	var _g_array = canyon.ground.blocks;
	while(_g_current < _g_array.length) {
		var b = _g_array[_g_current++];
		blocks.push({ size : b.size, position : b.position, borders : b.getBorders(), natureObjects : b.getNatureObjects(), tramps : b.getTrampolines(), spots : b.getSposts(), snowmen : b.getSnowmen(), landscapeDecore : b.getLandscapeDecore()});
	}
	var tmp = { blocks : blocks};
	var blocks = [];
	var _g_current = 0;
	var _g_array = canyon.leftWall.blocks;
	while(_g_current < _g_array.length) {
		var b = _g_array[_g_current++];
		blocks.push({ size : b.size, position : b.position, borders : b.getBorders(), natureObjects : b.getNatureObjects(), tramps : b.getTrampolines(), spots : b.getSposts(), snowmen : b.getSnowmen(), landscapeDecore : b.getLandscapeDecore()});
	}
	var tmp1 = { blocks : blocks};
	var blocks = [];
	var _g_current = 0;
	var _g_array = canyon.rightWall.blocks;
	while(_g_current < _g_array.length) {
		var b = _g_array[_g_current++];
		blocks.push({ size : b.size, position : b.position, borders : b.getBorders(), natureObjects : b.getNatureObjects(), tramps : b.getTrampolines(), spots : b.getSposts(), snowmen : b.getSnowmen(), landscapeDecore : b.getLandscapeDecore()});
	}
	var tmp2 = { blocks : blocks};
	var blocks = [];
	var _g_current = 0;
	var _g_array = canyon.leftWallWall.blocks;
	while(_g_current < _g_array.length) {
		var b = _g_array[_g_current++];
		blocks.push({ size : b.size, position : b.position, borders : b.getBorders(), natureObjects : b.getNatureObjects(), tramps : b.getTrampolines(), spots : b.getSposts(), snowmen : b.getSnowmen(), landscapeDecore : b.getLandscapeDecore()});
	}
	var tmp3 = { blocks : blocks};
	var blocks = [];
	var _g_current = 0;
	var _g_array = canyon.rightWallWall.blocks;
	while(_g_current < _g_array.length) {
		var b = _g_array[_g_current++];
		blocks.push({ size : b.size, position : b.position, borders : b.getBorders(), natureObjects : b.getNatureObjects(), tramps : b.getTrampolines(), spots : b.getSposts(), snowmen : b.getSnowmen(), landscapeDecore : b.getLandscapeDecore()});
	}
	return { ground : tmp, leftWall : tmp1, rightWall : tmp2, leftWallWall : tmp3, rightWallWall : { blocks : blocks}};
};
kro13_kk_data_DataUtils.decodeCanyon = function(canyon) {
	var c = new kro13_kk_maps_CanyonMap();
	var ground = canyon.ground;
	var g = new kro13_kk_maps_GroundMap();
	var _g = 0;
	var _g1 = ground.blocks;
	while(_g < _g1.length) {
		var block = _g1[_g];
		++_g;
		var b = new kro13_kk_maps_GroundBlockMap();
		b.size = block.size;
		b.position = block.position;
		var _g2 = 0;
		var _g3 = block.borders;
		while(_g2 < _g3.length) {
			var border = _g3[_g2];
			++_g2;
			b.addBorder(border);
		}
		if(block.landscapeDecore != null) {
			var _g4 = 0;
			var _g5 = block.landscapeDecore;
			while(_g4 < _g5.length) {
				var obj = _g5[_g4];
				++_g4;
				b.landscapeDecore.push(obj);
			}
		}
		if(block.natureObjects != null) {
			var _g6 = 0;
			var _g7 = block.natureObjects;
			while(_g6 < _g7.length) {
				var obj1 = _g7[_g6];
				++_g6;
				b.natureObjects.push(obj1);
			}
		}
		if(block.snowmen != null) {
			var _g8 = 0;
			var _g9 = block.snowmen;
			while(_g8 < _g9.length) {
				var snowman = _g9[_g8];
				++_g8;
				b.snowmen.push(snowman);
			}
		}
		var _g10 = 0;
		var _g11 = block.spots;
		while(_g10 < _g11.length) {
			var spot = _g11[_g10];
			++_g10;
			b.spots.push(spot);
		}
		var _g12 = 0;
		var _g13 = block.tramps;
		while(_g12 < _g13.length) {
			var tramp = _g13[_g12];
			++_g12;
			b.trampolines.push(tramp);
		}
		g.addBlock(b);
	}
	c.ground = g;
	var ground = canyon.leftWall;
	var g = new kro13_kk_maps_GroundMap();
	var _g = 0;
	var _g1 = ground.blocks;
	while(_g < _g1.length) {
		var block = _g1[_g];
		++_g;
		var b = new kro13_kk_maps_GroundBlockMap();
		b.size = block.size;
		b.position = block.position;
		var _g2 = 0;
		var _g3 = block.borders;
		while(_g2 < _g3.length) {
			var border = _g3[_g2];
			++_g2;
			b.addBorder(border);
		}
		if(block.landscapeDecore != null) {
			var _g4 = 0;
			var _g5 = block.landscapeDecore;
			while(_g4 < _g5.length) {
				var obj = _g5[_g4];
				++_g4;
				b.landscapeDecore.push(obj);
			}
		}
		if(block.natureObjects != null) {
			var _g6 = 0;
			var _g7 = block.natureObjects;
			while(_g6 < _g7.length) {
				var obj1 = _g7[_g6];
				++_g6;
				b.natureObjects.push(obj1);
			}
		}
		if(block.snowmen != null) {
			var _g8 = 0;
			var _g9 = block.snowmen;
			while(_g8 < _g9.length) {
				var snowman = _g9[_g8];
				++_g8;
				b.snowmen.push(snowman);
			}
		}
		var _g10 = 0;
		var _g11 = block.spots;
		while(_g10 < _g11.length) {
			var spot = _g11[_g10];
			++_g10;
			b.spots.push(spot);
		}
		var _g12 = 0;
		var _g13 = block.tramps;
		while(_g12 < _g13.length) {
			var tramp = _g13[_g12];
			++_g12;
			b.trampolines.push(tramp);
		}
		g.addBlock(b);
	}
	c.leftWall = g;
	var ground = canyon.leftWallWall;
	var g = new kro13_kk_maps_GroundMap();
	var _g = 0;
	var _g1 = ground.blocks;
	while(_g < _g1.length) {
		var block = _g1[_g];
		++_g;
		var b = new kro13_kk_maps_GroundBlockMap();
		b.size = block.size;
		b.position = block.position;
		var _g2 = 0;
		var _g3 = block.borders;
		while(_g2 < _g3.length) {
			var border = _g3[_g2];
			++_g2;
			b.addBorder(border);
		}
		if(block.landscapeDecore != null) {
			var _g4 = 0;
			var _g5 = block.landscapeDecore;
			while(_g4 < _g5.length) {
				var obj = _g5[_g4];
				++_g4;
				b.landscapeDecore.push(obj);
			}
		}
		if(block.natureObjects != null) {
			var _g6 = 0;
			var _g7 = block.natureObjects;
			while(_g6 < _g7.length) {
				var obj1 = _g7[_g6];
				++_g6;
				b.natureObjects.push(obj1);
			}
		}
		if(block.snowmen != null) {
			var _g8 = 0;
			var _g9 = block.snowmen;
			while(_g8 < _g9.length) {
				var snowman = _g9[_g8];
				++_g8;
				b.snowmen.push(snowman);
			}
		}
		var _g10 = 0;
		var _g11 = block.spots;
		while(_g10 < _g11.length) {
			var spot = _g11[_g10];
			++_g10;
			b.spots.push(spot);
		}
		var _g12 = 0;
		var _g13 = block.tramps;
		while(_g12 < _g13.length) {
			var tramp = _g13[_g12];
			++_g12;
			b.trampolines.push(tramp);
		}
		g.addBlock(b);
	}
	c.leftWallWall = g;
	var ground = canyon.rightWall;
	var g = new kro13_kk_maps_GroundMap();
	var _g = 0;
	var _g1 = ground.blocks;
	while(_g < _g1.length) {
		var block = _g1[_g];
		++_g;
		var b = new kro13_kk_maps_GroundBlockMap();
		b.size = block.size;
		b.position = block.position;
		var _g2 = 0;
		var _g3 = block.borders;
		while(_g2 < _g3.length) {
			var border = _g3[_g2];
			++_g2;
			b.addBorder(border);
		}
		if(block.landscapeDecore != null) {
			var _g4 = 0;
			var _g5 = block.landscapeDecore;
			while(_g4 < _g5.length) {
				var obj = _g5[_g4];
				++_g4;
				b.landscapeDecore.push(obj);
			}
		}
		if(block.natureObjects != null) {
			var _g6 = 0;
			var _g7 = block.natureObjects;
			while(_g6 < _g7.length) {
				var obj1 = _g7[_g6];
				++_g6;
				b.natureObjects.push(obj1);
			}
		}
		if(block.snowmen != null) {
			var _g8 = 0;
			var _g9 = block.snowmen;
			while(_g8 < _g9.length) {
				var snowman = _g9[_g8];
				++_g8;
				b.snowmen.push(snowman);
			}
		}
		var _g10 = 0;
		var _g11 = block.spots;
		while(_g10 < _g11.length) {
			var spot = _g11[_g10];
			++_g10;
			b.spots.push(spot);
		}
		var _g12 = 0;
		var _g13 = block.tramps;
		while(_g12 < _g13.length) {
			var tramp = _g13[_g12];
			++_g12;
			b.trampolines.push(tramp);
		}
		g.addBlock(b);
	}
	c.rightWall = g;
	var ground = canyon.rightWallWall;
	var g = new kro13_kk_maps_GroundMap();
	var _g = 0;
	var _g1 = ground.blocks;
	while(_g < _g1.length) {
		var block = _g1[_g];
		++_g;
		var b = new kro13_kk_maps_GroundBlockMap();
		b.size = block.size;
		b.position = block.position;
		var _g2 = 0;
		var _g3 = block.borders;
		while(_g2 < _g3.length) {
			var border = _g3[_g2];
			++_g2;
			b.addBorder(border);
		}
		if(block.landscapeDecore != null) {
			var _g4 = 0;
			var _g5 = block.landscapeDecore;
			while(_g4 < _g5.length) {
				var obj = _g5[_g4];
				++_g4;
				b.landscapeDecore.push(obj);
			}
		}
		if(block.natureObjects != null) {
			var _g6 = 0;
			var _g7 = block.natureObjects;
			while(_g6 < _g7.length) {
				var obj1 = _g7[_g6];
				++_g6;
				b.natureObjects.push(obj1);
			}
		}
		if(block.snowmen != null) {
			var _g8 = 0;
			var _g9 = block.snowmen;
			while(_g8 < _g9.length) {
				var snowman = _g9[_g8];
				++_g8;
				b.snowmen.push(snowman);
			}
		}
		var _g10 = 0;
		var _g11 = block.spots;
		while(_g10 < _g11.length) {
			var spot = _g11[_g10];
			++_g10;
			b.spots.push(spot);
		}
		var _g12 = 0;
		var _g13 = block.tramps;
		while(_g12 < _g13.length) {
			var tramp = _g13[_g12];
			++_g12;
			b.trampolines.push(tramp);
		}
		g.addBlock(b);
	}
	c.rightWallWall = g;
	return c;
};
kro13_kk_data_DataUtils.encodeGround = function(ground) {
	var blocks = [];
	var _g_current = 0;
	var _g_array = ground.blocks;
	while(_g_current < _g_array.length) {
		var b = _g_array[_g_current++];
		blocks.push({ size : b.size, position : b.position, borders : b.getBorders(), natureObjects : b.getNatureObjects(), tramps : b.getTrampolines(), spots : b.getSposts(), snowmen : b.getSnowmen(), landscapeDecore : b.getLandscapeDecore()});
	}
	return { blocks : blocks};
};
kro13_kk_data_DataUtils.decodeGround = function(ground) {
	var g = new kro13_kk_maps_GroundMap();
	var _g = 0;
	var _g1 = ground.blocks;
	while(_g < _g1.length) {
		var block = _g1[_g];
		++_g;
		var b = new kro13_kk_maps_GroundBlockMap();
		b.size = block.size;
		b.position = block.position;
		var _g2 = 0;
		var _g3 = block.borders;
		while(_g2 < _g3.length) {
			var border = _g3[_g2];
			++_g2;
			b.addBorder(border);
		}
		if(block.landscapeDecore != null) {
			var _g4 = 0;
			var _g5 = block.landscapeDecore;
			while(_g4 < _g5.length) {
				var obj = _g5[_g4];
				++_g4;
				b.landscapeDecore.push(obj);
			}
		}
		if(block.natureObjects != null) {
			var _g6 = 0;
			var _g7 = block.natureObjects;
			while(_g6 < _g7.length) {
				var obj1 = _g7[_g6];
				++_g6;
				b.natureObjects.push(obj1);
			}
		}
		if(block.snowmen != null) {
			var _g8 = 0;
			var _g9 = block.snowmen;
			while(_g8 < _g9.length) {
				var snowman = _g9[_g8];
				++_g8;
				b.snowmen.push(snowman);
			}
		}
		var _g10 = 0;
		var _g11 = block.spots;
		while(_g10 < _g11.length) {
			var spot = _g11[_g10];
			++_g10;
			b.spots.push(spot);
		}
		var _g12 = 0;
		var _g13 = block.tramps;
		while(_g12 < _g13.length) {
			var tramp = _g13[_g12];
			++_g12;
			b.trampolines.push(tramp);
		}
		g.addBlock(b);
	}
	return g;
};
kro13_kk_data_DataUtils.encodeBlock = function(block) {
	return { size : block.size, position : block.position, borders : block.getBorders(), natureObjects : block.getNatureObjects(), tramps : block.getTrampolines(), spots : block.getSposts(), snowmen : block.getSnowmen(), landscapeDecore : block.getLandscapeDecore()};
};
kro13_kk_data_DataUtils.decodeBlock = function(block) {
	var b = new kro13_kk_maps_GroundBlockMap();
	b.size = block.size;
	b.position = block.position;
	var _g = 0;
	var _g1 = block.borders;
	while(_g < _g1.length) {
		var border = _g1[_g];
		++_g;
		b.addBorder(border);
	}
	if(block.landscapeDecore != null) {
		var _g = 0;
		var _g1 = block.landscapeDecore;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			b.landscapeDecore.push(obj);
		}
	}
	if(block.natureObjects != null) {
		var _g = 0;
		var _g1 = block.natureObjects;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			b.natureObjects.push(obj);
		}
	}
	if(block.snowmen != null) {
		var _g = 0;
		var _g1 = block.snowmen;
		while(_g < _g1.length) {
			var snowman = _g1[_g];
			++_g;
			b.snowmen.push(snowman);
		}
	}
	var _g = 0;
	var _g1 = block.spots;
	while(_g < _g1.length) {
		var spot = _g1[_g];
		++_g;
		b.spots.push(spot);
	}
	var _g = 0;
	var _g1 = block.tramps;
	while(_g < _g1.length) {
		var tramp = _g1[_g];
		++_g;
		b.trampolines.push(tramp);
	}
	return b;
};
var kro13_kk_data_EProfileTag = {};
kro13_kk_data_EProfileTag.isTagged = function(this1,profile) {
	if(profile.tags != null) {
		return profile.tags.indexOf(this1) >= 0;
	} else {
		return false;
	}
};
kro13_kk_data_EProfileTag.tag = function(this1,profile) {
	if(profile.tags.indexOf(this1) < 0) {
		profile.tags.push(this1);
	}
};
kro13_kk_data_EProfileTag.untag = function(this1,profile) {
	if(profile.tags.indexOf(this1) >= 0) {
		HxOverrides.remove(profile.tags,this1);
	}
};
var kro13_kk_data_LocalDataProvider = function() {
	this.MAX_FOG_INTENSITY = 4;
	this.MIN_FOG_INTENSITY = 1;
	this.MAX_SNOW_INTENSITY = 20;
	this.MIN_SNOW_INTENSITY = 1;
	this.MAX_COMPLEXITY = 20;
	this.MAX_BONUS_INTERVAL = 4;
	this.MIN_BONUS_INTERVAL = 1;
	this.MAX_MAX_BLOCK_SIZE = 20;
	this.MIN_MAX_BLOCK_SIZE = 14;
	this.MAX_MIN_BLOCK_SIZE = 6;
	this.MIN_MIN_BLOCK_SIZE = 3;
	this.MAX_NAT_OBJ_COUNT = 5;
	this.MIN_NAT_OBJ_COUNT = 2;
	this.patcher = new kro13_kk_data_ProfilePatcher();
};
$hxClasses["kro13.kk.data.LocalDataProvider"] = kro13_kk_data_LocalDataProvider;
kro13_kk_data_LocalDataProvider.__name__ = "kro13.kk.data.LocalDataProvider";
kro13_kk_data_LocalDataProvider.prototype = {
	load: function() {
		this.profile = kro13_kk_data_Storage.loadData();
		this.patcher.patch(this.profile);
		this.scoreData = this.profile.scoreData;
	}
	,reset: function() {
		kro13_kk_data_Storage.resetData();
	}
	,save: function() {
		kro13_kk_data_Storage.saveData();
	}
	,updateRestarts: function(val,reset) {
		if(reset == null) {
			reset = false;
		}
		var recharge = val < 0 || reset;
		if(val > 0 && this.profile.restarts == 0) {
			recharge = true;
		}
		if(reset) {
			this.profile.restarts = 0;
		}
		this.profile.restarts += val;
		if(this.profile.restarts <= 0) {
			this.profile.restarts = 0;
			this.profile.restartHP = 0;
			recharge = false;
		}
		if(recharge) {
			this.profile.restartHP = 90;
		}
	}
	,validate: function() {
		this.gravity = this.calcGravity();
		this.maxSpeed = Math.floor(31.6 * Math.sqrt(this.gravity) * 0.95);
		this.minSpeed = Math.floor(this.maxSpeed * 0.1);
		this.critSpeed = Math.floor(this.maxSpeed * 0.4);
		haxe_Log.trace("-----------------> validate:",{ fileName : "src/kro13/kk/data/LocalDataProvider.hx", lineNumber : 90, className : "kro13.kk.data.LocalDataProvider", methodName : "validate"});
		haxe_Log.trace("gravity: " + this.gravity,{ fileName : "src/kro13/kk/data/LocalDataProvider.hx", lineNumber : 91, className : "kro13.kk.data.LocalDataProvider", methodName : "validate"});
		haxe_Log.trace("complexity: " + this.scoreData.complexity,{ fileName : "src/kro13/kk/data/LocalDataProvider.hx", lineNumber : 97, className : "kro13.kk.data.LocalDataProvider", methodName : "validate"});
		haxe_Log.trace("complexity coef: " + this.calcComplexity(),{ fileName : "src/kro13/kk/data/LocalDataProvider.hx", lineNumber : 98, className : "kro13.kk.data.LocalDataProvider", methodName : "validate"});
		kro13_kk_guiObjects_popups_ConsolePopup.print("" + this.calcComplexity() + "," + this.gravity);
	}
	,getProfile: function() {
		return this.profile;
	}
	,getScoreData: function() {
		return this.scoreData;
	}
	,getTotalBonus: function() {
		return this.scoreData.speedBonus + this.scoreData.avalancheBonus;
	}
	,getTrackLength: function() {
		return 10;
	}
	,checkChaseChance: function() {
		return true;
	}
	,checkAvalancheChance: function() {
		return Math.random() >= 0.666;
	}
	,getAvalancheTotalTime: function() {
		return 30;
	}
	,getFogIntensity: function() {
		var coef = this.MIN_FOG_INTENSITY - this.MAX_FOG_INTENSITY;
		var int = coef * this.calcComplexity() + this.MAX_FOG_INTENSITY;
		int = Math.max(int,this.MIN_FOG_INTENSITY);
		return int;
	}
	,getSnowIntensity: function() {
		var coef = this.MAX_SNOW_INTENSITY - this.MIN_SNOW_INTENSITY;
		var int = coef * this.calcComplexity() + this.MIN_SNOW_INTENSITY;
		int = Math.min(int,this.MAX_SNOW_INTENSITY);
		return int;
	}
	,getMinBlockSize: function() {
		var coef = this.MIN_MIN_BLOCK_SIZE - this.MAX_MIN_BLOCK_SIZE;
		var minSize = Math.round(coef * this.calcComplexity() + this.MAX_MIN_BLOCK_SIZE);
		minSize = Math.max(this.MIN_MIN_BLOCK_SIZE,minSize) | 0;
		return minSize;
	}
	,getMaxBlockSize: function() {
		var coef = this.MIN_MAX_BLOCK_SIZE - this.MAX_MAX_BLOCK_SIZE;
		var maxSize = Math.round(coef * this.calcComplexity() + this.MAX_MAX_BLOCK_SIZE);
		maxSize = Math.max(this.MIN_MAX_BLOCK_SIZE,maxSize) | 0;
		return maxSize;
	}
	,getMinBlockShift: function() {
		return this.getMinBlockSize();
	}
	,getMaxNatureObjectsCount: function() {
		var coef = this.MAX_NAT_OBJ_COUNT - this.MIN_NAT_OBJ_COUNT;
		var count = Math.round(coef * this.calcComplexity() + this.MIN_NAT_OBJ_COUNT);
		count = Math.min(count,this.MAX_NAT_OBJ_COUNT) | 0;
		return count;
	}
	,getBonusUpdateInterval: function() {
		var coef = this.MIN_BONUS_INTERVAL - this.MAX_BONUS_INTERVAL;
		var result = coef * this.calcComplexity() + this.MAX_BONUS_INTERVAL;
		result = Math.max(result,this.MIN_BONUS_INTERVAL);
		return result;
	}
	,getHareSpeedCoef: function() {
		if(this.scoreData.totalSatori <= 1) {
			return 0.8;
		}
		return 0.9;
	}
	,getMaxSnowmenCount: function() {
		return 1;
	}
	,getMinTrampsCount: function() {
		return 5;
	}
	,getMaxTrampsCount: function() {
		return 15;
	}
	,getMaxSpeed: function() {
		return this.maxSpeed;
	}
	,getCriticalHitSpeed: function() {
		return this.critSpeed;
	}
	,getMinSpeed: function() {
		return this.minSpeed;
	}
	,getGravity: function() {
		return this.gravity;
	}
	,getNextRestartScore: function() {
		if(this.scoreData.restartUpdatesCount == 0) {
			return 1000;
		} else if(this.scoreData.restartUpdatesCount <= 4) {
			return this.scoreData.restartUpdatesCount * 3000;
		} else {
			return 12000 + (this.scoreData.restartUpdatesCount - 4) * 6000;
		}
	}
	,getTreeProb: function() {
		return 0.1 + 0.6 * this.calcComplexity();
	}
	,getStoneProb: function() {
		return 0.1 + 0.2 * this.calcComplexity();
	}
	,isFixedShift: function() {
		return false;
	}
	,getFinishText: function() {
		var txt = this.isNewRecord() ? kro13_kk_utils_L.get_instance().FINISH_NEW_RECORD : "";
		if(this.scoreData.currentScore > 0) {
			txt += kro13_kk_utils__$L_LL.add(kro13_kk_utils_L.get_instance().FINISH_GOOD,{ score : this.scoreData.currentScore}) + "\n";
		} else {
			txt += kro13_kk_utils__$L_LL.add(kro13_kk_utils_L.get_instance().FINISH_BAD,{ score : this.scoreData.currentScore}) + "\n";
		}
		txt += "" + kro13_kk_utils_L.get_instance().BEST_COMBO + ": " + this.scoreData.bestCombo + "\n";
		txt += "" + kro13_kk_utils_L.get_instance().BEST_JUMP + ": " + kro13_kk_utils_MathUtils.get_instance().roundWithPrec(this.scoreData.bestJumpLen,2) + " " + kro13_kk_utils_L.get_instance().METER + "\n";
		txt += "" + kro13_kk_utils_L.get_instance().BEST_ROTATION + ": " + this.scoreData.bestRotation + "\n";
		txt += "" + kro13_kk_utils_L.get_instance().TOTAL_DISTANCE + ": " + this.scoreData.totalDistance + " " + kro13_kk_utils_L.get_instance().METER + "\n";
		txt += "" + kro13_kk_utils_L.get_instance().TOTAL_JUMPS + ": " + this.scoreData.totalJumps + "\n";
		txt += "" + kro13_kk_utils_L.get_instance().SNOWMEN_DESTROYED + ": " + this.scoreData.totalSnowmen + "\n";
		txt += "" + kro13_kk_utils_L.get_instance().AVALANCHES_ESCAPED + ": " + this.scoreData.avalanchesEscaped + "\n";
		txt += "" + kro13_kk_utils_L.get_instance().FINISH_TXT;
		return txt;
	}
	,isNewRecord: function() {
		return this.scoreData.currentScore > this.profile.totalScore;
	}
	,calcGravity: function() {
		return Math.round(400 * (1 + this.calcComplexity() * 0.5));
	}
	,calcComplexity: function() {
		return this.scoreData.complexity / this.MAX_COMPLEXITY;
	}
	,__class__: kro13_kk_data_LocalDataProvider
};
var kro13_kk_data_ProfilePatcher = function() {
	this.patches = [];
	this.addPatch(new kro13_kk_data_patches_Patch1());
	this.addPatch(new kro13_kk_data_patches_Patch2());
	this.addPatch(new kro13_kk_data_patches_Patch3());
	this.addPatch(new kro13_kk_data_patches_Patch4());
	this.addPatch(new kro13_kk_data_patches_Patch5());
	this.addPatch(new kro13_kk_data_patches_Patch6());
	this.addPatch(new kro13_kk_data_patches_Patch7());
};
$hxClasses["kro13.kk.data.ProfilePatcher"] = kro13_kk_data_ProfilePatcher;
kro13_kk_data_ProfilePatcher.__name__ = "kro13.kk.data.ProfilePatcher";
kro13_kk_data_ProfilePatcher.prototype = {
	patch: function(profile) {
		var currVersion = profile.version;
		var _g = 0;
		var _g1 = this.patches;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(currVersion < p.version) {
				p.apply(profile);
				haxe_Log.trace("patch " + p.version,{ fileName : "src/kro13/kk/data/ProfilePatcher.hx", lineNumber : 27, className : "kro13.kk.data.ProfilePatcher", methodName : "patch"});
			}
		}
	}
	,addPatch: function(patch) {
		this.patches.push(patch);
	}
	,__class__: kro13_kk_data_ProfilePatcher
};
var kro13_kk_data_Storage = function() {
};
$hxClasses["kro13.kk.data.Storage"] = kro13_kk_data_Storage;
kro13_kk_data_Storage.__name__ = "kro13.kk.data.Storage";
kro13_kk_data_Storage.loadData = function() {
	try {
		kro13_kk_data_Storage.profileSO = openfl_net_SharedObject.getLocal("kk_profile","kro13.kk",true);
		if(Reflect.fields(kro13_kk_data_Storage.profileSO.data).length == 0) {
			kro13_kk_data_Storage.resetData();
			kro13_analytics_Analytics.get_instance().sendEvent("game:create_profile");
		}
		return kro13_kk_data_Storage.profileSO.data;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		kro13_analytics_Analytics.get_instance().sendEventError("create profile error");
		throw haxe_Exception.thrown("KK: unable to create profile! Error: " + Std.string(e));
	}
};
kro13_kk_data_Storage.saveData = function() {
	var status = kro13_kk_data_Storage.profileSO.flush();
	if(status == 1) {
		kro13_analytics_Analytics.get_instance().sendEventError("save profile error");
		throw haxe_Exception.thrown("KK: not enough disk space to save profile!");
	}
};
kro13_kk_data_Storage.resetData = function() {
	kro13_kk_data_Storage.profileSO.clear();
	var profile = { remoteId : "", userName : "Kanyon Karver", totalScore : 0, tags : []};
	var localPart = { version : 0, canyonChain : [], misc : { soundTypes : [0,1], sensitivity : 1.0, rightHanded : true, locale : kro13_kk_Constants.LOCALE.toUpperCase()}, restarts : 1, scoreData : { currentScore : 0, speedBonus : 0, avalancheBonus : 0, speedRatio : 0, bonusCounter : 0, totalRotation : 0, totalTracks : 0, totalSatori : 0, restartUpdatesCount : 0, adsCounter : 0, totalDistance : 0, bestCombo : 0, totalJumps : 0, totalSnowmen : 0, bestJumpLen : 0, bestRotation : 0, avalanchesEscaped : 0, complexity : 0}, restsrtHP : 0, deactivated : false};
	var _g = 0;
	var _g1 = Reflect.fields(localPart);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		Reflect.setProperty(profile,field,Reflect.getProperty(localPart,field));
	}
	haxe_Log.trace("new default prof " + Std.string(profile),{ fileName : "src/kro13/kk/data/DataUtils.hx", lineNumber : 54, className : "kro13.kk.data.DataUtils", methodName : "getDefaultProfile"});
	var defProfile = profile;
	var _g = 0;
	var _g1 = Reflect.fields(defProfile);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		Reflect.setProperty(kro13_kk_data_Storage.profileSO.data,field,Reflect.getProperty(defProfile,field));
	}
};
kro13_kk_data_Storage.prototype = {
	__class__: kro13_kk_data_Storage
};
var kro13_kk_data_TutorDataProvider = function() {
	this.jumpsCount = 0;
	this.hitsCount = 0;
	this.progress = 0;
	kro13_kk_data_LocalDataProvider.call(this);
};
$hxClasses["kro13.kk.data.TutorDataProvider"] = kro13_kk_data_TutorDataProvider;
kro13_kk_data_TutorDataProvider.__name__ = "kro13.kk.data.TutorDataProvider";
kro13_kk_data_TutorDataProvider.__super__ = kro13_kk_data_LocalDataProvider;
kro13_kk_data_TutorDataProvider.prototype = $extend(kro13_kk_data_LocalDataProvider.prototype,{
	reset: function() {
		this.progress = 0;
		this.hitsCount = 0;
		this.jumpsCount = 0;
	}
	,load: function() {
		var profile = { remoteId : "", userName : "Kanyon Karver", totalScore : 0, tags : []};
		var localPart = { version : 0, canyonChain : [], misc : { soundTypes : [0,1], sensitivity : 1.0, rightHanded : true, locale : kro13_kk_Constants.LOCALE.toUpperCase()}, restarts : 1, scoreData : { currentScore : 0, speedBonus : 0, avalancheBonus : 0, speedRatio : 0, bonusCounter : 0, totalRotation : 0, totalTracks : 0, totalSatori : 0, restartUpdatesCount : 0, adsCounter : 0, totalDistance : 0, bestCombo : 0, totalJumps : 0, totalSnowmen : 0, bestJumpLen : 0, bestRotation : 0, avalanchesEscaped : 0, complexity : 0}, restsrtHP : 0, deactivated : false};
		var _g = 0;
		var _g1 = Reflect.fields(localPart);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			Reflect.setProperty(profile,field,Reflect.getProperty(localPart,field));
		}
		haxe_Log.trace("new default prof " + Std.string(profile),{ fileName : "src/kro13/kk/data/DataUtils.hx", lineNumber : 54, className : "kro13.kk.data.DataUtils", methodName : "getDefaultProfile"});
		this.profile = profile;
		this.patcher.patch(this.profile);
		this.scoreData = this.profile.scoreData;
		this.profile.restarts = 1;
	}
	,updateRestarts: function(val,reset) {
		if(reset == null) {
			reset = false;
		}
		this.profile.restarts = 1;
	}
	,getFogIntensity: function() {
		return 4;
	}
	,getSnowIntensity: function() {
		return 1;
	}
	,getTreeProb: function() {
		return 0.1;
	}
	,getStoneProb: function() {
		return 0.1;
	}
	,getTrackLength: function() {
		return 5;
	}
	,getMinBlockSize: function() {
		return 10;
	}
	,getMaxBlockSize: function() {
		return 10;
	}
	,getBonusUpdateInterval: function() {
		if(this.progress >= 1) {
			return 2;
		}
		return 9999;
	}
	,getMinBlockShift: function() {
		if(this.progress >= 1) {
			return 9;
		}
		return 6;
	}
	,checkChaseChance: function() {
		return false;
	}
	,checkAvalancheChance: function() {
		return this.progress >= 4;
	}
	,getAvalancheTotalTime: function() {
		return 6;
	}
	,getMaxNatureObjectsCount: function() {
		if(this.progress >= 2) {
			return 0;
		}
		if(this.progress >= 1) {
			return 1;
		}
		return 2;
	}
	,getMaxSnowmenCount: function() {
		if(this.progress >= 3) {
			return 1;
		}
		return 0;
	}
	,getMinTrampsCount: function() {
		if(this.progress == 2) {
			return 2;
		}
		return 0;
	}
	,getMaxTrampsCount: function() {
		if(this.progress == 2) {
			return 2;
		}
		return 0;
	}
	,getFinishText: function() {
		var txt = kro13_kk_utils_L.get_instance().FINISH_TUTOR;
		return txt;
	}
	,calcGravity: function() {
		return 400;
	}
	,__class__: kro13_kk_data_TutorDataProvider
});
var kro13_kk_data_patches_IPatch = function() { };
$hxClasses["kro13.kk.data.patches.IPatch"] = kro13_kk_data_patches_IPatch;
kro13_kk_data_patches_IPatch.__name__ = "kro13.kk.data.patches.IPatch";
kro13_kk_data_patches_IPatch.__isInterface__ = true;
kro13_kk_data_patches_IPatch.prototype = {
	__class__: kro13_kk_data_patches_IPatch
};
var kro13_kk_data_patches_Patch1 = function() {
	this.version = 1;
};
$hxClasses["kro13.kk.data.patches.Patch1"] = kro13_kk_data_patches_Patch1;
kro13_kk_data_patches_Patch1.__name__ = "kro13.kk.data.patches.Patch1";
kro13_kk_data_patches_Patch1.__interfaces__ = [kro13_kk_data_patches_IPatch];
kro13_kk_data_patches_Patch1.prototype = {
	apply: function(profile) {
		profile.tags = [];
		if(profile.misc.isHelpSeen) {
			profile.tags.push(0);
		}
		haxe_Log.trace("--------------------> tags " + Std.string(profile.tags),{ fileName : "src/kro13/kk/data/patches/Patch1.hx", lineNumber : 19, className : "kro13.kk.data.patches.Patch1", methodName : "apply"});
		Reflect.deleteField(profile.misc,"isHelpSeen");
		profile.version = this.version;
	}
	,__class__: kro13_kk_data_patches_Patch1
};
var kro13_kk_data_patches_Patch2 = function() {
	this.version = 2;
};
$hxClasses["kro13.kk.data.patches.Patch2"] = kro13_kk_data_patches_Patch2;
kro13_kk_data_patches_Patch2.__name__ = "kro13.kk.data.patches.Patch2";
kro13_kk_data_patches_Patch2.__interfaces__ = [kro13_kk_data_patches_IPatch];
kro13_kk_data_patches_Patch2.prototype = {
	apply: function(profile) {
		profile.restartHP = 90;
		profile.version = this.version;
	}
	,__class__: kro13_kk_data_patches_Patch2
};
var kro13_kk_data_patches_Patch3 = function() {
	this.version = 3;
};
$hxClasses["kro13.kk.data.patches.Patch3"] = kro13_kk_data_patches_Patch3;
kro13_kk_data_patches_Patch3.__name__ = "kro13.kk.data.patches.Patch3";
kro13_kk_data_patches_Patch3.__interfaces__ = [kro13_kk_data_patches_IPatch];
kro13_kk_data_patches_Patch3.prototype = {
	apply: function(profile) {
		profile.scoreData.adsCounter = 0;
		profile.version = this.version;
	}
	,__class__: kro13_kk_data_patches_Patch3
};
var kro13_kk_data_patches_Patch4 = function() {
	this.version = 4;
};
$hxClasses["kro13.kk.data.patches.Patch4"] = kro13_kk_data_patches_Patch4;
kro13_kk_data_patches_Patch4.__name__ = "kro13.kk.data.patches.Patch4";
kro13_kk_data_patches_Patch4.__interfaces__ = [kro13_kk_data_patches_IPatch];
kro13_kk_data_patches_Patch4.prototype = {
	apply: function(profile) {
		profile.scoreData.avalancheBonus = 0;
		profile.version = this.version;
	}
	,__class__: kro13_kk_data_patches_Patch4
};
var kro13_kk_data_patches_Patch5 = function() {
	this.version = 5;
};
$hxClasses["kro13.kk.data.patches.Patch5"] = kro13_kk_data_patches_Patch5;
kro13_kk_data_patches_Patch5.__name__ = "kro13.kk.data.patches.Patch5";
kro13_kk_data_patches_Patch5.__interfaces__ = [kro13_kk_data_patches_IPatch];
kro13_kk_data_patches_Patch5.prototype = {
	apply: function(profile) {
		profile.misc.rightHanded = true;
		profile.version = this.version;
	}
	,__class__: kro13_kk_data_patches_Patch5
};
var kro13_kk_data_patches_Patch6 = function() {
	this.version = 6;
};
$hxClasses["kro13.kk.data.patches.Patch6"] = kro13_kk_data_patches_Patch6;
kro13_kk_data_patches_Patch6.__name__ = "kro13.kk.data.patches.Patch6";
kro13_kk_data_patches_Patch6.__interfaces__ = [kro13_kk_data_patches_IPatch];
kro13_kk_data_patches_Patch6.prototype = {
	apply: function(profile) {
		profile.misc.soundTypes = [0,1];
		profile.version = this.version;
	}
	,__class__: kro13_kk_data_patches_Patch6
};
var kro13_kk_data_patches_Patch7 = function() {
	this.version = 7;
};
$hxClasses["kro13.kk.data.patches.Patch7"] = kro13_kk_data_patches_Patch7;
kro13_kk_data_patches_Patch7.__name__ = "kro13.kk.data.patches.Patch7";
kro13_kk_data_patches_Patch7.__interfaces__ = [kro13_kk_data_patches_IPatch];
kro13_kk_data_patches_Patch7.prototype = {
	apply: function(profile) {
		profile.misc.locale = kro13_kk_Constants.LOCALE.toUpperCase();
		profile.version = this.version;
	}
	,__class__: kro13_kk_data_patches_Patch7
};
var kro13_kk_gameObjects_Renderable = function() {
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "renderable";
	this.addComponent(new kro13_kk_components_Renderer());
	var tmp;
	if(this.componentsMap == null) {
		tmp = null;
	} else {
		var component = this.componentsMap.h[1];
		tmp = component;
	}
	this.renderer = tmp;
};
$hxClasses["kro13.kk.gameObjects.Renderable"] = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_Renderable.__name__ = "kro13.kk.gameObjects.Renderable";
kro13_kk_gameObjects_Renderable.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_gameObjects_Renderable.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	__class__: kro13_kk_gameObjects_Renderable
});
var kro13_kk_gameObjects_Avalanche = function() {
	kro13_kk_gameObjects_Renderable.call(this);
	this.name = "avalanche";
};
$hxClasses["kro13.kk.gameObjects.Avalanche"] = kro13_kk_gameObjects_Avalanche;
kro13_kk_gameObjects_Avalanche.__name__ = "kro13.kk.gameObjects.Avalanche";
kro13_kk_gameObjects_Avalanche.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_Avalanche.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = haxepunk_HXP.width;
		var y = haxepunk_HXP.height;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.set_size(this1);
		var tmp = this.get_size();
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.RECTANGLE({ size : tmp, color : 16777215});
		var _this = this.renderer;
		_this.isLayerValid = false;
		_this._layer = 1;
		this.frontFx = new kro13_kk_gameObjects_fx_AvalancheFront();
		this.frontFx.get_position().x = this.get_size().x * 0.5;
		this.frontFx.build();
		this.frontFx.get_position().y = this.get_size().y + 20;
		this.transform.addChild(this.frontFx.transform);
	}
	,setFxEnabled: function(val) {
		this.frontFx.enabled = val;
	}
	,__class__: kro13_kk_gameObjects_Avalanche
});
var kro13_kk_gameObjects_Back = function() {
	kro13_kk_gameObjects_Renderable.call(this);
	this.name = "Back";
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 15;
};
$hxClasses["kro13.kk.gameObjects.Back"] = kro13_kk_gameObjects_Back;
kro13_kk_gameObjects_Back.__name__ = "kro13.kk.gameObjects.Back";
kro13_kk_gameObjects_Back.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_Back.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = haxepunk_HXP.width;
		var y = haxepunk_HXP.height;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.set_size(this1);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.set_position(this1);
		var materialConfig = { size : this.get_size(), source : "images/back.png"};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(materialConfig);
	}
	,__class__: kro13_kk_gameObjects_Back
});
var kro13_kk_gameObjects_Canyon = function(map,dataProvider) {
	kro13_kk_gameObjects_Transformable.call(this);
	this.map = map;
	this.name = "Canyon " + this.id;
	this.dataProvider = dataProvider;
};
$hxClasses["kro13.kk.gameObjects.Canyon"] = kro13_kk_gameObjects_Canyon;
kro13_kk_gameObjects_Canyon.__name__ = "kro13.kk.gameObjects.Canyon";
kro13_kk_gameObjects_Canyon.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_gameObjects_Canyon.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		var groundMap = this.map.ground;
		var leftWMap = this.map.leftWall;
		var leftWWMap = this.map.leftWallWall;
		var rightWMap = this.map.rightWall;
		var rightWWMap = this.map.rightWallWall;
		this.ground = this.buildGroundFromMap(groundMap,10066380,0);
		this.ground.name = "Middle Ground";
		this.transform.addChild(this.ground.transform);
		this.get_size().y = this.ground.get_size().y;
		this.ground.addFog();
		var leftW = this.buildGroundFromMap(leftWMap,13421798,1);
		leftW.name = "Left Wall";
		leftW.addBodies();
		this.transform.addChild(leftW.transform);
		var leftWW = this.buildGroundFromMap(leftWWMap,16250879,2);
		leftWW.name = "Left Wall Wall";
		leftWW.addBodies();
		this.transform.addChild(leftWW.transform);
		var rightW = this.buildGroundFromMap(rightWMap,13421798,1);
		rightW.name = "Right Wall";
		rightW.addBodies();
		this.transform.addChild(rightW.transform);
		var rightWW = this.buildGroundFromMap(rightWWMap,16250879,2);
		rightWW.name = "Right Wall Wall";
		rightWW.addBodies();
		this.transform.addChild(rightWW.transform);
	}
	,buildGroundFromMap: function(groundMap,color,depth) {
		var newGround = new kro13_kk_gameObjects_Ground(this.dataProvider);
		newGround.buildFromMap(groundMap,color,depth);
		return newGround;
	}
	,getEnterPoint: function() {
		return this.ground.getEnterPoint();
	}
	,getExitPoint: function() {
		return this.ground.getExitPoint();
	}
	,getRestartPoint: function(pos) {
		return this.ground.getRestartPoint(pos);
	}
	,destroy: function() {
		var component = this.componentsMap.keys();
		while(component.hasNext()) {
			var component1 = component.next();
			this.componentsMap.h[component1].destroy();
		}
		this.componentsMap = null;
	}
	,__class__: kro13_kk_gameObjects_Canyon
});
var kro13_kk_gameObjects_CanyonChain = function(dataProvider,eventDispatcher) {
	this.counter = 0;
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "Chain";
	this.addComponent(new kro13_kk_components_Updater(this));
	this.childAdded = new haxepunk_Signal1();
	this.childRemoved = new haxepunk_Signal1();
	this.dataProvider = dataProvider;
	this.eventDispatcher = eventDispatcher;
};
$hxClasses["kro13.kk.gameObjects.CanyonChain"] = kro13_kk_gameObjects_CanyonChain;
kro13_kk_gameObjects_CanyonChain.__name__ = "kro13.kk.gameObjects.CanyonChain";
kro13_kk_gameObjects_CanyonChain.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_gameObjects_CanyonChain.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_gameObjects_CanyonChain.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		if(this.dataProvider.getProfile().canyonChain.length == 1) {
			var tmp = kro13_kk_gameObjects_GameObjectsFactory.get_instance();
			var canyon = this.dataProvider.getProfile().canyonChain[0];
			var c = new kro13_kk_maps_CanyonMap();
			var ground = canyon.ground;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.ground = g;
			var ground = canyon.leftWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.leftWall = g;
			var ground = canyon.leftWallWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.leftWallWall = g;
			var ground = canyon.rightWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.rightWall = g;
			var ground = canyon.rightWallWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.rightWallWall = g;
			this.curr = tmp.buildCanyon(c,this.dataProvider);
		} else if(this.dataProvider.getProfile().canyonChain.length == 2) {
			var tmp = kro13_kk_gameObjects_GameObjectsFactory.get_instance();
			var canyon = this.dataProvider.getProfile().canyonChain[0];
			var c = new kro13_kk_maps_CanyonMap();
			var ground = canyon.ground;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.ground = g;
			var ground = canyon.leftWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.leftWall = g;
			var ground = canyon.leftWallWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.leftWallWall = g;
			var ground = canyon.rightWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.rightWall = g;
			var ground = canyon.rightWallWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.rightWallWall = g;
			this.prev = tmp.buildCanyon(c,this.dataProvider);
			var tmp = kro13_kk_gameObjects_GameObjectsFactory.get_instance();
			var canyon = this.dataProvider.getProfile().canyonChain[1];
			var c = new kro13_kk_maps_CanyonMap();
			var ground = canyon.ground;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.ground = g;
			var ground = canyon.leftWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.leftWall = g;
			var ground = canyon.leftWallWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.leftWallWall = g;
			var ground = canyon.rightWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.rightWall = g;
			var ground = canyon.rightWallWall;
			var g = new kro13_kk_maps_GroundMap();
			var _g = 0;
			var _g1 = ground.blocks;
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				var b = new kro13_kk_maps_GroundBlockMap();
				b.size = block.size;
				b.position = block.position;
				var _g2 = 0;
				var _g3 = block.borders;
				while(_g2 < _g3.length) {
					var border = _g3[_g2];
					++_g2;
					b.addBorder(border);
				}
				if(block.landscapeDecore != null) {
					var _g4 = 0;
					var _g5 = block.landscapeDecore;
					while(_g4 < _g5.length) {
						var obj = _g5[_g4];
						++_g4;
						b.landscapeDecore.push(obj);
					}
				}
				if(block.natureObjects != null) {
					var _g6 = 0;
					var _g7 = block.natureObjects;
					while(_g6 < _g7.length) {
						var obj1 = _g7[_g6];
						++_g6;
						b.natureObjects.push(obj1);
					}
				}
				if(block.snowmen != null) {
					var _g8 = 0;
					var _g9 = block.snowmen;
					while(_g8 < _g9.length) {
						var snowman = _g9[_g8];
						++_g8;
						b.snowmen.push(snowman);
					}
				}
				var _g10 = 0;
				var _g11 = block.spots;
				while(_g10 < _g11.length) {
					var spot = _g11[_g10];
					++_g10;
					b.spots.push(spot);
				}
				var _g12 = 0;
				var _g13 = block.tramps;
				while(_g12 < _g13.length) {
					var tramp = _g13[_g12];
					++_g12;
					b.trampolines.push(tramp);
				}
				g.addBlock(b);
			}
			c.rightWallWall = g;
			this.curr = tmp.buildCanyon(c,this.dataProvider);
		} else {
			this.curr = this.generateNextCanyon();
		}
		if(this.prev != null) {
			this.prev.transform.get_position().y = -this.prev.transform.get_size().y;
			this.transform.addChild(this.prev.transform);
		}
		this.transform.addChild(this.curr.transform);
	}
	,update: function(dt) {
		if(this.timeToGenerateNext() && this.next == null) {
			this.next = this.generateNextCanyon();
			var tmp = this.curr.get_position().y;
			this.next.transform.get_position().y = tmp + this.curr.getExitPoint().y;
			this.transform.addChild(this.next.transform);
			var a = this.next;
			var _g = 0;
			var _g1 = this.childAdded.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback(a);
			}
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.CANYON_GENERATE_NEXT);
		}
		if(this.timeToSwitch()) {
			if(this.prev != null) {
				this.transform.removeChild(this.prev.transform);
				var a = this.prev;
				var _g = 0;
				var _g1 = this.childRemoved.callbacks;
				while(_g < _g1.length) {
					var callback = _g1[_g];
					++_g;
					callback(a);
				}
			}
			this.prev = this.curr;
			this.curr = this.next;
			this.next = null;
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.CANYON_SWITCH);
		}
		var currB = this.getCurrentBlock();
		if(currB == null) {
			haxe_Log.trace("out of track!",{ fileName : "src/kro13/kk/gameObjects/CanyonChain.hx", lineNumber : 88, className : "kro13.kk.gameObjects.CanyonChain", methodName : "update"});
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.RESTART);
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.MAIN_MENU);
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
			return;
		}
	}
	,getCurrentBlock: function() {
		var _g = 0;
		var _g1 = this.curr.ground.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var _this = b.transform;
			if(_this.get_position() == null) {
				haxe_Log.trace(_this.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			_this.absPosition.x = _this.get_position().x;
			_this.absPosition.y = _this.get_position().y;
			var parent = _this.parent;
			while(parent != null) {
				_this.absPosition.x += parent.get_position().x;
				_this.absPosition.y += parent.get_position().y;
				parent = parent.parent;
			}
			var bPos = _this.absPosition;
			if(bPos.y <= this.player.transform.get_position().y && bPos.y + b.transform.get_size().y >= this.player.transform.get_position().y && bPos.x <= this.player.transform.get_position().x && bPos.x + b.transform.get_size().x >= this.player.transform.get_position().x) {
				return b;
			}
		}
		return null;
	}
	,setPlayer: function(player) {
		this.player = player;
		var this1 = this.curr.get_position();
		var other = this.curr.getEnterPoint();
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x += other.x;
		this2.y += other.y;
		player.set_position(this2);
	}
	,getRestartPoint: function() {
		var p = this.curr.getRestartPoint(this.player.get_position());
		if(p == null) {
			p = this.curr.getEnterPoint();
		}
		var this1 = this.curr.get_position();
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x += p.x;
		this2.y += p.y;
		return this2;
	}
	,timeToSwitch: function() {
		return this.player.transform.get_position().y > this.curr.get_position().y + this.curr.transform.get_size().y;
	}
	,timeToGenerateNext: function() {
		return this.player.transform.get_position().y > this.curr.get_position().y + this.curr.transform.get_size().y * 0.3;
	}
	,generateNextCanyon: function() {
		var x = this.dataProvider.getLocal().getMinBlockSize();
		var y = this.dataProvider.getLocal().getMinBlockSize();
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var minSize_x = x;
		var minSize_y = y;
		var x = this.dataProvider.getLocal().getMaxBlockSize();
		var y = this.dataProvider.getLocal().getMaxBlockSize();
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var maxSize_x = x;
		var maxSize_y = y;
		var map = null;
		map = kro13_kk_maps_CanyonMap.generateRandom(this.dataProvider.getLocal().getTrackLength(),minSize_x,minSize_y,maxSize_x,maxSize_y,this.dataProvider.getLocal().getMinBlockShift(),this.dataProvider.getLocal().getMaxNatureObjectsCount(),this.dataProvider.getLocal().getMaxSnowmenCount(),this.dataProvider.getLocal().getMinTrampsCount(),this.dataProvider.getLocal().getMaxTrampsCount(),this.curr == null,this.dataProvider.getLocal().isFixedShift());
		if(this.curr != null) {
			map.linkTo(this.curr.map);
		}
		if(this.dataProvider.getProfile().canyonChain.length >= 2) {
			this.dataProvider.getProfile().canyonChain.shift();
		}
		var tmp = this.dataProvider.getProfile().canyonChain;
		var blocks = [];
		var _g_current = 0;
		var _g_array = map.ground.blocks;
		while(_g_current < _g_array.length) {
			var b = _g_array[_g_current++];
			blocks.push({ size : b.size, position : b.position, borders : b.getBorders(), natureObjects : b.getNatureObjects(), tramps : b.getTrampolines(), spots : b.getSposts(), snowmen : b.getSnowmen(), landscapeDecore : b.getLandscapeDecore()});
		}
		var tmp1 = { blocks : blocks};
		var blocks = [];
		var _g_current = 0;
		var _g_array = map.leftWall.blocks;
		while(_g_current < _g_array.length) {
			var b = _g_array[_g_current++];
			blocks.push({ size : b.size, position : b.position, borders : b.getBorders(), natureObjects : b.getNatureObjects(), tramps : b.getTrampolines(), spots : b.getSposts(), snowmen : b.getSnowmen(), landscapeDecore : b.getLandscapeDecore()});
		}
		var tmp2 = { blocks : blocks};
		var blocks = [];
		var _g_current = 0;
		var _g_array = map.rightWall.blocks;
		while(_g_current < _g_array.length) {
			var b = _g_array[_g_current++];
			blocks.push({ size : b.size, position : b.position, borders : b.getBorders(), natureObjects : b.getNatureObjects(), tramps : b.getTrampolines(), spots : b.getSposts(), snowmen : b.getSnowmen(), landscapeDecore : b.getLandscapeDecore()});
		}
		var tmp3 = { blocks : blocks};
		var blocks = [];
		var _g_current = 0;
		var _g_array = map.leftWallWall.blocks;
		while(_g_current < _g_array.length) {
			var b = _g_array[_g_current++];
			blocks.push({ size : b.size, position : b.position, borders : b.getBorders(), natureObjects : b.getNatureObjects(), tramps : b.getTrampolines(), spots : b.getSposts(), snowmen : b.getSnowmen(), landscapeDecore : b.getLandscapeDecore()});
		}
		var tmp4 = { blocks : blocks};
		var blocks = [];
		var _g_current = 0;
		var _g_array = map.rightWallWall.blocks;
		while(_g_current < _g_array.length) {
			var b = _g_array[_g_current++];
			blocks.push({ size : b.size, position : b.position, borders : b.getBorders(), natureObjects : b.getNatureObjects(), tramps : b.getTrampolines(), spots : b.getSposts(), snowmen : b.getSnowmen(), landscapeDecore : b.getLandscapeDecore()});
		}
		tmp.push({ ground : tmp1, leftWall : tmp2, rightWall : tmp3, leftWallWall : tmp4, rightWallWall : { blocks : blocks}});
		return kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildCanyon(map,this.dataProvider);
	}
	,__class__: kro13_kk_gameObjects_CanyonChain
});
var kro13_kk_gameObjects_Cliff = function() {
	kro13_kk_gameObjects_Renderable.call(this);
	this.type = 2;
	this.name = "Cliff " + this.id;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 1;
};
$hxClasses["kro13.kk.gameObjects.Cliff"] = kro13_kk_gameObjects_Cliff;
kro13_kk_gameObjects_Cliff.__name__ = "kro13.kk.gameObjects.Cliff";
kro13_kk_gameObjects_Cliff.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_Cliff.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = 240;
		var y = 280;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.set_size(this1);
		var x = this.get_size().x;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var materialC = { size : this1, source : "images/cliff0.png"};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(materialC);
		var tmp = Math.random();
		this.transform.flip = tmp > 0.5;
		haxepunk_math_Vector2.setTo(this.transform.origin,120,this.get_size().y - 80);
	}
	,__class__: kro13_kk_gameObjects_Cliff
});
var kro13_kk_gameObjects_Fog = function() {
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "fog " + this.id;
	this.addComponent(new kro13_kk_components_Updater(this));
	this.moove = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(0,1,3),new kro13_kk_tween_FloatTween(1,0,3)]));
};
$hxClasses["kro13.kk.gameObjects.Fog"] = kro13_kk_gameObjects_Fog;
kro13_kk_gameObjects_Fog.__name__ = "kro13.kk.gameObjects.Fog";
kro13_kk_gameObjects_Fog.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_gameObjects_Fog.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_gameObjects_Fog.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		var x = haxepunk_HXP.width * 2;
		var y = haxepunk_HXP.height * 0.33;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.set_size(this1);
		this.fogEntity = new kro13_kk_gameObjects_Renderable();
		this.fogEntity.type = 10;
		this.fogEntity.set_size(this.get_size());
		haxepunk_math_Vector2.setTo(this.fogEntity.transform.origin,this.get_size().x * 0.5,haxepunk_HXP.height * 0.11);
		var _this = this.fogEntity.renderer;
		_this.isLayerValid = false;
		_this._layer = 1;
		var colorFluct = Math.random();
		var color = 268435455;
		if(colorFluct <= 0.1) {
			var t = 0.1;
			if(t == null) {
				t = 1;
			}
			if(t <= 0) {
				color = 16777215;
			} else if(t >= 1) {
				color = 16730531;
			} else {
				var a = 16777215 >>> 24 & 255;
				var r = 16777215 >>> 16 & 255;
				var g = 16777215 >>> 8 & 255;
				var b = 16777215 & 255;
				var dA = (16730531 >>> 24 & 255) - a;
				var dR = (16730531 >>> 16 & 255) - r;
				var dG = (16730531 >>> 8 & 255) - g;
				var dB = (16730531 & 255) - b;
				a += dA * t | 0;
				r += dR * t | 0;
				g += dG * t | 0;
				b += dB * t | 0;
				color = a << 24 | r << 16 | g << 8 | b;
			}
		} else if(colorFluct <= 0.4) {
			var t = 0.1;
			if(t == null) {
				t = 1;
			}
			if(t <= 0) {
				color = 16777215;
			} else if(t >= 1) {
				color = 6776735;
			} else {
				var a = 16777215 >>> 24 & 255;
				var r = 16777215 >>> 16 & 255;
				var g = 16777215 >>> 8 & 255;
				var b = 16777215 & 255;
				var dA = (6776735 >>> 24 & 255) - a;
				var dR = (6776735 >>> 16 & 255) - r;
				var dG = (6776735 >>> 8 & 255) - g;
				var dB = (6776735 & 255) - b;
				a += dA * t | 0;
				r += dR * t | 0;
				g += dG * t | 0;
				b += dB * t | 0;
				color = a << 24 | r << 16 | g << 8 | b;
			}
		}
		var tmp = this.get_size();
		this.fogEntity.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE({ size : tmp, source : "images/fog.png", color : color});
		this.transform.addChild(this.fogEntity.transform);
		this.startTimeFluct = Math.random() * 3;
	}
	,update: function(dt) {
		if(this.startTimeFluct < 0) {
			this.moove.update(dt);
			haxepunk_math_Vector2.setTo(this.fogEntity.get_position(),0,this.moove.getValue() * 50);
		} else {
			this.startTimeFluct -= dt;
		}
	}
	,__class__: kro13_kk_gameObjects_Fog
});
var kro13_kk_gameObjects_GameObjectsFactory = function() {
};
$hxClasses["kro13.kk.gameObjects.GameObjectsFactory"] = kro13_kk_gameObjects_GameObjectsFactory;
kro13_kk_gameObjects_GameObjectsFactory.__name__ = "kro13.kk.gameObjects.GameObjectsFactory";
kro13_kk_gameObjects_GameObjectsFactory.__properties__ = {get_instance:"get_instance"};
kro13_kk_gameObjects_GameObjectsFactory.get_instance = function() {
	if(kro13_kk_gameObjects_GameObjectsFactory.instance == null) {
		kro13_kk_gameObjects_GameObjectsFactory.instance = new kro13_kk_gameObjects_GameObjectsFactory();
	}
	return kro13_kk_gameObjects_GameObjectsFactory.instance;
};
kro13_kk_gameObjects_GameObjectsFactory.prototype = {
	buildCanyon: function(map,dataProvider) {
		var canyon = new kro13_kk_gameObjects_Canyon(map,dataProvider);
		canyon.build();
		return canyon;
	}
	,buildFog: function() {
		var fog = new kro13_kk_gameObjects_Fog();
		fog.build();
		return fog;
	}
	,buildCanyonChain: function(dataProvider,eventDispatcher) {
		var chain = new kro13_kk_gameObjects_CanyonChain(dataProvider,eventDispatcher);
		chain.build();
		return chain;
	}
	,buildPlayer: function(dataProvider) {
		var player = new kro13_kk_gameObjects_Player(dataProvider);
		player.build();
		return player;
	}
	,buildNatureObject: function(includeBig,dataProvider) {
		var obj = new kro13_kk_gameObjects_NatureObject(includeBig,dataProvider);
		obj.build();
		return obj;
	}
	,buildShadow: function(width) {
		var shadow = new kro13_kk_gameObjects_Shadow(width);
		shadow.build();
		return shadow;
	}
	,buildtTrampoline: function() {
		var tramp = new kro13_kk_gameObjects_Trampoline();
		tramp.build();
		return tramp;
	}
	,buildSnowman: function() {
		var snowman = new kro13_kk_gameObjects_Snowman();
		snowman.build();
		return snowman;
	}
	,buildAvalanche: function() {
		var avalanche = new kro13_kk_gameObjects_Avalanche();
		avalanche.build();
		return avalanche;
	}
	,buildCircularBoom: function(radius,color) {
		var boom = new kro13_kk_gameObjects_fx_CircularBoom(radius,color);
		boom.build();
		return boom;
	}
	,buildSnowBlow: function(conf) {
		var blowFx = new kro13_kk_gameObjects_fx_SnowBlow(conf);
		blowFx.build();
		return blowFx;
	}
	,__class__: kro13_kk_gameObjects_GameObjectsFactory
};
var kro13_kk_gameObjects_Ground = function(dataProvider) {
	this.depth = 0;
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "ground";
	this.blocks = [];
	this.dataProvider = dataProvider;
};
$hxClasses["kro13.kk.gameObjects.Ground"] = kro13_kk_gameObjects_Ground;
kro13_kk_gameObjects_Ground.__name__ = "kro13.kk.gameObjects.Ground";
kro13_kk_gameObjects_Ground.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_gameObjects_Ground.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	buildFromMap: function(groundMap,color,depth) {
		this.map = groundMap;
		this.depth = depth;
		this.get_size().y = 0;
		var _g_current = 0;
		var _g_array = groundMap.blocks;
		while(_g_current < _g_array.length) {
			var blockMap = _g_array[_g_current++];
			var groundBlock = this.buildBlockFromMap(blockMap,color);
			this.addBlock(groundBlock);
		}
		var mapEnterPoint = groundMap.getEnterPoint();
		var mapExitPoint = groundMap.getExitPoint();
		var x = mapEnterPoint.x;
		var y = mapEnterPoint.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.enterPoint = this2;
		var x = mapExitPoint.x;
		var y = mapExitPoint.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.exitPoint = this2;
	}
	,getEnterPoint: function() {
		return this.enterPoint;
	}
	,getExitPoint: function() {
		return this.exitPoint;
	}
	,addBodies: function() {
		var _g = 0;
		var _g1 = this.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var tmp = b.get_size();
			var x = 0;
			var y = 20.;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			b.addComponent(new kro13_kk_components_Body(tmp,this1));
		}
	}
	,getRestartPoint: function(pos) {
		var _g = 0;
		var _g1 = this.blocks.length;
		while(_g < _g1) {
			var i = _g++;
			var b = this.blocks[this.blocks.length - 1 - i];
			if(b.transform.get_position().y + b.transform.get_size().y < pos.y && b.get_size().y >= 200) {
				var x = b.transform.get_position().x + b.transform.get_size().x * 0.5;
				var y = b.transform.get_position().y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var this1 = { x : x, y : y};
				return this1;
			}
		}
		return null;
	}
	,addFog: function() {
		var _g = 0;
		var _g1 = this.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.addFog();
		}
	}
	,addBlock: function(block) {
		this.blocks.push(block);
		block.depth = this.depth;
		this.transform.addChild(block.transform);
		this.get_size().y += block.get_size().y;
	}
	,buildBlockFromMap: function(blockMap,color) {
		var newBlock = new kro13_kk_gameObjects_GroundBlock(this.dataProvider);
		newBlock.depth = this.depth;
		newBlock.buildFromMap(blockMap,color);
		return newBlock;
	}
	,__class__: kro13_kk_gameObjects_Ground
});
var kro13_kk_gameObjects_GroundBlock = function(dataProvider) {
	this.depth = 0;
	kro13_kk_gameObjects_Renderable.call(this);
	this.type = 4;
	this.name = "Ground block " + this.id;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 12;
	this.dataProvider = dataProvider;
};
$hxClasses["kro13.kk.gameObjects.GroundBlock"] = kro13_kk_gameObjects_GroundBlock;
kro13_kk_gameObjects_GroundBlock.__name__ = "kro13.kk.gameObjects.GroundBlock";
kro13_kk_gameObjects_GroundBlock.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_GroundBlock.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	buildFromMap: function(blockMap,color) {
		this.map = blockMap;
		var x = blockMap.position.x;
		var y = blockMap.position.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.set_position(this2);
		var x = blockMap.size.x;
		var y = blockMap.size.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.set_size(this2);
		if(blockMap.getLandscapeDecore().length > 0) {
			var c = blockMap.getLandscapeDecore()[0];
			var cliff = new kro13_kk_gameObjects_Cliff();
			cliff.build();
			this.transform.addChild(cliff.transform);
			cliff.setEvenPosition(c.x * 40,c.y * 40);
		}
		var _g = 0;
		var _g1 = blockMap.getNatureObjects();
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var obj = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildNatureObject(this.depth != 0,this.dataProvider);
			obj.setEvenPosition((p.x + 0.5) * 40,(p.y + 0.5) * 40);
			this.transform.addChild(obj.transform);
		}
		var _g = 0;
		var _g1 = blockMap.getSnowmen();
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var snowman = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildSnowman();
			snowman.setEvenPosition(s.x * 40,s.y * 40);
			this.transform.addChild(snowman.transform);
		}
		var _g = 0;
		var _g1 = blockMap.getTrampolines();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			var tramp = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildtTrampoline();
			tramp.setEvenPosition(t.x * 40,t.y * 40);
			this.transform.addChild(tramp.transform);
		}
		var materialConfig = { size : this.get_size(), color : color, borderColor : 7566220, spotColor : 6776735, borders : blockMap.getBorders(), spots : blockMap.getSposts(), shadows : blockMap.getNatureObjects()};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.GROUND_BLOCK(materialConfig);
	}
	,addShadows: function() {
		var _g = 0;
		var _g1 = this.map.getNatureObjects();
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var shadow = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildShadow(this.map.size.x);
			shadow.setEvenPosition(0,p.y * 40);
			this.transform.addChild(shadow.transform);
		}
	}
	,addFog: function() {
		var _g = 0;
		var _g1 = Math.floor(this.get_size().y / (haxepunk_HXP.height * 0.05));
		while(_g < _g1) {
			var i = _g++;
			var fog = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildFog();
			fog.setEvenPosition(this.get_size().x * 0.5,haxepunk_HXP.height * 0.05 * i);
			this.transform.addChild(fog.transform);
		}
	}
	,__class__: kro13_kk_gameObjects_GroundBlock
});
var kro13_kk_gameObjects_Hare = function() {
	kro13_kk_gameObjects_Transformable.call(this);
	this.type = 12;
	this.name = "Hare";
	this.animPlayer = new kro13_kk_components_AnimPlayer();
	this.addComponent(this.animPlayer);
	var this1 = { x : 0, y : 0};
	this.body = new kro13_kk_components_Body(this1);
	this.addComponent(new kro13_kk_components_TransformBinder(this));
};
$hxClasses["kro13.kk.gameObjects.Hare"] = kro13_kk_gameObjects_Hare;
kro13_kk_gameObjects_Hare.__name__ = "kro13.kk.gameObjects.Hare";
kro13_kk_gameObjects_Hare.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_gameObjects_Hare.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		var x = 40;
		var y = 80;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.set_size(this1);
		var this1 = this.get_size();
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 0.5;
		this2.y *= 0.5;
		this.transform.origin = this2;
		var x = 40;
		var y = 40;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 0.9;
		this2.y *= 0.9;
		this.body.size = this2;
		var this1 = this.body.size;
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= -0.5;
		this2.y *= -0.5;
		this.body.position = this2;
		this.hareSit = new kro13_kk_gameObjects_Renderable();
		this.hareSit.name = "hare sit";
		this.hareSit.set_size(this.get_size());
		var x = this.transform.origin.x;
		var y = this.transform.origin.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.hareSit.transform.origin = this1;
		var sitMaterialC = { source : "images/hare_sit.png", size : this.hareSit.get_size()};
		this.hareSit.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(sitMaterialC);
		this.transform.addChild(this.hareSit.transform);
		var _this = this.hareSit.renderer;
		_this.isLayerValid = false;
		_this._layer = 1;
		this.hareSit.type = 12;
		this.hareSit.addComponent(this.body);
		this.hareJump = new kro13_kk_gameObjects_Renderable();
		this.hareSit.name = "hare jump";
		this.hareJump.set_size(this.get_size());
		this.hareJump.transform.origin = this.transform.origin;
		var jumpMaterialC = { source : "images/hare_jump.png", size : this.hareJump.get_size()};
		this.hareJump.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(jumpMaterialC);
		this.transform.addChild(this.hareJump.transform);
		var _this = this.hareJump.renderer;
		_this.isLayerValid = false;
		_this._layer = 1;
		this.hareSit.type = 12;
		this.transform.onRotationChanged.callbacks.push($bind(this,this.rotate));
		this.runAnim = new kro13_kk_gameObjects_hare_anim_Run(this);
		this.sitAnim = new kro13_kk_gameObjects_hare_anim_Sit(this);
	}
	,isRunning: function() {
		return this.runAnim.isStarted;
	}
	,run: function() {
		this.animPlayer.play(this.runAnim);
	}
	,sit: function() {
		this.animPlayer.play(this.sitAnim);
	}
	,rotate: function(angle) {
		this.hareJump.transform.set_rotation(angle);
		this.hareSit.transform.set_rotation(angle);
	}
	,legsIn: function() {
		this.hareSit.transform.set_visible(true);
		this.hareJump.transform.set_visible(false);
	}
	,legsOut: function() {
		this.hareSit.transform.set_visible(false);
		this.hareJump.transform.set_visible(true);
	}
	,__class__: kro13_kk_gameObjects_Hare
});
var kro13_kk_gameObjects_NatureObject = function(includeBig,dataProvider,objType) {
	if(objType == null) {
		objType = 0;
	}
	kro13_kk_gameObjects_Renderable.call(this);
	this.includeBig = includeBig;
	this.objType = objType;
	this.dataProvider = dataProvider;
	if(this.objType == 0) {
		this.objType = this.pickRandomType();
	}
	this.type = 2;
	this.addComponent(new kro13_kk_components_Body(this.get_size()));
	var tmp;
	if(this.componentsMap == null) {
		tmp = null;
	} else {
		var component = this.componentsMap.h[3];
		tmp = component;
	}
	this.body = tmp;
	this.name = "Nature Object " + objType + " " + this.id;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 1;
};
$hxClasses["kro13.kk.gameObjects.NatureObject"] = kro13_kk_gameObjects_NatureObject;
kro13_kk_gameObjects_NatureObject.__name__ = "kro13.kk.gameObjects.NatureObject";
kro13_kk_gameObjects_NatureObject.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_NatureObject.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var config = this.getTypeConfig(this.objType);
		this.set_size(config.materialConfig.size);
		var x = this.get_size().x * 0.5;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.transform.origin = this1;
		this.body.size = config.bodySize;
		var x = -this.body.size.x * 0.5;
		var y = -this.body.size.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.body.position = this1;
		var tmp = Math.random();
		this.transform.flip = tmp > 0.5;
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(config.materialConfig);
	}
	,pickRandomType: function() {
		var prob = Math.random();
		var treeProb = this.dataProvider.getLocal().getTreeProb();
		var stoneProb = this.dataProvider.getLocal().getStoneProb();
		var bigProb = this.includeBig ? 0.2 : 0;
		if(prob <= treeProb) {
			return 3;
		}
		if(prob <= treeProb + stoneProb) {
			return 4;
		}
		if(prob <= treeProb + stoneProb + bigProb) {
			return 5;
		}
		if(prob <= treeProb + stoneProb + bigProb + (1 - treeProb - stoneProb - bigProb) * 0.4) {
			return 2;
		}
		return 1;
	}
	,getTypeConfig: function(objType) {
		var colorFluct = Math.random();
		var color = 268435455;
		if(colorFluct <= 0.1) {
			var t = 0.1;
			if(t == null) {
				t = 1;
			}
			if(t <= 0) {
				color = 16777215;
			} else if(t >= 1) {
				color = 16730531;
			} else {
				var a = 16777215 >>> 24 & 255;
				var r = 16777215 >>> 16 & 255;
				var g = 16777215 >>> 8 & 255;
				var b = 16777215 & 255;
				var dA = (16730531 >>> 24 & 255) - a;
				var dR = (16730531 >>> 16 & 255) - r;
				var dG = (16730531 >>> 8 & 255) - g;
				var dB = (16730531 & 255) - b;
				a += dA * t | 0;
				r += dR * t | 0;
				g += dG * t | 0;
				b += dB * t | 0;
				color = a << 24 | r << 16 | g << 8 | b;
			}
		} else if(colorFluct <= 0.4) {
			var t = 0.1;
			if(t == null) {
				t = 1;
			}
			if(t <= 0) {
				color = 16777215;
			} else if(t >= 1) {
				color = 6776735;
			} else {
				var a = 16777215 >>> 24 & 255;
				var r = 16777215 >>> 16 & 255;
				var g = 16777215 >>> 8 & 255;
				var b = 16777215 & 255;
				var dA = (6776735 >>> 24 & 255) - a;
				var dR = (6776735 >>> 16 & 255) - r;
				var dG = (6776735 >>> 8 & 255) - g;
				var dB = (6776735 & 255) - b;
				a += dA * t | 0;
				r += dR * t | 0;
				g += dG * t | 0;
				b += dB * t | 0;
				color = a << 24 | r << 16 | g << 8 | b;
			}
		}
		var materialC = null;
		var x = 0.2;
		var y = 0.2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		var bodySize = this2;
		switch(objType) {
		case 1:
			var x = 2;
			var y = 4.5;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this_x = x;
			var this_y = y;
			var x = this_x;
			var y = this_y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var this2 = this1;
			this2.x *= 40;
			this2.y *= 40;
			materialC = { size : this2, color : color, source : "images/pine3.png"};
			break;
		case 2:
			var x = 2;
			var y = 4.5;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this_x = x;
			var this_y = y;
			var x = this_x;
			var y = this_y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var this2 = this1;
			this2.x *= 40;
			this2.y *= 40;
			materialC = { size : this2, color : color, source : "images/pine4.png"};
			break;
		case 3:
			var scaleFluct = Math.random();
			if(scaleFluct <= 0.3) {
				scaleFluct = 0.8;
			} else if(scaleFluct <= 0.6) {
				scaleFluct = 1.2;
			} else {
				scaleFluct = 1;
			}
			scaleFluct += this.dataProvider.getLocal().getTreeProb();
			if(Math.random() >= 0.5) {
				var t = 0.2;
				if(t == null) {
					t = 1;
				}
				if(t <= 0) {
					color = 16777215;
				} else if(t >= 1) {
					color = 16730531;
				} else {
					var a = 16777215 >>> 24 & 255;
					var r = 16777215 >>> 16 & 255;
					var g = 16777215 >>> 8 & 255;
					var b = 16777215 & 255;
					var dA = (16730531 >>> 24 & 255) - a;
					var dR = (16730531 >>> 16 & 255) - r;
					var dG = (16730531 >>> 8 & 255) - g;
					var dB = (16730531 & 255) - b;
					a += dA * t | 0;
					r += dR * t | 0;
					g += dG * t | 0;
					b += dB * t | 0;
					color = a << 24 | r << 16 | g << 8 | b;
				}
			} else {
				var t = 0.3;
				if(t == null) {
					t = 1;
				}
				if(t <= 0) {
					color = 16777215;
				} else if(t >= 1) {
					color = 6776735;
				} else {
					var a = 16777215 >>> 24 & 255;
					var r = 16777215 >>> 16 & 255;
					var g = 16777215 >>> 8 & 255;
					var b = 16777215 & 255;
					var dA = (6776735 >>> 24 & 255) - a;
					var dR = (6776735 >>> 16 & 255) - r;
					var dG = (6776735 >>> 8 & 255) - g;
					var dB = (6776735 & 255) - b;
					a += dA * t | 0;
					r += dR * t | 0;
					g += dG * t | 0;
					b += dB * t | 0;
					color = a << 24 | r << 16 | g << 8 | b;
				}
			}
			var x = 3 * scaleFluct;
			var y = 4 * scaleFluct;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this_x = x;
			var this_y = y;
			var x = this_x;
			var y = this_y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var this2 = this1;
			this2.x *= 40;
			this2.y *= 40;
			materialC = { size : this2, color : color, source : "images/pine2.png"};
			break;
		case 4:
			var x = 1;
			var y = 0.25;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this_x = x;
			var this_y = y;
			var x = this_x;
			var y = this_y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var this2 = this1;
			this2.x *= 40;
			this2.y *= 40;
			bodySize = this2;
			var x = 1;
			var y = 0.75;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this_x = x;
			var this_y = y;
			var x = this_x;
			var y = this_y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var this2 = this1;
			this2.x *= 40;
			this2.y *= 40;
			materialC = { size : this2, color : color, source : "images/stone.png"};
			break;
		case 5:
			var x = 1;
			var y = 0.25;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this_x = x;
			var this_y = y;
			var x = this_x;
			var y = this_y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var this2 = this1;
			this2.x *= 40;
			this2.y *= 40;
			bodySize = this2;
			var x = 6;
			var y = 15;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this_x = x;
			var this_y = y;
			var x = this_x;
			var y = this_y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var this2 = this1;
			this2.x *= 40;
			this2.y *= 40;
			materialC = { size : this2, color : color, source : "images/pine_big.png"};
			break;
		default:
			throw haxe_Exception.thrown("no such nature object type!");
		}
		return { materialConfig : materialC, bodySize : bodySize};
	}
	,__class__: kro13_kk_gameObjects_NatureObject
});
var kro13_kk_gameObjects_PlayerBase = function() {
	kro13_kk_gameObjects_Renderable.call(this);
	this.name = "Player";
	this.type = 1;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 10;
	this.addComponent(new kro13_kk_components_GameEventHandler());
	this.addComponent(new kro13_kk_components_TextEmitter());
	this.addComponent(new kro13_kk_components_AnimPlayer());
	var tmp;
	if(this.componentsMap == null) {
		tmp = null;
	} else {
		var component = this.componentsMap.h[8];
		tmp = component;
	}
	this.animPlayer = tmp;
	this.guy = new kro13_kk_gameObjects_player_PlayerGuy();
	var tmp;
	if(this.componentsMap == null) {
		tmp = null;
	} else {
		var component = this.componentsMap.h[7];
		tmp = component;
	}
	this.scoreEmitter = tmp;
};
$hxClasses["kro13.kk.gameObjects.PlayerBase"] = kro13_kk_gameObjects_PlayerBase;
kro13_kk_gameObjects_PlayerBase.__name__ = "kro13.kk.gameObjects.PlayerBase";
kro13_kk_gameObjects_PlayerBase.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_PlayerBase.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = 1;
		var y = 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.set_size(this2);
		var x = this.get_size().x * 0.5;
		var y = this.get_size().y * 0.5;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.transform.origin = this1;
		this.guy.build();
		this.transform.addChild(this.guy.transform);
		var materialConfig = { size : this.get_size(), source : "images/board.png"};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(materialConfig);
		this.transform.onRotationChanged.callbacks.push($bind(this,this.updateRotation));
		this.jump = new kro13_kk_gameObjects_player_anim_PlayerJump(this);
		this.prepareJump = new kro13_kk_gameObjects_player_anim_PlayerPrepareJump(this);
	}
	,updateRotation: function(rotation) {
		var _this = this.guy;
		var rotationMod = rotation % 360;
		var rotationRad = rotationMod / 180;
		var cos = Math.cos(rotationRad * Math.PI);
		var sin = Math.sin(rotationRad * Math.PI);
		var shift = Math.round(14 * cos);
		haxepunk_math_Vector2.setTo(_this.legLeft.get_position(),Math.round(sin * 10),_this.legLeft.transform.get_position().y);
		haxepunk_math_Vector2.setTo(_this.legRight.get_position(),Math.round(-sin * 10),_this.legLeft.transform.get_position().y);
		if(rotationMod > 200 && rotationMod < 340 || rotationMod < -20 && rotationMod > -160) {
			var _this1 = _this.headFront.renderer;
			_this1.isLayerValid = false;
			_this1._layer = 9 + _this.layerShift;
			var _this1 = _this.headBack.renderer;
			_this1.isLayerValid = false;
			_this1._layer = 7 + _this.layerShift;
			var _this1 = _this.bodyFront.renderer;
			_this1.isLayerValid = false;
			_this1._layer = 9 + _this.layerShift;
			var _this1 = _this.bodyBack.renderer;
			_this1.isLayerValid = false;
			_this1._layer = 7 + _this.layerShift;
		} else {
			var _this1 = _this.headFront.renderer;
			_this1.isLayerValid = false;
			_this1._layer = 7 + _this.layerShift;
			var _this1 = _this.headBack.renderer;
			_this1.isLayerValid = false;
			_this1._layer = 9 + _this.layerShift;
			var _this1 = _this.bodyFront.renderer;
			_this1.isLayerValid = false;
			_this1._layer = 7 + _this.layerShift;
			var _this1 = _this.bodyBack.renderer;
			_this1.isLayerValid = false;
			_this1._layer = 9 + _this.layerShift;
			if(rotationMod <= 0 && rotationMod >= -20 || rotationMod >= 180 && rotationMod <= 200 || rotationMod >= 340 && rotationMod <= 360 || rotationMod <= -160 && rotationMod >= -180) {
				shift = cos >= 0 ? 14 : -14;
			}
		}
		_this.headFront.setEvenPosition(-shift,_this.headFront.transform.get_position().y);
		_this.headBack.setEvenPosition(shift,_this.headFront.transform.get_position().y);
		haxepunk_math_Vector2.setTo(_this.bodyFront.get_position(),-shift,_this.bodyFront.transform.get_position().y);
		haxepunk_math_Vector2.setTo(_this.bodyBack.get_position(),shift,_this.bodyBack.transform.get_position().y);
	}
	,__class__: kro13_kk_gameObjects_PlayerBase
});
var kro13_kk_gameObjects_Player = function(dataProvider) {
	this.isNew = false;
	kro13_kk_gameObjects_PlayerBase.call(this);
	this.dataProvider = dataProvider;
	this.addComponent(new kro13_kk_components_Body(this.get_size()));
	this.addComponent(new kro13_kk_components_PhysicalCoefficients(this));
	this.addComponent(new kro13_kk_components_TransformBinder(this));
	this.addComponent(new kro13_kk_components_PlayerPile(this));
	var tmp;
	if(this.componentsMap == null) {
		tmp = null;
	} else {
		var component = this.componentsMap.h[3];
		tmp = component;
	}
	this.body = tmp;
	var tmp;
	if(this.componentsMap == null) {
		tmp = null;
	} else {
		var component = this.componentsMap.h[6];
		tmp = component;
	}
	this.gameEvent = tmp;
	this.gameEvent.addHandler($bind(this,this.onEvent));
	this.plume = new kro13_kk_gameObjects_fx_SnowPlume(this,dataProvider);
	this.speedPlume = new kro13_kk_gameObjects_fx_SpeedPlume(this,dataProvider);
};
$hxClasses["kro13.kk.gameObjects.Player"] = kro13_kk_gameObjects_Player;
kro13_kk_gameObjects_Player.__name__ = "kro13.kk.gameObjects.Player";
kro13_kk_gameObjects_Player.__super__ = kro13_kk_gameObjects_PlayerBase;
kro13_kk_gameObjects_Player.prototype = $extend(kro13_kk_gameObjects_PlayerBase.prototype,{
	build: function() {
		kro13_kk_gameObjects_PlayerBase.prototype.build.call(this);
		var this1 = this.get_size();
		var x = 0.2;
		var y = 0.2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var other_x = x;
		var other_y = y;
		other_x *= 40;
		other_y *= 40;
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x -= other_x;
		this2.y -= other_y;
		this.body.size = this2;
		var this1 = this.body.size;
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= -0.5;
		this2.y *= -0.5;
		this.body.position = this2;
		this.validate();
		this.body.addForce(new kro13_kk_components_body_GroundResistance(this.transform,this.body));
		this.body.addForce(new kro13_kk_components_body_GroundFriction(this.body));
		this.body.addForce(new kro13_kk_components_body_RotationInertia(this.body));
		this.plume.build();
		this.transform.addChild(this.plume.transform);
		this.speedPlume.build();
		this.transform.addChild(this.speedPlume.transform);
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var _g = e.firstStart;
			this.isNew = true;
			var _this = this.renderer;
			_this.isLayerValid = false;
			_this._layer = 10;
			this.guy.shiftLayer(0);
			break;
		case 2:
			if(this.isNew) {
				this.jump.setTime(0.2);
				this.animPlayer.play(this.jump);
				this.isNew = false;
			}
			break;
		case 19:
			this.animPlayer.play(this.prepareJump);
			break;
		case 20:
			var jumpTime = e.jumpTime;
			this.jump.setTime(jumpTime);
			this.animPlayer.play(this.jump);
			var _this = this.renderer;
			_this.isLayerValid = false;
			_this._layer = 10 - 5;
			this.guy.shiftLayer(-5);
			break;
		case 21:
			var _this = this.renderer;
			_this.isLayerValid = false;
			_this._layer = 10;
			this.guy.shiftLayer(0);
			var _this = this.guy;
			var rotationMod = this.transform.get_rotation() % 360;
			var rotationRad = rotationMod / 180;
			var cos = Math.cos(rotationRad * Math.PI);
			var sin = Math.sin(rotationRad * Math.PI);
			var shift = Math.round(14 * cos);
			haxepunk_math_Vector2.setTo(_this.legLeft.get_position(),Math.round(sin * 10),_this.legLeft.transform.get_position().y);
			haxepunk_math_Vector2.setTo(_this.legRight.get_position(),Math.round(-sin * 10),_this.legLeft.transform.get_position().y);
			if(rotationMod > 200 && rotationMod < 340 || rotationMod < -20 && rotationMod > -160) {
				var _this1 = _this.headFront.renderer;
				_this1.isLayerValid = false;
				_this1._layer = 9 + _this.layerShift;
				var _this1 = _this.headBack.renderer;
				_this1.isLayerValid = false;
				_this1._layer = 7 + _this.layerShift;
				var _this1 = _this.bodyFront.renderer;
				_this1.isLayerValid = false;
				_this1._layer = 9 + _this.layerShift;
				var _this1 = _this.bodyBack.renderer;
				_this1.isLayerValid = false;
				_this1._layer = 7 + _this.layerShift;
			} else {
				var _this1 = _this.headFront.renderer;
				_this1.isLayerValid = false;
				_this1._layer = 7 + _this.layerShift;
				var _this1 = _this.headBack.renderer;
				_this1.isLayerValid = false;
				_this1._layer = 9 + _this.layerShift;
				var _this1 = _this.bodyFront.renderer;
				_this1.isLayerValid = false;
				_this1._layer = 7 + _this.layerShift;
				var _this1 = _this.bodyBack.renderer;
				_this1.isLayerValid = false;
				_this1._layer = 9 + _this.layerShift;
				if(rotationMod <= 0 && rotationMod >= -20 || rotationMod >= 180 && rotationMod <= 200 || rotationMod >= 340 && rotationMod <= 360 || rotationMod <= -160 && rotationMod >= -180) {
					shift = cos >= 0 ? 14 : -14;
				}
			}
			_this.headFront.setEvenPosition(-shift,_this.headFront.transform.get_position().y);
			_this.headBack.setEvenPosition(shift,_this.headFront.transform.get_position().y);
			haxepunk_math_Vector2.setTo(_this.bodyFront.get_position(),-shift,_this.bodyFront.transform.get_position().y);
			haxepunk_math_Vector2.setTo(_this.bodyBack.get_position(),shift,_this.bodyBack.transform.get_position().y);
			haxe_Log.trace("1",{ fileName : "src/kro13/kk/gameObjects/Player.hx", lineNumber : 83, className : "kro13.kk.gameObjects.Player", methodName : "onEvent"});
			break;
		case 36:
			this.validate();
			break;
		default:
		}
	}
	,validate: function() {
		haxe_Log.trace("player validate",{ fileName : "src/kro13/kk/gameObjects/Player.hx", lineNumber : 107, className : "kro13.kk.gameObjects.Player", methodName : "validate"});
		this.body.removeForceById(0);
		this.body.addForce(new kro13_kk_components_body_Gravity(this.dataProvider.getLocal().gravity));
	}
	,__class__: kro13_kk_gameObjects_Player
});
var kro13_kk_gameObjects_Shadow = function(width) {
	kro13_kk_gameObjects_Renderable.call(this);
	this.type = 9;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 5;
	this.width = width;
};
$hxClasses["kro13.kk.gameObjects.Shadow"] = kro13_kk_gameObjects_Shadow;
kro13_kk_gameObjects_Shadow.__name__ = "kro13.kk.gameObjects.Shadow";
kro13_kk_gameObjects_Shadow.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_Shadow.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = this.width;
		var y = 1;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.set_size(this2);
		var materialConfig = { size : this.get_size(), color : 6776735};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.RECTANGLE(materialConfig);
		this.transform.set_alpha(0.3);
	}
	,__class__: kro13_kk_gameObjects_Shadow
});
var kro13_kk_gameObjects_Snowman = function() {
	kro13_kk_gameObjects_Renderable.call(this);
	this.type = 7;
	this.addComponent(new kro13_kk_components_Body(this.get_size()));
	var tmp;
	if(this.componentsMap == null) {
		tmp = null;
	} else {
		var component = this.componentsMap.h[3];
		tmp = component;
	}
	this.body = tmp;
	this.name = "Snowman " + this.id;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 1;
};
$hxClasses["kro13.kk.gameObjects.Snowman"] = kro13_kk_gameObjects_Snowman;
kro13_kk_gameObjects_Snowman.__name__ = "kro13.kk.gameObjects.Snowman";
kro13_kk_gameObjects_Snowman.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_Snowman.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = 46;
		var y = 75;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.set_size(this1);
		var x = 40;
		var y = 20;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.body.size = this1;
		var x = 0;
		var y = -20;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.body.position = this1;
		var fluctX = Math.random();
		if(fluctX <= 0.33) {
			fluctX = 1;
		} else if(fluctX <= 0.66) {
			fluctX = 1.1;
		} else {
			fluctX = 0.9;
		}
		var fluctY = Math.random();
		if(fluctY <= 0.33) {
			fluctY = 1;
		} else if(fluctY <= 0.66) {
			fluctY = 1.1;
		} else {
			fluctY = 0.9;
		}
		haxepunk_math_Vector2.setTo(this.transform.get_size(),this.transform.get_size().x * fluctX,this.transform.get_size().y * fluctY);
		var x = (this.get_size().x - this.body.size.x) * 0.5;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.transform.origin = this1;
		var x = kro13_kk_utils_MathUtils.get_instance().randomRange(5,10);
		var y = kro13_kk_utils_MathUtils.get_instance().randomRange(5,10);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var leftEyeSize = this1;
		var x = kro13_kk_utils_MathUtils.get_instance().randomRange(4,21 - leftEyeSize.x);
		var y = kro13_kk_utils_MathUtils.get_instance().randomRange(4,26 - leftEyeSize.y);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var leftEyePos = this1;
		var x = kro13_kk_utils_MathUtils.get_instance().randomRange(Math.max(leftEyeSize.x - 2,5) | 0,Math.min(leftEyeSize.x + 2,10) | 0);
		var y = kro13_kk_utils_MathUtils.get_instance().randomRange(Math.max(leftEyeSize.y - 2,5) | 0,Math.min(leftEyeSize.y + 2,10) | 0);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var rightEyeSize = this1;
		var x = kro13_kk_utils_MathUtils.get_instance().randomRange(25,42 - rightEyeSize.x);
		var y = kro13_kk_utils_MathUtils.get_instance().randomRange(Math.max(leftEyePos.y - 2,4) | 0,Math.min(leftEyePos.y + 2,26 - rightEyeSize.y) | 0);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var rightEyePos = this1;
		var x = kro13_kk_utils_MathUtils.get_instance().randomRange(16,24);
		var y = kro13_kk_utils_MathUtils.get_instance().randomRange(6,10);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var noseSize = this1;
		var x = kro13_kk_utils_MathUtils.get_instance().randomRange(20,26);
		var y = (Math.max(leftEyePos.y + leftEyeSize.y,rightEyePos.y + rightEyeSize.y) | 0) + kro13_kk_utils_MathUtils.get_instance().randomRange(0,8) + 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var nosePos = this1;
		var materialConfig = { size : this.get_size(), source : "images/snowman_blank.png", leftEyeSize : leftEyeSize, leftEyePos : leftEyePos, rightEyeSize : rightEyeSize, rightEyePos : rightEyePos, noseSize : noseSize, nosePos : nosePos, flip : Math.random() > 0.5};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.SNOWMAN(materialConfig);
	}
	,__class__: kro13_kk_gameObjects_Snowman
});
var kro13_kk_gameObjects_Trampoline = function() {
	kro13_kk_gameObjects_Renderable.call(this);
	this.type = 6;
	this.addComponent(new kro13_kk_components_Body(this.get_size()));
	var tmp;
	if(this.componentsMap == null) {
		tmp = null;
	} else {
		var component = this.componentsMap.h[3];
		tmp = component;
	}
	this.body = tmp;
	this.name = "Trampoline " + this.id;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 12;
};
$hxClasses["kro13.kk.gameObjects.Trampoline"] = kro13_kk_gameObjects_Trampoline;
kro13_kk_gameObjects_Trampoline.__name__ = "kro13.kk.gameObjects.Trampoline";
kro13_kk_gameObjects_Trampoline.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_Trampoline.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = 2;
		var y = 3;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.set_size(this2);
		var x = 0.5;
		var y = 0.3;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.body.position = this2;
		var x = 1;
		var y = 1.7;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.body.size = this2;
		var materialConfig = { size : this.get_size(), source : "images/tramp.png"};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(materialConfig);
	}
	,__class__: kro13_kk_gameObjects_Trampoline
});
var kro13_kk_gameObjects_fx_AvalancheFront = function() {
	this.enabled = true;
	kro13_kk_gameObjects_Renderable.call(this);
	this.name = "avalanche front fx";
	this.type = 5;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 0;
	var particles = new kro13_kk_components_Particles("avalanche_front",$bind(this,this.emit));
	particles.emitFrequency = 0.01;
	this.addComponent(particles);
};
$hxClasses["kro13.kk.gameObjects.fx.AvalancheFront"] = kro13_kk_gameObjects_fx_AvalancheFront;
kro13_kk_gameObjects_fx_AvalancheFront.__name__ = "kro13.kk.gameObjects.fx.AvalancheFront";
kro13_kk_gameObjects_fx_AvalancheFront.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_fx_AvalancheFront.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = 40;
		var y = 40;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var materialConfig = { size : this1, color : 16777215, endColor : 10066380, particlesType : "avalanche_front", emitAngle : -90, distance : 100, distanceRange : 50, duration : 1, startAlpha : 1, endAlpha : 0.1, startScale : 3};
		var material = kro13_kk_components_renderer_materials_EMaterial.PARTICLES(materialConfig);
		this.renderer.material = material;
		var _this = this.renderer;
		_this.isLayerValid = false;
		_this._layer = 0;
	}
	,freeze: function() {
		if(kro13_hxp_systems_render_HxpEntitiesManager.instance == null) {
			kro13_hxp_systems_render_HxpEntitiesManager.instance = new kro13_hxp_systems_render_HxpEntitiesManager();
		}
		var entity = kro13_hxp_systems_render_HxpEntitiesManager.instance.getEntity(this.id);
		if(entity == null) {
			return;
		}
		var emitter = entity.graphic;
		if(emitter != null) {
			emitter.frozen = true;
		}
	}
	,unfreeze: function() {
		if(kro13_hxp_systems_render_HxpEntitiesManager.instance == null) {
			kro13_hxp_systems_render_HxpEntitiesManager.instance = new kro13_hxp_systems_render_HxpEntitiesManager();
		}
		var entity = kro13_hxp_systems_render_HxpEntitiesManager.instance.getEntity(this.id);
		if(entity == null) {
			return;
		}
		var emitter = entity.graphic;
		if(emitter != null) {
			emitter.frozen = false;
		}
	}
	,emit: function() {
		return this.enabled;
	}
	,__class__: kro13_kk_gameObjects_fx_AvalancheFront
});
var kro13_kk_gameObjects_fx_CircularBoom = function(radius,color) {
	if(color == null) {
		color = 16777215;
	}
	if(radius == null) {
		radius = 5;
	}
	this.isStarted = false;
	kro13_kk_gameObjects_Renderable.call(this);
	this.name = "CircularBoomFx";
	this.type = 5;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 11;
	this.addComponent(new kro13_kk_components_Updater(this));
	this.radius = radius;
	this.color = color;
	this.addComponent(new kro13_kk_components_TransformBinder(this));
};
$hxClasses["kro13.kk.gameObjects.fx.CircularBoom"] = kro13_kk_gameObjects_fx_CircularBoom;
kro13_kk_gameObjects_fx_CircularBoom.__name__ = "kro13.kk.gameObjects.fx.CircularBoom";
kro13_kk_gameObjects_fx_CircularBoom.__interfaces__ = [kro13_kk_ISwitchable,kro13_kk_IUpdatable];
kro13_kk_gameObjects_fx_CircularBoom.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_fx_CircularBoom.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = 40;
		var y = 40;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var scalar = this.radius;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= scalar;
		this2.y *= scalar;
		this.set_size(this2);
		var x = this.get_size().x * 0.5;
		var y = this.get_size().y * 0.5;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.transform.origin = this1;
		this.materialC = { size : this.get_size(), color : this.color};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.CIRCLE(this.materialC);
		this.expand = new kro13_kk_tween_FloatTween(0.01,1,0.2);
	}
	,update: function(dt) {
		if(this.isStarted) {
			var _this = this.expand;
			var dt = kro13_kk_systems_DTSystem._dt;
			var result = _this.elapsed <= _this.duration || _this.ratio < 1;
			if(!result && _this.onComplete != null && !_this.isComplete) {
				_this.onComplete();
				_this.isComplete = true;
			}
			if(result) {
				_this.ratio = _this.elapsed / _this.duration;
				if(_this.ratio > 1) {
					_this.ratio = 1;
				}
				_this.ratio = _this.ease(_this.ratio);
				_this.val = _this.from + _this.range * _this.ratio;
			}
			_this.elapsed += dt;
			this.transform.set_scale(this.expand.val);
			this.transform.set_alpha(this.expand.val * 0.3);
			var _this = this.expand;
			var result = _this.elapsed <= _this.duration || _this.ratio < 1;
			if(!result && _this.onComplete != null && !_this.isComplete) {
				_this.onComplete();
				_this.isComplete = true;
			}
			if(!result) {
				this.stop();
			}
		}
	}
	,start: function() {
		this.isStarted = true;
	}
	,stop: function() {
		this.transform.set_scale(0.01);
		this.transform.set_alpha(0.01);
		this.isStarted = false;
		this.expand.reset();
		this.renderer.isValid = false;
		this.destroy();
	}
	,__class__: kro13_kk_gameObjects_fx_CircularBoom
});
var kro13_kk_gameObjects_fx_SnowBlow = function(conf) {
	this.counter = 0;
	kro13_kk_gameObjects_Renderable.call(this);
	this.name = "Snow Blow Fx";
	this.type = 5;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 1;
	var particles = new kro13_kk_components_Particles("blow",$bind(this,this.emit));
	this.conf = conf;
	particles.emitFrequency = conf.emitFrequency;
	this.addComponent(particles);
};
$hxClasses["kro13.kk.gameObjects.fx.SnowBlow"] = kro13_kk_gameObjects_fx_SnowBlow;
kro13_kk_gameObjects_fx_SnowBlow.__name__ = "kro13.kk.gameObjects.fx.SnowBlow";
kro13_kk_gameObjects_fx_SnowBlow.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_fx_SnowBlow.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = 40;
		var y = 40;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var materialConfig = { size : this1, color : 16777215, particlesType : "blow", emitAngle : 0, distance : this.conf.distance, duration : this.conf.duration, angleRange : 360, distanceRange : 20, durationRange : 0.1, endAlpha : 0.1, endScale : 0.5};
		var material = kro13_kk_components_renderer_materials_EMaterial.PARTICLES(materialConfig);
		this.renderer.material = material;
	}
	,emit: function() {
		this.counter++;
		var tmp = this.counter > this.conf.eminCount;
		return this.counter < this.conf.eminCount;
	}
	,__class__: kro13_kk_gameObjects_fx_SnowBlow
});
var kro13_kk_gameObjects_fx_SnowPlume = function(player,dataProvider) {
	this.prevRotation = 0;
	kro13_kk_gameObjects_Renderable.call(this);
	this.name = "Snow Plume Fx";
	this.type = 5;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 1;
	this.particles = new kro13_kk_components_Particles("plume",$bind(this,this.emit));
	this.particles.emitFrequency = 0.04;
	this.addComponent(this.particles);
	this.addComponent(new kro13_kk_components_Updater(this));
	var tmp;
	if(player.componentsMap == null) {
		tmp = null;
	} else {
		var component = player.componentsMap.h[3];
		tmp = component;
	}
	this.playerBody = tmp;
	var tmp;
	if(player.componentsMap == null) {
		tmp = null;
	} else {
		var component = player.componentsMap.h[2];
		tmp = component;
	}
	this.playerTransform = tmp;
	var tmp;
	if(player.componentsMap == null) {
		tmp = null;
	} else {
		var component = player.componentsMap.h[12];
		tmp = component;
	}
	this.physicalCoeff = tmp;
	this.dataProvider = dataProvider;
};
$hxClasses["kro13.kk.gameObjects.fx.SnowPlume"] = kro13_kk_gameObjects_fx_SnowPlume;
kro13_kk_gameObjects_fx_SnowPlume.__name__ = "kro13.kk.gameObjects.fx.SnowPlume";
kro13_kk_gameObjects_fx_SnowPlume.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_gameObjects_fx_SnowPlume.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_fx_SnowPlume.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = 40;
		var y = 40;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.materialC = { size : this1, color : 16777215, particlesType : "plume", emitAngle : 90, distance : 40, duration : 0.5, angleRange : 0, distanceRange : 40, durationRange : 0.1, endAlpha : 0.1, startScale : 1, endScale : 0.5};
		var material = kro13_kk_components_renderer_materials_EMaterial.PARTICLES(this.materialC);
		var x = 20.;
		var y = 4.;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.transform.origin = this1;
		this.renderer.material = material;
	}
	,update: function(dt) {
		this.particles.emitFrequency = this.getEmitFreq();
		var tmp = Math.pow(0.1 / this.physicalCoeff.getSpeedCoeff(),1.2);
		this.materialC.distance = Math.min(tmp,200);
		var absRotation = (this.playerTransform.get_rotation() - 90) % 360;
		if(absRotation >= 0 && absRotation <= 180 || absRotation <= -180 && absRotation >= -360) {
			var tmp = this.playerTransform.get_rotation() % 360;
			this.materialC.emitAngle = tmp + 270;
		} else {
			var tmp = this.playerTransform.get_rotation() % 360;
			this.materialC.emitAngle = tmp + 90;
		}
		this.renderer.isValid = false;
		if(Math.abs(this.playerTransform.get_rotation() % 180) <= 35 || Math.abs(this.playerTransform.get_rotation() % 180) >= 145) {
			var _this = this.renderer;
			_this.isLayerValid = false;
			_this._layer = 11;
		} else {
			var _this = this.renderer;
			_this.isLayerValid = false;
			_this._layer = 1;
		}
		var rotRad = kro13_kk_utils_MathUtils.get_instance().degToRad(this.playerTransform.get_rotation() * 2 + 90);
		haxepunk_math_Vector2.setTo(this.transform.get_position(),20. * Math.cos(rotRad),-20. * Math.sin(rotRad));
	}
	,getEmitFreq: function() {
		var speedCoeff = this.physicalCoeff.getSpeedCoeff();
		var rotationCoeff = this.physicalCoeff.getRotationCoeff();
		return 100 * speedCoeff * rotationCoeff;
	}
	,emit: function() {
		var hasFriction = this.playerBody.getForceById(1).enabled;
		if(hasFriction) {
			var this1 = this.playerBody.velocity;
			return Math.sqrt(this1.x * this1.x + this1.y * this1.y) > this.dataProvider.getLocal().minSpeed;
		} else {
			return false;
		}
	}
	,__class__: kro13_kk_gameObjects_fx_SnowPlume
});
var kro13_kk_gameObjects_fx_SpeedPlume = function(player,dataProvider) {
	kro13_kk_gameObjects_fx_SnowPlume.call(this,player,dataProvider);
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 11;
	this.name = "Speed Plume Fx";
};
$hxClasses["kro13.kk.gameObjects.fx.SpeedPlume"] = kro13_kk_gameObjects_fx_SpeedPlume;
kro13_kk_gameObjects_fx_SpeedPlume.__name__ = "kro13.kk.gameObjects.fx.SpeedPlume";
kro13_kk_gameObjects_fx_SpeedPlume.__super__ = kro13_kk_gameObjects_fx_SnowPlume;
kro13_kk_gameObjects_fx_SpeedPlume.prototype = $extend(kro13_kk_gameObjects_fx_SnowPlume.prototype,{
	build: function() {
		kro13_kk_gameObjects_fx_SnowPlume.prototype.build.call(this);
		this.materialC.color = 16757990;
	}
	,update: function(dy) {
		var tmp = 0.4 * (1 - this.dataProvider.getLocal().scoreData.speedRatio);
		this.particles.emitFrequency = 0.04 + tmp;
	}
	,emit: function() {
		return this.dataProvider.getLocal().scoreData.speedRatio > 0.5;
	}
	,__class__: kro13_kk_gameObjects_fx_SpeedPlume
});
var kro13_kk_gameObjects_hare_anim_Run = function(target) {
	this.jumpTime = 0.3;
	this.sitTime = 0.1;
	kro13_kk_components_animation_AbstractAnimation.call(this);
	this.hare = target;
};
$hxClasses["kro13.kk.gameObjects.hare.anim.Run"] = kro13_kk_gameObjects_hare_anim_Run;
kro13_kk_gameObjects_hare_anim_Run.__name__ = "kro13.kk.gameObjects.hare.anim.Run";
kro13_kk_gameObjects_hare_anim_Run.__super__ = kro13_kk_components_animation_AbstractAnimation;
kro13_kk_gameObjects_hare_anim_Run.prototype = $extend(kro13_kk_components_animation_AbstractAnimation.prototype,{
	update: function(dt) {
		if(this.timer == 0) {
			this.hare.legsOut();
		}
		if(this.timer >= this.jumpTime) {
			this.hare.legsIn();
		}
		kro13_kk_components_animation_AbstractAnimation.prototype.update.call(this,dt);
		if(this.timer >= this.sitTime + this.jumpTime) {
			this.stop();
			this.jumpTime = this.getJumpTime();
		}
	}
	,getJumpTime: function() {
		if(Math.random() >= 0.8) {
			return 0.6;
		}
		return 0.3;
	}
	,__class__: kro13_kk_gameObjects_hare_anim_Run
});
var kro13_kk_gameObjects_hare_anim_Sit = function(target) {
	kro13_kk_components_animation_AbstractAnimation.call(this);
	this.hare = target;
};
$hxClasses["kro13.kk.gameObjects.hare.anim.Sit"] = kro13_kk_gameObjects_hare_anim_Sit;
kro13_kk_gameObjects_hare_anim_Sit.__name__ = "kro13.kk.gameObjects.hare.anim.Sit";
kro13_kk_gameObjects_hare_anim_Sit.__super__ = kro13_kk_components_animation_AbstractAnimation;
kro13_kk_gameObjects_hare_anim_Sit.prototype = $extend(kro13_kk_components_animation_AbstractAnimation.prototype,{
	update: function(dt) {
		kro13_kk_components_animation_AbstractAnimation.prototype.update.call(this,dt);
		this.hare.legsIn();
	}
	,__class__: kro13_kk_gameObjects_hare_anim_Sit
});
var kro13_kk_gameObjects_player_PlayerGuy = function() {
	this.layerShift = 0;
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "PlayerGuy";
};
$hxClasses["kro13.kk.gameObjects.player.PlayerGuy"] = kro13_kk_gameObjects_player_PlayerGuy;
kro13_kk_gameObjects_player_PlayerGuy.__name__ = "kro13.kk.gameObjects.player.PlayerGuy";
kro13_kk_gameObjects_player_PlayerGuy.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_gameObjects_player_PlayerGuy.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		var x = 24;
		var y = 34;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 2;
		this2.y *= 2;
		this.set_size(this2);
		var x = this.get_size().x * 0.5;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.transform.origin = this1;
		this.buildHead();
		this.buildBody();
		this.buildLegs();
		this.transform.addChild(this.legLeft.transform);
		this.legLeft.setEvenPosition(-10,-6);
		this.transform.addChild(this.legRight.transform);
		this.legRight.setEvenPosition(10,-6);
		this.transform.addChild(this.body.transform);
		this.body.setEvenPosition(0,-24);
		this.transform.addChild(this.head.transform);
		this.head.setEvenPosition(0,-68);
		var rotationMod = 0 % 360;
		var rotationRad = rotationMod / 180;
		var cos = Math.cos(rotationRad * Math.PI);
		var sin = Math.sin(rotationRad * Math.PI);
		var shift = Math.round(14 * cos);
		haxepunk_math_Vector2.setTo(this.legLeft.get_position(),Math.round(sin * 10),this.legLeft.transform.get_position().y);
		haxepunk_math_Vector2.setTo(this.legRight.get_position(),Math.round(-sin * 10),this.legLeft.transform.get_position().y);
		if(rotationMod > 200 && rotationMod < 340 || rotationMod < -20 && rotationMod > -160) {
			var _this = this.headFront.renderer;
			_this.isLayerValid = false;
			_this._layer = 9 + this.layerShift;
			var _this = this.headBack.renderer;
			_this.isLayerValid = false;
			_this._layer = 7 + this.layerShift;
			var _this = this.bodyFront.renderer;
			_this.isLayerValid = false;
			_this._layer = 9 + this.layerShift;
			var _this = this.bodyBack.renderer;
			_this.isLayerValid = false;
			_this._layer = 7 + this.layerShift;
		} else {
			var _this = this.headFront.renderer;
			_this.isLayerValid = false;
			_this._layer = 7 + this.layerShift;
			var _this = this.headBack.renderer;
			_this.isLayerValid = false;
			_this._layer = 9 + this.layerShift;
			var _this = this.bodyFront.renderer;
			_this.isLayerValid = false;
			_this._layer = 7 + this.layerShift;
			var _this = this.bodyBack.renderer;
			_this.isLayerValid = false;
			_this._layer = 9 + this.layerShift;
			if(rotationMod <= 0 && rotationMod >= -20 || rotationMod >= 180 && rotationMod <= 200 || rotationMod >= 340 && rotationMod <= 360 || rotationMod <= -160 && rotationMod >= -180) {
				shift = cos >= 0 ? 14 : -14;
			}
		}
		this.headFront.setEvenPosition(-shift,this.headFront.transform.get_position().y);
		this.headBack.setEvenPosition(shift,this.headFront.transform.get_position().y);
		haxepunk_math_Vector2.setTo(this.bodyFront.get_position(),-shift,this.bodyFront.transform.get_position().y);
		haxepunk_math_Vector2.setTo(this.bodyBack.get_position(),shift,this.bodyBack.transform.get_position().y);
	}
	,shiftLayer: function(shift) {
		var _this = this.head.renderer;
		_this.isLayerValid = false;
		_this._layer = 8 + shift;
		var _this = this.body.renderer;
		_this.isLayerValid = false;
		_this._layer = 8 + shift;
		var _this = this.legRight.renderer;
		_this.isLayerValid = false;
		_this._layer = 9 + shift;
		var _this = this.legLeft.renderer;
		_this.isLayerValid = false;
		_this._layer = 9 + shift;
		this.layerShift = shift;
	}
	,update: function(rotation) {
		var rotationMod = rotation % 360;
		var rotationRad = rotationMod / 180;
		var cos = Math.cos(rotationRad * Math.PI);
		var sin = Math.sin(rotationRad * Math.PI);
		var shift = Math.round(14 * cos);
		haxepunk_math_Vector2.setTo(this.legLeft.get_position(),Math.round(sin * 10),this.legLeft.transform.get_position().y);
		haxepunk_math_Vector2.setTo(this.legRight.get_position(),Math.round(-sin * 10),this.legLeft.transform.get_position().y);
		if(rotationMod > 200 && rotationMod < 340 || rotationMod < -20 && rotationMod > -160) {
			var _this = this.headFront.renderer;
			_this.isLayerValid = false;
			_this._layer = 9 + this.layerShift;
			var _this = this.headBack.renderer;
			_this.isLayerValid = false;
			_this._layer = 7 + this.layerShift;
			var _this = this.bodyFront.renderer;
			_this.isLayerValid = false;
			_this._layer = 9 + this.layerShift;
			var _this = this.bodyBack.renderer;
			_this.isLayerValid = false;
			_this._layer = 7 + this.layerShift;
		} else {
			var _this = this.headFront.renderer;
			_this.isLayerValid = false;
			_this._layer = 7 + this.layerShift;
			var _this = this.headBack.renderer;
			_this.isLayerValid = false;
			_this._layer = 9 + this.layerShift;
			var _this = this.bodyFront.renderer;
			_this.isLayerValid = false;
			_this._layer = 7 + this.layerShift;
			var _this = this.bodyBack.renderer;
			_this.isLayerValid = false;
			_this._layer = 9 + this.layerShift;
			if(rotationMod <= 0 && rotationMod >= -20 || rotationMod >= 180 && rotationMod <= 200 || rotationMod >= 340 && rotationMod <= 360 || rotationMod <= -160 && rotationMod >= -180) {
				shift = cos >= 0 ? 14 : -14;
			}
		}
		this.headFront.setEvenPosition(-shift,this.headFront.transform.get_position().y);
		this.headBack.setEvenPosition(shift,this.headFront.transform.get_position().y);
		haxepunk_math_Vector2.setTo(this.bodyFront.get_position(),-shift,this.bodyFront.transform.get_position().y);
		haxepunk_math_Vector2.setTo(this.bodyBack.get_position(),shift,this.bodyBack.transform.get_position().y);
	}
	,sit: function() {
		this.head.setEvenPosition(0,-60);
		this.body.setEvenPosition(0,-20);
	}
	,stand: function() {
		this.head.setEvenPosition(0,-68);
		this.body.setEvenPosition(0,-24);
	}
	,buildHead: function() {
		var x = 24;
		var y = 22;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 2;
		this2.y *= 2;
		this.head = kro13_kk_components_renderer_materials_MaterialUtils.buildImage("images/player_head.png",this2);
		this.head.name = "head";
		var x = 24;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.head.transform.origin = this1;
		var _this = this.head.renderer;
		_this.isLayerValid = false;
		_this._layer = 8;
		var x = 20;
		var y = 20;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 2;
		this2.y *= 2;
		this.headFront = kro13_kk_components_renderer_materials_MaterialUtils.buildImage("images/player_head_front.png",this2);
		var x = 20;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.headFront.transform.origin = this1;
		var _this = this.headFront.renderer;
		_this.isLayerValid = false;
		_this._layer = 7;
		var x = 6;
		var y = 15;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 2;
		this2.y *= 2;
		this.headBack = kro13_kk_components_renderer_materials_MaterialUtils.buildImage("images/player_head_back.png",this2);
		var x = 6;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.headBack.transform.origin = this1;
		var _this = this.headBack.renderer;
		_this.isLayerValid = false;
		_this._layer = 9;
		this.head.transform.addChild(this.headFront.transform);
		this.head.transform.addChild(this.headBack.transform);
	}
	,buildBody: function() {
		var x = 16;
		var y = 9;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 2;
		this2.y *= 2;
		this.body = kro13_kk_components_renderer_materials_MaterialUtils.buildImage("images/player_body.png",this2);
		this.body.name = "body";
		var x = 16;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.body.transform.origin = this1;
		var _this = this.body.renderer;
		_this.isLayerValid = false;
		_this._layer = 8;
		var x = 2;
		var y = 6;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 2;
		this2.y *= 2;
		this.bodyFront = kro13_kk_components_renderer_materials_MaterialUtils.buildImage("images/player_body_front.png",this2);
		var x = 2;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.bodyFront.transform.origin = this1;
		var _this = this.bodyFront.renderer;
		_this.isLayerValid = false;
		_this._layer = 7;
		this.bodyFront.setEvenPosition(0,4);
		var x = 14;
		var y = 14;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 2;
		this2.y *= 2;
		this.bodyBack = kro13_kk_components_renderer_materials_MaterialUtils.buildImage("images/player_body_back.png",this2);
		var x = 14;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.bodyBack.transform.origin = this1;
		var _this = this.bodyBack.renderer;
		_this.isLayerValid = false;
		_this._layer = 9;
		this.bodyBack.setEvenPosition(0,-12);
		this.body.transform.addChild(this.bodyFront.transform);
		this.body.transform.addChild(this.bodyBack.transform);
	}
	,buildLegs: function() {
		var x = 3;
		var y = 3;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 2;
		this2.y *= 2;
		this.legLeft = kro13_kk_components_renderer_materials_MaterialUtils.buildRectangle(this2,7096996);
		this.legLeft.name = "leg left";
		var x = 3;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.legLeft.transform.origin = this1;
		var _this = this.legLeft.renderer;
		_this.isLayerValid = false;
		_this._layer = 9;
		var x = 3;
		var y = 3;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 2;
		this2.y *= 2;
		this.legRight = kro13_kk_components_renderer_materials_MaterialUtils.buildRectangle(this2,7096996);
		this.legRight.name = "leg right";
		var x = 3;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.legRight.transform.origin = this1;
		var _this = this.legRight.renderer;
		_this.isLayerValid = false;
		_this._layer = 9;
	}
	,__class__: kro13_kk_gameObjects_player_PlayerGuy
});
var kro13_kk_gameObjects_player_anim_PlayerJump = function(player) {
	this.isLanded = true;
	kro13_kk_components_animation_AbstractAnimation.call(this);
	this.player = player;
	this.jumpTime = 0.6;
};
$hxClasses["kro13.kk.gameObjects.player.anim.PlayerJump"] = kro13_kk_gameObjects_player_anim_PlayerJump;
kro13_kk_gameObjects_player_anim_PlayerJump.__name__ = "kro13.kk.gameObjects.player.anim.PlayerJump";
kro13_kk_gameObjects_player_anim_PlayerJump.__super__ = kro13_kk_components_animation_AbstractAnimation;
kro13_kk_gameObjects_player_anim_PlayerJump.prototype = $extend(kro13_kk_components_animation_AbstractAnimation.prototype,{
	setTime: function(val) {
		this.jumpTime = val;
	}
	,stop: function() {
		kro13_kk_components_animation_AbstractAnimation.prototype.stop.call(this);
		this.isLanded = true;
	}
	,update: function(dt) {
		if(this.isLanded) {
			if(this.timer == 0) {
				this.jump();
			} else if(this.timer >= this.jumpTime + 0.2) {
				this.stop();
				this.player.guy.stand();
			}
		} else if(this.timer >= this.jumpTime) {
			this.land();
		} else if(this.timer < this.jumpTime * 0.5) {
			this.player.transform.set_scale(1 + 0.5 * Math.pow(this.timer / (this.jumpTime * 0.5),0.5) * this.jumpTime / 0.6);
		} else {
			this.player.transform.set_scale(1 + 0.5 * Math.pow((this.jumpTime - this.timer) / (this.jumpTime * 0.5),0.5) * this.jumpTime / 0.6);
		}
		kro13_kk_components_animation_AbstractAnimation.prototype.update.call(this,dt);
	}
	,jump: function() {
		this.player.guy.stand();
		this.isLanded = false;
	}
	,land: function() {
		this.player.transform.set_scale(1);
		this.player.guy.sit();
		this.isLanded = true;
	}
	,__class__: kro13_kk_gameObjects_player_anim_PlayerJump
});
var kro13_kk_gameObjects_player_anim_PlayerPrepareJump = function(player) {
	kro13_kk_components_animation_AbstractAnimation.call(this);
	this.player = player;
};
$hxClasses["kro13.kk.gameObjects.player.anim.PlayerPrepareJump"] = kro13_kk_gameObjects_player_anim_PlayerPrepareJump;
kro13_kk_gameObjects_player_anim_PlayerPrepareJump.__name__ = "kro13.kk.gameObjects.player.anim.PlayerPrepareJump";
kro13_kk_gameObjects_player_anim_PlayerPrepareJump.__super__ = kro13_kk_components_animation_AbstractAnimation;
kro13_kk_gameObjects_player_anim_PlayerPrepareJump.prototype = $extend(kro13_kk_components_animation_AbstractAnimation.prototype,{
	update: function(dt) {
		kro13_kk_components_animation_AbstractAnimation.prototype.update.call(this,dt);
		this.player.guy.sit();
		this.stop();
	}
	,__class__: kro13_kk_gameObjects_player_anim_PlayerPrepareJump
});
var kro13_kk_gameObjects_tricks_Trick = function(trickConf) {
	this.isStarted = false;
	kro13_kk_gameObjects_Renderable.call(this);
	this.name = "abstract trick";
	this.type = 8;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 0 - 1;
	this.imgSource = trickConf.source;
	this.originY = trickConf.originY;
	var binder = new kro13_kk_components_TransformBinder(this);
	this.addComponent(binder);
	binder.bindFunction = $bind(this,this.bindFn);
};
$hxClasses["kro13.kk.gameObjects.tricks.Trick"] = kro13_kk_gameObjects_tricks_Trick;
kro13_kk_gameObjects_tricks_Trick.__name__ = "kro13.kk.gameObjects.tricks.Trick";
kro13_kk_gameObjects_tricks_Trick.__interfaces__ = [kro13_kk_ISwitchable];
kro13_kk_gameObjects_tricks_Trick.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_gameObjects_tricks_Trick.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = 80;
		var y = 80;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.set_size(this1);
		var x = this.get_size().x * 0.5;
		var y = this.get_size().y * this.originY;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.transform.origin = this1;
		this.materialC = { size : this.get_size(), source : this.imgSource};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(this.materialC);
	}
	,start: function() {
		this.isStarted = true;
	}
	,stop: function() {
		this.isStarted = false;
	}
	,bindFn: function(target) {
		if(this.isStarted) {
			this.transform.set_scale(target.get_scale());
			this.transform.set_rotation(target.get_rotation() - 90);
			haxepunk_math_Vector2.setTo(this.transform.get_position(),target.get_position().x,target.get_position().y);
		}
	}
	,__class__: kro13_kk_gameObjects_tricks_Trick
});
var kro13_kk_guiObjects_Layable = function() {
	kro13_kk_gameObjects_Renderable.call(this);
	this.addComponent(new kro13_kk_components_Layout());
	var tmp;
	if(this.componentsMap == null) {
		tmp = null;
	} else {
		var component = this.componentsMap.h[5];
		tmp = component;
	}
	this.layout = tmp;
};
$hxClasses["kro13.kk.guiObjects.Layable"] = kro13_kk_guiObjects_Layable;
kro13_kk_guiObjects_Layable.__name__ = "kro13.kk.guiObjects.Layable";
kro13_kk_guiObjects_Layable.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_guiObjects_Layable.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	__class__: kro13_kk_guiObjects_Layable
});
var kro13_kk_guiObjects_Button = function(color,borderColor,labelSize) {
	if(labelSize == null) {
		labelSize = 76;
	}
	this.isToggle = false;
	kro13_kk_guiObjects_Layable.call(this);
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 1;
	this.color = color;
	this.borderColor = borderColor;
	this.animPlayer = new kro13_kk_components_AnimPlayer();
	this.addComponent(this.animPlayer);
	this.btnBlink = new kro13_kk_guiObjects_anims_ButtonBlink(this);
	this.labelSize = labelSize;
};
$hxClasses["kro13.kk.guiObjects.Button"] = kro13_kk_guiObjects_Button;
kro13_kk_guiObjects_Button.__name__ = "kro13.kk.guiObjects.Button";
kro13_kk_guiObjects_Button.__super__ = kro13_kk_guiObjects_Layable;
kro13_kk_guiObjects_Button.prototype = $extend(kro13_kk_guiObjects_Layable.prototype,{
	setIcon: function(iconSource) {
		if(iconSource != "") {
			if(this.icon == null) {
				this.icon = new kro13_kk_gameObjects_Renderable();
				this.transform.addChild(this.icon.transform);
			}
			var x = this.getIconSize();
			var y = this.getIconSize();
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			this.iconMaterialConfig = { size : this1, source : iconSource, color : this.borderColor};
			var tmp = this.icon;
			var x = this.getIconSize();
			var y = this.getIconSize();
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			tmp.set_size(this1);
			this.icon.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(this.iconMaterialConfig);
			this.validateLayout();
			this.icon.renderer.isValid = false;
		}
	}
	,setLabel: function(text) {
		if(this.label == null) {
			this.label = new kro13_kk_guiObjects_TextField(this.borderColor,this.labelSize,false,true,null,this.color);
			this.label.build();
			this.transform.addChild(this.label.transform);
		}
		var _this = this.label;
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
		this.validateLayout();
		this.label.renderer.isValid = false;
	}
	,build: function() {
		var x = this.get_size().x;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.materialConfig = { size : this1, color : this.color, borderColor : this.borderColor, borderWidth : 4, outBorderWidth : 2, outBorderColor : this.color};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.GUI_BUTTON(this.materialConfig);
		this.validateLayout();
	}
	,altColor: function() {
		this.materialConfig.color = this.borderColor;
		this.materialConfig.borderColor = this.color;
		this.materialConfig.outBorderColor = this.borderColor;
		this.renderer.isValid = false;
		if(this.label != null) {
			this.label.altColor();
		}
		if(this.icon != null) {
			this.iconMaterialConfig.color = this.color;
			this.icon.renderer.isValid = false;
		}
	}
	,normColor: function() {
		this.materialConfig.color = this.color;
		this.materialConfig.borderColor = this.borderColor;
		this.materialConfig.outBorderColor = this.color;
		this.renderer.isValid = false;
		if(this.label != null) {
			this.label.normColor();
		}
		if(this.icon != null) {
			this.iconMaterialConfig.color = this.borderColor;
			this.icon.renderer.isValid = false;
		}
	}
	,startBlink: function() {
		this.animPlayer.play(this.btnBlink);
	}
	,stopBlink: function() {
		this.animPlayer.stop();
	}
	,enlarge: function() {
		var _this = this.btnBlink;
		var tmp = _this.button.get_size().x;
		_this.button.materialConfig.size.x = tmp * (1 + _this.scaleSize);
		var tmp = _this.button.get_size().y;
		_this.button.materialConfig.size.y = tmp * (1 + _this.scaleSize);
		_this.button.validateLayout();
		_this.button.renderer.isValid = false;
		_this.button.transform.set_position(_this.scaledPos);
	}
	,shrnk: function() {
		var _this = this.btnBlink;
		_this.button.materialConfig.size.x = _this.button.get_size().x;
		_this.button.materialConfig.size.y = _this.button.get_size().y;
		_this.button.validateLayout();
		_this.button.renderer.isValid = false;
		_this.button.transform.set_position(_this.normalPos);
	}
	,validateLayout: function() {
		var s = this.get_size();
		if(this.materialConfig != null) {
			s = this.materialConfig.size;
		}
		if(this.icon != null) {
			if(this.layout.direction == "horizontal") {
				var tmp = (s.y - this.icon.get_size().x) * 0.5;
				this.icon.get_position().x = Math.floor(tmp);
				var tmp = (s.y - this.icon.get_size().y) * 0.5;
				this.icon.get_position().y = Math.floor(tmp);
			} else {
				var tmp = (s.x - this.icon.get_size().x) * 0.5;
				this.icon.get_position().x = Math.floor(tmp);
				var tmp = (s.x - this.icon.get_size().y) * 0.5;
				this.icon.get_position().y = Math.floor(tmp);
			}
		}
		if(this.label != null) {
			var tmp = s.x * 0.5;
			this.label.get_position().x = Math.floor(tmp);
			var labelY = s.y * 0.5 + 6;
			if(this.icon != null && this.layout.direction == "vertical") {
				labelY = this.icon.get_size().y + (s.y - this.icon.get_size().y) * 0.5 - 20;
			}
			this.label.get_position().y = labelY;
		}
	}
	,getIconSize: function() {
		if(this.layout.direction == "horizontal") {
			return this.transform.get_size().y;
		} else {
			return this.transform.get_size().x;
		}
	}
	,getLabelY: function() {
		if(this.icon != null && this.layout.direction == "vertical") {
			return this.icon.get_size().y + (this.get_size().y - this.icon.get_size().y) * 0.5 - 20;
		} else {
			return this.get_size().y * 0.5;
		}
	}
	,__class__: kro13_kk_guiObjects_Button
});
var kro13_kk_guiObjects_GUIObjectsFactory = function() {
	this.popupX = 0;
	this.mainMenuY = (haxepunk_HXP.height - 1000) * 0.5;
};
$hxClasses["kro13.kk.guiObjects.GUIObjectsFactory"] = kro13_kk_guiObjects_GUIObjectsFactory;
kro13_kk_guiObjects_GUIObjectsFactory.__name__ = "kro13.kk.guiObjects.GUIObjectsFactory";
kro13_kk_guiObjects_GUIObjectsFactory.__properties__ = {get_instance:"get_instance"};
kro13_kk_guiObjects_GUIObjectsFactory.get_instance = function() {
	if(kro13_kk_guiObjects_GUIObjectsFactory.instance == null) {
		kro13_kk_guiObjects_GUIObjectsFactory.instance = new kro13_kk_guiObjects_GUIObjectsFactory();
	}
	return kro13_kk_guiObjects_GUIObjectsFactory.instance;
};
kro13_kk_guiObjects_GUIObjectsFactory.prototype = {
	buildFlexPopup: function(buttons,position,size) {
		var popup = new kro13_kk_guiObjects_popups_FlexPopup(buttons,16777215,10066380);
		popup.set_size(size);
		popup.set_position(position);
		popup.build();
		popup.name = "Pop Flex";
		return popup;
	}
	,buildStatsDialog: function() {
		var btnOk = this.buildSquareButton(null,"images/btn_ok.png");
		var popup = new kro13_kk_guiObjects_popups_StatsPopup(null,btnOk,16777215,10066380);
		var x = 900;
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : 0};
		popup.set_size(this1);
		var x = this.popupX;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		popup.set_position(this1);
		popup.build();
		return popup;
	}
	,buildTutorDialog: function() {
		var btnOk = this.buildSquareButton(null,"images/btn_ok.png");
		var popup = new kro13_kk_guiObjects_popups_TutorPopup([btnOk],16777215,10066380);
		var x = 900;
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : 0};
		popup.set_size(this1);
		var x = this.popupX;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		popup.set_position(this1);
		popup.build();
		var shaman = new kro13_kk_gameObjects_Renderable();
		shaman.build();
		haxepunk_math_Vector2.setTo(shaman.transform.get_size(),240,212);
		shaman.setEvenPosition(0,-shaman.transform.get_size().y);
		var tmp = shaman.get_size();
		shaman.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE({ source : "images/shaman.png", size : tmp});
		popup.transform.addChild(shaman.transform);
		popup.name = "pp tutor";
		return popup;
	}
	,buildErrorDialog: function() {
		var btnOk = this.buildSquareButton(null,"images/btn_ok.png");
		var popup = new kro13_kk_guiObjects_popups_DialogPopup([btnOk],16777215,10066380);
		var x = 900;
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : 0};
		popup.set_size(this1);
		var x = this.popupX;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		popup.set_position(this1);
		popup.build();
		popup.setMessage("Error");
		return popup;
	}
	,buildSimpleDialog: function(message) {
		var btnOk = this.buildSquareButton(null,"images/btn_ok.png");
		var popup = new kro13_kk_guiObjects_popups_DialogPopup([btnOk],16777215,10066380);
		var x = 900;
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : 0};
		popup.set_size(this1);
		var x = this.popupX;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		popup.set_position(this1);
		popup.setTextPropsBeforeBuild(46,"center");
		popup.build();
		popup.setMessage(message);
		return popup;
	}
	,buildPrivacyPolicyDialog: function() {
		var btnOk = this.buildSquareButton(null,"images/btn_ok.png");
		var x = 400;
		var y = 120;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var btnRead = this.buildBlankButton(this1);
		var text = kro13_kk_utils_L.get_instance().PRIVACY_BTN;
		if(btnRead.label == null) {
			btnRead.label = new kro13_kk_guiObjects_TextField(btnRead.borderColor,btnRead.labelSize,false,true,null,btnRead.color);
			btnRead.label.build();
			btnRead.transform.addChild(btnRead.label.transform);
		}
		var _this = btnRead.label;
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
		btnRead.validateLayout();
		btnRead.label.renderer.isValid = false;
		btnRead.action = function() {
			openfl_Lib.getURL(new openfl_net_URLRequest("https://kro13.github.io/"));
		};
		var popup = new kro13_kk_guiObjects_popups_DialogPopup([btnRead,btnOk],16777215,10066380);
		var x = 900;
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : 0};
		popup.set_size(this1);
		var x = this.popupX;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		popup.set_position(this1);
		popup.build();
		popup.setMessage(kro13_kk_utils_L.get_instance().PRIVACY_MESSAGE);
		popup.name = "pp dialog";
		return popup;
	}
	,buildHelpDilaog: function(dataProvider) {
		var popup = new kro13_kk_guiObjects_popups_HelpPopup(dataProvider);
		var x = 50;
		var y = 50;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		popup.set_position(this1);
		popup.build();
		return popup;
	}
	,buildSettingsDilaog: function(dataProvider,eventDispatcher) {
		var popup = new kro13_kk_guiObjects_popups_SettingsPopup(dataProvider,eventDispatcher,16777215,10066380);
		var x = 900;
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : 0};
		popup.set_size(this1);
		var x = this.popupX;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		popup.set_position(this1);
		popup.build();
		return popup;
	}
	,buildFinishDialog: function() {
		var btnOk = this.buildSquareButton(null,"images/btn_forth.png");
		var btnCancel = this.buildSquareButton(null,"images/btn_back.png");
		var popup = new kro13_kk_guiObjects_popups_DialogPopup([btnCancel,btnOk],16777215,10066380);
		var x = 900;
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : 0};
		popup.set_size(this1);
		var x = this.popupX;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		popup.set_position(this1);
		popup.build();
		return popup;
	}
	,buildConfirmDialog: function() {
		var btnOk = this.buildSquareButton(null,"images/btn_ok.png");
		var btnCancel = this.buildSquareButton(null,"images/btn_cancel.png");
		var popup = new kro13_kk_guiObjects_popups_DialogPopup([btnCancel,btnOk],16777215,10066380);
		var x = 900;
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : 0};
		popup.set_size(this1);
		var x = this.popupX;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		popup.set_position(this1);
		popup.build();
		return popup;
	}
	,buildBlankButton: function(size) {
		var button = new kro13_kk_guiObjects_Button(16777215,10066380);
		button.set_size(size);
		button.build();
		return button;
	}
	,buildPlayerHUD: function(dataProvider) {
		var playerHUD = new kro13_kk_guiObjects_PlayerHUD(dataProvider);
		playerHUD.name = "Player HUD";
		playerHUD.build();
		playerHUD.setEvenScale(1.8);
		return playerHUD;
	}
	,buildTopHUD: function(dataProvider) {
		var hud = new kro13_kk_guiObjects_HUD(dataProvider,16777215,10066380);
		hud.name = "HUD";
		var x = haxepunk_HXP.width;
		var y = 120;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		hud.set_size(this1);
		hud.build();
		return hud;
	}
	,buildQuickMenu: function(dataProvider,eventDispatcher) {
		var quickMenu = new kro13_kk_guiObjects_QuickMenu(dataProvider,eventDispatcher);
		quickMenu.build();
		return quickMenu;
	}
	,buildMainMenu: function(dataProvider,eventDispatcher) {
		var mainMenu = new kro13_kk_guiObjects_MainMenu(dataProvider,eventDispatcher);
		mainMenu.build();
		return mainMenu;
	}
	,buildMainMenuButton: function(action,icon,text,name) {
		if(name == null) {
			name = "Btn";
		}
		var button = new kro13_kk_guiObjects_Button(16777215,10066380);
		button.name = name;
		var x = 900;
		var y = 120;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		button.set_size(this1);
		button.action = action;
		if(button.label == null) {
			button.label = new kro13_kk_guiObjects_TextField(button.borderColor,button.labelSize,false,true,null,button.color);
			button.label.build();
			button.transform.addChild(button.label.transform);
		}
		var _this = button.label;
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
		button.validateLayout();
		button.label.renderer.isValid = false;
		button.setIcon(icon);
		button.build();
		return button;
	}
	,buildSquareButton: function(action,icon,name) {
		if(name == null) {
			name = "Btn";
		}
		var button = new kro13_kk_guiObjects_Button(16777215,10066380);
		button.name = name;
		var x = 120;
		var y = 120;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		button.set_size(this1);
		button.action = action;
		button.setIcon(icon);
		button.build();
		return button;
	}
	,buildRestartsButton: function(action,dataProvider,name) {
		if(name == null) {
			name = "Btn";
		}
		var button = new kro13_kk_guiObjects_RestartsButton(16777215,10066380,60,dataProvider);
		button.name = name;
		var x = 120;
		var y = 180.;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		button.set_size(this1);
		button.action = action;
		button.build();
		return button;
	}
	,buildConsole: function() {
		var $console = new kro13_kk_guiObjects_popups_ConsolePopup();
		var x = 50;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		$console.set_position(this1);
		$console.build();
		return $console;
	}
	,__class__: kro13_kk_guiObjects_GUIObjectsFactory
};
var kro13_kk_guiObjects_popups_Popup = function(color,borderColor) {
	kro13_kk_guiObjects_Layable.call(this);
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 12;
	this.color = color;
	this.borderColor = borderColor;
};
$hxClasses["kro13.kk.guiObjects.popups.Popup"] = kro13_kk_guiObjects_popups_Popup;
kro13_kk_guiObjects_popups_Popup.__name__ = "kro13.kk.guiObjects.popups.Popup";
kro13_kk_guiObjects_popups_Popup.__super__ = kro13_kk_guiObjects_Layable;
kro13_kk_guiObjects_popups_Popup.prototype = $extend(kro13_kk_guiObjects_Layable.prototype,{
	build: function() {
		var materialConfig = { size : this.get_size(), color : this.color, borderColor : this.borderColor, borderWidth : 2};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.GUI(materialConfig);
	}
	,__class__: kro13_kk_guiObjects_popups_Popup
});
var kro13_kk_guiObjects_HUD = function(dataProvider,color,borderColor) {
	this.displayedDiff = 0;
	this.hPadding = 50;
	this.displayedScore = 0;
	kro13_kk_guiObjects_popups_Popup.call(this,color,borderColor);
	this.addComponent(new kro13_kk_components_Updater(this));
	this.dataProvider = dataProvider;
	this.addComponent(new kro13_kk_components_GameEventHandler());
	var gameEvent;
	if(this.componentsMap == null) {
		gameEvent = null;
	} else {
		var component = this.componentsMap.h[6];
		gameEvent = component;
	}
	var gameEvent1 = gameEvent;
	gameEvent1.addHandler($bind(this,this.onEvent));
};
$hxClasses["kro13.kk.guiObjects.HUD"] = kro13_kk_guiObjects_HUD;
kro13_kk_guiObjects_HUD.__name__ = "kro13.kk.guiObjects.HUD";
kro13_kk_guiObjects_HUD.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_guiObjects_HUD.__super__ = kro13_kk_guiObjects_popups_Popup;
kro13_kk_guiObjects_HUD.prototype = $extend(kro13_kk_guiObjects_popups_Popup.prototype,{
	build: function() {
		kro13_kk_guiObjects_popups_Popup.prototype.build.call(this);
		this.totalScoreText = new kro13_kk_guiObjects_TextField(11250647,76);
		this.transform.addChild(this.totalScoreText.transform);
		this.totalScoreText.build();
		this.setTotalScore();
		this.addEvacIcon = new kro13_kk_gameObjects_Renderable();
		var x = 120;
		var y = 120;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var addEvacIconMaterial = { size : this1, source : "images/btn_add_eagle.png", color : 11250647};
		this.addEvacIcon.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(addEvacIconMaterial);
		this.transform.addChild(this.addEvacIcon.transform);
		this.scoreText = new kro13_kk_guiObjects_TextField(11250647,76);
		this.transform.addChild(this.scoreText.transform);
		this.scoreText.build();
		var _this = this.scoreText;
		_this.materialConfig.text = "";
		_this.renderer.isValid = false;
		this.setTextPosition();
	}
	,update: function(dt) {
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var _g = e.firstStart;
			this.setTotalScore();
			this.setTextPosition();
			break;
		case 2:
			this.setTotalScore();
			this.setTextPosition();
			break;
		case 24:
			var score = e.score;
			this.emitScore(score);
			break;
		case 29:
			this.resetScore();
			break;
		default:
		}
	}
	,emitScore: function(val) {
		this.displayedScore += val;
		if(Math.abs(this.displayedScore) > 0) {
			this.scoreText.options.size = 56 + Math.round(20 * Math.min(200,Math.abs(this.displayedScore)) / 200);
			var _this = this.scoreText;
			var text = kro13_kk_utils_TextUtils.getColoredString(this.displayedScore,true);
			_this.materialConfig.text = text;
			_this.renderer.isValid = false;
			this.scoreText.renderer.isValid = false;
			this.setTextPosition();
		}
	}
	,resetScore: function() {
		this.displayedScore = 0;
		var _this = this.scoreText;
		_this.materialConfig.text = "";
		_this.renderer.isValid = false;
		this.setTotalScore();
		this.setTextPosition();
	}
	,setTextPosition: function() {
		var totalScoreSize = kro13_kk_utils_TextUtils.getTextRect(this.totalScoreText);
		var scoreSize = kro13_kk_utils_TextUtils.getTextRect(this.scoreText);
		var totalW = 120 + totalScoreSize.x + scoreSize.x + 10;
		this.addEvacIcon.setEvenPosition((this.get_size().x - totalW) * 0.5,4);
		this.totalScoreText.setEvenPosition(this.addEvacIcon.get_position().x + 120,(this.get_size().y - totalScoreSize.y) * 0.5 + 10);
		this.scoreText.setEvenPosition(this.totalScoreText.get_position().x + totalScoreSize.x + 10,(this.get_size().y - scoreSize.y) * 0.5 + 10);
	}
	,setTotalScore: function() {
		var _this = this.totalScoreText;
		var text = "" + this.dataProvider.getLocal().getNextRestartScore() + "/" + kro13_kk_utils_TextUtils.getColoredString(this.dataProvider.getLocal().scoreData.currentScore);
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
	}
	,__class__: kro13_kk_guiObjects_HUD
});
var kro13_kk_guiObjects_KKPreloader = function() {
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "KKPreloader";
	this.animPlayer = new kro13_kk_components_AnimPlayer();
	this.addComponent(this.animPlayer);
};
$hxClasses["kro13.kk.guiObjects.KKPreloader"] = kro13_kk_guiObjects_KKPreloader;
kro13_kk_guiObjects_KKPreloader.__name__ = "kro13.kk.guiObjects.KKPreloader";
kro13_kk_guiObjects_KKPreloader.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_KKPreloader.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		this.icon = new kro13_kk_gameObjects_Renderable();
		this.icon.name = "KKPreloader Icon";
		var x = 1;
		var y = 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		var iconSize = this2;
		var iconMaterialConfig = { size : iconSize, source : "images/board.png"};
		this.icon.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(iconMaterialConfig);
		var x = iconSize.x * 0.5;
		var y = iconSize.y * 0.5;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.icon.transform.origin = this1;
		var tmp = this.icon;
		var x = this.get_size().x;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 0.5;
		this2.y *= 0.5;
		tmp.set_position(this2);
		this.animPlayer.play(new kro13_kk_guiObjects_preloader_PreloaderRotate(this));
		this.transform.addChild(this.icon.transform);
	}
	,__class__: kro13_kk_guiObjects_KKPreloader
});
var kro13_kk_guiObjects_MainMenu = function(dataProvider,eventDispatcher) {
	this.doShowIap = false;
	this.isFirstStart = false;
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "main menu";
	this.eventDispatcher = eventDispatcher;
	this.dataProvider = dataProvider;
	this.restartController = new kro13_kk_RestartController(dataProvider,eventDispatcher);
	this.isNextAdBlocked = false;
};
$hxClasses["kro13.kk.guiObjects.MainMenu"] = kro13_kk_guiObjects_MainMenu;
kro13_kk_guiObjects_MainMenu.__name__ = "kro13.kk.guiObjects.MainMenu";
kro13_kk_guiObjects_MainMenu.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_MainMenu.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	showIap: function(doShow) {
		this.doShowIap = doShow;
		if(doShow) {
			this.showButtonIfPossible(this.btnIap);
		} else {
			this.btnIap.transform.set_visible(false);
		}
		this.alignButtons();
		haxe_Log.trace("" + (doShow == null ? "null" : "" + doShow),{ fileName : "src/kro13/kk/guiObjects/MainMenu.hx", lineNumber : 68, className : "kro13.kk.guiObjects.MainMenu", methodName : "showIap"});
	}
	,build: function() {
		kro13_kk_gameObjects_Transformable.prototype.build.call(this);
		var factory = kro13_kk_guiObjects_GUIObjectsFactory.get_instance();
		this.buttons = [];
		this.tutorButtons = [];
		var width = 900;
		var height = 0;
		this.btnPlay = factory.buildMainMenuButton($bind(this,this.onPlay),"",kro13_kk_utils_L.get_instance().BTN_PLAY,"Btn Play");
		this.buttons.push(this.btnPlay);
		this.tutorButtons.push(this.btnPlay);
		this.btnIap = factory.buildMainMenuButton($bind(this,this.onIap),"",kro13_kk_utils_L.get_instance().BTN_PREMIUM,"Btn Iap");
		this.buttons.push(this.btnIap);
		this.btnStats = factory.buildMainMenuButton($bind(this,this.onStats),"",kro13_kk_utils_L.get_instance().BTN_STATS,"Btn Stats");
		this.buttons.push(this.btnStats);
		this.btnSettings = factory.buildMainMenuButton($bind(this,this.onSettings),"",kro13_kk_utils_L.get_instance().BTN_SETTINGS,"Btn Settings");
		this.buttons.push(this.btnSettings);
		this.tutorButtons.push(this.btnSettings);
		this.btnHelp = factory.buildMainMenuButton($bind(this,this.onHelp),"",kro13_kk_utils_L.get_instance().BTN_HELP,"Btn Help");
		this.buttons.push(this.btnHelp);
		this.tutorButtons.push(this.btnHelp);
		this.btnTutor = factory.buildMainMenuButton($bind(this,this.onTutor),"",kro13_kk_utils_L.get_instance().BTN_TUTOR,"Btn Tutor");
		this.buttons.push(this.btnTutor);
		this.btnCredits = factory.buildMainMenuButton($bind(this,this.onCredits),"",kro13_kk_utils_L.get_instance().BTN_CREDITS,"Btn Credits");
		var _g = 0;
		var _g1 = this.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			this.transform.addChild(this.buttons[i].transform);
		}
		this.logo = new kro13_kk_gameObjects_Renderable();
		haxepunk_math_Vector2.setTo(this.logo.get_size(),900,150);
		var logoMaterialConf = { size : this.logo.get_size(), source : "images/logo2.png"};
		this.logo.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(logoMaterialConf);
		this.transform.addChild(this.logo.transform);
		this.signature = new kro13_kk_guiObjects_TextField(11250647,46,false,false);
		this.signature.build();
		var _this = this.signature;
		_this.materialConfig.text = "Game by Kro13";
		_this.renderer.isValid = false;
		this.transform.addChild(this.signature.transform);
		this.version = new kro13_kk_guiObjects_TextField(11250647,46,false,false);
		this.version.build();
		var _this = this.version;
		_this.materialConfig.text = kro13_kk_KKGame.version;
		_this.renderer.isValid = false;
		this.transform.addChild(this.version.transform);
		this.alignLogo();
		this.alignButtons();
		this.transform.onPositionChanged.callbacks.push($bind(this,this.alignLogo));
	}
	,expand: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			this.showButtonIfPossible(b);
		}
		this.alignButtons();
	}
	,collapse: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.transform.set_visible(false);
		}
	}
	,showButtonIfPossible: function(b) {
		var canShow = kro13_kk_data_EProfileTag.isTagged(5,this.dataProvider.getProfile()) || this.tutorButtons.indexOf(b) >= 0;
		if(b == this.btnIap) {
			b.transform.set_visible(canShow && this.doShowIap);
			return;
		}
		b.transform.set_visible(canShow);
	}
	,alignLogo: function(thisPos) {
		this.logo.setEvenPosition((this.btnPlay.get_size().x - this.logo.get_size().x) * 0.5,-Math.floor(this.get_position().y + this.logo.get_size().y) * 0.5);
		this.signature.setEvenPosition(this.btnPlay.get_position().x,this.logo.get_position().y + this.logo.get_size().y + 10);
		this.version.setEvenPosition(this.btnPlay.get_position().x + this.btnPlay.get_size().x - kro13_kk_utils_TextUtils.getTextRect(this.version).x,this.logo.get_position().y + this.logo.get_size().y + 10);
	}
	,alignButtons: function() {
		var j = 0;
		var _g = 0;
		var _g1 = this.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.buttons[i].transform.get_visible()) {
				this.buttons[i].setEvenPosition(0,50 * j + 120 * j);
				++j;
			}
		}
	}
	,onSettings: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.SETTINGS);
	}
	,onTutor: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.START_TUTOR);
	}
	,onPlay: function() {
		haxe_Log.trace("on play",{ fileName : "src/kro13/kk/guiObjects/MainMenu.hx", lineNumber : 215, className : "kro13.kk.guiObjects.MainMenu", methodName : "onPlay"});
		if(this.dataProvider.getProfile().restarts > 0) {
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.SHOW_ADS($bind(this,this.onAdsSuccess),$bind(this,this.onAdsError)));
		} else {
			this.restartController.tryRestart();
		}
	}
	,onAdsSuccess: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
	}
	,onAdsError: function(message) {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.ERROR(1,message,true));
	}
	,onAdsSkip: function() {
	}
	,onIap: function() {
		var _gthis = this;
		kro13_iap_IAPManager.get_instance().purchasePremium(function() {
			_gthis.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.MAIN_MENU);
		},function(e) {
			_gthis.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.ERROR(2,e,true));
		});
	}
	,onQuit: function() {
		lime_system_System.exit(0);
	}
	,onRestart: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.RESTART);
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
	}
	,onStats: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.STATS);
	}
	,onCredits: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.CREDITS);
	}
	,onSocial: function() {
		var url = "https://vk.com/kanyonkarvergroup";
		if(!kro13_kk_BonusManager.bonusCondition(this.dataProvider)) {
			url += kro13_kk_BonusManager.bonusPostUrl();
		}
		var socialRequest = new openfl_net_URLRequest(url);
		openfl_Lib.getURL(socialRequest,"_blank");
	}
	,onInvite: function() {
	}
	,onResetConfirm: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.RESET_PROFILE);
	}
	,onHelp: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.HELP);
	}
	,__class__: kro13_kk_guiObjects_MainMenu
});
var kro13_kk_guiObjects_PlayerHUDBase = function(dataProvider) {
	this.ticksVisible = false;
	this.displayedScore = 0;
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "hud base";
	this.dataProvider = dataProvider;
	this.addComponent(new kro13_kk_components_Updater(this));
};
$hxClasses["kro13.kk.guiObjects.PlayerHUDBase"] = kro13_kk_guiObjects_PlayerHUDBase;
kro13_kk_guiObjects_PlayerHUDBase.__name__ = "kro13.kk.guiObjects.PlayerHUDBase";
kro13_kk_guiObjects_PlayerHUDBase.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_guiObjects_PlayerHUDBase.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_PlayerHUDBase.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		this.mandala1 = new kro13_kk_gameObjects_Renderable();
		var x = 9;
		var y = 9;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.mandala1.transform.set_size(this2);
		var this1 = this.mandala1.transform.get_size();
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 0.5;
		this2.y *= 0.5;
		this.mandala1.transform.origin = this2;
		var tmp = this.mandala1.get_size();
		this.mandala1.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE({ source : "images/mandala1.png", size : tmp, color : 16777215});
		this.transform.addChild(this.mandala1.transform);
		this.mandala2 = new kro13_kk_gameObjects_Renderable();
		var x = 9;
		var y = 9;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.mandala2.transform.set_size(this2);
		var this1 = this.mandala1.transform.get_size();
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 0.5;
		this2.y *= 0.5;
		this.mandala2.transform.origin = this2;
		var tmp = this.mandala2.get_size();
		this.mandala2.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE({ source : "images/mandala2.png", size : tmp});
		this.transform.addChild(this.mandala2.transform);
		this.mandala3 = new kro13_kk_gameObjects_Renderable();
		var x = 9;
		var y = 9;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 40;
		this2.y *= 40;
		this.mandala3.transform.set_size(this2);
		var this1 = this.mandala1.transform.get_size();
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 0.5;
		this2.y *= 0.5;
		this.mandala3.transform.origin = this2;
		var tmp = this.mandala1.get_size();
		this.mandala3.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE({ source : "images/mandala3.png", size : tmp});
		this.transform.addChild(this.mandala3.transform);
		var phi = 2 * Math.PI / 4;
		this.smallTicks = [];
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var smallTick = new kro13_kk_gameObjects_Renderable();
			var x = 34;
			var y = 34;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			smallTick.set_size(this1);
			var this2 = smallTick.get_size();
			var x1 = this2.x;
			var y1 = this2.y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var this3 = { x : x1, y : y1};
			var this4 = this3;
			this4.x *= 0.5;
			this4.y *= 0.5;
			smallTick.transform.origin = this4;
			var tmp = smallTick.get_size();
			smallTick.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE({ size : tmp, source : "images/small_fill.png"});
			var r = 148;
			var phiI = phi * (i + 1);
			var xI = Math.round(r * Math.sin(phiI));
			var yI = Math.round(r * Math.cos(phiI));
			haxepunk_math_Vector2.setTo(smallTick.get_position(),xI,yI);
			this.transform.addChild(smallTick.transform);
			this.smallTicks.push(smallTick);
		}
		this.bigTicks = [];
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var bigTick = new kro13_kk_gameObjects_Renderable();
			var x = 34;
			var y = 34;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			bigTick.set_size(this1);
			var this2 = bigTick.get_size();
			var x1 = this2.x;
			var y1 = this2.y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var this3 = { x : x1, y : y1};
			var this4 = this3;
			this4.x *= 0.5;
			this4.y *= 0.5;
			bigTick.transform.origin = this4;
			var tmp = bigTick.get_size();
			bigTick.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE({ size : tmp, source : "images/big_fill.png"});
			var r = 175;
			var phiI = phi * (i + 0.5);
			var xI = Math.round(r * Math.sin(phiI));
			var yI = Math.round(r * Math.cos(phiI));
			haxepunk_math_Vector2.setTo(bigTick.get_position(),xI,yI);
			this.transform.addChild(bigTick.transform);
			this.bigTicks.push(bigTick);
		}
	}
	,update: function(dt) {
		var bonusTick = this.dataProvider.getLocal().scoreData.bonusCounter;
		this.mandala1.transform.set_alpha(0);
		this.mandala2.transform.set_alpha(0);
		this.mandala3.transform.set_alpha(0);
		if(bonusTick >= 1) {
			this.mandala1.transform.set_alpha(0.4);
		}
		if(bonusTick >= 2) {
			this.mandala1.transform.set_alpha(1);
		}
		if(bonusTick >= 3) {
			this.mandala2.transform.set_alpha(0.4);
		}
		if(bonusTick >= 5) {
			this.mandala2.transform.set_alpha(1);
		}
		if(this.dataProvider.getLocal().scoreData.avalancheBonus > 0) {
			this.mandala3.transform.set_alpha(1);
		}
		var phi = 90.;
		var rotationSmall = this.dataProvider.getLocal().scoreData.totalRotation;
		var sign = rotationSmall >= 0 ? 1 : -1;
		var rotationBig = Math.max(Math.abs(this.dataProvider.getLocal().scoreData.totalRotation) - 360,0);
		rotationBig = sign * rotationBig;
		var rotatedSmallTicks = Math.min(Math.floor(Math.abs(rotationSmall / phi)),this.bigTicks.length) | 0;
		var rotatedBigTicks = Math.min(Math.floor(Math.abs(rotationBig / phi)),this.smallTicks.length) | 0;
		var _g = 0;
		var _g1 = this.smallTicks.length;
		while(_g < _g1) {
			var i = _g++;
			var smallT = sign > 0 ? this.smallTicks[i] : this.smallTicks[this.smallTicks.length - i - 1];
			if(this.ticksVisible && i < rotatedSmallTicks) {
				smallT.transform.set_alpha(1);
			} else {
				smallT.transform.set_alpha(0);
			}
		}
		var _g = 0;
		var _g1 = this.bigTicks.length;
		while(_g < _g1) {
			var j = _g++;
			var bigT = sign > 0 ? this.bigTicks[j] : this.bigTicks[this.bigTicks.length - j - 1];
			if(this.ticksVisible && j < rotatedBigTicks) {
				bigT.transform.set_alpha(1);
			} else {
				bigT.transform.set_alpha(0);
			}
		}
	}
	,emitScore: function(val) {
	}
	,resetScore: function() {
	}
	,showRotation: function() {
		this.ticksVisible = true;
	}
	,hideRotation: function() {
		this.ticksVisible = false;
	}
	,__class__: kro13_kk_guiObjects_PlayerHUDBase
});
var kro13_kk_guiObjects_PlayerHUD = function(dataProvider) {
	this.expandScale = 0;
	kro13_kk_guiObjects_PlayerHUDBase.call(this,dataProvider);
	this.name = "hud";
	this.addComponent(new kro13_kk_components_GameEventHandler());
	var tmp;
	if(this.componentsMap == null) {
		tmp = null;
	} else {
		var component = this.componentsMap.h[6];
		tmp = component;
	}
	this.gameEvent = tmp;
	this.gameEvent.addHandler($bind(this,this.onEvent));
};
$hxClasses["kro13.kk.guiObjects.PlayerHUD"] = kro13_kk_guiObjects_PlayerHUD;
kro13_kk_guiObjects_PlayerHUD.__name__ = "kro13.kk.guiObjects.PlayerHUD";
kro13_kk_guiObjects_PlayerHUD.__super__ = kro13_kk_guiObjects_PlayerHUDBase;
kro13_kk_guiObjects_PlayerHUD.prototype = $extend(kro13_kk_guiObjects_PlayerHUDBase.prototype,{
	update: function(dt) {
		kro13_kk_guiObjects_PlayerHUDBase.prototype.update.call(this,dt);
		if(this.expandScale > 0) {
			this.expand.update(dt);
			this.transform.set_scale(this.expand.getValue());
		}
	}
	,onEvent: function(e) {
		var _gthis = this;
		switch(e._hx_index) {
		case 0:
			var _g = e.firstStart;
			this.hideRotation();
			break;
		case 20:
			var _g = e.jumpTime;
			this.showRotation();
			break;
		case 21:
			this.hideRotation();
			break;
		case 29:
			this.resetScore();
			break;
		case 40:
			var reducer = e.reducer;
			if(reducer > this.expandScale) {
				this.expandScale = reducer;
				this.expand = new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(1.8,1.8 + 0.6 * this.expandScale * this.expandScale,0.1 * this.expandScale),new kro13_kk_tween_FloatTween(1.8 + 0.6 * this.expandScale * this.expandScale,1.8,0.1 * this.expandScale,null,function() {
					_gthis.expandScale = 0;
				})]);
			}
			break;
		default:
		}
	}
	,__class__: kro13_kk_guiObjects_PlayerHUD
});
var kro13_kk_guiObjects_QuickMenu = function(dataProvider,eventDispatcher) {
	this.isStuck = false;
	this.isPlaying = false;
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "Quick Menu";
	this.eventDispatcher = eventDispatcher;
	this.dataProvider = dataProvider;
	this.factory = kro13_kk_guiObjects_GUIObjectsFactory.get_instance();
	this.eventHandler = new kro13_kk_components_GameEventHandler();
	this.addComponent(this.eventHandler);
	this.eventHandler.addHandler($bind(this,this.onEvent));
	var x = 104;
	var y = 104;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	this.borderMaterialConf = { size : this1, color : 16777215};
	this.animPlayer = new kro13_kk_components_AnimPlayer();
	this.quickMenuHelp = new kro13_kk_guiObjects_anims_QuickMenuHelp(this);
	this.addComponent(this.animPlayer);
	this.restartController = new kro13_kk_RestartController(dataProvider,eventDispatcher);
};
$hxClasses["kro13.kk.guiObjects.QuickMenu"] = kro13_kk_guiObjects_QuickMenu;
kro13_kk_guiObjects_QuickMenu.__name__ = "kro13.kk.guiObjects.QuickMenu";
kro13_kk_guiObjects_QuickMenu.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_QuickMenu.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		var buttons = [];
		this.btnMenu = this.factory.buildSquareButton($bind(this,this.onMenu),"images/btn_menu.png","Btn Menu");
		buttons.push(this.btnMenu);
		this.btnRestart = this.factory.buildRestartsButton($bind(this,this.onRestart),this.dataProvider,"Btn Restart");
		buttons.push(this.btnRestart);
		var btnY = 0.;
		var _g = 0;
		var _g1 = buttons.length;
		while(_g < _g1) {
			var i = _g++;
			var prevH = i > 0 ? buttons[i - 1].get_size().y : 0;
			btnY += prevH + 50;
			var x = 0;
			var y = btnY;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			buttons[i].set_position(this1);
			this.transform.addChild(buttons[i].transform);
		}
		kro13_kk_gameObjects_Transformable.prototype.build.call(this);
	}
	,onSpecial: function() {
		this.dataProvider.getLocal().scoreData.speedBonus = 3;
		this.dataProvider.getLocal().scoreData.bonusCounter = 5;
	}
	,expand: function() {
		this.btnMenu.transform.set_visible(true);
		this.btnRestart.transform.set_visible(true);
	}
	,collapse: function() {
		this.btnMenu.transform.set_visible(false);
		this.btnRestart.transform.set_visible(false);
	}
	,startStuckHelp: function() {
		this.btnRestart.startBlink();
	}
	,stopStuckHelp: function() {
		this.btnRestart.stopBlink();
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var _g = e.firstStart;
			this.stopStuckHelp();
			this.isStuck = false;
			break;
		case 1:
			this.stopStuckHelp();
			this.isStuck = false;
			break;
		case 2:
			if(!this.isPlaying) {
				this.isPlaying = true;
			}
			if(this.isStuck) {
				this.startStuckHelp();
			}
			break;
		case 3:
			if(this.isPlaying) {
				this.isPlaying = false;
			}
			this.stopStuckHelp();
			break;
		case 22:
			var avalanche = e.avalanche;
			this.startStuckHelp();
			this.isStuck = true;
			break;
		case 23:
			this.stopStuckHelp();
			this.isStuck = false;
			break;
		default:
		}
	}
	,onMenu: function() {
		if(this.isPlaying) {
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.MAIN_MENU);
		} else {
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
		}
	}
	,onPlayPause: function() {
		if(!this.isPlaying) {
			this.onPlay();
		} else {
			this.onPause();
		}
	}
	,onPlay: function() {
		this.isPlaying = true;
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
	}
	,onPause: function() {
		this.isPlaying = false;
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
	}
	,onRestart: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
		if(this.dataProvider.getProfile().restarts > 0) {
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.CONFIRM(kro13_kk_utils_L.get_instance().RESTART,$bind(this,this.onRestartConfirm),$bind(this,this.onRestartCancel)));
		} else {
			this.restartController.tryRestart();
		}
	}
	,onStartNew: function() {
		this.restartController.tryStartNew();
	}
	,onRestartConfirm: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.ROLLBACK(false));
	}
	,onRestartCancel: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
	}
	,__class__: kro13_kk_guiObjects_QuickMenu
});
var kro13_kk_guiObjects_RestartsButton = function(color,borderColor,labelSize,dataProvider) {
	kro13_kk_guiObjects_Button.call(this,color,borderColor,labelSize);
	this.name = "button";
	this.layout.direction = "vertical";
	this.dataProvider = dataProvider;
	this.addComponent(new kro13_kk_components_Updater(this));
};
$hxClasses["kro13.kk.guiObjects.RestartsButton"] = kro13_kk_guiObjects_RestartsButton;
kro13_kk_guiObjects_RestartsButton.__name__ = "kro13.kk.guiObjects.RestartsButton";
kro13_kk_guiObjects_RestartsButton.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_guiObjects_RestartsButton.__super__ = kro13_kk_guiObjects_Button;
kro13_kk_guiObjects_RestartsButton.prototype = $extend(kro13_kk_guiObjects_Button.prototype,{
	build: function() {
		kro13_kk_guiObjects_Button.prototype.build.call(this);
		if(this.label == null) {
			this.label = new kro13_kk_guiObjects_TextField(this.borderColor,this.labelSize,false,true,null,this.color);
			this.label.build();
			this.transform.addChild(this.label.transform);
		}
		var _this = this.label;
		_this.materialConfig.text = "";
		_this.renderer.isValid = false;
		this.validateLayout();
		this.label.renderer.isValid = false;
		this.setIcon("images/btn_eagle.png");
		var x = 90;
		var y = 58;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var x = 1;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this2 = { x : x, y : y};
		this.fillMaterialConfig = { size : this1, color : this.color, clipSize : this2};
		this.fill = new kro13_kk_gameObjects_Renderable();
		var x = 15;
		var y = 30;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.fill.transform.set_position(this1);
		this.fill.renderer.material = kro13_kk_components_renderer_materials_EMaterial.CLIP_RECTANGLE(this.fillMaterialConfig);
		this.icon.transform.addChild(this.fill.transform);
		this.contour = new kro13_kk_gameObjects_Renderable();
		var x = 120;
		var y = 120;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.contourMaterialConfig = { size : this1, source : "images/btn_eagle_contour.png", color : this.borderColor};
		this.contour.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(this.contourMaterialConfig);
		var this1 = { x : 0, y : 0};
		this.contour.set_position(this1);
		this.icon.transform.addChild(this.contour.transform);
	}
	,update: function(dt) {
		var text = "x" + this.dataProvider.getProfile().restarts;
		if(this.label == null) {
			this.label = new kro13_kk_guiObjects_TextField(this.borderColor,this.labelSize,false,true,null,this.color);
			this.label.build();
			this.transform.addChild(this.label.transform);
		}
		var _this = this.label;
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
		this.validateLayout();
		this.label.renderer.isValid = false;
		var tmp = this.dataProvider.getProfile().restartHP / 90;
		this.fillMaterialConfig.clipSize.y = 1 - tmp;
		this.fill.renderer.isValid = false;
	}
	,altColor: function() {
		kro13_kk_guiObjects_Button.prototype.altColor.call(this);
		this.fillMaterialConfig.color = this.borderColor;
		this.fill.renderer.isValid = false;
		this.contourMaterialConfig.color = this.color;
		this.contour.renderer.isValid = false;
	}
	,normColor: function() {
		kro13_kk_guiObjects_Button.prototype.normColor.call(this);
		this.fillMaterialConfig.color = this.color;
		this.fill.renderer.isValid = false;
		this.contourMaterialConfig.color = this.borderColor;
		this.contour.renderer.isValid = false;
	}
	,__class__: kro13_kk_guiObjects_RestartsButton
});
var kro13_kk_guiObjects_RotationDisplay = function(scoreData) {
	this.fullDelta = 8;
	this.fullDeltaBig = 10;
	this.borderWIdth = 4;
	var this1 = { x : 16, y : 16};
	this.tickSize = this1;
	var this1 = { x : 22, y : 22};
	this.bigTickSize = this1;
	this.ticksCount = 16;
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "rotate display";
	this.scoreData = scoreData;
};
$hxClasses["kro13.kk.guiObjects.RotationDisplay"] = kro13_kk_guiObjects_RotationDisplay;
kro13_kk_guiObjects_RotationDisplay.__name__ = "kro13.kk.guiObjects.RotationDisplay";
kro13_kk_guiObjects_RotationDisplay.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_guiObjects_RotationDisplay.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_RotationDisplay.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		this.ticks = [];
		this.bigTickMC = { size : this.bigTickSize, color : 16777215, borderColor : 11250647, borderWidth : this.borderWIdth};
		var this1 = this.bigTickSize;
		var x = this.fullDeltaBig;
		var y = this.fullDeltaBig;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var other_x = x;
		var other_y = y;
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x += other_x;
		this2.y += other_y;
		this.bigFullTickMC = { size : this2, color : 65280, borderColor : 11250647, borderWidth : this.borderWIdth};
		this.tickMC = { size : this.tickSize, color : 16777215, borderColor : 11250647, borderWidth : this.borderWIdth};
		var this1 = this.tickSize;
		var x = this.fullDelta;
		var y = this.fullDelta;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var other_x = x;
		var other_y = y;
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x += other_x;
		this2.y += other_y;
		this.fullTickMC = { size : this2, color : 65280, borderColor : 11250647, borderWidth : this.borderWIdth};
		this.bigTickMaterial = kro13_kk_components_renderer_materials_EMaterial.GUI(this.bigTickMC);
		this.bigFullTickMaterial = kro13_kk_components_renderer_materials_EMaterial.GUI(this.bigFullTickMC);
		this.tickMaterial = kro13_kk_components_renderer_materials_EMaterial.GUI(this.tickMC);
		this.fullTickMaterial = kro13_kk_components_renderer_materials_EMaterial.GUI(this.fullTickMC);
		var phi = 2 * Math.PI / this.ticksCount;
		var r = 152;
		var _g = 0;
		var _g1 = this.ticksCount;
		while(_g < _g1) {
			var i = _g++;
			var phiI = phi * i;
			var xI = Math.round(r * Math.sin(phiI));
			var yI = Math.round(r * Math.cos(phiI));
			var tick = new kro13_kk_gameObjects_Renderable();
			var _this = tick.renderer;
			_this.isLayerValid = false;
			_this._layer = 1;
			if(phi * i % Math.PI == 0) {
				tick.renderer.material = this.bigTickMaterial;
				var x = Math.floor(this.bigTickSize.x * 0.5);
				var y = Math.floor(this.bigTickSize.y * 0.5);
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var this1 = { x : x, y : y};
				tick.transform.origin = this1;
			} else {
				tick.renderer.material = this.tickMaterial;
				var x1 = Math.floor(this.tickSize.x * 0.5);
				var y1 = Math.floor(this.tickSize.y * 0.5);
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var this2 = { x : x1, y : y1};
				tick.transform.origin = this2;
			}
			tick.setEvenPosition(xI,yI);
			this.transform.addChild(tick.transform);
			this.ticks.push(tick);
		}
	}
	,update: function(dt) {
		var phi = 360 / this.ticksCount;
		var rotation = this.scoreData.totalRotation;
		var sign = rotation >= 0 ? 1 : -1;
		var rotatedTicks = Math.floor(Math.abs(rotation / phi));
		var rotatedCount = Math.floor(rotatedTicks % this.ticksCount);
		if(rotatedCount == 0 && rotatedTicks > 0) {
			rotatedCount = this.ticksCount;
		}
		if(rotatedCount < this.ticksCount) {
			this.emptyTick(0);
			if(sign > 0) {
				var _g = 1;
				var _g1 = rotatedCount + 1;
				while(_g < _g1) {
					var i = _g++;
					this.fillTick(i);
				}
				var _g = rotatedCount + 1;
				var _g1 = this.ticksCount;
				while(_g < _g1) {
					var j = _g++;
					this.emptyTick(j);
				}
			} else {
				var _g = 1;
				var _g1 = rotatedCount + 1;
				while(_g < _g1) {
					var i = _g++;
					this.fillTick(this.ticksCount - i);
				}
				var _g = rotatedCount + 1;
				var _g1 = this.ticksCount;
				while(_g < _g1) {
					var j = _g++;
					this.emptyTick(this.ticksCount - j);
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.ticksCount;
			while(_g < _g1) {
				var i = _g++;
				this.fillTick(i);
			}
		}
	}
	,fillTick: function(i) {
		if(i % (this.ticksCount * 0.5) == 0) {
			this.ticks[i].renderer.material = this.bigFullTickMaterial;
			var x = Math.floor(this.bigTickSize.x * 0.5 + this.fullDeltaBig * 0.5);
			var y = Math.floor(this.bigTickSize.y * 0.5 + this.fullDeltaBig * 0.5);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			this.ticks[i].transform.origin = this1;
		} else {
			this.ticks[i].renderer.material = this.fullTickMaterial;
			var x = Math.floor(this.tickSize.x * 0.5 + this.fullDelta * 0.5);
			var y = Math.floor(this.tickSize.y * 0.5 + this.fullDelta * 0.5);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			this.ticks[i].transform.origin = this1;
		}
		this.ticks[i].renderer.isValid = false;
	}
	,emptyTick: function(j) {
		if(j % (this.ticksCount * 0.5) == 0) {
			this.ticks[j].renderer.material = this.bigTickMaterial;
			var x = Math.floor(this.bigTickSize.x * 0.5);
			var y = Math.floor(this.bigTickSize.y * 0.5);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			this.ticks[j].transform.origin = this1;
		} else {
			this.ticks[j].renderer.material = this.tickMaterial;
			var x = Math.floor(this.tickSize.x * 0.5);
			var y = Math.floor(this.tickSize.y * 0.5);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			this.ticks[j].transform.origin = this1;
		}
		this.ticks[j].renderer.isValid = false;
	}
	,__class__: kro13_kk_guiObjects_RotationDisplay
});
var kro13_kk_guiObjects_SpeedBar = function(scoreData) {
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "speed";
	this.scoreData = scoreData;
};
$hxClasses["kro13.kk.guiObjects.SpeedBar"] = kro13_kk_guiObjects_SpeedBar;
kro13_kk_guiObjects_SpeedBar.__name__ = "kro13.kk.guiObjects.SpeedBar";
kro13_kk_guiObjects_SpeedBar.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_guiObjects_SpeedBar.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_SpeedBar.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		var sizeX = 0;
		this.tickFills = [];
		var x = 204;
		var y = 40;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var borderSize = this1;
		sizeX += 204;
		var borderMaterialConfig = { size : borderSize, color : 16777215, borderColor : 11250647, borderWidth : 4};
		var border = new kro13_kk_gameObjects_Renderable();
		border.name = "border";
		var _this = border.renderer;
		_this.isLayerValid = false;
		_this._layer = 1;
		border.renderer.material = kro13_kk_components_renderer_materials_EMaterial.GUI(borderMaterialConfig);
		this.transform.addChild(border.transform);
		var x = borderSize.x - borderMaterialConfig.borderWidth * 2;
		var y = borderSize.y - borderMaterialConfig.borderWidth * 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var x = 0.5;
		var y = 1;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this2 = { x : x, y : y};
		this.speedFillMaterialConfig = { size : this1, color : 65280, clipSize : this2};
		this.speedFill = new kro13_kk_gameObjects_Renderable();
		this.speedFill.name = "fill";
		var _this = this.speedFill.renderer;
		_this.isLayerValid = false;
		_this._layer = 1;
		var x = borderMaterialConfig.borderWidth;
		var y = borderMaterialConfig.borderWidth;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.speedFill.transform.set_position(this1);
		this.speedFill.renderer.material = kro13_kk_components_renderer_materials_EMaterial.CLIP_RECTANGLE(this.speedFillMaterialConfig);
		this.transform.addChild(this.speedFill.transform);
		var x = borderMaterialConfig.borderWidth;
		var y = 40;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var speedTickMaterial = { size : this1, color : 11250647};
		var critSpeedTick = new kro13_kk_gameObjects_Renderable();
		critSpeedTick.name = "crit tick";
		var _this = critSpeedTick.renderer;
		_this.isLayerValid = false;
		_this._layer = 1;
		var x = borderSize.x * 0.5;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		critSpeedTick.transform.set_position(this1);
		critSpeedTick.renderer.material = kro13_kk_components_renderer_materials_EMaterial.RECTANGLE(speedTickMaterial);
		this.transform.addChild(critSpeedTick.transform);
		var x = 22;
		var y = 40;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var bonusTickSize = this1;
		var bonusTickMaterialConfig = { size : bonusTickSize, color : 16777215, borderColor : 11250647, borderWidth : borderMaterialConfig.borderWidth};
		var x = bonusTickSize.x - borderMaterialConfig.borderWidth * 2;
		var y = bonusTickSize.y - borderMaterialConfig.borderWidth * 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var bonusFillMaterialConfig = { size : this1, color : 65280};
		var tickGap = -4;
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			sizeX += bonusTickSize.x + tickGap;
			var bonusTick = new kro13_kk_gameObjects_Renderable();
			bonusTick.name = "bonus tick " + i;
			var _this = bonusTick.renderer;
			_this.isLayerValid = false;
			_this._layer = 1;
			bonusTick.renderer.material = kro13_kk_components_renderer_materials_EMaterial.GUI(bonusTickMaterialConfig);
			var x = borderSize.x + tickGap * (i + 1) + bonusTickSize.x * i;
			var y = 0;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			bonusTick.transform.set_position(this1);
			this.transform.addChild(bonusTick.transform);
			var bonusTickFill = new kro13_kk_gameObjects_Renderable();
			bonusTickFill.name = "bonus fill " + i;
			var _this1 = bonusTickFill.renderer;
			_this1.isLayerValid = false;
			_this1._layer = 1;
			bonusTickFill.renderer.material = kro13_kk_components_renderer_materials_EMaterial.RECTANGLE(bonusFillMaterialConfig);
			var bonusTickFill1 = bonusTickFill.transform;
			var this2 = bonusTick.transform.get_position();
			var x1 = borderMaterialConfig.borderWidth;
			var y1 = borderMaterialConfig.borderWidth;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var other_x = x1;
			var other_y = y1;
			var x2 = this2.x;
			var y2 = this2.y;
			if(y2 == null) {
				y2 = 0;
			}
			if(x2 == null) {
				x2 = 0;
			}
			var this3 = { x : x2, y : y2};
			var this4 = this3;
			this4.x += other_x;
			this4.y += other_y;
			bonusTickFill1.set_position(this4);
			this.transform.addChild(bonusTickFill.transform);
			this.tickFills.push(bonusTickFill);
		}
		var x = sizeX;
		var y = 24;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.set_size(this1);
	}
	,update: function(dt) {
		this.speedFillMaterialConfig.clipSize.x = this.scoreData.speedRatio;
		if(this.scoreData.speedRatio < 0.5) {
			this.speedFillMaterialConfig.color = 13421798;
		} else {
			this.speedFillMaterialConfig.color = 65280;
		}
		this.speedFill.renderer.isValid = false;
		var counter = 0;
		if(this.scoreData.bonusCounter <= 5) {
			counter = this.scoreData.bonusCounter;
		} else {
			counter = 5;
		}
		var _g = 0;
		var _g1 = counter;
		while(_g < _g1) {
			var i = _g++;
			this.tickFills[i].transform.set_visible(true);
			this.tickFills[i].renderer.isValid = false;
		}
		var _g = counter;
		var _g1 = 5;
		while(_g < _g1) {
			var i = _g++;
			this.tickFills[i].transform.set_visible(false);
			this.tickFills[i].renderer.isValid = false;
		}
	}
	,__class__: kro13_kk_guiObjects_SpeedBar
});
var kro13_kk_guiObjects_TextField = function(color,fontSize,wordWrap,centerOrigin,align,altColor) {
	if(align == null) {
		align = "left";
	}
	if(centerOrigin == null) {
		centerOrigin = false;
	}
	if(wordWrap == null) {
		wordWrap = false;
	}
	if(fontSize == null) {
		fontSize = 60;
	}
	kro13_kk_guiObjects_Layable.call(this);
	this.color = color;
	if(altColor != null) {
		this.aColor = altColor;
	} else {
		this.aColor = color;
	}
	this.name = "text";
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 1;
	this.options = { font : "fonts/" + "Norse-Bold-ru.fnt", size : fontSize, format : 1, wordWrap : wordWrap, color : color, align : openfl_text_TextFormatAlign.fromString(align)};
	this.centerOrigin = centerOrigin;
};
$hxClasses["kro13.kk.guiObjects.TextField"] = kro13_kk_guiObjects_TextField;
kro13_kk_guiObjects_TextField.__name__ = "kro13.kk.guiObjects.TextField";
kro13_kk_guiObjects_TextField.__super__ = kro13_kk_guiObjects_Layable;
kro13_kk_guiObjects_TextField.prototype = $extend(kro13_kk_guiObjects_Layable.prototype,{
	setText: function(text) {
		this.materialConfig.text = text;
		this.renderer.isValid = false;
	}
	,setSize: function(val) {
		this.options.size = val;
	}
	,build: function() {
		this.materialConfig = { options : this.options, text : "", centerOrigin : this.centerOrigin, width : this.get_size().x, height : this.get_size().y};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.TEXT(this.materialConfig);
	}
	,altColor: function() {
		this.materialConfig.options.color = this.aColor;
		this.renderer.isValid = false;
	}
	,normColor: function() {
		this.materialConfig.options.color = this.color;
		this.renderer.isValid = false;
	}
	,__class__: kro13_kk_guiObjects_TextField
});
var kro13_kk_guiObjects_anims_ButtonBlink = function(button) {
	this.scaleSize = 0.15;
	kro13_kk_components_animation_AbstractAnimation.call(this);
	this.button = button;
	var x = button.get_position().x;
	var y = button.get_position().y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	this.normalPos = this1;
	var this1 = { x : 0, y : 0};
	this.scaledPos = this1;
	var tmp = this.normalPos.x - button.get_size().x * this.scaleSize * 0.5;
	this.scaledPos.x = Math.round(tmp);
	var tmp = this.normalPos.y - button.get_size().y * this.scaleSize * 0.5;
	this.scaledPos.y = Math.round(tmp);
};
$hxClasses["kro13.kk.guiObjects.anims.ButtonBlink"] = kro13_kk_guiObjects_anims_ButtonBlink;
kro13_kk_guiObjects_anims_ButtonBlink.__name__ = "kro13.kk.guiObjects.anims.ButtonBlink";
kro13_kk_guiObjects_anims_ButtonBlink.__super__ = kro13_kk_components_animation_AbstractAnimation;
kro13_kk_guiObjects_anims_ButtonBlink.prototype = $extend(kro13_kk_components_animation_AbstractAnimation.prototype,{
	update: function(dt) {
		if(this.timer >= 2) {
			this.button.materialConfig.size.x = this.button.get_size().x;
			this.button.materialConfig.size.y = this.button.get_size().y;
			this.button.validateLayout();
			this.button.renderer.isValid = false;
			this.button.transform.set_position(this.normalPos);
			this.timer = 0;
		}
		if(this.timer >= 1) {
			var tmp = this.button.get_size().x;
			this.button.materialConfig.size.x = tmp * (1 + this.scaleSize);
			var tmp = this.button.get_size().y;
			this.button.materialConfig.size.y = tmp * (1 + this.scaleSize);
			this.button.validateLayout();
			this.button.renderer.isValid = false;
			this.button.transform.set_position(this.scaledPos);
		}
		kro13_kk_components_animation_AbstractAnimation.prototype.update.call(this,dt);
	}
	,start: function() {
		kro13_kk_components_animation_AbstractAnimation.prototype.start.call(this);
		var x = this.button.get_position().x;
		var y = this.button.get_position().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.normalPos = this1;
		var this1 = { x : 0, y : 0};
		this.scaledPos = this1;
		var tmp = this.normalPos.x - this.button.get_size().x * this.scaleSize * 0.5;
		this.scaledPos.x = Math.round(tmp);
		var tmp = this.normalPos.y - this.button.get_size().y * this.scaleSize * 0.5;
		this.scaledPos.y = Math.round(tmp);
	}
	,stop: function() {
		kro13_kk_components_animation_AbstractAnimation.prototype.stop.call(this);
		this.button.materialConfig.size.x = this.button.get_size().x;
		this.button.materialConfig.size.y = this.button.get_size().y;
		this.button.validateLayout();
		this.button.renderer.isValid = false;
		this.button.transform.set_position(this.normalPos);
	}
	,enlarge: function() {
		var tmp = this.button.get_size().x;
		this.button.materialConfig.size.x = tmp * (1 + this.scaleSize);
		var tmp = this.button.get_size().y;
		this.button.materialConfig.size.y = tmp * (1 + this.scaleSize);
		this.button.validateLayout();
		this.button.renderer.isValid = false;
		this.button.transform.set_position(this.scaledPos);
	}
	,shrink: function() {
		this.button.materialConfig.size.x = this.button.get_size().x;
		this.button.materialConfig.size.y = this.button.get_size().y;
		this.button.validateLayout();
		this.button.renderer.isValid = false;
		this.button.transform.set_position(this.normalPos);
	}
	,__class__: kro13_kk_guiObjects_anims_ButtonBlink
});
var kro13_kk_guiObjects_anims_QuickMenuHelp = function(menu) {
	kro13_kk_components_animation_AbstractAnimation.call(this);
	this.menu = menu;
};
$hxClasses["kro13.kk.guiObjects.anims.QuickMenuHelp"] = kro13_kk_guiObjects_anims_QuickMenuHelp;
kro13_kk_guiObjects_anims_QuickMenuHelp.__name__ = "kro13.kk.guiObjects.anims.QuickMenuHelp";
kro13_kk_guiObjects_anims_QuickMenuHelp.__super__ = kro13_kk_components_animation_AbstractAnimation;
kro13_kk_guiObjects_anims_QuickMenuHelp.prototype = $extend(kro13_kk_components_animation_AbstractAnimation.prototype,{
	start: function() {
		kro13_kk_components_animation_AbstractAnimation.prototype.start.call(this);
		this.btn1 = this.menu.btnRestart;
		this.btn2 = this.menu.btnStartNew;
	}
	,update: function(dt) {
		if(this.timer == 0) {
			this.btn1.startBlink();
		}
		if(this.timer >= 1 && this.timer <= 1.5) {
			this.btn2.startBlink();
		}
		kro13_kk_components_animation_AbstractAnimation.prototype.update.call(this,dt);
	}
	,stop: function() {
		this.btn1.stopBlink();
		this.btn2.stopBlink();
		kro13_kk_components_animation_AbstractAnimation.prototype.stop.call(this);
	}
	,__class__: kro13_kk_guiObjects_anims_QuickMenuHelp
});
var kro13_kk_guiObjects_effects_Snow = function(dataProvider,frequency,scale,alpha,duration) {
	if(duration == null) {
		duration = 20;
	}
	if(alpha == null) {
		alpha = 0.8;
	}
	if(scale == null) {
		scale = 0.8;
	}
	if(frequency == null) {
		frequency = 0.5;
	}
	kro13_kk_gameObjects_Renderable.call(this);
	this.dataProvider = dataProvider;
	this.name = "Snow Fx";
	this.type = 5;
	var _this = this.renderer;
	_this.isLayerValid = false;
	_this._layer = 0;
	this.particles = new kro13_kk_components_Particles("snow");
	this.baseFreq = frequency;
	this.particles.emitFrequency = this.baseFreq;
	this.baseDur = duration;
	this.scale = scale;
	this.alpha = alpha;
	this.addComponent(this.particles);
	var handler = new kro13_kk_components_GameEventHandler();
	handler.addHandler($bind(this,this.onEvent));
	this.addComponent(handler);
};
$hxClasses["kro13.kk.guiObjects.effects.Snow"] = kro13_kk_guiObjects_effects_Snow;
kro13_kk_guiObjects_effects_Snow.__name__ = "kro13.kk.guiObjects.effects.Snow";
kro13_kk_guiObjects_effects_Snow.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_guiObjects_effects_Snow.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		var x = 40;
		var y = 40;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.materialC = { size : this1, color : 16777215, particlesType : "snow", emitAngle : -120, distance : haxepunk_HXP.height, duration : this.baseDur, angleRange : 60, distanceRange : haxepunk_HXP.height * 0.5, startAlpha : this.alpha, endAlpha : this.alpha, startScale : this.scale, endScale : this.scale, durationRange : this.baseDur * 0.5};
		var material = kro13_kk_components_renderer_materials_EMaterial.PARTICLES(this.materialC);
		this.renderer.material = material;
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var _g = e.firstStart;
			var tmp = this.baseFreq;
			var tmp1 = this.dataProvider.getLocal().getSnowIntensity();
			this.particles.emitFrequency = tmp / tmp1;
			var tmp = this.baseDur * 0.5;
			var tmp1 = this.baseDur * 0.5 / this.dataProvider.getLocal().getSnowIntensity();
			this.materialC.duration = tmp + tmp1;
			this.materialC.durationRange = this.materialC.duration * 0.5;
			this.renderer.isValid = false;
			break;
		case 31:
			var tmp = this.baseFreq;
			var tmp1 = this.dataProvider.getLocal().getSnowIntensity();
			this.particles.emitFrequency = tmp / tmp1;
			var tmp = this.baseDur * 0.5;
			var tmp1 = this.baseDur * 0.5 / this.dataProvider.getLocal().getSnowIntensity();
			this.materialC.duration = tmp + tmp1;
			this.materialC.durationRange = this.materialC.duration * 0.5;
			this.renderer.isValid = false;
			break;
		default:
		}
	}
	,__class__: kro13_kk_guiObjects_effects_Snow
});
var kro13_kk_guiObjects_popups_ConsolePopup = function() {
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "console";
	this.addComponent(new kro13_kk_components_Updater(this));
};
$hxClasses["kro13.kk.guiObjects.popups.ConsolePopup"] = kro13_kk_guiObjects_popups_ConsolePopup;
kro13_kk_guiObjects_popups_ConsolePopup.__name__ = "kro13.kk.guiObjects.popups.ConsolePopup";
kro13_kk_guiObjects_popups_ConsolePopup.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_guiObjects_popups_ConsolePopup.print = function(text) {
	haxe_Log.trace("console: " + text,{ fileName : "src/kro13/kk/guiObjects/popups/ConsolePopup.hx", lineNumber : 29, className : "kro13.kk.guiObjects.popups.ConsolePopup", methodName : "print"});
	kro13_kk_guiObjects_popups_ConsolePopup.log.push(text);
	if(kro13_kk_guiObjects_popups_ConsolePopup.log.length >= 20) {
		kro13_kk_guiObjects_popups_ConsolePopup.log.shift();
	}
	kro13_kk_guiObjects_popups_ConsolePopup.isLogDirty = true;
};
kro13_kk_guiObjects_popups_ConsolePopup.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_popups_ConsolePopup.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	update: function(dt) {
		if(kro13_kk_guiObjects_popups_ConsolePopup.isLogDirty) {
			if(this.text != null) {
				var _this = this.text;
				var text = kro13_kk_guiObjects_popups_ConsolePopup.log.join("\n");
				_this.materialConfig.text = text;
				_this.renderer.isValid = false;
				kro13_kk_guiObjects_popups_ConsolePopup.isLogDirty = false;
			}
		}
	}
	,build: function() {
		kro13_kk_gameObjects_Transformable.prototype.build.call(this);
		this.text = new kro13_kk_guiObjects_TextField(16711680,null,true);
		var _this = this.text.renderer;
		_this.isLayerValid = false;
		_this._layer = 0 - 1;
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.text.set_position(this1);
		var tmp = this.text;
		var x = this.get_size().x;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_size(this1);
		this.text.build();
		this.transform.addChild(this.text.transform);
	}
	,__class__: kro13_kk_guiObjects_popups_ConsolePopup
});
var kro13_kk_guiObjects_popups_FlexPopup = function(buttons,color,borderColor) {
	kro13_kk_guiObjects_popups_Popup.call(this,color,borderColor);
	this.buttons = [];
	var _g = 0;
	while(_g < buttons.length) {
		var b = buttons[_g];
		++_g;
		if(b != null) {
			this.buttons.push(b);
		}
	}
};
$hxClasses["kro13.kk.guiObjects.popups.FlexPopup"] = kro13_kk_guiObjects_popups_FlexPopup;
kro13_kk_guiObjects_popups_FlexPopup.__name__ = "kro13.kk.guiObjects.popups.FlexPopup";
kro13_kk_guiObjects_popups_FlexPopup.__super__ = kro13_kk_guiObjects_popups_Popup;
kro13_kk_guiObjects_popups_FlexPopup.prototype = $extend(kro13_kk_guiObjects_popups_Popup.prototype,{
	build: function() {
		kro13_kk_guiObjects_popups_Popup.prototype.build.call(this);
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			this.transform.addChild(button.transform);
		}
		this.validateLayout();
	}
	,validateLayout: function() {
		this.calculateSize();
		this.placeButtons();
	}
	,calculateSize: function() {
		var this1 = this.calculateContentSize();
		var x = 0;
		var y = this.calculateBtnsHeight() + 50;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var other_x = x;
		var other_y = y;
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x += other_x;
		this2.y += other_y;
		var newSize = this2;
		this.set_size(newSize);
		this.renderer.isValid = false;
	}
	,calculateContentSize: function() {
		var x = this.get_size().x;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		return this1;
	}
	,placeButtons: function() {
		var w = this.calculateBtnsWidth();
		var x = (this.get_size().x - w) * 0.5;
		var i = 0;
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.transform.get_visible()) {
				b.get_position().x = x + i * 50;
				b.get_position().y = this.get_size().y - 150;
				x += b.get_size().x;
				++i;
			}
		}
	}
	,calculateBtnsHeight: function() {
		var h = 0;
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.transform.get_visible() && b.transform.get_size().y > h) {
				h = b.transform.get_size().y;
			}
		}
		return h;
	}
	,calculateBtnsWidth: function() {
		var w = 0;
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.transform.get_visible()) {
				w += b.get_size().x;
			}
		}
		w += (this.buttons.length - 1) * 50;
		return w;
	}
	,__class__: kro13_kk_guiObjects_popups_FlexPopup
});
var kro13_kk_guiObjects_popups_DialogPopup = function(buttons,color,borderColor) {
	this.align = "left";
	this.fontSize = 60;
	kro13_kk_guiObjects_popups_FlexPopup.call(this,buttons,color,borderColor);
};
$hxClasses["kro13.kk.guiObjects.popups.DialogPopup"] = kro13_kk_guiObjects_popups_DialogPopup;
kro13_kk_guiObjects_popups_DialogPopup.__name__ = "kro13.kk.guiObjects.popups.DialogPopup";
kro13_kk_guiObjects_popups_DialogPopup.__super__ = kro13_kk_guiObjects_popups_FlexPopup;
kro13_kk_guiObjects_popups_DialogPopup.prototype = $extend(kro13_kk_guiObjects_popups_FlexPopup.prototype,{
	setTextPropsBeforeBuild: function(fontSize,align) {
		if(align == null) {
			align = "left";
		}
		if(fontSize == null) {
			fontSize = 60;
		}
		this.fontSize = fontSize;
		this.align = align;
	}
	,build: function() {
		this.text = new kro13_kk_guiObjects_TextField(11250647,this.fontSize,true,false,this.align);
		var x = 50;
		var y = 50;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.text.set_position(this1);
		var tmp = this.text;
		var x = this.get_size().x - 100;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_size(this1);
		this.text.build();
		this.transform.addChild(this.text.transform);
		kro13_kk_guiObjects_popups_FlexPopup.prototype.build.call(this);
	}
	,setMessage: function(message) {
		var _this = this.text;
		_this.materialConfig.text = message;
		_this.renderer.isValid = false;
		kro13_kk_guiObjects_popups_FlexPopup.prototype.build.call(this);
	}
	,calculateContentSize: function() {
		var textSize = kro13_kk_utils_TextUtils.getTextRect(this.text);
		var x = this.get_size().x;
		var y = textSize.y + 100;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		return this1;
	}
	,__class__: kro13_kk_guiObjects_popups_DialogPopup
});
var kro13_kk_guiObjects_popups_HelpPopup = function(dataProvider) {
	this.btnOk = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildSquareButton(null,"images/btn_ok.png");
	var tmp = kro13_kk_guiObjects_GUIObjectsFactory.get_instance();
	var x = 440;
	var y = 120;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	this.btnSwitch = tmp.buildBlankButton(this1);
	kro13_kk_guiObjects_popups_FlexPopup.call(this,[this.btnOk,this.btnSwitch],16777215,10066380);
	this.name = "Help Popoup";
	this.dataProvider = dataProvider;
	this.offset = haxepunk_HXP.width - 900;
	this.offset = Math.min(100,this.offset);
};
$hxClasses["kro13.kk.guiObjects.popups.HelpPopup"] = kro13_kk_guiObjects_popups_HelpPopup;
kro13_kk_guiObjects_popups_HelpPopup.__name__ = "kro13.kk.guiObjects.popups.HelpPopup";
kro13_kk_guiObjects_popups_HelpPopup.__super__ = kro13_kk_guiObjects_popups_FlexPopup;
kro13_kk_guiObjects_popups_HelpPopup.prototype = $extend(kro13_kk_guiObjects_popups_FlexPopup.prototype,{
	build: function() {
		kro13_kk_guiObjects_popups_FlexPopup.prototype.build.call(this);
		var _this = this.btnSwitch;
		if(_this.label == null) {
			_this.label = new kro13_kk_guiObjects_TextField(_this.borderColor,_this.labelSize,false,true,null,_this.color);
			_this.label.build();
			_this.transform.addChild(_this.label.transform);
		}
		var _this1 = _this.label;
		_this1.materialConfig.text = "_";
		_this1.renderer.isValid = false;
		_this.validateLayout();
		_this.label.renderer.isValid = false;
		this.mainHelp = new kro13_kk_guiObjects_popups_help_MainHelp();
		var tmp = this.mainHelp;
		var x = this.get_size().x;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_size(this1);
		this.mainHelp.build();
		this.transform.addChild(this.mainHelp.transform);
		this.avalancheHelp = new kro13_kk_guiObjects_popups_help_AvalancheHelp();
		var tmp = this.avalancheHelp;
		var x = this.get_size().x;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_size(this1);
		this.avalancheHelp.build();
		this.transform.addChild(this.avalancheHelp.transform);
		this.snowmenHelp = new kro13_kk_guiObjects_popups_help_SnowmenHelp();
		var tmp = this.snowmenHelp;
		var x = this.get_size().x;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_size(this1);
		this.snowmenHelp.build();
		this.transform.addChild(this.snowmenHelp.transform);
		this.mandalaHelp = new kro13_kk_guiObjects_popups_help_MandalaHelp();
		var tmp = this.mandalaHelp;
		var x = this.get_size().x;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_size(this1);
		this.mandalaHelp.build();
		this.transform.addChild(this.mandalaHelp.transform);
		this.faunaHelp = new kro13_kk_guiObjects_popups_help_FaunaHelp();
		var tmp = this.faunaHelp;
		var x = this.get_size().x;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_size(this1);
		this.faunaHelp.build();
		this.transform.addChild(this.faunaHelp.transform);
		this.headerText = new kro13_kk_guiObjects_TextField(11250647,null,true,false);
		this.headerText.name = "Header Text";
		var x = 50;
		var y = 50;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.headerText.set_position(this1);
		var tmp = this.headerText;
		var x = this.get_size().x - 100;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_size(this1);
		this.headerText.build();
		var _this = this.headerText;
		_this.materialConfig.text = "_";
		_this.renderer.isValid = false;
		this.transform.addChild(this.headerText.transform);
	}
	,setPage: function() {
		haxe_Log.trace(kro13_kk_data_EProfileTag.isTagged(0,this.dataProvider.getProfile()),{ fileName : "src/kro13/kk/guiObjects/popups/HelpPopup.hx", lineNumber : 84, className : "kro13.kk.guiObjects.popups.HelpPopup", methodName : "setPage", customParams : [kro13_kk_data_EProfileTag.isTagged(2,this.dataProvider.getProfile()),kro13_kk_data_EProfileTag.isTagged(3,this.dataProvider.getProfile()),kro13_kk_data_EProfileTag.isTagged(4,this.dataProvider.getProfile()),kro13_kk_data_EProfileTag.isTagged(7,this.dataProvider.getProfile())]});
		if(kro13_kk_data_EProfileTag.isTagged(0,this.dataProvider.getProfile()) && !kro13_kk_data_EProfileTag.isTagged(2,this.dataProvider.getProfile())) {
			this.helpAboutSnowmen();
		} else if(kro13_kk_data_EProfileTag.isTagged(0,this.dataProvider.getProfile()) && !kro13_kk_data_EProfileTag.isTagged(3,this.dataProvider.getProfile())) {
			this.helpAboutAvalanche();
		} else if(kro13_kk_data_EProfileTag.isTagged(0,this.dataProvider.getProfile()) && !kro13_kk_data_EProfileTag.isTagged(7,this.dataProvider.getProfile())) {
			this.helpAboutMandala();
		} else if(kro13_kk_data_EProfileTag.isTagged(0,this.dataProvider.getProfile()) && !kro13_kk_data_EProfileTag.isTagged(4,this.dataProvider.getProfile())) {
			this.helpAboutFauna();
		} else {
			this.helpAboutMain();
		}
	}
	,calculateSize: function() {
		var x = haxepunk_HXP.width - this.offset;
		var y = haxepunk_HXP.height - this.offset;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.set_size(this1);
		this.renderer.isValid = false;
	}
	,setHeader: function(text) {
		this.transform.addChild(this.headerText.transform);
		var _this = this.headerText;
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
	}
	,clearDemos: function() {
		if(this.headerText != null) {
			this.transform.removeChild(this.headerText.transform);
		}
		if(this.mainHelp != null) {
			this.transform.removeChild(this.mainHelp.transform);
		}
		if(this.snowmenHelp != null) {
			this.transform.removeChild(this.snowmenHelp.transform);
		}
		if(this.avalancheHelp != null) {
			this.transform.removeChild(this.avalancheHelp.transform);
		}
		if(this.faunaHelp != null) {
			this.transform.removeChild(this.faunaHelp.transform);
		}
		if(this.mandalaHelp != null) {
			this.transform.removeChild(this.mandalaHelp.transform);
		}
	}
	,helpAboutMandala: function() {
		if(!kro13_kk_data_EProfileTag.isTagged(7,this.dataProvider.getProfile())) {
			kro13_kk_data_EProfileTag.tag(7,this.dataProvider.getProfile());
			kro13_analytics_Analytics.get_instance().sendEvent("help:mandala");
		}
		this.clearDemos();
		this.helpAboutSomething(this.mandalaHelp,kro13_kk_utils_L.get_instance().HELP_ABOUT_MANDALA,$bind(this,this.helpAboutFauna),kro13_kk_utils_L.get_instance().HELP_ABOUT_FAUNA);
	}
	,helpAboutFauna: function() {
		if(!kro13_kk_data_EProfileTag.isTagged(4,this.dataProvider.getProfile())) {
			kro13_kk_data_EProfileTag.tag(4,this.dataProvider.getProfile());
			kro13_analytics_Analytics.get_instance().sendEvent("help:fauna");
		}
		this.clearDemos();
		this.helpAboutSomething(this.faunaHelp,kro13_kk_utils_L.get_instance().HELP_ABOUT_FAUNA,$bind(this,this.helpAboutMain),kro13_kk_utils_L.get_instance().HELP_ABOUT_MAIN);
	}
	,helpAboutAvalanche: function() {
		if(!kro13_kk_data_EProfileTag.isTagged(3,this.dataProvider.getProfile())) {
			kro13_kk_data_EProfileTag.tag(3,this.dataProvider.getProfile());
			kro13_analytics_Analytics.get_instance().sendEvent("help:avalanche");
		}
		this.clearDemos();
		this.helpAboutSomething(this.avalancheHelp,kro13_kk_utils_L.get_instance().HELP_AVALANCHE,$bind(this,this.helpAboutMandala),kro13_kk_utils_L.get_instance().HELP_ABOUT_MANDALA);
	}
	,helpAboutSnowmen: function() {
		if(!kro13_kk_data_EProfileTag.isTagged(2,this.dataProvider.getProfile())) {
			kro13_kk_data_EProfileTag.tag(2,this.dataProvider.getProfile());
			kro13_analytics_Analytics.get_instance().sendEvent("help:snowmen");
		}
		this.clearDemos();
		this.helpAboutSomething(this.snowmenHelp,kro13_kk_utils_L.get_instance().HELP_SNOWMEN,$bind(this,this.helpAboutAvalanche),kro13_kk_utils_L.get_instance().HELP_ABOUT_AVALANCHE);
	}
	,helpAboutMain: function() {
		if(!kro13_kk_data_EProfileTag.isTagged(0,this.dataProvider.getProfile())) {
			kro13_kk_data_EProfileTag.tag(0,this.dataProvider.getProfile());
			kro13_analytics_Analytics.get_instance().sendEvent("help:main");
		}
		this.clearDemos();
		var headerStr = kro13_kk_utils_L.get_instance().HELP;
		this.helpAboutSomething(this.mainHelp,headerStr,$bind(this,this.helpAboutSnowmen),kro13_kk_utils_L.get_instance().HELP_ABOUT_SNOWMEN);
	}
	,helpAboutSomething: function(demo,headerString,btnAction,btnLabel) {
		haxe_Log.trace("-----------------",{ fileName : "src/kro13/kk/guiObjects/popups/HelpPopup.hx", lineNumber : 219, className : "kro13.kk.guiObjects.popups.HelpPopup", methodName : "helpAboutSomething", customParams : [headerString]});
		this.validateLayout();
		this.setHeader(headerString);
		var headerSize = kro13_kk_utils_TextUtils.getTextRect(this.headerText);
		if(demo != null) {
			demo.get_position().y = headerSize.y;
			this.transform.addChild(demo.transform);
		}
		this.btnSwitch.action = btnAction;
		var _this = this.btnSwitch;
		if(_this.label == null) {
			_this.label = new kro13_kk_guiObjects_TextField(_this.borderColor,_this.labelSize,false,true,null,_this.color);
			_this.label.build();
			_this.transform.addChild(_this.label.transform);
		}
		var _this1 = _this.label;
		_this1.materialConfig.text = btnLabel;
		_this1.renderer.isValid = false;
		_this.validateLayout();
		_this.label.renderer.isValid = false;
	}
	,__class__: kro13_kk_guiObjects_popups_HelpPopup
});
var kro13_kk_guiObjects_popups_SettingsPopup = function(dataProvider,eventDsipatcher,color,borderColor) {
	this.locales = ["RU","EN"];
	var btnOk = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildSquareButton(null,"images/btn_ok.png");
	kro13_kk_guiObjects_popups_FlexPopup.call(this,[btnOk],color,borderColor);
	this.dataProvider = dataProvider;
	this.eventDispatcher = eventDsipatcher;
	this.reloadNeeded = false;
};
$hxClasses["kro13.kk.guiObjects.popups.SettingsPopup"] = kro13_kk_guiObjects_popups_SettingsPopup;
kro13_kk_guiObjects_popups_SettingsPopup.__name__ = "kro13.kk.guiObjects.popups.SettingsPopup";
kro13_kk_guiObjects_popups_SettingsPopup.__super__ = kro13_kk_guiObjects_popups_FlexPopup;
kro13_kk_guiObjects_popups_SettingsPopup.prototype = $extend(kro13_kk_guiObjects_popups_FlexPopup.prototype,{
	build: function() {
		this.musicText = new kro13_kk_guiObjects_TextField(11250647,null,true,false);
		var x = 800;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.musicText.set_size(this1);
		var x = 50;
		var y = 50;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.musicText.set_position(this1);
		this.musicText.build();
		var _this = this.musicText;
		var text = "" + kro13_kk_utils_L.get_instance().MUSIC_SETTING + ":";
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
		this.transform.addChild(this.musicText.transform);
		this.btnMusic = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildSquareButton($bind(this,this.onMusic),"images/btn_music.png","Btn Music");
		var tmp = this.btnMusic;
		var x = this.get_size().x - 170;
		var y = 50;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_position(this1);
		this.btnMusic.isToggle = true;
		this.transform.addChild(this.btnMusic.transform);
		this.fxText = new kro13_kk_guiObjects_TextField(11250647,null,true,false);
		var x = 800;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.fxText.set_size(this1);
		var x = 50;
		var y = 220;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.fxText.set_position(this1);
		this.fxText.build();
		var _this = this.fxText;
		var text = "" + kro13_kk_utils_L.get_instance().SOUND_FX_SETTING + ":";
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
		this.transform.addChild(this.fxText.transform);
		this.btnFx = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildSquareButton($bind(this,this.onFx),"images/btn_music.png","Btn Sound");
		var tmp = this.btnFx;
		var x = this.get_size().x - 170;
		var y = 220;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_position(this1);
		this.btnFx.isToggle = true;
		this.transform.addChild(this.btnFx.transform);
		this.sensText = new kro13_kk_guiObjects_TextField(11250647,null,true,false);
		var x = 800;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.sensText.set_size(this1);
		var x = 50;
		var y = 350;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.sensText.set_position(this1);
		this.sensText.build();
		var _this = this.sensText;
		var text = "" + kro13_kk_utils_L.get_instance().SENSITIVITY + ":";
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
		this.transform.addChild(this.sensText.transform);
		this.btnSensMinus = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildSquareButton($bind(this,this.onSensMinus),"images/btn_minus.png","Btn Sens Minus");
		var tmp = this.btnSensMinus;
		var x = 50;
		var y = this.sensText.get_position().y + 50 + 20;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_position(this1);
		this.transform.addChild(this.btnSensMinus.transform);
		this.btnSensPlus = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildSquareButton($bind(this,this.onSensPlus),"images/btn_plus.png","Btn Sens Plus");
		var tmp = this.btnSensPlus;
		var x = this.get_size().x - 170;
		var y = this.sensText.get_position().y + 50 + 20;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_position(this1);
		this.transform.addChild(this.btnSensPlus.transform);
		this.sensValText = new kro13_kk_guiObjects_TextField(11250647,null,true,true);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.sensValText.set_size(this1);
		var tmp = this.sensValText;
		var x = this.get_size().x * 0.5;
		var y = this.btnSensMinus.get_position().y + 50;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_position(this1);
		this.sensValText.build();
		var _this = this.sensValText;
		var text = this.getSensText();
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
		this.transform.addChild(this.sensValText.transform);
		this.posText = new kro13_kk_guiObjects_TextField(11250647,null,true,false);
		var x = 800;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.posText.set_size(this1);
		var x = 50;
		var y = 560;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.posText.set_position(this1);
		this.posText.build();
		var _this = this.posText;
		var text = "" + kro13_kk_utils_L.get_instance().MENU_POS + ":";
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
		this.transform.addChild(this.posText.transform);
		var _g = $bind(this,this.onMenuPos);
		var right = false;
		var tmp = function() {
			_g(right);
		};
		this.btnLeft = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildSquareButton(tmp,"images/btn_quit.png","Btn Pos Left");
		this.btnLeft.isToggle = true;
		var tmp = this.btnLeft;
		var x = 50;
		var y = this.posText.get_position().y + 50 + 20;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_position(this1);
		this.transform.addChild(this.btnLeft.transform);
		var _g1 = $bind(this,this.onMenuPos);
		var right1 = true;
		var tmp = function() {
			_g1(right1);
		};
		this.btnRight = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildSquareButton(tmp,"images/btn_play.png","Btn Pos Right");
		this.btnRight.isToggle = true;
		var tmp = this.btnRight;
		var x = this.get_size().x - 170;
		var y = this.posText.get_position().y + 50 + 20;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_position(this1);
		this.transform.addChild(this.btnRight.transform);
		this.posValText = new kro13_kk_guiObjects_TextField(11250647,null,false,true);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.posValText.set_size(this1);
		var tmp = this.posValText;
		var x = this.get_size().x * 0.5;
		var y = this.btnLeft.get_position().y + 50;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_position(this1);
		this.posValText.build();
		var _this = this.posValText;
		var text = this.getPosText();
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
		this.transform.addChild(this.posValText.transform);
		this.localeText = new kro13_kk_guiObjects_TextField(11250647,null,true,false);
		var x = 800;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.localeText.set_size(this1);
		var x = 50;
		var y = 780;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.localeText.set_position(this1);
		this.localeText.build();
		var _this = this.localeText;
		var text = "" + kro13_kk_utils_L.get_instance().MENU_LOCALE + ":";
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
		this.transform.addChild(this.localeText.transform);
		var i = 0;
		this.localeBtns = [];
		var _g2 = 0;
		var _g3 = this.locales;
		while(_g2 < _g3.length) {
			var loc = _g3[_g2];
			++_g2;
			var btn = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildSquareButton((function(_g,loc) {
				return function() {
					_g[0](loc[0]);
				};
			})([$bind(this,this.onLocale)],[loc]),"","Btn Locale " + loc);
			btn.isToggle = true;
			if(btn.label == null) {
				btn.label = new kro13_kk_guiObjects_TextField(btn.borderColor,btn.labelSize,false,true,null,btn.color);
				btn.label.build();
				btn.transform.addChild(btn.label.transform);
			}
			var _this = btn.label;
			_this.materialConfig.text = loc;
			_this.renderer.isValid = false;
			btn.validateLayout();
			btn.label.renderer.isValid = false;
			var x = 50 * (i + 1) + 120 * i;
			var y = this.localeText.get_position().y + 50 + 20;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			btn.set_position(this1);
			this.transform.addChild(btn.transform);
			this.localeBtns.push(btn);
			++i;
		}
		kro13_kk_guiObjects_popups_FlexPopup.prototype.build.call(this);
		this.setMusicIcon();
		this.setFxIcon();
		this.togglePos();
		this.onLocale(this.dataProvider.getProfile().misc.locale);
	}
	,calculateContentSize: function() {
		var x = this.get_size().x;
		var y = 970;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		return this1;
	}
	,onLocale: function(loc) {
		var idx = this.locales.indexOf(loc);
		var _g = 0;
		var _g1 = this.localeBtns.length;
		while(_g < _g1) {
			var i = _g++;
			if(i == idx) {
				this.localeBtns[i].altColor();
			} else {
				this.localeBtns[i].normColor();
			}
		}
		this.dataProvider.getProfile().misc.locale = loc;
		this.reloadNeeded = true;
	}
	,onFx: function() {
		if(kro13_kk_sound_SoundManager.instance == null) {
			kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
		}
		if(kro13_kk_sound_SoundManager.instance.hasType(0)) {
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.removeType(0);
		} else {
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.addType(0);
		}
		this.setFxIcon();
	}
	,onMusic: function() {
		if(kro13_kk_sound_SoundManager.instance == null) {
			kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
		}
		if(kro13_kk_sound_SoundManager.instance.hasType(1)) {
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.removeType(1);
		} else {
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.addType(1);
		}
		this.setMusicIcon();
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.SETTINGS_CHANGED);
	}
	,onSensMinus: function() {
		if(this.dataProvider.getProfile().misc.sensitivity > 0.501) {
			this.dataProvider.getProfile().misc.sensitivity = this.dataProvider.getProfile().misc.sensitivity - 0.1;
		}
		var _this = this.sensValText;
		var text = this.getSensText();
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
	}
	,onSensPlus: function() {
		if(this.dataProvider.getProfile().misc.sensitivity < 1.5) {
			this.dataProvider.getProfile().misc.sensitivity = this.dataProvider.getProfile().misc.sensitivity + 0.1;
		}
		var _this = this.sensValText;
		var text = this.getSensText();
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
	}
	,setFxIcon: function() {
		if(kro13_kk_sound_SoundManager.instance == null) {
			kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
		}
		if(!kro13_kk_sound_SoundManager.instance.hasType(0)) {
			this.btnFx.setIcon("images/btn_mute.png");
			var _this = this.fxText;
			var text = "" + kro13_kk_utils_L.get_instance().SOUND_FX_SETTING + " " + kro13_kk_utils_L.get_instance().SETTING_OFF;
			_this.materialConfig.text = text;
			_this.renderer.isValid = false;
			this.btnFx.normColor();
		} else {
			this.btnFx.setIcon("images/btn_music.png");
			var _this = this.fxText;
			var text = "" + kro13_kk_utils_L.get_instance().SOUND_FX_SETTING + " " + kro13_kk_utils_L.get_instance().SETTING_ON;
			_this.materialConfig.text = text;
			_this.renderer.isValid = false;
			this.btnFx.altColor();
		}
	}
	,setMusicIcon: function() {
		if(kro13_kk_sound_SoundManager.instance == null) {
			kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
		}
		if(!kro13_kk_sound_SoundManager.instance.hasType(1)) {
			this.btnMusic.setIcon("images/btn_mute.png");
			var _this = this.musicText;
			var text = "" + kro13_kk_utils_L.get_instance().MUSIC_SETTING + " " + kro13_kk_utils_L.get_instance().SETTING_OFF;
			_this.materialConfig.text = text;
			_this.renderer.isValid = false;
			this.btnMusic.normColor();
		} else {
			this.btnMusic.setIcon("images/btn_music.png");
			var _this = this.musicText;
			var text = "" + kro13_kk_utils_L.get_instance().MUSIC_SETTING + " " + kro13_kk_utils_L.get_instance().SETTING_ON;
			_this.materialConfig.text = text;
			_this.renderer.isValid = false;
			this.btnMusic.altColor();
		}
	}
	,onMenuPos: function(right) {
		this.dataProvider.getProfile().misc.rightHanded = !this.dataProvider.getProfile().misc.rightHanded;
		this.togglePos();
		var _this = this.posValText;
		var text = this.getPosText();
		_this.materialConfig.text = text;
		_this.renderer.isValid = false;
	}
	,getSensText: function() {
		var sens = Math.round(this.dataProvider.getProfile().misc.sensitivity * 10);
		var whole = Math.floor(sens / 10);
		var rest = Math.round(sens % 10);
		return "" + whole + "." + rest;
	}
	,togglePos: function() {
		if(this.dataProvider.getProfile().misc.rightHanded) {
			this.btnLeft.normColor();
			this.btnRight.altColor();
		} else {
			this.btnLeft.altColor();
			this.btnRight.normColor();
		}
	}
	,getPosText: function() {
		if(this.dataProvider.getProfile().misc.rightHanded) {
			return kro13_kk_utils_L.get_instance().MENU_POS_RIGHT;
		} else {
			return kro13_kk_utils_L.get_instance().MENU_POS_LEFT;
		}
	}
	,__class__: kro13_kk_guiObjects_popups_SettingsPopup
});
var kro13_kk_guiObjects_popups_StatsPopup = function(btnGlobal,btnOk,color,borderColor) {
	kro13_kk_guiObjects_popups_DialogPopup.call(this,[btnGlobal,btnOk],color,borderColor);
};
$hxClasses["kro13.kk.guiObjects.popups.StatsPopup"] = kro13_kk_guiObjects_popups_StatsPopup;
kro13_kk_guiObjects_popups_StatsPopup.__name__ = "kro13.kk.guiObjects.popups.StatsPopup";
kro13_kk_guiObjects_popups_StatsPopup.__super__ = kro13_kk_guiObjects_popups_DialogPopup;
kro13_kk_guiObjects_popups_StatsPopup.prototype = $extend(kro13_kk_guiObjects_popups_DialogPopup.prototype,{
	setStats: function(profile) {
		this.totalScore = profile.totalScore;
		this.userName = profile.userName;
		this.profile = profile;
		this.setMessage("" + this.getStatsMessage() + "\n\n" + kro13_kk_utils_L.get_instance().LOADING);
	}
	,setTopScore: function(topScore) {
		var topScoreMsg = "" + kro13_kk_utils_L.get_instance().TOP_SCORE + "\n";
		var _g = 0;
		var _g1 = topScore.length;
		while(_g < _g1) {
			var i = _g++;
			topScoreMsg += "" + (i + 1) + ". " + topScore[i].userName + "   <guiObjects>" + topScore[i].totalScore + "</guiObjects>";
			if(kro13_kk_data_EProfileTag.isTagged(1,topScore[i])) {
				topScoreMsg += " <star/>";
			}
			if(i < topScore.length - 1) {
				topScoreMsg += "\n";
			}
		}
		this.setMessage("" + this.getStatsMessage() + "\n\n" + topScoreMsg);
	}
	,showError: function() {
		this.setMessage("" + this.getStatsMessage() + "\n\n" + kro13_kk_utils_L.get_instance().ERROR_SERVER);
	}
	,getStatsMessage: function() {
		var msg = "" + kro13_kk_utils_L.get_instance().NAME + ": <guiObjects>" + this.userName + "</guiObjects>";
		if(kro13_kk_data_EProfileTag.isTagged(1,this.profile)) {
			msg += " <star/>";
		}
		msg += "\n" + kro13_kk_utils_L.get_instance().TOTAL_SCORE + ": <guiObjects>" + this.totalScore + "</guiObjects>";
		return msg;
	}
	,__class__: kro13_kk_guiObjects_popups_StatsPopup
});
var kro13_kk_guiObjects_popups_TutorPopup = function(buttons,color,borderColor) {
	this.contentIdx = 0;
	kro13_kk_guiObjects_popups_FlexPopup.call(this,buttons,color,borderColor);
};
$hxClasses["kro13.kk.guiObjects.popups.TutorPopup"] = kro13_kk_guiObjects_popups_TutorPopup;
kro13_kk_guiObjects_popups_TutorPopup.__name__ = "kro13.kk.guiObjects.popups.TutorPopup";
kro13_kk_guiObjects_popups_TutorPopup.__super__ = kro13_kk_guiObjects_popups_FlexPopup;
kro13_kk_guiObjects_popups_TutorPopup.prototype = $extend(kro13_kk_guiObjects_popups_FlexPopup.prototype,{
	setContent: function(content) {
		this.contentIdx = 0;
		this.content = content;
	}
	,showNext: function() {
		if(this.curr != null) {
			this.transform.removeChild(this.curr.transform);
		}
		haxe_Log.trace(this.contentIdx,{ fileName : "src/kro13/kk/guiObjects/popups/TutorPopup.hx", lineNumber : 28, className : "kro13.kk.guiObjects.popups.TutorPopup", methodName : "showNext", customParams : [this.content.length]});
		this.curr = this.content[this.contentIdx];
		this.curr.setEvenPosition(50,50);
		this.transform.addChild(this.curr.transform);
		this.contentIdx++;
		this.validateLayout();
	}
	,isFinished: function() {
		return this.contentIdx == this.content.length;
	}
	,calculateContentSize: function() {
		if(this.curr != null) {
			var x = this.get_size().x;
			var y = this.curr.get_size().y + 100;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			return this1;
		}
		var x = this.get_size().x;
		var y = this.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		return this1;
	}
	,__class__: kro13_kk_guiObjects_popups_TutorPopup
});
var kro13_kk_guiObjects_popups_help_AvalancheHelp = function() {
	kro13_kk_gameObjects_Transformable.call(this);
};
$hxClasses["kro13.kk.guiObjects.popups.help.AvalancheHelp"] = kro13_kk_guiObjects_popups_help_AvalancheHelp;
kro13_kk_guiObjects_popups_help_AvalancheHelp.__name__ = "kro13.kk.guiObjects.popups.help.AvalancheHelp";
kro13_kk_guiObjects_popups_help_AvalancheHelp.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_popups_help_AvalancheHelp.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		this.demo = new kro13_kk_guiObjects_popups_help_demos_AvalancheDemo(this.get_size().x - 200,2);
		this.demo.setEvenPosition(100,100);
		this.demo.build();
		this.transform.addChild(this.demo.transform);
	}
	,__class__: kro13_kk_guiObjects_popups_help_AvalancheHelp
});
var kro13_kk_guiObjects_popups_help_FaunaHelp = function() {
	kro13_kk_gameObjects_Transformable.call(this);
};
$hxClasses["kro13.kk.guiObjects.popups.help.FaunaHelp"] = kro13_kk_guiObjects_popups_help_FaunaHelp;
kro13_kk_guiObjects_popups_help_FaunaHelp.__name__ = "kro13.kk.guiObjects.popups.help.FaunaHelp";
kro13_kk_guiObjects_popups_help_FaunaHelp.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_guiObjects_popups_help_FaunaHelp.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_popups_help_FaunaHelp.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		var eagle = kro13_kk_utils_L.get_instance().HELP7;
		var x = 210;
		var y = 144;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var x = 0;
		var y = -20;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this2 = { x : x, y : y};
		var eagle1 = this.buildRecord(eagle,"images/eagle.png",this1,this2);
		eagle1.setEvenPosition(100,100);
		this.transform.addChild(eagle1.transform);
		var hare = kro13_kk_utils_L.get_instance().HELP8;
		var x = 40;
		var y = 80;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var hare1 = this.buildRecord(hare,"images/hare_sit.png",this1);
		hare1.setEvenPosition(100,350);
		this.transform.addChild(hare1.transform);
	}
	,update: function(dt) {
	}
	,buildRecord: function(text,imgSource,imgSize,imgShift) {
		var record = new kro13_kk_gameObjects_Transformable();
		record.build();
		var img = this.buildImage(imgSource,imgSize,imgShift);
		record.transform.addChild(img.transform);
		var txt = new kro13_kk_guiObjects_TextField(11250647,46,true,false);
		var x = this.get_size().x - 200 - img.get_size().x;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		txt.set_size(this1);
		txt.build();
		txt.materialConfig.text = text;
		txt.renderer.isValid = false;
		txt.setEvenPosition(img.get_size().x + 50,(img.get_size().y - kro13_kk_utils_TextUtils.getTextRect(txt).y) * 0.5);
		record.transform.addChild(img.transform);
		record.transform.addChild(txt.transform);
		return record;
	}
	,buildImage: function(imgSource,imgSize,imgShift) {
		var bg = new kro13_kk_gameObjects_Renderable();
		var x = 200;
		var y = 200;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		bg.set_size(this1);
		var bgConfig = { size : bg.get_size(), color : 10066380, borderColor : 10066380, borderWidth : 2};
		bg.renderer.material = kro13_kk_components_renderer_materials_EMaterial.GUI(bgConfig);
		var _this = bg.renderer;
		_this.isLayerValid = false;
		_this._layer = 12;
		var img = new kro13_kk_gameObjects_Renderable();
		img.set_size(imgSize);
		var imgConfig = { source : imgSource, size : img.get_size()};
		img.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(imgConfig);
		var this1 = bg.get_size();
		var other = img.get_size();
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this_x = x;
		var this_y = y;
		this_x -= other.x;
		this_y -= other.y;
		var x = this_x;
		var y = this_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x *= 0.5;
		this2.y *= 0.5;
		img.set_position(this2);
		if(imgShift != null) {
			var _g = img;
			var this1 = _g.get_position();
			var x = this1.x;
			var y = this1.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var this2 = this1;
			this2.x += imgShift.x;
			this2.y += imgShift.y;
			_g.set_position(this2);
		}
		bg.transform.addChild(img.transform);
		return bg;
	}
	,__class__: kro13_kk_guiObjects_popups_help_FaunaHelp
});
var kro13_kk_guiObjects_popups_help_MainHelp = function() {
	this.emitted3 = true;
	this.demotime3 = 0;
	this.demotime2 = 0;
	this.emitted2c = false;
	this.emitted2b = false;
	this.emitted2a = false;
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "main help";
};
$hxClasses["kro13.kk.guiObjects.popups.help.MainHelp"] = kro13_kk_guiObjects_popups_help_MainHelp;
kro13_kk_guiObjects_popups_help_MainHelp.__name__ = "kro13.kk.guiObjects.popups.help.MainHelp";
kro13_kk_guiObjects_popups_help_MainHelp.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_popups_help_MainHelp.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		this.demo1 = new kro13_kk_guiObjects_popups_help_demos_MainHelpDemo1(this.get_size().x - 200);
		this.demo1.setEvenPosition(100,100);
		this.demo1.build();
		this.transform.addChild(this.demo1.transform);
		this.demo2 = new kro13_kk_guiObjects_popups_help_demos_MainHelpDemo2(this.get_size().x - 200,1);
		this.demo2.setEvenPosition(100,this.demo1.get_position().y + this.demo1.get_size().y + 50);
		this.demo2.build();
		this.transform.addChild(this.demo2.transform);
		this.demo3 = new kro13_kk_guiObjects_popups_help_demos_MainHelpDemo3(this.get_size().x - 200);
		this.demo3.setEvenPosition(100,this.demo2.get_position().y + this.demo2.get_size().y + 50);
		this.demo3.build();
		this.transform.addChild(this.demo3.transform);
		this.demo4 = new kro13_kk_guiObjects_popups_help_demos_MainHelpDemo4(this.get_size().x - 200,1);
		this.demo4.setEvenPosition(100,this.demo3.get_position().y + this.demo3.get_size().y + 50);
		this.demo4.build();
		this.transform.addChild(this.demo4.transform);
	}
	,__class__: kro13_kk_guiObjects_popups_help_MainHelp
});
var kro13_kk_guiObjects_popups_help_MandalaHelp = function() {
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "mandala help";
};
$hxClasses["kro13.kk.guiObjects.popups.help.MandalaHelp"] = kro13_kk_guiObjects_popups_help_MandalaHelp;
kro13_kk_guiObjects_popups_help_MandalaHelp.__name__ = "kro13.kk.guiObjects.popups.help.MandalaHelp";
kro13_kk_guiObjects_popups_help_MandalaHelp.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_popups_help_MandalaHelp.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		this.demo = new kro13_kk_guiObjects_popups_help_demos_MandalaDemo(this.get_size().x - 200,2);
		this.demo.setEvenPosition(100,100);
		this.demo.build();
		this.transform.addChild(this.demo.transform);
	}
	,__class__: kro13_kk_guiObjects_popups_help_MandalaHelp
});
var kro13_kk_guiObjects_popups_help_PlayerDemo = function() {
	kro13_kk_gameObjects_Renderable.call(this);
	this.name = "demo";
};
$hxClasses["kro13.kk.guiObjects.popups.help.PlayerDemo"] = kro13_kk_guiObjects_popups_help_PlayerDemo;
kro13_kk_guiObjects_popups_help_PlayerDemo.__name__ = "kro13.kk.guiObjects.popups.help.PlayerDemo";
kro13_kk_guiObjects_popups_help_PlayerDemo.__super__ = kro13_kk_gameObjects_Renderable;
kro13_kk_guiObjects_popups_help_PlayerDemo.prototype = $extend(kro13_kk_gameObjects_Renderable.prototype,{
	build: function() {
		this.fakeDP = new kro13_kk_data_DataProvider(null);
		this.fakeDP.getLocal().scoreData = { currentScore : 0, speedBonus : 0, avalancheBonus : 0, speedRatio : 0, bonusCounter : 0, totalRotation : 0, totalTracks : 0, totalSatori : 0, restartUpdatesCount : 0, adsCounter : 0, totalDistance : 0, bestCombo : 0, totalJumps : 0, totalSnowmen : 0, bestJumpLen : 0, bestRotation : 0, avalanchesEscaped : 0, complexity : 0};
		var x = 200;
		var y = 200;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var materialConfig = { size : this1, color : 10066380, borderColor : 10066380, borderWidth : 2};
		this.renderer.material = kro13_kk_components_renderer_materials_EMaterial.GUI(materialConfig);
		var _this = this.renderer;
		_this.isLayerValid = false;
		_this._layer = 12;
		this.tramp = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildtTrampoline();
		this.tramp.get_position().x = 60;
		this.tramp.get_position().y = 40;
		this.tramp.transform.set_visible(false);
		this.transform.addChild(this.tramp.transform);
		this.player = new kro13_kk_gameObjects_PlayerBase();
		this.player.build();
		var x = 100;
		var y = 100;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.player.set_position(this1);
		this.transform.addChild(this.player.transform);
		this.playerHUD = new kro13_kk_guiObjects_PlayerHUDBase(this.fakeDP);
		this.playerHUD.build();
		this.playerHUD.setEvenPosition(this.player.get_position().x,this.player.get_position().y);
		this.transform.addChild(this.playerHUD.transform);
		this.playerHUD.setEvenScale(0.7);
		var x = 300;
		var y = 275;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.set_size(this1);
		this.speedPlume = new kro13_kk_gameObjects_fx_SpeedPlume(this.player,this.fakeDP);
		this.speedPlume.build();
		this.transform.addChild(this.speedPlume.transform);
		this.speedPlume.setEvenPosition(this.player.get_position().x,this.player.get_position().y - 40);
	}
	,destroy: function() {
		kro13_kk_gameObjects_Renderable.prototype.destroy.call(this);
	}
	,getPlayer: function() {
		return this.player;
	}
	,getHUD: function() {
		return this.playerHUD;
	}
	,getRotation: function() {
		return this.playerHUD.rotationDisp;
	}
	,getSpeed: function() {
		return this.playerHUD.speedBar;
	}
	,getBonus: function() {
		return this.playerHUD.bonusText;
	}
	,getTramp: function() {
		return this.tramp;
	}
	,__class__: kro13_kk_guiObjects_popups_help_PlayerDemo
});
var kro13_kk_guiObjects_popups_help_SnowmenHelp = function() {
	kro13_kk_gameObjects_Transformable.call(this);
	this.name = "snowmen help";
};
$hxClasses["kro13.kk.guiObjects.popups.help.SnowmenHelp"] = kro13_kk_guiObjects_popups_help_SnowmenHelp;
kro13_kk_guiObjects_popups_help_SnowmenHelp.__name__ = "kro13.kk.guiObjects.popups.help.SnowmenHelp";
kro13_kk_guiObjects_popups_help_SnowmenHelp.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_popups_help_SnowmenHelp.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	build: function() {
		this.demo = new kro13_kk_guiObjects_popups_help_demos_SnowmenDemo(this.get_size().x - 200,2);
		this.demo.setEvenPosition(100,100);
		this.demo.build();
		this.transform.addChild(this.demo.transform);
	}
	,__class__: kro13_kk_guiObjects_popups_help_SnowmenHelp
});
var kro13_kk_guiObjects_popups_help_demos_DemoBase = function(w,demoPos) {
	if(demoPos == null) {
		demoPos = 0;
	}
	kro13_kk_gameObjects_Transformable.call(this);
	this.width = w;
	this.demoPos = demoPos;
	this.addComponent(new kro13_kk_components_Updater(this));
};
$hxClasses["kro13.kk.guiObjects.popups.help.demos.DemoBase"] = kro13_kk_guiObjects_popups_help_demos_DemoBase;
kro13_kk_guiObjects_popups_help_demos_DemoBase.__name__ = "kro13.kk.guiObjects.popups.help.demos.DemoBase";
kro13_kk_guiObjects_popups_help_demos_DemoBase.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_guiObjects_popups_help_demos_DemoBase.__super__ = kro13_kk_gameObjects_Transformable;
kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype = $extend(kro13_kk_gameObjects_Transformable.prototype,{
	update: function(dt) {
		if(this.demo == null) {
			return;
		}
	}
	,build: function() {
		haxepunk_math_Vector2.setTo(this.get_size(),this.width,0);
		this.demo = new kro13_kk_guiObjects_popups_help_PlayerDemo();
		this.demo.build();
		haxepunk_math_Vector2.setTo(this.demo.get_size(),200,200);
		this.transform.addChild(this.demo.transform);
		var align = "left";
		if(this.demoPos == 1) {
			align = "right";
		}
		this.demoText = new kro13_kk_guiObjects_TextField(11250647,46,true,false,align);
		if(this.demoPos == 2) {
			var tmp = this.demoText;
			var x = this.get_size().x;
			var y = 0;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			tmp.set_size(this1);
		} else {
			var tmp = this.demoText;
			var x = this.get_size().x - this.demo.get_size().x - 50;
			var y = 0;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			tmp.set_size(this1);
		}
		this.demoText.build();
		var _this = this.demoText;
		_this.materialConfig.text = this.message;
		_this.renderer.isValid = false;
		this.transform.addChild(this.demoText.transform);
		switch(this.demoPos) {
		case 1:
			this.demo.setEvenPosition(this.get_size().x - this.demo.get_size().x,0);
			this.demoText.setEvenPosition(0,0);
			haxepunk_math_Vector2.setTo(this.get_size(),this.width,Math.max(this.demo.get_size().y,kro13_kk_utils_TextUtils.getTextRect(this.demoText).y));
			break;
		case 2:
			this.demo.setEvenPosition((this.get_size().x - this.demo.get_size().x) * 0.5,0);
			this.demoText.setEvenPosition(0,this.demo.get_size().y + 50);
			haxepunk_math_Vector2.setTo(this.get_size(),this.width,this.demo.get_size().y + 50 + kro13_kk_utils_TextUtils.getTextRect(this.demoText).y);
			break;
		default:
			this.demo.setEvenPosition(0,0);
			this.demoText.setEvenPosition(this.demo.get_position().x + this.demo.get_size().x + 50,0);
			haxepunk_math_Vector2.setTo(this.get_size(),this.width,Math.max(this.demo.get_size().y,kro13_kk_utils_TextUtils.getTextRect(this.demoText).y));
		}
	}
	,setMessage: function(msg) {
		this.message = msg;
	}
	,__class__: kro13_kk_guiObjects_popups_help_demos_DemoBase
});
var kro13_kk_guiObjects_popups_help_demos_AvalancheDemo = function(w,demoPos) {
	if(demoPos == null) {
		demoPos = 0;
	}
	kro13_kk_guiObjects_popups_help_demos_DemoBase.call(this,w,demoPos);
};
$hxClasses["kro13.kk.guiObjects.popups.help.demos.AvalancheDemo"] = kro13_kk_guiObjects_popups_help_demos_AvalancheDemo;
kro13_kk_guiObjects_popups_help_demos_AvalancheDemo.__name__ = "kro13.kk.guiObjects.popups.help.demos.AvalancheDemo";
kro13_kk_guiObjects_popups_help_demos_AvalancheDemo.__super__ = kro13_kk_guiObjects_popups_help_demos_DemoBase;
kro13_kk_guiObjects_popups_help_demos_AvalancheDemo.prototype = $extend(kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype,{
	update: function(dt) {
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.update.call(this,dt);
		if(this.avalancheAlphaSeq.getCurrIdx() < 2) {
			this.demo.fakeDP.getLocal().scoreData.speedRatio = 0.66;
			this.demo.getPlayer().transform.set_rotation(0);
			var _this = this.restartsText;
			_this.materialConfig.text = "x1";
			_this.renderer.isValid = false;
		} else {
			if(this.avalancheAlphaSeq.getCurrIdx() == 3) {
				var _this = this.restartsText;
				_this.materialConfig.text = "x0";
				_this.renderer.isValid = false;
			}
			this.demo.fakeDP.getLocal().scoreData.speedRatio = 0.33;
			this.demo.getPlayer().transform.set_rotation(90);
		}
		this.demo.getHUD().update();
		var tmp = 200 * this.avalancheSize.getValue();
		this.avalancheMaterialConfig.size.y = 40 + tmp;
		this.avalanche.transform.set_alpha(this.avalancheAlpha.getValue());
		this.avalanche.renderer.isValid = false;
		var _this = this.avalancheSize;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		var _this = this.avalancheAlpha;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
	}
	,build: function() {
		this.setMessage(kro13_kk_utils_L.get_instance().HELP6);
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.build.call(this);
		this.demo.getHUD().update();
		this.avalanche = new kro13_kk_gameObjects_Renderable();
		this.avalanche.name = "avalanche demo";
		var x = 200;
		var y = 240;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.avalanche.set_size(this1);
		this.avalanche.setEvenPosition(0,-40);
		this.avalancheMaterialConfig = { size : this.avalanche.get_size(), color : 16777215};
		this.avalanche.renderer.material = kro13_kk_components_renderer_materials_EMaterial.RECTANGLE(this.avalancheMaterialConfig);
		this.demo.transform.addChild(this.avalanche.transform);
		var _this = this.avalanche.renderer;
		_this.isLayerValid = false;
		_this._layer = 7;
		this.demo.getPlayer().get_position().y += 50;
		this.avalancheSizeSeq = new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(0,0.5,1),new kro13_kk_tween_FloatTween(0.5,0,1),new kro13_kk_tween_FloatTween(0,1,1),new kro13_kk_tween_FloatTween(1,1,1)]);
		this.avalancheSize = new kro13_kk_tween_RepeatTween(this.avalancheSizeSeq);
		this.avalancheAlphaSeq = new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(1,1,1),new kro13_kk_tween_FloatTween(1,1,1),new kro13_kk_tween_FloatTween(1,1,1),new kro13_kk_tween_FloatTween(1,0,1)]);
		this.avalancheAlpha = new kro13_kk_tween_RepeatTween(this.avalancheAlphaSeq);
		var restartsIcon = new kro13_kk_gameObjects_Renderable();
		var x = 120;
		var y = 120;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var restartsIconMaterial = { size : this1, source : "images/btn_eagle.png", color : 10066380};
		restartsIcon.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(restartsIconMaterial);
		var x = 120;
		var y = 120;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		restartsIcon.set_size(this1);
		var x = this.demo.get_position().x + this.demo.get_size().x;
		var y = this.demo.get_position().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		restartsIcon.set_position(this1);
		restartsIcon.build();
		this.restartsText = new kro13_kk_guiObjects_TextField(11250647,70);
		this.restartsText.build();
		var _this = this.restartsText;
		_this.materialConfig.text = "x1";
		_this.renderer.isValid = false;
		var restartsSize = kro13_kk_utils_TextUtils.getTextRect(this.restartsText);
		var tmp = this.restartsText;
		var x = restartsIcon.get_position().x + (restartsIcon.get_size().x - restartsSize.x) * 0.5;
		var y = restartsIcon.get_position().y + restartsIcon.get_size().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.set_position(this1);
		this.demo.fakeDP.getLocal().scoreData.avalancheBonus = 1;
	}
	,__class__: kro13_kk_guiObjects_popups_help_demos_AvalancheDemo
});
var kro13_kk_guiObjects_popups_help_demos_MainHelpDemo1 = function(w,demoPos) {
	if(demoPos == null) {
		demoPos = 0;
	}
	kro13_kk_guiObjects_popups_help_demos_DemoBase.call(this,w,demoPos);
};
$hxClasses["kro13.kk.guiObjects.popups.help.demos.MainHelpDemo1"] = kro13_kk_guiObjects_popups_help_demos_MainHelpDemo1;
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo1.__name__ = "kro13.kk.guiObjects.popups.help.demos.MainHelpDemo1";
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo1.__super__ = kro13_kk_guiObjects_popups_help_demos_DemoBase;
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo1.prototype = $extend(kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype,{
	update: function(dt) {
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.update.call(this,dt);
		this.demo.getPlayer().transform.set_rotation(this.rotation.getValue());
		this.demo.fakeDP.getLocal().scoreData.speedRatio = this.speed.getValue();
		this.finger.get_position().x = this.fingerPos.getValue();
		var _this = this.rotation;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		var _this = this.fingerPos;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		var _this = this.speed;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		this.demo.getHUD().update(dt);
	}
	,build: function() {
		this.setMessage(kro13_kk_utils_L.get_instance().HELP1);
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.build.call(this);
		this.demo.getPlayer().transform.get_position().y = 100;
		this.demo.getPlayer().transform.set_rotation(90);
		this.demo.fakeDP.getLocal().scoreData.speedRatio = 0;
		this.demo.fakeDP.getLocal().scoreData.bonusCounter = 0;
		this.demo.getHUD().update();
		this.rotation = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(90,-90,2),new kro13_kk_tween_FloatTween(-90,90,2)]));
		this.fingerPos = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(this.demo.transform.get_size().x - 50,50,2),new kro13_kk_tween_FloatTween(50,this.demo.transform.get_size().x - 50,2)]));
		this.speed = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(0,1,1),new kro13_kk_tween_FloatTween(1,0,1)]));
		this.finger = new kro13_kk_gameObjects_Renderable();
		haxepunk_math_Vector2.setTo(this.finger.get_size(),60,75);
		this.finger.transform.origin.x = 30;
		var tmp = this.finger.get_size();
		this.finger.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE({ source : "images/finger.png", size : tmp});
		this.demo.transform.addChild(this.finger.transform);
		this.finger.setEvenPosition(0,this.demo.transform.get_size().y - 50);
	}
	,__class__: kro13_kk_guiObjects_popups_help_demos_MainHelpDemo1
});
var kro13_kk_guiObjects_popups_help_demos_MainHelpDemo2 = function(w,demoPos) {
	if(demoPos == null) {
		demoPos = 0;
	}
	kro13_kk_guiObjects_popups_help_demos_DemoBase.call(this,w,demoPos);
};
$hxClasses["kro13.kk.guiObjects.popups.help.demos.MainHelpDemo2"] = kro13_kk_guiObjects_popups_help_demos_MainHelpDemo2;
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo2.__name__ = "kro13.kk.guiObjects.popups.help.demos.MainHelpDemo2";
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo2.__super__ = kro13_kk_guiObjects_popups_help_demos_DemoBase;
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo2.prototype = $extend(kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype,{
	update: function(dt) {
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.update.call(this,dt);
		var player = this.demo.getPlayer();
		player.transform.set_rotation(this.rotation.getValue());
		this.demo.fakeDP.getLocal().scoreData.speedRatio = this.speed.getValue();
		this.demo.fakeDP.getLocal().scoreData.bonusCounter = Math.floor(this.bonus.getValue());
		this.demo.getHUD().update(dt);
		var _this = this.rotation;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		var _this = this.speed;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		var _this = this.bonus;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
	}
	,build: function() {
		this.setMessage(kro13_kk_utils_L.get_instance().HELP2);
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.build.call(this);
		this.demo.getPlayer().transform.get_position().y = 100;
		this.demo.getPlayer().transform.set_rotation(0);
		this.demo.fakeDP.getLocal().scoreData.speedRatio = 0.75;
		this.demo.fakeDP.getLocal().scoreData.bonusCounter = 5;
		this.demo.fakeDP.getLocal().scoreData.speedBonus = 2;
		this.demo.getHUD().update();
		this.rotation = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(-10,10,0.6),new kro13_kk_tween_FloatTween(10,-10,0.6)]));
		this.speed = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(0.7,0.8,0.3),new kro13_kk_tween_FloatTween(0.8,0.7,0.3)]));
		this.bonus = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(0,1,1),new kro13_kk_tween_FloatTween(1,2,1),new kro13_kk_tween_FloatTween(2,3,1),new kro13_kk_tween_FloatTween(3,5,1),new kro13_kk_tween_FloatTween(5,5,1),new kro13_kk_tween_FloatTween(5,0,1)]));
	}
	,__class__: kro13_kk_guiObjects_popups_help_demos_MainHelpDemo2
});
var kro13_kk_guiObjects_popups_help_demos_MainHelpDemo3 = function(w,demoPos) {
	if(demoPos == null) {
		demoPos = 0;
	}
	this.jumpCount = 0;
	this.emitted = true;
	this.demoTime = 0;
	kro13_kk_guiObjects_popups_help_demos_DemoBase.call(this,w,demoPos);
};
$hxClasses["kro13.kk.guiObjects.popups.help.demos.MainHelpDemo3"] = kro13_kk_guiObjects_popups_help_demos_MainHelpDemo3;
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo3.__name__ = "kro13.kk.guiObjects.popups.help.demos.MainHelpDemo3";
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo3.__super__ = kro13_kk_guiObjects_popups_help_demos_DemoBase;
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo3.prototype = $extend(kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype,{
	update: function(dt) {
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.update.call(this,dt);
		var player = this.demo.getPlayer();
		player.transform.set_rotation(this.rotation.getValue());
		player.transform.set_scale(this.playerScale.getValue());
		this.finger.get_position().x = this.fingerPos.getValue();
		this.finger.transform.set_alpha(this.fingerAlpha.getValue());
		this.demo.fakeDP.getLocal().scoreData.totalRotation = player.transform.get_rotation();
		this.demo.getHUD().update(dt);
		var _this = this.rotation;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		var _this = this.fingerPos;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		var _this = this.fingerAlpha;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		var _this = this.playerScale;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
	}
	,build: function() {
		this.setMessage(kro13_kk_utils_L.get_instance().HELP3);
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.build.call(this);
		this.demo.getPlayer().transform.set_rotation(0);
		this.demo.fakeDP.getLocal().scoreData.totalRotation = 0;
		this.demo.getTramp().transform.set_visible(true);
		this.demo.getHUD().showRotation();
		this.rotation = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(0,90,0.5,haxepunk_utils_Ease.quintIn),new kro13_kk_tween_FloatTween(90,225,0.25),new kro13_kk_tween_FloatTween(225,360,0.25),new kro13_kk_tween_FloatTween(360,360,1),new kro13_kk_tween_FloatTween(0,90,1,haxepunk_utils_Ease.quintIn),new kro13_kk_tween_FloatTween(90,405,0.5),new kro13_kk_tween_FloatTween(405,720,0.5),new kro13_kk_tween_FloatTween(720,720,1)]));
		this.playerScale = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(1,1,0.5),new kro13_kk_tween_FloatTween(1,1.3,0.25),new kro13_kk_tween_FloatTween(1.3,1,0.25),new kro13_kk_tween_FloatTween(1,1,1),new kro13_kk_tween_FloatTween(1,1,1),new kro13_kk_tween_FloatTween(1,1.5,0.5),new kro13_kk_tween_FloatTween(1.5,1,0.5),new kro13_kk_tween_FloatTween(1,1,1)]));
		this.fingerPos = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(50,this.demo.get_size().x - 50,0.5,haxepunk_utils_Ease.quintIn),new kro13_kk_tween_FloatTween(this.demo.get_size().x - 50,this.demo.get_size().x - 50,0.25),new kro13_kk_tween_FloatTween(this.demo.get_size().x - 50,this.demo.get_size().x - 50,0.25),new kro13_kk_tween_FloatTween(this.demo.get_size().x - 50,this.demo.get_size().x - 50,1),new kro13_kk_tween_FloatTween(0,this.demo.get_size().x,1,haxepunk_utils_Ease.quintIn),new kro13_kk_tween_FloatTween(this.demo.get_size().x,this.demo.get_size().x,0.5),new kro13_kk_tween_FloatTween(this.demo.get_size().x,this.demo.get_size().x,0.5),new kro13_kk_tween_FloatTween(this.demo.get_size().x,this.demo.get_size().x,1)]));
		this.fingerAlpha = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(1,1,0.5),new kro13_kk_tween_FloatTween(0,0,0.25),new kro13_kk_tween_FloatTween(0,0,0.25),new kro13_kk_tween_FloatTween(0,0,1),new kro13_kk_tween_FloatTween(1,1,1),new kro13_kk_tween_FloatTween(0,0,0.5),new kro13_kk_tween_FloatTween(0,0,0.5),new kro13_kk_tween_FloatTween(0,0,1)]));
		this.finger = new kro13_kk_gameObjects_Renderable();
		haxepunk_math_Vector2.setTo(this.finger.get_size(),60,75);
		this.finger.transform.origin.x = 30;
		var tmp = this.finger.get_size();
		this.finger.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE({ source : "images/finger.png", size : tmp});
		this.demo.transform.addChild(this.finger.transform);
		this.finger.setEvenPosition(0,this.demo.transform.get_size().y - 50);
	}
	,__class__: kro13_kk_guiObjects_popups_help_demos_MainHelpDemo3
});
var kro13_kk_guiObjects_popups_help_demos_MainHelpDemo4 = function(w,demoPos) {
	if(demoPos == null) {
		demoPos = 0;
	}
	kro13_kk_guiObjects_popups_help_demos_DemoBase.call(this,w,demoPos);
};
$hxClasses["kro13.kk.guiObjects.popups.help.demos.MainHelpDemo4"] = kro13_kk_guiObjects_popups_help_demos_MainHelpDemo4;
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo4.__name__ = "kro13.kk.guiObjects.popups.help.demos.MainHelpDemo4";
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo4.__super__ = kro13_kk_guiObjects_popups_help_demos_DemoBase;
kro13_kk_guiObjects_popups_help_demos_MainHelpDemo4.prototype = $extend(kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype,{
	build: function() {
		this.setMessage(kro13_kk_utils_L.get_instance().HELP4);
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.build.call(this);
		this.demo.getPlayer().transform.get_position().y = 100;
		this.demo.getPlayer().transform.set_rotation(90);
		this.demo.getHUD().transform.get_position().y = 170;
		this.demo.getHUD().update();
		var btnBack = kro13_kk_guiObjects_GUIObjectsFactory.get_instance().buildSquareButton(null,"images/btn_eagle.png","Btn Restart1");
		var tmp = this.demo.get_position().x;
		var tmp1 = 0.5 * (this.demo.get_size().x - btnBack.get_size().x);
		btnBack.get_position().x = tmp + tmp1;
		var tmp = this.demo.get_position().y + this.demo.get_size().y - btnBack.get_size().y;
		btnBack.get_position().y = tmp + 20;
		this.transform.addChild(btnBack.transform);
	}
	,__class__: kro13_kk_guiObjects_popups_help_demos_MainHelpDemo4
});
var kro13_kk_guiObjects_popups_help_demos_MandalaDemo = function(w,demoPos) {
	if(demoPos == null) {
		demoPos = 0;
	}
	kro13_kk_guiObjects_popups_help_demos_DemoBase.call(this,w,demoPos);
};
$hxClasses["kro13.kk.guiObjects.popups.help.demos.MandalaDemo"] = kro13_kk_guiObjects_popups_help_demos_MandalaDemo;
kro13_kk_guiObjects_popups_help_demos_MandalaDemo.__name__ = "kro13.kk.guiObjects.popups.help.demos.MandalaDemo";
kro13_kk_guiObjects_popups_help_demos_MandalaDemo.__super__ = kro13_kk_guiObjects_popups_help_demos_DemoBase;
kro13_kk_guiObjects_popups_help_demos_MandalaDemo.prototype = $extend(kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype,{
	update: function(dt) {
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.update.call(this,dt);
		this.demo.fakeDP.getLocal().scoreData.avalancheBonus = this.bonus.getValue() | 0;
		this.demo.fakeDP.getLocal().scoreData.totalRotation = this.rotation.getValue();
		this.demo.getHUD().transform.set_scale(this.scale.getValue());
		this.demo.getHUD().update(dt);
		var _this = this.rotation;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		var _this = this.bonus;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		var _this = this.scale;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
	}
	,build: function() {
		this.setMessage(kro13_kk_utils_L.get_instance().HELP9);
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.build.call(this);
		this.demo.getPlayer().transform.get_position().y = 100;
		this.demo.getPlayer().transform.set_rotation(0);
		this.demo.fakeDP.getLocal().scoreData.bonusCounter = 5;
		this.demo.fakeDP.getLocal().scoreData.avalancheBonus = 0;
		this.demo.getHUD().update();
		this.demo.getHUD().showRotation();
		this.rotation = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(0,0,1),new kro13_kk_tween_FloatTween(360,360,0.1),new kro13_kk_tween_FloatTween(360,360,0.1),new kro13_kk_tween_FloatTween(360,360,0.1),new kro13_kk_tween_FloatTween(360,360,0.8),new kro13_kk_tween_FloatTween(0,0,1),new kro13_kk_tween_FloatTween(720,720,0.1),new kro13_kk_tween_FloatTween(720,720,0.2),new kro13_kk_tween_FloatTween(720,720,0.2),new kro13_kk_tween_FloatTween(720,720,0.6)]));
		this.bonus = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(0,0,1),new kro13_kk_tween_FloatTween(0,0,0.1),new kro13_kk_tween_FloatTween(0,0,0.1),new kro13_kk_tween_FloatTween(0,0,0.1),new kro13_kk_tween_FloatTween(0,0,0.8),new kro13_kk_tween_FloatTween(1,1,1),new kro13_kk_tween_FloatTween(1,1,0.1),new kro13_kk_tween_FloatTween(1,1,0.2),new kro13_kk_tween_FloatTween(1,1,0.2),new kro13_kk_tween_FloatTween(1,1,0.6)]));
		this.scale = new kro13_kk_tween_RepeatTween(new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(0.7,0.7,1),new kro13_kk_tween_FloatTween(0.7,0.7,0.1),new kro13_kk_tween_FloatTween(0.7,0.8,0.1),new kro13_kk_tween_FloatTween(0.8,0.7,0.1),new kro13_kk_tween_FloatTween(0.7,0.7,0.8),new kro13_kk_tween_FloatTween(0.7,0.7,1),new kro13_kk_tween_FloatTween(0.7,0.7,0.1),new kro13_kk_tween_FloatTween(0.7,1,0.2),new kro13_kk_tween_FloatTween(1,0.7,0.2),new kro13_kk_tween_FloatTween(0.7,0.7,0.6)]));
	}
	,__class__: kro13_kk_guiObjects_popups_help_demos_MandalaDemo
});
var kro13_kk_guiObjects_popups_help_demos_SnowmenDemo = function(w,demoPos) {
	if(demoPos == null) {
		demoPos = 0;
	}
	this.emittedSnowmen2 = false;
	this.emittedSnowmen1 = false;
	this.demoSnowmenTime = 0;
	kro13_kk_guiObjects_popups_help_demos_DemoBase.call(this,w,demoPos);
};
$hxClasses["kro13.kk.guiObjects.popups.help.demos.SnowmenDemo"] = kro13_kk_guiObjects_popups_help_demos_SnowmenDemo;
kro13_kk_guiObjects_popups_help_demos_SnowmenDemo.__name__ = "kro13.kk.guiObjects.popups.help.demos.SnowmenDemo";
kro13_kk_guiObjects_popups_help_demos_SnowmenDemo.__super__ = kro13_kk_guiObjects_popups_help_demos_DemoBase;
kro13_kk_guiObjects_popups_help_demos_SnowmenDemo.prototype = $extend(kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype,{
	update: function(dt) {
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.update.call(this,dt);
		if(this.demoSnowmenPosSeq.getCurrIdx() == 0) {
			this.demo.fakeDP.getLocal().scoreData.speedRatio = 0.66;
			this.demo.getPlayer().transform.set_rotation(0);
		} else if(this.demoSnowmenPosSeq.getCurrIdx() == 1) {
			if(!this.emittedSnowmen1) {
				this.demo.getHUD().resetScore();
				this.demo.getHUD().emitScore(30);
				this.emittedSnowmen1 = true;
				this.emittedSnowmen2 = false;
				this.snowman.transform.set_visible(false);
			}
		} else if(this.demoSnowmenPosSeq.getCurrIdx() == 2) {
			this.demo.fakeDP.getLocal().scoreData.speedRatio = 0.33;
			this.demo.fakeDP.getLocal().scoreData.speedRatio = 0.33;
			this.demo.getPlayer().transform.set_rotation(90);
			if(!this.snowman.transform.get_visible()) {
				this.snowman.transform.set_visible(true);
			}
		} else if(!this.emittedSnowmen2) {
			this.demo.getHUD().resetScore();
			this.demo.getHUD().emitScore(-15);
			this.emittedSnowmen2 = true;
			this.emittedSnowmen1 = false;
		}
		this.demo.getHUD().update();
		var _this = this.demoSnowmenPos;
		if(_this.isRunning()) {
			_this.tween.update(dt);
		} else {
			_this.reset();
		}
		this.demoSnowmenTime += dt;
		this.snowman.get_position().y = this.demoSnowmenPos.getValue();
	}
	,build: function() {
		this.setMessage(kro13_kk_utils_L.get_instance().HELP5);
		kro13_kk_guiObjects_popups_help_demos_DemoBase.prototype.build.call(this);
		this.demo.getHUD().update();
		this.snowman = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildSnowman();
		this.demo.transform.addChild(this.snowman.transform);
		this.snowman.setEvenPosition(80,this.demo.transform.get_size().y);
		var hitPos = 60;
		var startPos = 0;
		this.demoSnowmenPosSeq = new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(this.demo.transform.get_size().y - startPos,this.demo.transform.get_size().y - hitPos,0.7),new kro13_kk_tween_FloatTween(this.demo.transform.get_size().y - hitPos,this.demo.transform.get_size().y - hitPos,1),new kro13_kk_tween_FloatTween(this.demo.transform.get_size().y - startPos,this.demo.transform.get_size().y - hitPos - 20,2),new kro13_kk_tween_FloatTween(this.demo.transform.get_size().y - hitPos - 20,this.demo.transform.get_size().y - hitPos - 20,1)]);
		this.demoSnowmenPos = new kro13_kk_tween_RepeatTween(this.demoSnowmenPosSeq);
	}
	,__class__: kro13_kk_guiObjects_popups_help_demos_SnowmenDemo
});
var kro13_kk_guiObjects_preloader_PreloaderRotate = function(preloader) {
	kro13_kk_components_animation_AbstractAnimation.call(this);
	this.preloader = preloader;
};
$hxClasses["kro13.kk.guiObjects.preloader.PreloaderRotate"] = kro13_kk_guiObjects_preloader_PreloaderRotate;
kro13_kk_guiObjects_preloader_PreloaderRotate.__name__ = "kro13.kk.guiObjects.preloader.PreloaderRotate";
kro13_kk_guiObjects_preloader_PreloaderRotate.__super__ = kro13_kk_components_animation_AbstractAnimation;
kro13_kk_guiObjects_preloader_PreloaderRotate.prototype = $extend(kro13_kk_components_animation_AbstractAnimation.prototype,{
	update: function(dt) {
		var _g = this.preloader.icon.transform;
		_g.set_rotation(_g.get_rotation() - dt * 1000);
	}
	,__class__: kro13_kk_guiObjects_preloader_PreloaderRotate
});
var kro13_kk_maps_CanyonMap = function() {
};
$hxClasses["kro13.kk.maps.CanyonMap"] = kro13_kk_maps_CanyonMap;
kro13_kk_maps_CanyonMap.__name__ = "kro13.kk.maps.CanyonMap";
kro13_kk_maps_CanyonMap.generateRandom = function(blocksCount,minBlockW,minBlockH,maxBlockW,maxBlockH,minBlockShift,maxNatureObjects,maxSnowmen,minTramps,maxTramps,firstLink,fixedShift) {
	if(fixedShift == null) {
		fixedShift = false;
	}
	if(firstLink == null) {
		firstLink = false;
	}
	if(maxTramps == null) {
		maxTramps = 5;
	}
	if(minTramps == null) {
		minTramps = 1;
	}
	if(maxSnowmen == null) {
		maxSnowmen = 3;
	}
	if(maxNatureObjects == null) {
		maxNatureObjects = 3;
	}
	if(minBlockShift == null) {
		minBlockShift = 3;
	}
	if(maxBlockH == null) {
		maxBlockH = 3;
	}
	if(maxBlockW == null) {
		maxBlockW = 3;
	}
	if(minBlockH == null) {
		minBlockH = 3;
	}
	if(minBlockW == null) {
		minBlockW = 3;
	}
	if(blocksCount == null) {
		blocksCount = 40;
	}
	var map = new kro13_kk_maps_CanyonMap();
	map.ground = kro13_kk_maps_GroundMap.generateRandom(blocksCount,minBlockW,minBlockH,maxBlockW,maxBlockH,minBlockShift,maxNatureObjects,maxSnowmen,minTramps,maxTramps,firstLink,fixedShift);
	map.leftWall = map.ground.getLeftMould();
	map.leftWallWall = map.leftWall.getLeftMould();
	map.rightWall = map.ground.getRightMould();
	map.rightWallWall = map.rightWall.getRightMould();
	return map;
};
kro13_kk_maps_CanyonMap.buildEndingGroundMap = function(position,width,height) {
	var endingBlockMap = new kro13_kk_maps_GroundBlockMap();
	endingBlockMap.position = position;
	var x = width;
	var y = height;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	endingBlockMap.size = this1;
	endingBlockMap.addBorder(0);
	endingBlockMap.addSpots(5);
	endingBlockMap.addNatureObjects(3);
	var endingMap = new kro13_kk_maps_GroundMap();
	endingMap.addBlock(endingBlockMap);
	return endingMap;
};
kro13_kk_maps_CanyonMap.buildEndingWallMap = function(endingMap) {
	var endingBlock = endingMap.getLastBlock();
	var ewWidth = 10;
	var ewHeignt = 5;
	var endingWallBlockMapL = new kro13_kk_maps_GroundBlockMap();
	var this1 = endingBlock.position;
	var x = -ewWidth;
	var y = -1;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var other_x = x;
	var other_y = y;
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x += other_x;
	this2.y += other_y;
	endingWallBlockMapL.position = this2;
	var x = ewWidth;
	var y = endingBlock.size.y + 1;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	endingWallBlockMapL.size = this1;
	endingWallBlockMapL.addSpots(5);
	endingWallBlockMapL.addNatureObjects(5);
	endingWallBlockMapL.addBorder(0);
	endingWallBlockMapL.addBorder(1);
	var endingWallBlockMapM = new kro13_kk_maps_GroundBlockMap();
	var this1 = endingBlock.position;
	var x = -ewWidth;
	var y = endingBlock.size.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var other_x = x;
	var other_y = y;
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x += other_x;
	this2.y += other_y;
	endingWallBlockMapM.position = this2;
	var x = 2 * ewWidth + endingBlock.size.x;
	var y = ewHeignt;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	endingWallBlockMapM.size = this1;
	endingWallBlockMapM.addSpots(5);
	endingWallBlockMapM.addNatureObjects(5);
	endingWallBlockMapM.addBorder(0);
	var endingWallBlockMapR = new kro13_kk_maps_GroundBlockMap();
	var this1 = endingBlock.position;
	var x = endingBlock.size.x;
	var y = -1;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var other_x = x;
	var other_y = y;
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x += other_x;
	this2.y += other_y;
	endingWallBlockMapR.position = this2;
	var x = ewWidth;
	var y = endingBlock.size.y + 1;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	endingWallBlockMapR.size = this1;
	endingWallBlockMapR.addSpots(5);
	endingWallBlockMapR.addNatureObjects(5);
	endingWallBlockMapR.addBorder(0);
	endingWallBlockMapR.addBorder(2);
	var endingWallBlockMapBig = new kro13_kk_maps_GroundBlockMap();
	var this1 = endingBlock.position;
	var x = -2 * ewWidth;
	var y = endingBlock.size.y + ewHeignt;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var other_x = x;
	var other_y = y;
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x += other_x;
	this2.y += other_y;
	endingWallBlockMapBig.position = this2;
	var x = 4 * ewWidth + endingBlock.size.x;
	var y = 40;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	endingWallBlockMapBig.size = this1;
	endingWallBlockMapBig.addSpots(50,30);
	endingWallBlockMapBig.addNatureObjects(50,30);
	var endingWallMap = new kro13_kk_maps_GroundMap();
	endingWallMap.addBlock(endingWallBlockMapL);
	endingWallMap.addBlock(endingWallBlockMapM);
	endingWallMap.addBlock(endingWallBlockMapR);
	endingWallMap.addBlock(endingWallBlockMapBig);
	return endingWallMap;
};
kro13_kk_maps_CanyonMap.prototype = {
	linkTo: function(map) {
		var bPrev = map.ground.getLastBlock();
		var bLPrev = map.leftWall.getLastBlock();
		var bLLPrev = map.leftWallWall.getLastBlock();
		var bRPrev = map.rightWall.getLastBlock();
		var bRRPrev = map.rightWallWall.getLastBlock();
		var bNext = this.ground.getFirstBlock();
		var bLNext = this.leftWall.getFirstBlock();
		var bLLNext = this.leftWallWall.getFirstBlock();
		var bRNext = this.rightWall.getFirstBlock();
		var bRRNext = this.rightWallWall.getFirstBlock();
		var shift = bPrev.position.x + Math.round((bPrev.size.x - bNext.size.x) * 0.5);
		var _g = 0;
		var _g1 = this.ground.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.position.x += shift;
		}
		var _g = 0;
		var _g1 = this.leftWall.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.position.x += shift;
		}
		var _g = 0;
		var _g1 = this.leftWallWall.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.position.x += shift;
		}
		var _g = 0;
		var _g1 = this.rightWall.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.position.x += shift;
		}
		var _g = 0;
		var _g1 = this.rightWallWall.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.position.x += shift;
		}
		var prevPoints = { x : bPrev.position.x, xL : bLPrev.position.x, xLL : bLLPrev.position.x, xR : bRPrev.position.x, xRR : bRRPrev.position.x, xwRR : bRRPrev.position.x + bRRPrev.size.x};
		var nextPoints = { x : bNext.position.x, xL : bLNext.position.x, xLL : bLLNext.position.x, xR : bRNext.position.x, xRR : bRRNext.position.x, xwRR : bRRNext.position.x + bRRNext.size.x};
		var b1Points = null;
		var b2Points = null;
		if(bPrev.size.x <= bNext.size.x) {
			b1Points = this.calculateBlockPoints(prevPoints,nextPoints);
			b2Points = this.calculateBlockPoints(b1Points,nextPoints);
		} else {
			b1Points = this.calculateBlockPoints(nextPoints,prevPoints);
			b2Points = this.calculateBlockPoints(b1Points,prevPoints);
		}
		var b1 = this.buildBlockFromPoints(b1Points.x,b1Points.xR);
		var bL1 = this.buildBlockFromPoints(b1Points.xL,b1Points.x);
		bL1.position.y -= 1;
		bL1.addBorder(0);
		bL1.addBorder(1);
		var bLL1 = this.buildBlockFromPoints(b1Points.xLL,b1Points.xL);
		bLL1.position.y -= 2;
		bLL1.addBorder(0);
		bLL1.addBorder(1);
		var bR1 = this.buildBlockFromPoints(b1Points.xR,b1Points.xRR);
		bR1.position.y -= 1;
		bR1.addBorder(0);
		bR1.addBorder(2);
		var bRR1 = this.buildBlockFromPoints(b1Points.xRR,b1Points.xwRR);
		bRR1.position.y -= 2;
		bRR1.addBorder(0);
		bRR1.addBorder(2);
		var b2 = this.buildBlockFromPoints(b2Points.x,b2Points.xR);
		var bL2 = this.buildBlockFromPoints(b2Points.xL,b2Points.x);
		bL2.position.y -= 1;
		bL2.addBorder(0);
		bL2.addBorder(1);
		var bLL2 = this.buildBlockFromPoints(b2Points.xLL,b2Points.xL);
		bLL2.position.y -= 2;
		bLL2.addBorder(0);
		bLL2.addBorder(1);
		var bR2 = this.buildBlockFromPoints(b2Points.xR,b2Points.xRR);
		bR2.position.y -= 1;
		bR2.addBorder(0);
		bR2.addBorder(2);
		var bRR2 = this.buildBlockFromPoints(b2Points.xRR,b2Points.xwRR);
		bRR2.position.y -= 2;
		bRR2.addBorder(0);
		bRR2.addBorder(2);
		if(bPrev.size.x <= bNext.size.x) {
			this.ground.addBlockAtStart(b2);
			this.leftWall.addBlockAtStart(bL2);
			this.rightWall.addBlockAtStart(bR2);
			this.leftWallWall.addBlockAtStart(bLL2);
			this.rightWallWall.addBlockAtStart(bRR2);
			this.ground.addBlockAtStart(b1);
			this.leftWall.addBlockAtStart(bL1);
			this.rightWall.addBlockAtStart(bR1);
			this.leftWallWall.addBlockAtStart(bLL1);
			this.rightWallWall.addBlockAtStart(bRR1);
		} else {
			this.ground.addBlockAtStart(b1);
			this.leftWall.addBlockAtStart(bL1);
			this.rightWall.addBlockAtStart(bR1);
			this.leftWallWall.addBlockAtStart(bLL1);
			this.rightWallWall.addBlockAtStart(bRR1);
			this.ground.addBlockAtStart(b2);
			this.leftWall.addBlockAtStart(bL2);
			this.rightWall.addBlockAtStart(bR2);
			this.leftWallWall.addBlockAtStart(bLL2);
			this.rightWallWall.addBlockAtStart(bRR2);
		}
	}
	,printPoints: function(points) {
		haxe_Log.trace("" + points.xLL + " " + points.xL + " " + points.x + " " + points.xR + " " + points.xRR + " " + points.xwRR,{ fileName : "src/kro13/kk/maps/CanyonMap.hx", lineNumber : 199, className : "kro13.kk.maps.CanyonMap", methodName : "printPoints"});
	}
	,calculateBlockPoints: function(prevPoints,nextPoints) {
		var xLL = prevPoints.xLL;
		var xL = prevPoints.xL;
		var x = prevPoints.x;
		var xR = prevPoints.xR;
		var xRR = prevPoints.xRR;
		var xwRR = prevPoints.xwRR;
		if(prevPoints.xL >= nextPoints.x) {
			x = prevPoints.xL;
			xL = prevPoints.xLL;
		}
		if(prevPoints.xLL > nextPoints.x) {
			xLL = nextPoints.x;
		} else if(prevPoints.xLL > nextPoints.xL) {
			xLL = nextPoints.xL;
		}
		if(prevPoints.xL < nextPoints.xLL) {
			xL = nextPoints.xLL;
		}
		if(prevPoints.xRR <= nextPoints.xR) {
			xR = prevPoints.xRR;
			xRR = prevPoints.xwRR;
		}
		if(prevPoints.xwRR < nextPoints.xR) {
			xwRR = nextPoints.xR;
		} else if(prevPoints.xwRR < nextPoints.xRR) {
			xwRR = nextPoints.xRR;
		}
		if(prevPoints.xRR > nextPoints.xwRR) {
			xRR = nextPoints.xwRR;
		}
		if(xLL == xL) {
			--xLL;
		}
		if(xRR == xwRR) {
			++xwRR;
		}
		return { x : x, xL : xL, xLL : xLL, xR : xR, xRR : xRR, xwRR : xwRR};
	}
	,buildBlockFromPoints: function(x1,x2) {
		var b = new kro13_kk_maps_GroundBlockMap();
		var x = x2 - x1;
		var y = 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		b.size = this1;
		var x = x1;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		b.position = this1;
		return b;
	}
	,__class__: kro13_kk_maps_CanyonMap
};
var kro13_kk_maps_CliffMap = function() {
	this.levels = [];
};
$hxClasses["kro13.kk.maps.CliffMap"] = kro13_kk_maps_CliffMap;
kro13_kk_maps_CliffMap.__name__ = "kro13.kk.maps.CliffMap";
kro13_kk_maps_CliffMap.generateRandom = function(areaW,areaH,minSize,maxSize,levelsCount) {
	if(levelsCount == null) {
		levelsCount = 3;
	}
	if(maxSize == null) {
		maxSize = 6;
	}
	if(minSize == null) {
		minSize = 4;
	}
	var map = new kro13_kk_maps_CliffMap();
	map.buildLevels(areaW,areaH,minSize,maxSize,levelsCount);
	return map;
};
kro13_kk_maps_CliffMap.prototype = {
	buildLevels: function(areaW,areaH,minSize,maxSize,levelsCount) {
		if(levelsCount > 3) {
			throw haxe_Exception.thrown("a cliff can not have more than 3 levels!");
		}
		if(levelsCount < 1) {
			throw haxe_Exception.thrown("a cliff can not have less than 1 level!");
		}
		this.levels = [];
		this.levels.push([this.generateLevel(areaW,areaH,minSize,maxSize,1,2)]);
		if(levelsCount == 1) {
			return;
		}
		var prevLvl = this.levels[0][0];
		if(levelsCount == 3) {
			this.levels.push([this.generateLevel(areaW,areaH,minSize,maxSize,prevLvl.z + 1,prevLvl.z + 2)]);
			prevLvl = this.levels[1][0];
		}
		this.levels.push([this.generateLevel(areaW,areaH,minSize - 2,maxSize - 2,prevLvl.z + 1,prevLvl.z + 2)]);
		var l = areaW;
		var t = 0;
		var r = 0;
		var b = areaH;
		var _g = 0;
		var _g1 = this.levels;
		while(_g < _g1.length) {
			var lvl = _g1[_g];
			++_g;
			if(lvl[0].position.x < l) {
				l = lvl[0].position.x;
			}
			if(lvl[0].position.x + lvl[0].size.x > r) {
				r = lvl[0].position.x + lvl[0].size.x;
			}
			if(lvl[0].position.y < b) {
				b = lvl[0].position.y;
			}
			if(lvl[0].position.y + lvl[0].size.y + lvl[0].z > t) {
				t = lvl[0].position.y + lvl[0].size.y + lvl[0].z;
			}
		}
		var x = r - l;
		var y = t - b;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		this.size = this1;
		var _g = 0;
		var _g1 = this.levels;
		while(_g < _g1.length) {
			var lvl = _g1[_g];
			++_g;
			lvl[0].position.x -= l;
			lvl[0].position.y -= b;
		}
		var _g = 0;
		var _g1 = this.levels.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = i + 1;
			var _g3 = this.levels.length;
			while(_g2 < _g3) {
				var j = _g2++;
				this.levels[i] = this.divideLevels(this.levels[i],this.levels[j][0]);
			}
		}
	}
	,divideLevels: function(levels,aboveLevel) {
		var newLevels = [];
		var aL = aboveLevel.position.x;
		var aR = aboveLevel.position.x + aboveLevel.size.x;
		var aB = aboveLevel.position.y;
		var aT = aboveLevel.position.y + aboveLevel.size.y;
		var _g = 0;
		while(_g < levels.length) {
			var lvl = levels[_g];
			++_g;
			var l = lvl.position.x;
			var r = lvl.position.x + lvl.size.x;
			var b = lvl.position.y;
			var t = lvl.position.y + lvl.size.y;
			if(aL > l && aL < r) {
				var x = aL - l;
				var y = lvl.size.y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var this1 = { x : x, y : y};
				var x1 = lvl.position.x;
				var y1 = lvl.position.y;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var this2 = { x : x1, y : y1};
				newLevels.push({ size : this1, position : this2, z : lvl.z});
			}
			if(aR > l && aR < r) {
				var x2 = r - aR;
				var y2 = lvl.size.y;
				if(y2 == null) {
					y2 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				var this3 = { x : x2, y : y2};
				var x3 = aR;
				var y3 = lvl.position.y;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var this4 = { x : x3, y : y3};
				newLevels.push({ size : this3, position : this4, z : lvl.z});
			}
			if(aB > b && aB < t) {
				var x4 = lvl.size.x;
				var y4 = aB - b;
				if(y4 == null) {
					y4 = 0;
				}
				if(x4 == null) {
					x4 = 0;
				}
				var this5 = { x : x4, y : y4};
				var x5 = lvl.position.x;
				var y5 = lvl.position.y;
				if(y5 == null) {
					y5 = 0;
				}
				if(x5 == null) {
					x5 = 0;
				}
				var this6 = { x : x5, y : y5};
				newLevels.push({ size : this5, position : this6, z : lvl.z});
			}
			if(aT > b && aT < t) {
				var x6 = lvl.size.x;
				var y6 = t - aT;
				if(y6 == null) {
					y6 = 0;
				}
				if(x6 == null) {
					x6 = 0;
				}
				var this7 = { x : x6, y : y6};
				var x7 = lvl.position.x;
				var y7 = aT;
				if(y7 == null) {
					y7 = 0;
				}
				if(x7 == null) {
					x7 = 0;
				}
				var this8 = { x : x7, y : y7};
				newLevels.push({ size : this7, position : this8, z : lvl.z});
			}
		}
		return newLevels;
	}
	,getLevels: function() {
		return this.levels;
	}
	,getSize: function() {
		return this.size;
	}
	,print: function() {
		haxe_Log.trace("cliff map " + this.size.x + ", " + this.size.y + ":",{ fileName : "src/kro13/kk/maps/CliffMap.hx", lineNumber : 149, className : "kro13.kk.maps.CliffMap", methodName : "print"});
	}
	,generateLevel: function(areaW,areaH,minSize,maxSize,minZ,maxZ) {
		var x = kro13_kk_utils_MathUtils.get_instance().randomRange(minSize,maxSize);
		var y = kro13_kk_utils_MathUtils.get_instance().randomRange(minSize,maxSize);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var size = this1;
		var posRangeX = areaW - size.x;
		var posRangeY = areaH - size.y;
		var x = kro13_kk_utils_MathUtils.get_instance().randomRange(0,posRangeX);
		var y = kro13_kk_utils_MathUtils.get_instance().randomRange(0,posRangeY);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var position = this1;
		return { size : size, position : position, z : kro13_kk_utils_MathUtils.get_instance().randomRange(minZ,maxZ)};
	}
	,__class__: kro13_kk_maps_CliffMap
};
var kro13_kk_maps_GroundBlockMap = function() {
	this.borders = [];
	this.natureObjects = [];
	this.spots = [];
	this.shadows = [];
	this.trampolines = [];
	this.snowmen = [];
	var this1 = { x : 0, y : 0};
	this.size = this1;
	var this1 = { x : 0, y : 0};
	this.position = this1;
	this.landscapeDecore = [];
};
$hxClasses["kro13.kk.maps.GroundBlockMap"] = kro13_kk_maps_GroundBlockMap;
kro13_kk_maps_GroundBlockMap.__name__ = "kro13.kk.maps.GroundBlockMap";
kro13_kk_maps_GroundBlockMap.generateRandom = function(minW,minH,maxW,maxH) {
	if(maxH == null) {
		maxH = 20;
	}
	if(maxW == null) {
		maxW = 20;
	}
	if(minH == null) {
		minH = 3;
	}
	if(minW == null) {
		minW = 3;
	}
	var newBlock = new kro13_kk_maps_GroundBlockMap();
	var x = kro13_kk_utils_MathUtils.get_instance().randomRange(minW,maxW);
	var y = kro13_kk_utils_MathUtils.get_instance().randomRange(minH,maxH);
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var randomSize = this1;
	newBlock.size = randomSize;
	var x = 0;
	var y = 0;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	newBlock.position = this1;
	return newBlock;
};
kro13_kk_maps_GroundBlockMap.prototype = {
	tryAddLandscapeDecore: function() {
		if(this.size.x >= 6 && this.size.y >= 4 && Math.random() > 0.9) {
			var tmp = this.landscapeDecore;
			var x = kro13_kk_utils_MathUtils.get_instance().randomRange(3,this.size.x - 3);
			var y = kro13_kk_utils_MathUtils.get_instance().randomRange(2,this.size.y - 2);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			tmp.push(this1);
		}
	}
	,getLandscapeDecore: function() {
		return this.landscapeDecore;
	}
	,addBorder: function(direction) {
		if(this.borders.indexOf(direction) < 0) {
			this.borders.push(direction);
		}
	}
	,removeBorder: function(direction) {
		if(this.borders.indexOf(direction) >= 0) {
			HxOverrides.remove(this.borders,direction);
		}
	}
	,getBorders: function() {
		return this.borders;
	}
	,addSnowmen: function(max,min) {
		if(min == null) {
			min = 0;
		}
		if(max == null) {
			max = 1;
		}
		var count = kro13_kk_utils_MathUtils.get_instance().randomRange(min,max);
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var x = kro13_kk_utils_MathUtils.get_instance().randomRange(0,this.size.x - 1);
			var y = kro13_kk_utils_MathUtils.get_instance().randomRange(0,this.size.y - 1);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var snowman = this1;
			this.snowmen.push(snowman);
		}
		this.snowmen.sort($bind(this,this.sortByY));
		this.cleanDuplicates(this.natureObjects,this.snowmen);
		this.cleanDuplicates(this.snowmen);
	}
	,getSnowmen: function() {
		return this.snowmen;
	}
	,addTrampolines: function(count) {
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var x = Math.round(this.size.x * 0.5) - 1;
			var y = Math.round(this.size.y * 0.5) - 1;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var tramp = this1;
			this.trampolines.push(tramp);
		}
	}
	,getTrampolines: function() {
		return this.trampolines;
	}
	,addSpots: function(max,min) {
		if(min == null) {
			min = 0;
		}
		if(max == null) {
			max = 3;
		}
		var spotsCount = kro13_kk_utils_MathUtils.get_instance().randomRange(0,max);
		if(this.size.x > 1 && this.size.y > 1) {
			var _g = 0;
			var _g1 = spotsCount;
			while(_g < _g1) {
				var i = _g++;
				this.addSpot(kro13_kk_utils_MathUtils.get_instance().randomRange(0,this.size.x - 1),kro13_kk_utils_MathUtils.get_instance().randomRange(0,this.size.y - 1));
			}
		}
	}
	,getSposts: function() {
		return this.spots;
	}
	,addNatureObjects: function(max,min) {
		if(min == null) {
			min = 0;
		}
		if(max == null) {
			max = 3;
		}
		if(this.size.y <= 4 && this.size.x / this.size.y >= 2) {
			min = 0;
			max = 1;
		}
		var objectsCount = kro13_kk_utils_MathUtils.get_instance().randomRange(min,max);
		if(this.size.x > 1 && this.size.y > 1) {
			var _g = 0;
			var _g1 = objectsCount;
			while(_g < _g1) {
				var i = _g++;
				var x = kro13_kk_utils_MathUtils.get_instance().randomRange(1,this.size.x - 1);
				var y = kro13_kk_utils_MathUtils.get_instance().randomRange(1,this.size.y - 1);
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var this1 = { x : x, y : y};
				var natureObject = this1;
				this.natureObjects.push(natureObject);
			}
		}
		this.natureObjects.sort($bind(this,this.sortByY));
		this.cleanDuplicates(this.natureObjects);
		this.cleanDuplicates(this.natureObjects,this.snowmen);
	}
	,getNatureObjects: function() {
		return this.natureObjects;
	}
	,addSpot: function(x,y) {
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var this1 = { x : x1, y : y1};
		var spot = this1;
		this.spots.push(spot);
	}
	,addShadow: function(x,y) {
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var this1 = { x : x1, y : y1};
		this.shadows.push(this1);
	}
	,sortByY: function(v1,v2) {
		if(v1.y > v2.y) {
			return 1;
		} else if(v1.y < v2.y) {
			return -1;
		}
		return 0;
	}
	,cleanDuplicates: function(arr1,arr2) {
		if(arr2 == null) {
			arr2 = arr1.slice();
		}
		var i = arr2.length - 1;
		while(i >= 0) {
			var obj2 = arr2[i];
			var j = arr1.length - 1;
			while(j >= 0) {
				var obj1 = arr1[j];
				if(obj1 != obj2 && obj1.x == obj2.x && obj1.y == obj2.y) {
					HxOverrides.remove(arr1,obj1);
				}
				--j;
			}
			--i;
		}
	}
	,__class__: kro13_kk_maps_GroundBlockMap
};
var kro13_kk_maps_GroundMap = function() {
	this.blocks = [];
};
$hxClasses["kro13.kk.maps.GroundMap"] = kro13_kk_maps_GroundMap;
kro13_kk_maps_GroundMap.__name__ = "kro13.kk.maps.GroundMap";
kro13_kk_maps_GroundMap.generateRandom = function(blocksCount,minW,minH,maxW,maxH,minShift,maxNatureObjects,maxSnowmen,minTramps,maxTramps,firstLink,fixedShift) {
	if(fixedShift == null) {
		fixedShift = false;
	}
	if(firstLink == null) {
		firstLink = false;
	}
	if(maxTramps == null) {
		maxTramps = 5;
	}
	if(minTramps == null) {
		minTramps = 1;
	}
	if(maxSnowmen == null) {
		maxSnowmen = 1;
	}
	if(maxNatureObjects == null) {
		maxNatureObjects = 3;
	}
	if(minShift == null) {
		minShift = 3;
	}
	if(maxH == null) {
		maxH = 20;
	}
	if(maxW == null) {
		maxW = 20;
	}
	if(minH == null) {
		minH = 3;
	}
	if(minW == null) {
		minW = 3;
	}
	if(blocksCount == null) {
		blocksCount = 40;
	}
	var newGround = new kro13_kk_maps_GroundMap();
	while(newGround.get_blocksCount() < blocksCount) {
		var newBlock = kro13_kk_maps_GroundBlockMap.generateRandom(minW,minH,maxW,maxH);
		var lastBlock = newGround.getLastBlock();
		if(newGround.get_blocksCount() == 0 && firstLink) {
			if(newBlock.size.y < 5) {
				newBlock.size.y = 5;
			}
		} else if(lastBlock != null) {
			var xR = 0;
			if(fixedShift) {
				xR = Math.random() > 0.5 ? -newBlock.size.x + minShift : lastBlock.size.x - minShift;
			} else {
				xR = kro13_kk_utils_MathUtils.get_instance().randomRange(-newBlock.size.x + minShift,lastBlock.size.x - minShift);
			}
			var this1 = lastBlock.position;
			var x = xR;
			var y = lastBlock.size.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var other_x = x;
			var other_y = y;
			var x1 = this1.x;
			var y1 = this1.y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var this2 = { x : x1, y : y1};
			var this3 = this2;
			this3.x += other_x;
			this3.y += other_y;
			newBlock.position = this3;
			newBlock.addNatureObjects(maxNatureObjects);
			newBlock.addSnowmen(maxSnowmen);
		}
		newBlock.addSpots(5);
		newBlock.addBorder(0);
		newGround.addBlock(newBlock);
	}
	var trampsCount = kro13_kk_utils_MathUtils.get_instance().randomRange(minTramps,maxTramps);
	var goodBlocks = [];
	var _g_current = 0;
	var _g_array = newGround.blocks;
	while(_g_current < _g_array.length) {
		var b = _g_array[_g_current++];
		if(b.size.x > 2 && b.size.y > 3 && b.size.x <= b.size.y) {
			goodBlocks.push(b);
		}
	}
	var trampBlocks = kro13_kk_utils_MathUtils.get_instance().randomArray(trampsCount,goodBlocks);
	var _g = 0;
	while(_g < trampBlocks.length) {
		var b = trampBlocks[_g];
		++_g;
		b.addTrampolines(1);
	}
	return newGround;
};
kro13_kk_maps_GroundMap.prototype = {
	getLeftMould: function() {
		var newGround = new kro13_kk_maps_GroundMap();
		var _g = 0;
		var _g1 = this.get_blocksCount();
		while(_g < _g1) {
			var i = _g++;
			var block = this.blocks[i];
			var minSizeX = 1;
			var prevBlock = i > 0 ? this.blocks[i - 1] : null;
			var nextBlock = i < this.get_blocksCount() - 1 ? this.blocks[i + 1] : null;
			if(prevBlock != null && nextBlock != null) {
				var prevX = Math.round(Math.abs(prevBlock.position.x - block.position.x));
				var nextX = Math.round(Math.abs(nextBlock.position.x - block.position.x));
				if(block.position.x <= prevBlock.position.x && block.position.x <= nextBlock.position.x) {
					minSizeX = 1;
				} else if(prevBlock.position.x < nextBlock.position.x) {
					minSizeX = prevX;
				} else {
					minSizeX = nextX;
				}
			} else if(prevBlock != null) {
				if(block.position.x <= prevBlock.position.x) {
					minSizeX = 1;
				} else {
					minSizeX = Math.round(Math.abs(prevBlock.position.x - block.position.x));
				}
			} else if(nextBlock != null) {
				if(block.position.x <= nextBlock.position.x) {
					minSizeX = 1;
				} else {
					minSizeX = Math.round(Math.abs(nextBlock.position.x - block.position.x));
				}
			}
			var newBlock = new kro13_kk_maps_GroundBlockMap();
			var sizeX = kro13_kk_utils_MathUtils.get_instance().randomRange(minSizeX,minSizeX + 5);
			var x = sizeX;
			var y = block.size.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			newBlock.size = this1;
			var x1 = block.position.x - newBlock.size.x;
			var y1 = block.position.y - 1;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var this2 = { x : x1, y : y1};
			newBlock.position = this2;
			newBlock.addBorder(1);
			newBlock.addBorder(0);
			newBlock.addSpots(5);
			newBlock.addNatureObjects(10);
			newGround.addBlock(newBlock);
		}
		return newGround;
	}
	,getRightMould: function() {
		var newGround = new kro13_kk_maps_GroundMap();
		var _g = 0;
		var _g1 = this.get_blocksCount();
		while(_g < _g1) {
			var i = _g++;
			var block = this.blocks[i];
			var minSizeX = 1;
			var prevBlock = i > 0 ? this.blocks[i - 1] : null;
			var nextBlock = i < this.get_blocksCount() - 1 ? this.blocks[i + 1] : null;
			if(prevBlock != null && nextBlock != null) {
				var prevX = Math.round(Math.abs(prevBlock.position.x + prevBlock.size.x - block.position.x - block.size.x));
				var nextX = Math.round(Math.abs(nextBlock.position.x + nextBlock.size.x - block.position.x - block.size.x));
				if(block.position.x + block.size.x >= prevBlock.position.x + prevBlock.size.x && block.position.x + block.size.x >= nextBlock.position.x + nextBlock.size.x) {
					minSizeX = 1;
				} else if(prevBlock.position.x + prevBlock.size.x > nextBlock.position.x + nextBlock.size.x) {
					minSizeX = prevX;
				} else {
					minSizeX = nextX;
				}
			} else if(prevBlock != null) {
				if(block.position.x + block.size.x >= prevBlock.position.x + prevBlock.size.x) {
					minSizeX = 1;
				} else {
					minSizeX = Math.round(Math.abs(prevBlock.position.x + prevBlock.size.x - block.position.x - block.size.x));
				}
			} else if(nextBlock != null) {
				if(block.position.x + block.size.x >= nextBlock.position.x + nextBlock.size.x) {
					minSizeX = 1;
				} else {
					minSizeX = Math.round(Math.abs(nextBlock.position.x + nextBlock.size.x - block.position.x - block.size.x));
				}
			}
			var newBlock = new kro13_kk_maps_GroundBlockMap();
			var sizeX = kro13_kk_utils_MathUtils.get_instance().randomRange(minSizeX,minSizeX + 5);
			var x = sizeX;
			var y = block.size.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			newBlock.size = this1;
			var x1 = block.position.x + block.size.x;
			var y1 = block.position.y - 1;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var this2 = { x : x1, y : y1};
			newBlock.position = this2;
			newBlock.addBorder(2);
			newBlock.addBorder(0);
			newBlock.addSpots(5);
			newBlock.addNatureObjects(10);
			newGround.addBlock(newBlock);
		}
		return newGround;
	}
	,addBlock: function(block) {
		this.blocks.push(block);
	}
	,addBlockAtStart: function(block) {
		var _g = 0;
		var _g1 = this.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.position.y += block.size.y;
		}
		this.blocks.unshift(block);
	}
	,getLastBlock: function() {
		return this.blocks[this.get_blocksCount() - 1];
	}
	,getFirstBlock: function() {
		return this.blocks[0];
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.blocks);
	}
	,getEnterPoint: function() {
		if(this.blocks.length > 0) {
			var firstBlock = this.getFirstBlock();
			var x = Math.floor(firstBlock.position.x + firstBlock.size.x / 2);
			var y = firstBlock.position.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			return this1;
		}
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		return this1;
	}
	,getExitPoint: function() {
		if(this.blocks.length > 0) {
			var lastBlock = this.getLastBlock();
			var x = Math.floor(lastBlock.position.x + lastBlock.size.x / 2);
			var y = lastBlock.position.y + lastBlock.size.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			return this1;
		}
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		return this1;
	}
	,get_blocksCount: function() {
		return this.blocks.length;
	}
	,__class__: kro13_kk_maps_GroundMap
	,__properties__: {get_blocksCount:"get_blocksCount"}
};
var kro13_kk_sound_SoundManager = function() {
	this.impl = new kro13_howler_HowlerSoundManager();
};
$hxClasses["kro13.kk.sound.SoundManager"] = kro13_kk_sound_SoundManager;
kro13_kk_sound_SoundManager.__name__ = "kro13.kk.sound.SoundManager";
kro13_kk_sound_SoundManager.__interfaces__ = [kro13_kk_sound_ISoundManager];
kro13_kk_sound_SoundManager.__properties__ = {get_instance:"get_instance"};
kro13_kk_sound_SoundManager.get_instance = function() {
	if(kro13_kk_sound_SoundManager.instance == null) {
		kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
	}
	return kro13_kk_sound_SoundManager.instance;
};
kro13_kk_sound_SoundManager.prototype = {
	isPlaying: function(sound) {
		return this.impl.isPlaying(sound);
	}
	,setVolume: function(sound,value) {
		this.impl.setVolume(sound,value);
	}
	,init: function(dataPrivider) {
		this.impl.init(dataPrivider);
	}
	,addType: function(type) {
		this.impl.addType(type);
	}
	,removeType: function(type) {
		this.impl.removeType(type);
	}
	,hasType: function(type) {
		return this.impl.hasType(type);
	}
	,play: function(sound,loop) {
		if(loop == null) {
			loop = false;
		}
		haxe_Log.trace("play sound " + sound + " " + (loop == null ? "null" : "" + loop),{ fileName : "src/kro13/kk/sound/SoundManager.hx", lineNumber : 52, className : "kro13.kk.sound.SoundManager", methodName : "play"});
		this.impl.play(sound,loop);
	}
	,stop: function(sound) {
		haxe_Log.trace("stop sound " + sound,{ fileName : "src/kro13/kk/sound/SoundManager.hx", lineNumber : 58, className : "kro13.kk.sound.SoundManager", methodName : "stop"});
		this.impl.stop(sound);
	}
	,pause: function(sound) {
		haxe_Log.trace("pause sound " + sound,{ fileName : "src/kro13/kk/sound/SoundManager.hx", lineNumber : 64, className : "kro13.kk.sound.SoundManager", methodName : "pause"});
		this.impl.pause(sound);
	}
	,fade: function(sound) {
		this.impl.fade(sound);
	}
	,__class__: kro13_kk_sound_SoundManager
};
var kro13_kk_systems_AnimationSystem = function(scene,onUpdate) {
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	haxe_Log.trace("new anim system",{ fileName : "src/kro13/kk/systems/AnimationSystem.hx", lineNumber : 16, className : "kro13.kk.systems.AnimationSystem", methodName : "new"});
};
$hxClasses["kro13.kk.systems.AnimationSystem"] = kro13_kk_systems_AnimationSystem;
kro13_kk_systems_AnimationSystem.__name__ = "kro13.kk.systems.AnimationSystem";
kro13_kk_systems_AnimationSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_AnimationSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		var animPlayer;
		if(container.componentsMap == null) {
			animPlayer = null;
		} else {
			var component = container.componentsMap.h[8];
			animPlayer = component;
		}
		var animPlayer1 = animPlayer;
		if(animPlayer1 != null) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
		}
		var transform;
		if(container.componentsMap == null) {
			transform = null;
		} else {
			var component = container.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		var ch = transform1.iterator();
		while(ch.hasNext()) {
			var ch1 = ch.next();
			this.addContainer(ch1.owner);
		}
	}
	,update: function() {
		var delta = kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier;
		var _g = 0;
		var _g1 = this.containers;
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			var player;
			if(container.componentsMap == null) {
				player = null;
			} else {
				var component = container.componentsMap.h[8];
				player = component;
			}
			var player1 = player;
			if(player1.currentAnim != null) {
				if(!player1.currentAnim.isStarted) {
					player1.currentAnim = null;
				} else {
					player1.currentAnim.update(delta);
				}
			}
		}
	}
	,__class__: kro13_kk_systems_AnimationSystem
});
var kro13_kk_systems_AvalancheSystem = function(scene,onUpdate,dataProvider,eventDispatcher) {
	this.avalancheStarted = false;
	this.avalancheDelay = 3;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.dataProvider = dataProvider;
	this.eventDispatcher = eventDispatcher;
	this.restartController = new kro13_kk_RestartController(dataProvider,eventDispatcher);
	haxe_Log.trace("new avalanche system",{ fileName : "src/kro13/kk/systems/AvalancheSystem.hx", lineNumber : 48, className : "kro13.kk.systems.AvalancheSystem", methodName : "new"});
};
$hxClasses["kro13.kk.systems.AvalancheSystem"] = kro13_kk_systems_AvalancheSystem;
kro13_kk_systems_AvalancheSystem.__name__ = "kro13.kk.systems.AvalancheSystem";
kro13_kk_systems_AvalancheSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_AvalancheSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	getAvalancheProgress: function() {
		return this.avalancheProgress / (haxepunk_HXP.height * 0.4);
	}
	,addContainer: function(container) {
		if(container.type == 1) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[3];
				tmp = component;
			}
			this.playerBody = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[2];
				tmp = component;
			}
			this.playerTransform = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[13];
				tmp = component;
			}
			this.playerPile = tmp;
			var playerHandler;
			if(container.componentsMap == null) {
				playerHandler = null;
			} else {
				var component = container.componentsMap.h[6];
				playerHandler = component;
			}
			var playerHandler1 = playerHandler;
			playerHandler1.addHandler($bind(this,this.onEvent));
		}
	}
	,start: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.start.call(this);
	}
	,stop: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.stop.call(this);
	}
	,clear: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.clear.call(this);
		this.playerBody = null;
		this.playerTransform = null;
		this.avalanche = null;
	}
	,update: function() {
		var dt = kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier;
		if(this.avalancheFade != null && this.avalanche != null) {
			var _this = this.avalancheFade;
			var result = _this.elapsed <= _this.duration || _this.ratio < 1;
			if(!result && _this.onComplete != null && !_this.isComplete) {
				_this.onComplete();
				_this.isComplete = true;
			}
			if(result) {
				_this.ratio = _this.elapsed / _this.duration;
				if(_this.ratio > 1) {
					_this.ratio = 1;
				}
				_this.ratio = _this.ease(_this.ratio);
				_this.val = _this.from + _this.range * _this.ratio;
			}
			_this.elapsed += dt;
			this.avalanche.transform.set_alpha(this.avalancheFade.val);
		}
		if(!this.avalancheStarted) {
			return;
		}
		if(this.avalancheTimer < this.avalancheDelay) {
			this.avalancheProgress = this.avalancheInitProgress + (haxepunk_HXP.height * 0.3 - this.avalancheInitProgress) * this.avalancheTimer / this.avalancheDelay;
		} else if(this.avalancheTimer < this.dataProvider.getLocal().getAvalancheTotalTime()) {
			this.avalancheProgress += (this.dataProvider.getLocal().maxSpeed * 0.5 - this.playerBody.velocity.y) * dt;
			if(this.avalancheProgress < this.avalancheMinProgress) {
				this.avalancheProgress = this.avalancheMinProgress;
			}
			if(this.avalancheProgress > this.avalanche.get_size().y) {
				this.avalancheProgress = this.avalanche.get_size().y;
			}
		}
		if(this.avalancheTimer < this.dataProvider.getLocal().getAvalancheTotalTime() + this.avalancheDelay) {
			haxepunk_math_Vector2.setTo(this.avalanche.get_position(),this.playerTransform.get_position().x - this.avalanche.get_size().x * 0.5,this.playerTransform.get_position().y - haxepunk_HXP.height * 0.33 - this.avalanche.get_size().y + this.avalancheProgress);
			this.avalancheTimer += dt;
		} else {
			this.stopAvalanche(true,true);
		}
		if(this.avalancheProgress >= haxepunk_HXP.height * 0.4) {
			this.stopAvalanche(false,true);
			this.getTrapped();
		}
	}
	,getTrapped: function() {
		this.playerPile.enable(true);
		this.playerBody.disableForceById(0);
		this.playerBody.disableForceById(1);
		this.playerBody.disableForceById(2);
		this.playerBody.disableForceById(3);
		haxepunk_math_Vector2.setTo(this.playerBody.velocity,0,0);
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.STUCK(true));
	}
	,startAvalanche: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.AVALANCHE_START);
		if(this.avalanche == null) {
			this.avalanche = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildAvalanche();
			this.scene.addContainer(this.avalanche);
		}
		this.avalancheProgress = this.avalancheInitProgress = 120;
		this.avalancheMinProgress = haxepunk_HXP.height * 0.2;
		this.avalancheTimer = 0;
		this.avalancheStarted = true;
		this.avalanche.transform.set_alpha(0.95);
		this.avalancheFade = null;
		this.avalanche.frontFx.enabled = true;
		this.dataProvider.getLocal().scoreData.avalancheBonus = 1;
		var tmp = this.eventDispatcher;
		var _this = this.dataProvider.getLocal();
		tmp.dispatchGameEvent(kro13_kk_EGameEvent.BONUS(_this.scoreData.speedBonus + _this.scoreData.avalancheBonus));
		this.update();
	}
	,stopAvalanche: function(escaped,fade) {
		if(fade == null) {
			fade = false;
		}
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.AVALANCHE_STOP(escaped,fade));
		this.dataProvider.getLocal().scoreData.avalancheBonus = 0;
		this.avalancheStarted = false;
		if(this.avalanche == null) {
			return;
		}
		if(fade) {
			this.avalancheFade = new kro13_kk_tween_FloatTween(1,0,1);
		} else if(this.avalanche != null) {
			this.avalanche.transform.set_alpha(0);
		}
		this.avalanche.frontFx.enabled = false;
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var _g = e.firstStart;
			this.stopAvalanche(false);
			break;
		case 1:
			this.stopAvalanche(false);
			break;
		case 2:
			if(this.avalanche != null) {
				this.avalanche.frontFx.unfreeze();
			}
			break;
		case 3:
			if(this.avalanche != null) {
				this.avalanche.frontFx.freeze();
			}
			break;
		case 18:
			var amplitude = e.amplitude;
			var target = e.target;
			if(amplitude == 2 && !this.avalancheStarted && target.type == 7) {
				if(this.dataProvider.getLocal().checkAvalancheChance()) {
					this.startAvalanche();
				}
			}
			break;
		case 40:
			if(e.reducer == 2) {
				this.stopAvalanche(true,true);
			}
			break;
		default:
		}
	}
	,onAdsSuccess: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
	}
	,onAdsError: function(message) {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.ERROR(1,message,true));
	}
	,__class__: kro13_kk_systems_AvalancheSystem
});
var kro13_kk_systems_ChaseSystem = function(scene,onUpdate,dataProvider,eventDispatcher) {
	this.triggerCounter = 0;
	this.hareWaitCoef = 0.5;
	this.hareSitCoef = 0.15;
	this.hareSpeedCoef = 0.9;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	haxe_Log.trace("new chase system",{ fileName : "src/kro13/kk/systems/ChaseSystem.hx", lineNumber : 53, className : "kro13.kk.systems.ChaseSystem", methodName : "new"});
	this.chaseStartTimer = 0;
	this.isChaseStarted = false;
	this.isChasePrepared = false;
	this.isSuccess = false;
	this.hareTooFarCounter = 0;
	this.dataProvider = dataProvider;
	this.eventDispatcher = eventDispatcher;
};
$hxClasses["kro13.kk.systems.ChaseSystem"] = kro13_kk_systems_ChaseSystem;
kro13_kk_systems_ChaseSystem.__name__ = "kro13.kk.systems.ChaseSystem";
kro13_kk_systems_ChaseSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_ChaseSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		if(container.type == 1) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[2];
				tmp = component;
			}
			this.playerTransform = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[3];
				tmp = component;
			}
			this.playerBody = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[6];
				tmp = component;
			}
			this.playerHandler = tmp;
			this.playerHandler.addHandler($bind(this,this.onEvent));
			this.playerBody.onCollide.callbacks.push($bind(this,this.onHit));
		}
		if(((container) instanceof kro13_kk_gameObjects_CanyonChain)) {
			this.canyonChain = container;
		}
	}
	,clear: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.clear.call(this);
		this.canyonChain = null;
	}
	,start: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.start.call(this);
		if(this.hare == null) {
			this.buildHare();
		}
	}
	,update: function() {
		if(!this.isChasePrepared && !this.isChaseStarted) {
			return;
		}
		if(this.route.length == 0) {
			return;
		}
		var this1 = this.playerTransform.get_position();
		var other = this.hare.transform.get_position();
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var dirToPlayer_x = x;
		var dirToPlayer_y = y;
		dirToPlayer_x -= other.x;
		dirToPlayer_y -= other.y;
		var distToPlayer = Math.sqrt(dirToPlayer_x * dirToPlayer_x + dirToPlayer_y * dirToPlayer_y);
		if(this.isChasePrepared && distToPlayer <= 800) {
			this.isChaseStarted = true;
			this.isChasePrepared = false;
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.CHASE_START);
		}
		var sitSpeed = this.dataProvider.getLocal().maxSpeed * this.hareSitCoef;
		var waitSpeed = this.dataProvider.getLocal().maxSpeed * this.hareWaitCoef;
		var tmp;
		if(!this.hare.isRunning() && !this.isSuccess) {
			var this1 = this.playerBody.velocity;
			if(!(Math.sqrt(this1.x * this1.x + this1.y * this1.y) <= waitSpeed && distToPlayer >= 80 && this.playerTransform.get_position().y <= this.hare.get_position().y || distToPlayer >= 400 && this.playerTransform.get_position().y <= this.hare.get_position().y)) {
				var this1 = this.playerBody.velocity;
				tmp = Math.sqrt(this1.x * this1.x + this1.y * this1.y) <= sitSpeed;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			this.hare.sit();
			return;
		}
		if(this.currDir == null) {
			var this1 = this.route[1];
			var other = this.route[0];
			var x = this1.x;
			var y = this1.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var this2 = this1;
			this2.x -= other.x;
			this2.y -= other.y;
			this.currDir = this2;
			var this1 = this.currDir;
			this.currDist = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
			var this1 = this.currDir;
			var scalar = 1 / this.currDist;
			var x = this1.x;
			var y = this1.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			var this2 = this1;
			this2.x *= scalar;
			this2.y *= scalar;
			this.currDir = this2;
		}
		this.hare.run();
		this.hare.transform.set_rotation(kro13_kk_utils_MathUtils.get_instance().radToDeg(Math.atan(this.currDir.x / this.currDir.y)));
		var hareSpeed = this.dataProvider.getLocal().maxSpeed * this.dataProvider.getLocal().getHareSpeedCoef();
		this.hare.transform.moveBy(this.currDir.x * hareSpeed * (kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier),this.currDir.y * hareSpeed * (kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier));
		var _this = this.hare.transform;
		if(_this.get_position() == null) {
			haxe_Log.trace(_this.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
		}
		_this.absPosition.x = _this.get_position().x;
		_this.absPosition.y = _this.get_position().y;
		var parent = _this.parent;
		while(parent != null) {
			_this.absPosition.x += parent.get_position().x;
			_this.absPosition.y += parent.get_position().y;
			parent = parent.parent;
		}
		var this1 = _this.absPosition;
		var other = this.route[0];
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var dist_x = x;
		var dist_y = y;
		dist_x -= other.x;
		dist_y -= other.y;
		if(Math.sqrt(dist_x * dist_x + dist_y * dist_y) >= this.currDist) {
			this.route.shift();
			this.currDir = null;
		}
		if(this.route.length == 1) {
			if(!this.isSuccess) {
				this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.CHASE_FAIL);
			}
			this.stopChase();
		}
	}
	,prepareChase: function() {
		var canyon = this.canyonChain.next;
		var startBlock = canyon.ground.blocks[0];
		var this1 = canyon.getEnterPoint();
		var other = canyon.get_position();
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var startPos_x = x;
		var startPos_y = y;
		startPos_x += other.x;
		startPos_y += other.y;
		this.hare.setEvenPosition(startPos_x,startPos_y);
		this.scene.addContainer(this.hare);
		this.route = [];
		var _g = 0;
		var _g1 = canyon.ground.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var tmp = this.route;
			var _this = b.transform;
			if(_this.get_position() == null) {
				haxe_Log.trace(_this.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			_this.absPosition.x = _this.get_position().x;
			_this.absPosition.y = _this.get_position().y;
			var parent = _this.parent;
			while(parent != null) {
				_this.absPosition.x += parent.get_position().x;
				_this.absPosition.y += parent.get_position().y;
				parent = parent.parent;
			}
			var x = _this.absPosition.x + b.get_size().x * 0.5;
			var _this1 = b.transform;
			if(_this1.get_position() == null) {
				haxe_Log.trace(_this1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			_this1.absPosition.x = _this1.get_position().x;
			_this1.absPosition.y = _this1.get_position().y;
			var parent1 = _this1.parent;
			while(parent1 != null) {
				_this1.absPosition.x += parent1.get_position().x;
				_this1.absPosition.y += parent1.get_position().y;
				parent1 = parent1.parent;
			}
			var y = _this1.absPosition.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			tmp.push(this1);
		}
		var endBlock = canyon.ground.blocks[canyon.ground.blocks.length - 1];
		var endPos = this.route[this.route.length - 1];
		var awayX = 1;
		if(Math.random() > 0.5) {
			awayX = -1;
		}
		var tmp = this.route;
		var x = endPos.x + endBlock.get_size().x * 0.5 * awayX;
		var y = endPos.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.push(this1);
		this.isChasePrepared = true;
	}
	,stopChase: function() {
		this.isChaseStarted = false;
		this.isChasePrepared = false;
		this.isSuccess = false;
		this.chaseStartTimer = 0;
		if(this.hare != null) {
			this.scene.removeContainer(this.hare);
		}
	}
	,onHit: function(target) {
		if(target.type == 12) {
			if(this.isSuccess || this.route.length <= 1) {
				return;
			}
			this.catchSuccess();
		}
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var _g = e.firstStart;
			this.triggerCounter = 0;
			this.runAway();
			this.stopChase();
			break;
		case 1:
			this.runAway();
			this.stopChase();
			break;
		case 18:
			var _g = e.target;
			var amplitude = e.amplitude;
			if(amplitude >= 1) {
				this.runAway();
			}
			break;
		case 20:
			var _g = e.jumpTime;
			this.runAway();
			break;
		case 32:
			this.triggerCounter++;
			if(!this.isChasePrepared && !this.isChaseStarted && this.triggerCounter % 2 != 0 && this.dataProvider.getLocal().checkChaseChance()) {
				this.prepareChase();
			}
			break;
		default:
		}
	}
	,catchSuccess: function() {
		this.isSuccess = true;
		this.hare.sit();
		this.hare.transform.set_rotation(0);
		this.hare.hareSit.transform.get_position().y = -60.;
		this.hare.hareSit.type = 0;
		var _this = this.hare.hareSit.renderer;
		_this.isLayerValid = false;
		_this._layer = 1;
		this.currDir = null;
		this.route = [];
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.CHASE_SUCCESS);
		var _this = this.hare;
		var binder;
		if(_this.componentsMap == null) {
			binder = null;
		} else {
			var component = _this.componentsMap.h[11];
			binder = component;
		}
		binder.bindTo(this.playerTransform);
		this.playerTransform.onRotationChanged.callbacks.push($bind(this,this.onPlayerRotation));
	}
	,runAway: function() {
		if(!this.isChaseStarted || !this.isSuccess || this.currDir != null) {
			return;
		}
		var currB = this.canyonChain.getCurrentBlock();
		if(currB == null) {
			this.stopChase();
			return;
		}
		this.hare.hareSit.setEvenPosition(0,0);
		var _this = this.hare;
		var binder;
		if(_this.componentsMap == null) {
			binder = null;
		} else {
			var component = _this.componentsMap.h[11];
			binder = component;
		}
		binder.unbind();
		HxOverrides.remove(this.playerTransform.onRotationChanged.callbacks,$bind(this,this.onPlayerRotation));
		this.hare.hareSit.type = 12;
		var _this = this.hare.hareSit.renderer;
		_this.isLayerValid = false;
		_this._layer = 1;
		this.hare.setEvenPosition(this.playerTransform.get_position().x,this.playerTransform.get_position().y);
		var tmp = this.route;
		var x = this.playerTransform.get_position().x;
		var y = this.playerTransform.get_position().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.push(this1);
		var awayX = 1;
		if(Math.random() > 0.5) {
			awayX = -1;
		}
		var tmp = this.route;
		var x = this.playerTransform.get_position().x + currB.get_size().x * 0.5 * awayX;
		var y = this.playerTransform.get_position().y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		tmp.push(this1);
	}
	,onPlayerRotation: function(val) {
		var rotationMod = val % 360;
		var rotationRad = kro13_kk_utils_MathUtils.get_instance().degToRad(rotationMod);
		var cos = Math.cos(rotationRad);
		var shift = Math.round(6 * cos);
		if(rotationMod > 200 && rotationMod < 340 || rotationMod < -20 && rotationMod > -160) {
			var _this = this.hare.hareSit.renderer;
			_this.isLayerValid = false;
			_this._layer = 12;
		} else {
			var _this = this.hare.hareSit.renderer;
			_this.isLayerValid = false;
			_this._layer = 1;
			if(rotationMod <= 0 && rotationMod >= -20 || rotationMod >= 180 && rotationMod <= 200 || rotationMod >= 340 && rotationMod <= 360 || rotationMod <= -160 && rotationMod >= -180) {
				shift = cos >= 0 ? 6 : -6;
			}
		}
		haxepunk_math_Vector2.setTo(this.hare.hareSit.get_position(),-shift,this.hare.hareSit.get_position().y);
	}
	,buildHare: function() {
		this.hare = new kro13_kk_gameObjects_Hare();
		this.hare.build();
	}
	,__class__: kro13_kk_systems_ChaseSystem
});
var kro13_kk_systems_DTSystem = function(onUpdate) {
	kro13_kk_systems_AbstractUpdateSystem.call(this,null,onUpdate);
};
$hxClasses["kro13.kk.systems.DTSystem"] = kro13_kk_systems_DTSystem;
kro13_kk_systems_DTSystem.__name__ = "kro13.kk.systems.DTSystem";
kro13_kk_systems_DTSystem.__properties__ = {get_dt:"get_dt",get_dtMultiplied:"get_dtMultiplied"};
kro13_kk_systems_DTSystem.get_dtMultiplied = function() {
	return kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier;
};
kro13_kk_systems_DTSystem.get_dt = function() {
	return kro13_kk_systems_DTSystem._dt;
};
kro13_kk_systems_DTSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_DTSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	start: function() {
		this.ts = new Date().getTime() / 1000;
		kro13_kk_systems_AbstractUpdateSystem.prototype.start.call(this);
	}
	,update: function() {
		kro13_kk_systems_DTSystem._dt = new Date().getTime() / 1000 - this.ts;
		this.ts = new Date().getTime() / 1000;
	}
	,__class__: kro13_kk_systems_DTSystem
});
var kro13_kk_systems_DestroySystem = function(scene,eventDispatcher) {
	kro13_kk_systems_AbstractComponentSystem.call(this,scene);
	this.eventDsipatcher = eventDispatcher;
	haxe_Log.trace("new destroy system",{ fileName : "src/kro13/kk/systems/DestroySystem.hx", lineNumber : 25, className : "kro13.kk.systems.DestroySystem", methodName : "new"});
};
$hxClasses["kro13.kk.systems.DestroySystem"] = kro13_kk_systems_DestroySystem;
kro13_kk_systems_DestroySystem.__name__ = "kro13.kk.systems.DestroySystem";
kro13_kk_systems_DestroySystem.__super__ = kro13_kk_systems_AbstractComponentSystem;
kro13_kk_systems_DestroySystem.prototype = $extend(kro13_kk_systems_AbstractComponentSystem.prototype,{
	addContainer: function(container) {
		var tmp;
		if(container.componentsMap == null) {
			tmp = null;
		} else {
			var component = container.componentsMap.h[6];
			tmp = component;
		}
		if(tmp != null) {
			kro13_kk_systems_AbstractComponentSystem.prototype.addContainer.call(this,container);
			var handler;
			if(container.componentsMap == null) {
				handler = null;
			} else {
				var component = container.componentsMap.h[6];
				handler = component;
			}
			var handler1 = handler;
			handler1.addHandler($bind(this,this.onEvent));
		}
	}
	,clear: function() {
		kro13_kk_systems_AbstractComponentSystem.prototype.clear.call(this);
	}
	,onEvent: function(evt) {
		if(evt._hx_index == 18) {
			var amplitude = evt.amplitude;
			var target = evt.target;
			if(target.type == 7 && amplitude >= 2) {
				var hitTarget = target;
				var transform;
				if(hitTarget.componentsMap == null) {
					transform = null;
				} else {
					var component = hitTarget.componentsMap.h[2];
					transform = component;
				}
				var transform1 = transform;
				kro13_kk_utils_FxUtils.addSnowmanDestroyFx(this.scene,transform1);
				hitTarget.destroy();
			}
		}
	}
	,__class__: kro13_kk_systems_DestroySystem
});
var kro13_kk_systems_FogSystem = function(scene,onUpdate,visibilityBuffer,dataProvider) {
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.visibilityBuffer = visibilityBuffer;
	this.dataProvider = dataProvider;
};
$hxClasses["kro13.kk.systems.FogSystem"] = kro13_kk_systems_FogSystem;
kro13_kk_systems_FogSystem.__name__ = "kro13.kk.systems.FogSystem";
kro13_kk_systems_FogSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_FogSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		if(container.type == 1) {
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[2];
				tmp = component;
			}
			this.playerTransform = tmp;
		}
	}
	,update: function() {
		var _g = 0;
		var _this = this.visibilityBuffer;
		var type = 10;
		if(!_this.typeToVisible.exists(type)) {
			_this.typeToVisible.set(type,[]);
		}
		var _g1 = _this.typeToVisible.get(type);
		while(_g < _g1.length) {
			var fog = _g1[_g];
			++_g;
			var fogTransform;
			if(fog.componentsMap == null) {
				fogTransform = null;
			} else {
				var component = fog.componentsMap.h[2];
				fogTransform = component;
			}
			var fogTransform1 = fogTransform;
			if(fogTransform1.get_position() == null) {
				haxe_Log.trace(fogTransform1.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			fogTransform1.absPosition.x = fogTransform1.get_position().x;
			fogTransform1.absPosition.y = fogTransform1.get_position().y;
			var parent = fogTransform1.parent;
			while(parent != null) {
				fogTransform1.absPosition.x += parent.get_position().x;
				fogTransform1.absPosition.y += parent.get_position().y;
				parent = parent.parent;
			}
			var alpha = fogTransform1.absPosition.y;
			var _this = this.playerTransform;
			if(_this.get_position() == null) {
				haxe_Log.trace(_this.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
			}
			_this.absPosition.x = _this.get_position().x;
			_this.absPosition.y = _this.get_position().y;
			var parent1 = _this.parent;
			while(parent1 != null) {
				_this.absPosition.x += parent1.get_position().x;
				_this.absPosition.y += parent1.get_position().y;
				parent1 = parent1.parent;
			}
			var alpha1 = Math.max(0,(alpha - _this.absPosition.y) / (haxepunk_HXP.height * 0.5));
			fogTransform1.set_alpha(Math.pow(alpha1,this.dataProvider.getLocal().getFogIntensity()));
		}
	}
	,__class__: kro13_kk_systems_FogSystem
});
var kro13_kk_systems_GameEventSystem = function() {
	kro13_kk_systems_AbstractComponentSystem.call(this,null);
	haxe_Log.trace("new game event system",{ fileName : "src/kro13/kk/systems/GameEventSystem.hx", lineNumber : 16, className : "kro13.kk.systems.GameEventSystem", methodName : "new"});
};
$hxClasses["kro13.kk.systems.GameEventSystem"] = kro13_kk_systems_GameEventSystem;
kro13_kk_systems_GameEventSystem.__name__ = "kro13.kk.systems.GameEventSystem";
kro13_kk_systems_GameEventSystem.__interfaces__ = [kro13_kk_IEventDispatcher];
kro13_kk_systems_GameEventSystem.__super__ = kro13_kk_systems_AbstractComponentSystem;
kro13_kk_systems_GameEventSystem.prototype = $extend(kro13_kk_systems_AbstractComponentSystem.prototype,{
	addContainer: function(container) {
		var handler;
		if(container.componentsMap == null) {
			handler = null;
		} else {
			var component = container.componentsMap.h[6];
			handler = component;
		}
		var handler1 = handler;
		var transform;
		if(container.componentsMap == null) {
			transform = null;
		} else {
			var component = container.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		if(handler1 != null) {
			kro13_kk_systems_AbstractComponentSystem.prototype.addContainer.call(this,container);
		}
		if(transform1 != null) {
			var t = transform1.iterator();
			while(t.hasNext()) {
				var t1 = t.next();
				this.addContainer(t1.owner);
			}
		}
	}
	,removeContainer: function(container) {
		var transform;
		if(container.componentsMap == null) {
			transform = null;
		} else {
			var component = container.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		kro13_kk_systems_AbstractComponentSystem.prototype.removeContainer.call(this,container);
		if(transform1 != null) {
			var t = transform1.iterator();
			while(t.hasNext()) {
				var t1 = t.next();
				this.removeContainer(t1.owner);
			}
		}
	}
	,dispatchGameEvent: function(ge) {
		haxe_Log.trace("dispatch event " + $hxEnums[ge.__enum__].__constructs__[ge._hx_index],{ fileName : "src/kro13/kk/systems/GameEventSystem.hx", lineNumber : 52, className : "kro13.kk.systems.GameEventSystem", methodName : "dispatchGameEvent"});
		var handler = null;
		var _g = 0;
		var _g1 = this.containers;
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			var handler1;
			if(container.componentsMap == null) {
				handler1 = null;
			} else {
				var component = container.componentsMap.h[6];
				handler1 = component;
			}
			handler = handler1;
			handler.sendEvent(ge);
		}
	}
	,__class__: kro13_kk_systems_GameEventSystem
});
var kro13_kk_systems_HitSystem = function(scene,onUpdate,dataProvider,eventDispatcher) {
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.intervalsMap = new haxe_ds_IntMap();
	this.dataProvider = dataProvider;
	var this1 = { x : 0, y : 0};
	this.prevSpeed = this1;
	this.eventDispatcher = eventDispatcher;
	haxe_Log.trace("new hit system",{ fileName : "src/kro13/kk/systems/HitSystem.hx", lineNumber : 30, className : "kro13.kk.systems.HitSystem", methodName : "new"});
};
$hxClasses["kro13.kk.systems.HitSystem"] = kro13_kk_systems_HitSystem;
kro13_kk_systems_HitSystem.__name__ = "kro13.kk.systems.HitSystem";
kro13_kk_systems_HitSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_HitSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		if(container.type == 1) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[3];
				tmp = component;
			}
			this.playerBody = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[2];
				tmp = component;
			}
			this.playerTransform = tmp;
			this.playerBody.onCollide.callbacks.push($bind(this,this.onHit));
		}
	}
	,update: function() {
		haxepunk_math_Vector2.setTo(this.prevSpeed,this.playerBody.velocity.x,this.playerBody.velocity.y);
	}
	,onHit: function(target) {
		var amplitude = 0;
		var this1 = this.prevSpeed;
		var this2 = this.playerBody.velocity;
		if(Math.sqrt(this1.x * this1.x + this1.y * this1.y) - Math.sqrt(this2.x * this2.x + this2.y * this2.y) >= this.dataProvider.getLocal().critSpeed) {
			amplitude = 2;
			if(target.type == 7) {
				haxepunk_math_Vector2.setTo(this.playerBody.velocity,this.prevSpeed.x * 0.8,this.prevSpeed.y * 0.8);
			}
		} else {
			var this1 = this.prevSpeed;
			var this2 = this.playerBody.velocity;
			if(Math.sqrt(this1.x * this1.x + this1.y * this1.y) - Math.sqrt(this2.x * this2.x + this2.y * this2.y) >= this.dataProvider.getLocal().minSpeed) {
				amplitude = 1;
			}
		}
		switch(target.type) {
		case 2:case 4:
			this.dispatchGameEventWithInterval(target.type,kro13_kk_EGameEvent.HIT(target,amplitude));
			break;
		case 7:
			if(amplitude > 1) {
				this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.HIT(target,amplitude));
			} else {
				this.dispatchGameEventWithInterval(target.type,kro13_kk_EGameEvent.HIT(target,amplitude));
			}
			break;
		default:
		}
	}
	,dispatchGameEventWithInterval: function(goType,ge) {
		if(this.intervalsMap.exists(goType)) {
			if(new Date().getTime() / 1000 - this.intervalsMap.get(goType) >= 1) {
				this.eventDispatcher.dispatchGameEvent(ge);
				this.intervalsMap.set(goType,new Date().getTime() / 1000);
			}
		} else {
			this.eventDispatcher.dispatchGameEvent(ge);
			this.intervalsMap.set(goType,new Date().getTime() / 1000);
		}
	}
	,__class__: kro13_kk_systems_HitSystem
});
var kro13_kk_systems_InGameMessagesSystem = function(scene,onUpdate,dataProvider) {
	this.msgTimer = 0;
	this.isShown = false;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.dataProvider = dataProvider;
	this.trampOffMsgs = [kro13_kk_utils_L.get_instance().JUMP_MSG3];
	this.landMsgs = [kro13_kk_utils_L.get_instance().JUMP_MSG1,kro13_kk_utils_L.get_instance().JUMP_MSG2];
	this.hitMsgs = [kro13_kk_utils_L.get_instance().HIT_MSG1];
	this.destroyMsgs = [kro13_kk_utils_L.get_instance().DESTROY_MSG1,kro13_kk_utils_L.get_instance().DESTROY_MSG2];
	this.avalancheStartMsgs = [kro13_kk_utils_L.get_instance().AVALANCHE_START_MSG1,kro13_kk_utils_L.get_instance().AVALANCHE_START_MSG2];
	this.avalancheEndMsgs = [kro13_kk_utils_L.get_instance().AVALANCHE_END_MSG1];
	this.avalancheCatchMsgs = [kro13_kk_utils_L.get_instance().AVALANCHE_CATCH_MSG1];
	this.stuckMsgs = [kro13_kk_utils_L.get_instance().STUCK_MSG1];
	this.playMsgs = [kro13_kk_utils_L.get_instance().PLAY_MSG1];
	this.chaseMsgs = [kro13_kk_utils_L.get_instance().CHASE_MSG1];
	this.rollbackMsgs = [kro13_kk_utils_L.get_instance().ROLLBACK_MSG1];
	this.chaseSuccessMsgs = [kro13_kk_utils_L.get_instance().CHASE_SUCCESS_MSG1];
	this.chaseFailMsgs = [kro13_kk_utils_L.get_instance().CHASE_FAIL_MSG1];
	this.smallCircleMsgs = [kro13_kk_utils_L.get_instance().SMALL_CIRCLE_MSG];
	this.bigCircleMsgs = [kro13_kk_utils_L.get_instance().BIG_CIRCLE_MSG];
	var head = new kro13_kk_gameObjects_Renderable();
	haxepunk_math_Vector2.setTo(head.transform.get_size(),236,180);
	head.build();
	var tmp = head.transform.get_size();
	head.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE({ source : "images/shaman_head.png", size : tmp});
	head.setEvenPosition(50,170);
	this.msgPopup = new kro13_kk_guiObjects_popups_Popup(16777215,10066380);
	haxepunk_math_Vector2.setTo(this.msgPopup.transform.get_size(),120,360);
	this.msgPopup.setEvenPosition(211.,85.);
	this.msgPopup.build();
	this.msgTxt = new kro13_kk_guiObjects_TextField(11250647,60,false);
	var _this = this.msgTxt.renderer;
	_this.isLayerValid = false;
	_this._layer = 1;
	this.msgTxt.build();
	this.msgPopup.transform.addChild(this.msgTxt.transform);
	this.msgTxt.setEvenPosition(50,34);
	head.transform.addChild(this.msgPopup.transform);
	var handler;
	if(scene.componentsMap == null) {
		handler = null;
	} else {
		var component = scene.componentsMap.h[6];
		handler = component;
	}
	var handler1 = handler;
	handler1.addHandler($bind(this,this.onEvent));
};
$hxClasses["kro13.kk.systems.InGameMessagesSystem"] = kro13_kk_systems_InGameMessagesSystem;
kro13_kk_systems_InGameMessagesSystem.__name__ = "kro13.kk.systems.InGameMessagesSystem";
kro13_kk_systems_InGameMessagesSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_InGameMessagesSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
	}
	,update: function() {
		if(this.isShown) {
			this.msgTimer += kro13_kk_systems_DTSystem._dt;
			if(this.msgTimer >= 2) {
				this.hideMessage();
			}
		}
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var _g = e.firstStart;
			this.hideMessage();
			break;
		case 1:
			this.hideMessage();
			break;
		case 2:
			this.showMessage(this.pickMessage(this.playMsgs));
			break;
		case 18:
			var amplitude = e.amplitude;
			var target = e.target;
			if(target.type == 7 && amplitude >= 2) {
				this.showMessage(this.pickMessage(this.destroyMsgs));
			} else if(amplitude > 0) {
				this.showMessage(this.pickMessage(this.hitMsgs));
			}
			break;
		case 20:
			var _g = e.jumpTime;
			this.showMessage(this.pickMessage(this.trampOffMsgs));
			break;
		case 21:
			if(this.dataProvider.getScoreData().totalRotation >= 360) {
				this.showMessage(this.pickMessage(this.landMsgs));
			}
			break;
		case 22:
			var _g = e.avalanche;
			this.showMessage(this.pickMessage(this.stuckMsgs),true);
			break;
		case 25:
			this.showMessage(this.pickMessage(this.avalancheStartMsgs),true);
			break;
		case 26:
			var fade = e.fade;
			var escaped = e.escaped;
			if(fade) {
				if(escaped) {
					this.showMessage(this.pickMessage(this.avalancheEndMsgs));
				} else {
					this.showMessage(this.pickMessage(this.avalancheCatchMsgs),true);
				}
			}
			break;
		case 30:
			var _g = e.startNew;
			this.showMessage(this.pickMessage(this.rollbackMsgs),true);
			break;
		case 33:
			this.showMessage(this.pickMessage(this.chaseMsgs),true);
			break;
		case 34:
			this.showMessage(this.pickMessage(this.chaseSuccessMsgs),true);
			break;
		case 35:
			this.showMessage(this.pickMessage(this.chaseFailMsgs));
			break;
		case 38:
			var message = e.message;
			this.showMessage(message,true);
			break;
		case 40:
			var reducer = e.reducer;
			if(reducer == 2) {
				this.showMessage(this.pickMessage(this.bigCircleMsgs),true);
				return;
			}
			if(reducer == 1) {
				this.showMessage(this.pickMessage(this.smallCircleMsgs));
				return;
			}
			break;
		default:
		}
	}
	,showMessage: function(msg,always) {
		if(always == null) {
			always = false;
		}
		if(!this.isShown && Math.random() >= 0.5 || always) {
			var _this = this.msgTxt;
			_this.materialConfig.text = msg;
			_this.renderer.isValid = false;
			var txtSize = kro13_kk_utils_TextUtils.getTextRect(this.msgTxt);
			haxepunk_math_Vector2.setTo(this.msgPopup.get_size(),txtSize.x + 100,120);
			this.scene.addContainer(this.msgPopup.transform.parent.owner);
			this.msgPopup.renderer.isValid = false;
			this.isShown = true;
			this.msgTimer = 0;
		}
	}
	,hideMessage: function() {
		this.scene.removeContainer(this.msgPopup.transform.parent.owner);
		this.isShown = false;
		this.msgTimer = 0;
	}
	,pickMessage: function(msgsArray) {
		var i = kro13_kk_utils_MathUtils.get_instance().randomRange(0,msgsArray.length - 1);
		return msgsArray[i];
	}
	,__class__: kro13_kk_systems_InGameMessagesSystem
});
var kro13_kk_systems_RollbackSystem = function(scene,onUpdate,eventDispatcher) {
	this.isEagleFlying = false;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.eventDispatcher = eventDispatcher;
	this.eagle = new kro13_kk_gameObjects_Renderable();
	var x = 210;
	var y = 144;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	this.eagleMaterialC = { source : "images/eagle1.png", size : this1};
	this.eagle.set_size(this.eagleMaterialC.size);
	this.eagle.renderer.material = kro13_kk_components_renderer_materials_EMaterial.IMAGE(this.eagleMaterialC);
	var _this = this.eagle.renderer;
	_this.isLayerValid = false;
	_this._layer = -10;
	haxepunk_math_Vector2.setTo(this.eagle.transform.origin,this.eagle.get_size().x * 0.5,this.eagle.get_size().y + 55);
};
$hxClasses["kro13.kk.systems.RollbackSystem"] = kro13_kk_systems_RollbackSystem;
kro13_kk_systems_RollbackSystem.__name__ = "kro13.kk.systems.RollbackSystem";
kro13_kk_systems_RollbackSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_RollbackSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		if(container.type == 1) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var handler;
			if(container.componentsMap == null) {
				handler = null;
			} else {
				var component = container.componentsMap.h[6];
				handler = component;
			}
			var handler1 = handler;
			handler1.addHandler($bind(this,this.onEvent));
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[2];
				tmp = component;
			}
			this.playerTransform = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[11];
				tmp = component;
			}
			this.playerBinder = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[1];
				tmp = component;
			}
			this.playerRenderer = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[13];
				tmp = component;
			}
			this.playerPile = tmp;
			this.playerGuy = (js_Boot.__cast(container , kro13_kk_gameObjects_Player)).guy;
		}
	}
	,onEvent: function(e) {
		var _gthis = this;
		var _g = e;
		if(_g._hx_index == 30) {
			var startNew = _g.startNew;
			haxe_Log.trace("SQUEE! " + (startNew == null ? "null" : "" + startNew),{ fileName : "src/kro13/kk/systems/RollbackSystem.hx", lineNumber : 81, className : "kro13.kk.systems.RollbackSystem", methodName : "onEvent"});
			this.eagle.setEvenPosition(this.playerTransform.get_position().x - 200,this.playerTransform.get_position().y - haxepunk_HXP.height * 0.33);
			this.scene.addContainer(this.eagle);
			this.eagleMaterialC.source = "images/eagle1.png";
			this.eagle.renderer.isValid = false;
			this.eagleScale = new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(1.5,this.playerTransform.get_scale(),1),new kro13_kk_tween_FloatTween(this.playerTransform.get_scale(),1.5,1)]);
			this.eagleX = new kro13_kk_tween_FloatTween(this.playerTransform.get_position().x - 200,this.playerTransform.get_position().x + 200,2);
			this.eagleY = new kro13_kk_tween_SequenceTween([new kro13_kk_tween_FloatTween(this.playerTransform.get_position().y - haxepunk_HXP.height * 0.33,this.playerTransform.get_position().y,1,null,function() {
				_gthis.playerBinder.bindTo(_gthis.eagle.transform);
				var _this = _gthis.playerRenderer;
				_this.isLayerValid = false;
				_this._layer = 10 - 10;
				_gthis.playerGuy.shiftLayer(-10);
				var _this = _gthis.playerGuy;
				var rotationMod = _gthis.playerTransform.get_rotation() % 360;
				var rotationRad = rotationMod / 180;
				var cos = Math.cos(rotationRad * Math.PI);
				var sin = Math.sin(rotationRad * Math.PI);
				var shift = Math.round(14 * cos);
				haxepunk_math_Vector2.setTo(_this.legLeft.get_position(),Math.round(sin * 10),_this.legLeft.transform.get_position().y);
				haxepunk_math_Vector2.setTo(_this.legRight.get_position(),Math.round(-sin * 10),_this.legLeft.transform.get_position().y);
				if(rotationMod > 200 && rotationMod < 340 || rotationMod < -20 && rotationMod > -160) {
					var _this1 = _this.headFront.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 9 + _this.layerShift;
					var _this1 = _this.headBack.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 7 + _this.layerShift;
					var _this1 = _this.bodyFront.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 9 + _this.layerShift;
					var _this1 = _this.bodyBack.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 7 + _this.layerShift;
				} else {
					var _this1 = _this.headFront.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 7 + _this.layerShift;
					var _this1 = _this.headBack.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 9 + _this.layerShift;
					var _this1 = _this.bodyFront.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 7 + _this.layerShift;
					var _this1 = _this.bodyBack.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 9 + _this.layerShift;
					if(rotationMod <= 0 && rotationMod >= -20 || rotationMod >= 180 && rotationMod <= 200 || rotationMod >= 340 && rotationMod <= 360 || rotationMod <= -160 && rotationMod >= -180) {
						shift = cos >= 0 ? 14 : -14;
					}
				}
				_this.headFront.setEvenPosition(-shift,_this.headFront.transform.get_position().y);
				_this.headBack.setEvenPosition(shift,_this.headFront.transform.get_position().y);
				haxepunk_math_Vector2.setTo(_this.bodyFront.get_position(),-shift,_this.bodyFront.transform.get_position().y);
				haxepunk_math_Vector2.setTo(_this.bodyBack.get_position(),shift,_this.bodyBack.transform.get_position().y);
				_gthis.playerPile.enable(false);
				_gthis.eagleMaterialC.source = "images/eagle.png";
				_gthis.eagle.renderer.isValid = false;
			}),new kro13_kk_tween_FloatTween(this.playerTransform.get_position().y,this.playerTransform.get_position().y - haxepunk_HXP.height * 0.33,1,null,function() {
				_gthis.playerBinder.unbind();
				_gthis.doRollback(startNew);
				var _this = _gthis.playerRenderer;
				_this.isLayerValid = false;
				_this._layer = 10;
				_gthis.playerGuy.shiftLayer(0);
				var _this = _gthis.playerGuy;
				var rotationMod = _gthis.playerTransform.get_rotation() % 360;
				var rotationRad = rotationMod / 180;
				var cos = Math.cos(rotationRad * Math.PI);
				var sin = Math.sin(rotationRad * Math.PI);
				var shift = Math.round(14 * cos);
				haxepunk_math_Vector2.setTo(_this.legLeft.get_position(),Math.round(sin * 10),_this.legLeft.transform.get_position().y);
				haxepunk_math_Vector2.setTo(_this.legRight.get_position(),Math.round(-sin * 10),_this.legLeft.transform.get_position().y);
				if(rotationMod > 200 && rotationMod < 340 || rotationMod < -20 && rotationMod > -160) {
					var _this1 = _this.headFront.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 9 + _this.layerShift;
					var _this1 = _this.headBack.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 7 + _this.layerShift;
					var _this1 = _this.bodyFront.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 9 + _this.layerShift;
					var _this1 = _this.bodyBack.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 7 + _this.layerShift;
				} else {
					var _this1 = _this.headFront.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 7 + _this.layerShift;
					var _this1 = _this.headBack.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 9 + _this.layerShift;
					var _this1 = _this.bodyFront.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 7 + _this.layerShift;
					var _this1 = _this.bodyBack.renderer;
					_this1.isLayerValid = false;
					_this1._layer = 9 + _this.layerShift;
					if(rotationMod <= 0 && rotationMod >= -20 || rotationMod >= 180 && rotationMod <= 200 || rotationMod >= 340 && rotationMod <= 360 || rotationMod <= -160 && rotationMod >= -180) {
						shift = cos >= 0 ? 14 : -14;
					}
				}
				_this.headFront.setEvenPosition(-shift,_this.headFront.transform.get_position().y);
				_this.headBack.setEvenPosition(shift,_this.headFront.transform.get_position().y);
				haxepunk_math_Vector2.setTo(_this.bodyFront.get_position(),-shift,_this.bodyFront.transform.get_position().y);
				haxepunk_math_Vector2.setTo(_this.bodyBack.get_position(),shift,_this.bodyBack.transform.get_position().y);
				_gthis.playerTransform.set_scale(1);
			})]);
			this.isEagleFlying = true;
		}
	}
	,update: function() {
		if(this.isEagleFlying) {
			this.eagleX.update(kro13_kk_systems_DTSystem._dt);
			this.eagleY.update(kro13_kk_systems_DTSystem._dt);
			this.eagleScale.update(kro13_kk_systems_DTSystem._dt);
			haxepunk_math_Vector2.setTo(this.eagle.transform.get_position(),this.eagleX.getValue(),this.eagleY.getValue());
			this.eagle.transform.set_scale(this.eagleScale.getValue());
			if(this.playerRenderer._layer == 10 - 10) {
				this.playerTransform.set_scale(this.eagleScale.getValue());
			}
		}
	}
	,doRollback: function(startNew) {
		this.scene.removeContainer(this.eagle);
		this.isEagleFlying = false;
		if(startNew) {
			this.doStartNew();
		} else {
			this.doRestart();
		}
	}
	,doStartNew: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PAUSE);
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.START_NEW(false));
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.MAIN_MENU);
	}
	,doRestart: function() {
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.RESTART);
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.PLAY);
	}
	,__class__: kro13_kk_systems_RollbackSystem
});
var kro13_kk_systems_ScoreSystem = function(scene,onUpdate,dataProvider,eventDispatcher) {
	this.comboStarted = false;
	this.jumpStartY = 0;
	this.currentCombo = 0;
	this.prevPlayerY = 0;
	this.isJump = false;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.eventDispatcher = eventDispatcher;
	this.profile = dataProvider.getLocal().getProfile();
	this.dataProvider = dataProvider;
	this.restartController = new kro13_kk_RestartController(dataProvider,eventDispatcher);
	haxe_Log.trace("new score system",{ fileName : "src/kro13/kk/systems/ScoreSystem.hx", lineNumber : 50, className : "kro13.kk.systems.ScoreSystem", methodName : "new"});
};
$hxClasses["kro13.kk.systems.ScoreSystem"] = kro13_kk_systems_ScoreSystem;
kro13_kk_systems_ScoreSystem.__name__ = "kro13.kk.systems.ScoreSystem";
kro13_kk_systems_ScoreSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_ScoreSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		if(container.type == 1) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[3];
				tmp = component;
			}
			this.playerBody = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[2];
				tmp = component;
			}
			this.playerTransform = tmp;
			var playerHandler;
			if(container.componentsMap == null) {
				playerHandler = null;
			} else {
				var component = container.componentsMap.h[6];
				playerHandler = component;
			}
			var playerHandler1 = playerHandler;
			playerHandler1.addHandler($bind(this,this.onEvent));
		}
	}
	,clear: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.clear.call(this);
		this.playerTransform = null;
		this.playerBody = null;
		this.speedTimer = null;
	}
	,start: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.start.call(this);
		this.lastBonusUpdateTS = new Date().getTime() / 1000;
		this.lastDistanceUpdateTS = new Date().getTime() / 1000;
		this.lastScoreUpdateTS = new Date().getTime() / 1000;
		if(this.speedTimer == null) {
			this.speedTimer = new haxe_Timer(100);
			this.speedTimer.run = $bind(this,this.updateSpeedRatio);
		}
	}
	,stop: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.stop.call(this);
		if(this.speedTimer != null) {
			this.speedTimer.stop();
			this.speedTimer = null;
		}
	}
	,reset: function() {
		this.dataProvider.getScoreData().currentScore = 0;
		this.dataProvider.getScoreData().speedBonus = 1;
		this.dataProvider.getScoreData().speedRatio = 0;
		this.dataProvider.getScoreData().bonusCounter = 0;
		this.dataProvider.getScoreData().totalTracks = 0;
		this.dataProvider.getScoreData().totalSatori = 0;
		this.dataProvider.getScoreData().restartUpdatesCount = 0;
		this.dataProvider.getScoreData().adsCounter = 0;
		this.dataProvider.getScoreData().totalDistance = 0;
		this.dataProvider.getScoreData().bestCombo = 0;
		this.dataProvider.getScoreData().totalJumps = 0;
		this.dataProvider.getScoreData().totalSnowmen = 0;
		this.dataProvider.getScoreData().bestJumpLen = 0;
		this.dataProvider.getScoreData().bestRotation = 0;
		this.dataProvider.getScoreData().avalanchesEscaped = 0;
		this.dataProvider.getScoreData().complexity = 0;
		this.updateBonus();
	}
	,update: function() {
		var score = Math.floor(Math.max(0,this.dataProvider.getScoreData().currentScore));
		if(new Date().getTime() / 1000 - this.lastBonusUpdateTS >= this.dataProvider.getLocal().getBonusUpdateInterval()) {
			this.updateBonus();
			this.lastBonusUpdateTS = new Date().getTime() / 1000;
		}
		if(new Date().getTime() / 1000 - this.lastDistanceUpdateTS >= 1) {
			var addDistance = Math.floor((this.playerTransform.get_position().y - this.prevPlayerY) / 40);
			if(addDistance < 0) {
				addDistance = 0;
			}
			this.dataProvider.getScoreData().totalDistance += addDistance;
			this.prevPlayerY = this.playerTransform.get_position().y;
			this.lastDistanceUpdateTS = new Date().getTime() / 1000;
		}
		if(this.comboStarted && new Date().getTime() / 1000 - this.lastScoreUpdateTS >= 2) {
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.COMBO_STOP);
			this.currentCombo = 0;
			this.comboStarted = false;
			haxe_Log.trace("combo: " + this.dataProvider.getScoreData().bestCombo,{ fileName : "src/kro13/kk/systems/ScoreSystem.hx", lineNumber : 144, className : "kro13.kk.systems.ScoreSystem", methodName : "update"});
		}
		if(this.isJump) {
			if((new Date().getTime() / 1000 - this.jumpTS) * kro13_kk_systems_DTSystem.multiplier <= this.jumpTime) {
				this.dataProvider.getScoreData().totalRotation += this.playerTransform.get_rotation() - this.rotation;
				this.rotation = this.playerTransform.get_rotation();
				var absRotation = Math.abs(this.dataProvider.getScoreData().totalRotation);
				var rotationCount = Math.floor(absRotation / 180);
				if(this.lastScoredRotation < rotationCount) {
					this.scoreRotation(rotationCount % 2 == 0);
					this.lastScoredRotation = rotationCount;
				}
			}
		}
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 1:
			this.dataProvider.getScoreData().bonusCounter = 0;
			this.dataProvider.getScoreData().speedBonus = 1;
			break;
		case 18:
			var amplitude = e.amplitude;
			var target = e.target;
			var score = 0;
			if(target.type == 2 || target.type == 4) {
				score = this.scoreHit(amplitude);
			}
			if(target.type == 7) {
				score = this.scoreDestroyable(amplitude);
			}
			if(score < 0) {
				this.profile.restartHP += score;
				if(this.profile.restartHP <= 0) {
					this.dataProvider.updateRestarts(-1);
				}
			}
			break;
		case 20:
			var time = e.jumpTime;
			this.jumpTime = time;
			this.scoreJump();
			this.isJump = true;
			this.jumpTS = new Date().getTime() / 1000;
			this.dataProvider.getScoreData().totalRotation = 0;
			this.rotation = this.playerTransform.get_rotation();
			this.lastScoredRotation = 0;
			this.jumpStartY = this.playerTransform.get_position().y;
			break;
		case 21:
			this.scoreSatori();
			if(this.dataProvider.getScoreData().totalRotation > this.dataProvider.getScoreData().bestRotation) {
				var tmp = Math.abs(this.dataProvider.getScoreData().totalRotation);
				this.dataProvider.getScoreData().bestRotation = Math.floor(tmp);
			}
			this.isJump = false;
			var jumpLen = (this.playerTransform.get_position().y - this.jumpStartY) / 40;
			if(jumpLen > this.dataProvider.getScoreData().bestJumpLen) {
				this.dataProvider.getScoreData().bestJumpLen = jumpLen;
			}
			break;
		case 26:
			var _g = e.fade;
			var escaped = e.escaped;
			if(escaped) {
				this.dataProvider.getScoreData().avalanchesEscaped++;
			}
			break;
		case 30:
			if(e.startNew == false) {
				this.dataProvider.getScoreData().complexity = this.dataProvider.getScoreData().complexity * 0.7;
				this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.COMPLEXITY_REDUCED(0));
			}
			break;
		case 31:
			var tmp = this.dataProvider.getLocal().scoreData;
			tmp.totalTracks++;
			var tmp = this.dataProvider.getLocal().scoreData;
			tmp.complexity++;
			this.dataProvider.validateLocal();
			break;
		case 34:
			this.dataProvider.updateRestarts(1);
			break;
		default:
		}
	}
	,scoreSatori: function() {
		if(this.dataProvider.getLocal().scoreData.speedBonus >= 3 && Math.abs(this.dataProvider.getScoreData().totalRotation) >= 320) {
			var reducer = 1;
			var _this = this.dataProvider.getLocal();
			if(_this.scoreData.speedBonus + _this.scoreData.avalancheBonus >= 4 && Math.abs(this.dataProvider.getScoreData().totalRotation) >= 720) {
				reducer = 2;
			}
			this.dataProvider.getScoreData().totalSatori++;
			var reducerCoef = reducer > 1 ? 0.5 : 0.9;
			this.dataProvider.getScoreData().complexity = this.dataProvider.getScoreData().complexity * reducerCoef;
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.COMPLEXITY_REDUCED(reducer));
		}
	}
	,scoreDestroyable: function(amplitude) {
		var score = 0;
		if(amplitude >= 2) {
			var _this = this.dataProvider.getLocal();
			score = 30 * (_this.scoreData.speedBonus + _this.scoreData.avalancheBonus);
			kro13_kk_utils_FxUtils.addBoomFx(this.scene,amplitude * 2,16777215,this.playerTransform);
			this.dataProvider.getScoreData().totalSnowmen++;
		} else if(amplitude == 1) {
			score = -15;
			kro13_kk_utils_FxUtils.addBoomFx(this.scene,amplitude * 2,16777215,this.playerTransform);
		}
		if(amplitude > 0) {
			this.updateScore(score);
			if(score < 0) {
				this.dataProvider.getScoreData().bonusCounter = 0;
				this.dataProvider.getScoreData().speedBonus = 1;
			}
		}
		return score;
	}
	,scoreJump: function() {
		var this1 = this.playerBody.velocity;
		if(Math.sqrt(this1.x * this1.x + this1.y * this1.y) > this.dataProvider.getLocal().minSpeed) {
			var _this = this.dataProvider.getLocal();
			this.updateScore(15 * (_this.scoreData.speedBonus + _this.scoreData.avalancheBonus));
			kro13_kk_utils_FxUtils.addBoomFx(this.scene,4,16777215,this.playerTransform);
			this.dataProvider.getScoreData().totalJumps++;
		}
	}
	,scoreHit: function(amplitude) {
		var damage = 0;
		if(amplitude >= 2) {
			damage = -30;
		} else if(amplitude == 1) {
			damage = -15;
		}
		if(amplitude > 0) {
			this.updateScore(damage);
			this.dataProvider.getScoreData().bonusCounter = 0;
			this.dataProvider.getScoreData().speedBonus = 1;
			kro13_kk_utils_FxUtils.addBoomFx(this.scene,amplitude * 2,16777215,this.playerTransform);
		}
		return damage;
	}
	,scoreRotation: function(full) {
		var _this = this.dataProvider.getLocal();
		var rotationScore = 15 * (_this.scoreData.speedBonus + _this.scoreData.avalancheBonus);
		this.updateScore(rotationScore);
		if(full) {
			kro13_kk_utils_FxUtils.addBoomFx(this.scene,7,16777215,this.playerTransform);
		} else {
			kro13_kk_utils_FxUtils.addBoomFx(this.scene,5,16777215,this.playerTransform);
		}
	}
	,updateScore: function(val) {
		if(!this.comboStarted) {
			this.comboStarted = true;
		}
		this.currentCombo += val;
		if(this.currentCombo > this.dataProvider.getScoreData().bestCombo) {
			this.dataProvider.getScoreData().bestCombo = this.currentCombo;
		}
		this.lastScoreUpdateTS = new Date().getTime() / 1000;
		this.dataProvider.getScoreData().currentScore += val;
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.EMIT_SCORE(val));
		this.updateRestartCount();
	}
	,updateRestartCount: function() {
		if(this.dataProvider.getScoreData().currentScore >= this.dataProvider.getLocal().getNextRestartScore()) {
			this.dataProvider.updateRestarts(1);
			kro13_analytics_Analytics.get_instance().sendEventWithAmount("rollbacks:increase",this.profile.restarts);
			this.dataProvider.getScoreData().restartUpdatesCount++;
		}
	}
	,updateSpeedRatio: function() {
		var this1 = this.playerBody.velocity;
		var tmp = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
		var tmp1 = this.dataProvider.getLocal().maxSpeed;
		this.dataProvider.getScoreData().speedRatio = tmp / tmp1;
	}
	,updateBonus: function() {
		if(this.dataProvider.getScoreData().speedRatio >= 0.5 && this.dataProvider.getScoreData().bonusCounter < 5) {
			this.dataProvider.getScoreData().bonusCounter++;
		} else if(this.dataProvider.getScoreData().speedRatio < 0.5 && this.dataProvider.getScoreData().bonusCounter > 0) {
			this.dataProvider.getScoreData().bonusCounter--;
		}
		var nextBonus = 0;
		if(this.dataProvider.getScoreData().bonusCounter < 2) {
			nextBonus = 1;
		} else if(this.dataProvider.getScoreData().bonusCounter >= 2 && this.dataProvider.getScoreData().bonusCounter < 5) {
			nextBonus = 2;
		} else if(this.dataProvider.getScoreData().bonusCounter >= 5) {
			nextBonus = 3;
		}
		var needToDispatch = this.dataProvider.getScoreData().speedBonus < nextBonus;
		this.dataProvider.getScoreData().speedBonus = nextBonus;
		if(needToDispatch) {
			var tmp = this.eventDispatcher;
			var _this = this.dataProvider.getLocal();
			tmp.dispatchGameEvent(kro13_kk_EGameEvent.BONUS(_this.scoreData.speedBonus + _this.scoreData.avalancheBonus));
		}
	}
	,__class__: kro13_kk_systems_ScoreSystem
});
var kro13_kk_systems_SimpleUpdateSystem = function(scene,onUpdate) {
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	haxe_Log.trace("new upd system",{ fileName : "src/kro13/kk/systems/SimpleUpdateSystem.hx", lineNumber : 17, className : "kro13.kk.systems.SimpleUpdateSystem", methodName : "new"});
};
$hxClasses["kro13.kk.systems.SimpleUpdateSystem"] = kro13_kk_systems_SimpleUpdateSystem;
kro13_kk_systems_SimpleUpdateSystem.__name__ = "kro13.kk.systems.SimpleUpdateSystem";
kro13_kk_systems_SimpleUpdateSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_SimpleUpdateSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		var tmp;
		if(container.componentsMap == null) {
			tmp = null;
		} else {
			var component = container.componentsMap.h[9];
			tmp = component;
		}
		if(tmp != null) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
		}
		var transform;
		if(container.componentsMap == null) {
			transform = null;
		} else {
			var component = container.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		var ch = transform1.iterator();
		while(ch.hasNext()) {
			var ch1 = ch.next();
			this.addContainer(ch1.owner);
		}
	}
	,start: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.start.call(this);
	}
	,stop: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.stop.call(this);
	}
	,update: function() {
		var delta = kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier;
		var updater = null;
		var i = this.containers.length - 1;
		while(i >= 0) {
			var c = this.containers[i];
			var updater1;
			if(c.componentsMap == null) {
				updater1 = null;
			} else {
				var component = c.componentsMap.h[9];
				updater1 = component;
			}
			updater = updater1;
			updater.owner.update(delta);
			--i;
		}
	}
	,__class__: kro13_kk_systems_SimpleUpdateSystem
});
var kro13_kk_systems_SoundControlSystem = function(scene,onUpdate,eventDispatcher,dataProvider,avalancheSystem) {
	this.waitForTap = true;
	this.isGameActive = false;
	this.isAvalanche = false;
	this.isFlying = false;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.eventDispatcher = eventDispatcher;
	this.dataProvider = dataProvider;
	this.avalancheSystem = avalancheSystem;
	this.mainMusicTimer = 0;
};
$hxClasses["kro13.kk.systems.SoundControlSystem"] = kro13_kk_systems_SoundControlSystem;
kro13_kk_systems_SoundControlSystem.__name__ = "kro13.kk.systems.SoundControlSystem";
kro13_kk_systems_SoundControlSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_SoundControlSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	start: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.start.call(this);
	}
	,addContainer: function(container) {
		if(container.type == 1) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var handler;
			if(container.componentsMap == null) {
				handler = null;
			} else {
				var component = container.componentsMap.h[6];
				handler = component;
			}
			var handler1 = handler;
			handler1.addHandler($bind(this,this.onEvent));
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[3];
				tmp = component;
			}
			this.playerBody = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[12];
				tmp = component;
			}
			this.physicalCoeff = tmp;
		}
	}
	,update: function() {
		var this1 = this.playerBody.velocity;
		var speedRate = Math.sqrt(this1.x * this1.x + this1.y * this1.y) / this.dataProvider.getLocal().maxSpeed;
		if(kro13_kk_sound_SoundManager.instance == null) {
			kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
		}
		kro13_kk_sound_SoundManager.instance.setVolume("snow1",speedRate * 0.4);
		if(kro13_kk_sound_SoundManager.instance == null) {
			kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
		}
		kro13_kk_sound_SoundManager.instance.setVolume("wind",Math.pow(speedRate,4) * 0.9);
		this.mainMusicTimer += kro13_kk_systems_DTSystem._dt;
		if(this.mainMusicTimer >= 180) {
			this.startMain();
		}
		if(this.waitForTap && haxepunk_input_Mouse.mouseDown) {
			this.waitForTap = false;
			this.startMain();
		}
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 2:
			haxe_Log.trace("-------------------------> sound manager PLAY",{ fileName : "src/kro13/kk/systems/SoundControlSystem.hx", lineNumber : 98, className : "kro13.kk.systems.SoundControlSystem", methodName : "onEvent"});
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.play("wind",true);
			if(!this.isFlying) {
				if(kro13_kk_sound_SoundManager.instance == null) {
					kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
				}
				kro13_kk_sound_SoundManager.instance.play("snow1",true);
			}
			this.isGameStarted = true;
			break;
		case 3:
			haxe_Log.trace("-------------------------> sound manager PAUSE",{ fileName : "src/kro13/kk/systems/SoundControlSystem.hx", lineNumber : 92, className : "kro13.kk.systems.SoundControlSystem", methodName : "onEvent"});
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.pause("snow1");
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.pause("wind");
			this.isGameStarted = false;
			break;
		case 4:
			haxe_Log.trace("-------------------------> sound manager ACTIVATE",{ fileName : "src/kro13/kk/systems/SoundControlSystem.hx", lineNumber : 85, className : "kro13.kk.systems.SoundControlSystem", methodName : "onEvent"});
			this.waitForTap = true;
			break;
		case 5:
			haxe_Log.trace("-------------------------> sound manager DEACTIVATE",{ fileName : "src/kro13/kk/systems/SoundControlSystem.hx", lineNumber : 81, className : "kro13.kk.systems.SoundControlSystem", methodName : "onEvent"});
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.stop("main3");
			break;
		case 18:
			var amplitude = e.amplitude;
			var target = e.target;
			if(amplitude > 0) {
				if(amplitude >= 2 && target.type == 7) {
					if(kro13_kk_sound_SoundManager.instance == null) {
						kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
					}
					kro13_kk_sound_SoundManager.instance.play("crash",false);
				} else {
					if(kro13_kk_sound_SoundManager.instance == null) {
						kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
					}
					kro13_kk_sound_SoundManager.instance.play("hit",false);
				}
			}
			break;
		case 20:
			var _g = e.jumpTime;
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.pause("snow1");
			this.isFlying = true;
			break;
		case 21:
			if(this.isFlying) {
				if(kro13_kk_sound_SoundManager.instance == null) {
					kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
				}
				kro13_kk_sound_SoundManager.instance.play("snow1",true);
				if(kro13_kk_sound_SoundManager.instance == null) {
					kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
				}
				kro13_kk_sound_SoundManager.instance.play(this.getLandSound(),false);
				this.isFlying = false;
			}
			break;
		case 25:
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.play("avalanche1");
			break;
		case 30:
			var _g = e.startNew;
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.play("eagle");
			break;
		case 33:case 34:case 35:
			if(kro13_kk_sound_SoundManager.instance == null) {
				kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
			}
			kro13_kk_sound_SoundManager.instance.play("hare");
			break;
		case 40:
			var reducer = e.reducer;
			if(reducer == 2) {
				if(kro13_kk_sound_SoundManager.instance == null) {
					kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
				}
				kro13_kk_sound_SoundManager.instance.play("circle_big1");
				return;
			}
			if(reducer == 1) {
				if(kro13_kk_sound_SoundManager.instance == null) {
					kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
				}
				kro13_kk_sound_SoundManager.instance.play("circle_small");
				return;
			}
			break;
		case 42:
			this.startMain();
			break;
		default:
		}
	}
	,startMain: function() {
		this.mainMusicTimer = 0;
		if(kro13_kk_sound_SoundManager.instance == null) {
			kro13_kk_sound_SoundManager.instance = new kro13_kk_sound_SoundManager();
		}
		kro13_kk_sound_SoundManager.instance.play("main3");
	}
	,getLandSound: function() {
		if(Math.random() > 0.5) {
			return "land0";
		} else {
			return "land1";
		}
	}
	,__class__: kro13_kk_systems_SoundControlSystem
});
var kro13_kk_systems_StuckSystem = function(scene,onUpdate,eventDispatcher) {
	this.timer = 0;
	this.currentStuckId = -1;
	this.pendingStuckId = -1;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.eventDispatcher = eventDispatcher;
	haxe_Log.trace("new stuck system",{ fileName : "src/kro13/kk/systems/StuckSystem.hx", lineNumber : 29, className : "kro13.kk.systems.StuckSystem", methodName : "new"});
};
$hxClasses["kro13.kk.systems.StuckSystem"] = kro13_kk_systems_StuckSystem;
kro13_kk_systems_StuckSystem.__name__ = "kro13.kk.systems.StuckSystem";
kro13_kk_systems_StuckSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_StuckSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		if(container.type == 1) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[3];
				tmp = component;
			}
			this.playerBody = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[2];
				tmp = component;
			}
			this.playerTransform = tmp;
			this.playerBody.onCollide.callbacks.push($bind(this,this.onHint));
		}
	}
	,update: function() {
		var dt = kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier;
		if(this.pendingStuckId >= 0 && this.currentStuckId < 0) {
			this.currentStuckId = this.pendingStuckId;
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.STUCK(false));
			haxe_Log.trace("stuck " + this.pendingStuckId,{ fileName : "src/kro13/kk/systems/StuckSystem.hx", lineNumber : 51, className : "kro13.kk.systems.StuckSystem", methodName : "update"});
		}
		if(this.pendingStuckId < 0 && this.currentStuckId >= 0 && this.timer >= 1) {
			this.currentStuckId = -1;
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.RELEASE);
			haxe_Log.trace("release",{ fileName : "src/kro13/kk/systems/StuckSystem.hx", lineNumber : 57, className : "kro13.kk.systems.StuckSystem", methodName : "update"});
		}
		this.timer += dt;
		this.pendingStuckId = -1;
	}
	,onHint: function(target) {
		var transform;
		if(target.componentsMap == null) {
			transform = null;
		} else {
			var component = target.componentsMap.h[2];
			transform = component;
		}
		var transform1 = transform;
		if(transform1 == null) {
			return;
		}
		if(target.type == 4) {
			var tmp;
			if(this.playerTransform.get_position().y <= transform1.get_position().y + 20. && this.playerTransform.get_position().x >= transform1.get_position().x + 40 && this.playerTransform.get_position().x <= transform1.get_position().x + transform1.get_size().x - 40) {
				var this1 = this.playerBody.velocity;
				tmp = Math.sqrt(this1.x * this1.x + this1.y * this1.y) <= 50;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.pendingStuckId = target.id;
				this.timer = 0;
			}
		}
	}
	,__class__: kro13_kk_systems_StuckSystem
});
var kro13_kk_systems_TrampSystem = function(scene,onUpdate,eventDispatcher,dataProvider) {
	this.jumpTimePassed = 0;
	this.isJump = false;
	this.lastTrampId = -1;
	this.pendingTrampId = -1;
	this.currentTrampId = -1;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.eventDispatcher = eventDispatcher;
	this.dataProvider = dataProvider;
	haxe_Log.trace("new tramp system",{ fileName : "src/kro13/kk/systems/TrampSystem.hx", lineNumber : 41, className : "kro13.kk.systems.TrampSystem", methodName : "new"});
};
$hxClasses["kro13.kk.systems.TrampSystem"] = kro13_kk_systems_TrampSystem;
kro13_kk_systems_TrampSystem.__name__ = "kro13.kk.systems.TrampSystem";
kro13_kk_systems_TrampSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_TrampSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		if(container.type == 1) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[3];
				tmp = component;
			}
			this.playerBody = tmp;
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[2];
				tmp = component;
			}
			this.playerTransform = tmp;
			this.playerBody.onCollide.callbacks.push($bind(this,this.onHit));
		}
	}
	,start: function() {
		kro13_kk_systems_AbstractUpdateSystem.prototype.start.call(this);
		this.lastTrampId = -1;
	}
	,update: function() {
		var dt = kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier;
		var this1 = this.playerBody.velocity;
		var speedCoef = Math.sqrt(this1.x * this1.x + this1.y * this1.y) / this.dataProvider.getLocal().maxSpeed;
		if(!this.isJump && this.pendingTrampId >= 0 && this.currentTrampId < 0) {
			this.currentTrampId = this.pendingTrampId;
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.TRAMP_ON);
		}
		if(this.pendingTrampId < 0 && this.currentTrampId >= 0) {
			this.lastTrampId = this.currentTrampId;
			var _this = this.dataProvider.getLocal();
			if(_this.scoreData.speedBonus + _this.scoreData.avalancheBonus >= 3) {
				kro13_kk_systems_DTSystem.multiplier = 0.3;
			} else {
				kro13_kk_systems_DTSystem.multiplier = 0.5;
			}
			this.jumpTime = 0.6 * speedCoef;
			this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.TRAMP_OFF(this.jumpTime));
			this.playerBody.disableForceById(0);
			this.playerBody.disableForceById(1);
			this.playerBody.disableForceById(2);
			this.currentTrampId = -1;
			this.isJump = true;
			this.jumpTimePassed = 0;
		}
		if(this.isJump) {
			this.jumpTimePassed += dt;
			if(this.jumpTimePassed >= this.jumpTime) {
				this.isJump = false;
				this.playerBody.enableForceById(0);
				this.playerBody.enableForceById(1);
				this.playerBody.enableForceById(2);
				kro13_kk_systems_DTSystem.multiplier = 1;
				kro13_kk_utils_FxUtils.addJumpLandFx(this.scene,speedCoef,this.playerTransform);
				this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.TRAMP_LAND);
			}
		}
		this.pendingTrampId = -1;
	}
	,onHit: function(target) {
		if(target.type == 6) {
			if(target.id != this.lastTrampId) {
				this.pendingTrampId = target.id;
			}
		}
	}
	,__class__: kro13_kk_systems_TrampSystem
});
var kro13_kk_systems_TricksSystem = function(scene,onUpdate,dataProvider,eventDispatcher) {
	this.trickStarted = false;
	this.trickActivated = false;
	kro13_kk_systems_AbstractUpdateSystem.call(this,scene,onUpdate);
	this.dataProvider = dataProvider;
	this.eventDispatcher = eventDispatcher;
};
$hxClasses["kro13.kk.systems.TricksSystem"] = kro13_kk_systems_TricksSystem;
kro13_kk_systems_TricksSystem.__name__ = "kro13.kk.systems.TricksSystem";
kro13_kk_systems_TricksSystem.__super__ = kro13_kk_systems_AbstractUpdateSystem;
kro13_kk_systems_TricksSystem.prototype = $extend(kro13_kk_systems_AbstractUpdateSystem.prototype,{
	addContainer: function(container) {
		var tmp;
		if(container.componentsMap == null) {
			tmp = null;
		} else {
			var component = container.componentsMap.h[6];
			tmp = component;
		}
		if(tmp != null) {
			kro13_kk_systems_AbstractUpdateSystem.prototype.addContainer.call(this,container);
			var tmp;
			if(container.componentsMap == null) {
				tmp = null;
			} else {
				var component = container.componentsMap.h[2];
				tmp = component;
			}
			this.playerTransform = tmp;
			var playerHandler;
			if(container.componentsMap == null) {
				playerHandler = null;
			} else {
				var component = container.componentsMap.h[6];
				playerHandler = component;
			}
			var playerHandler1 = playerHandler;
			playerHandler1.addHandler($bind(this,this.onEvent));
		}
	}
	,clear: function() {
		if(this.currentTrick != null) {
			this.stopTrick();
		}
	}
	,update: function() {
		if(this.trickStarted) {
			this.trickTime += kro13_kk_systems_DTSystem._dt * kro13_kk_systems_DTSystem.multiplier;
			if(this.trickTime >= 0.1 && this.currentTrick == null) {
				this.startTrick();
			}
			if(this.trickTime >= this.jumpTime - 0.1 && this.currentTrick != null) {
				this.stopTrick();
				this.trickStarted = false;
			}
		}
	}
	,onEvent: function(e) {
		switch(e._hx_index) {
		case 0:
			var _g = e.firstStart;
			if(this.currentTrick != null) {
				this.stopTrick();
				this.trickStarted = false;
			}
			break;
		case 20:
			var jumpT = e.jumpTime;
			var _this = this.dataProvider.getLocal();
			if(_this.scoreData.speedBonus + _this.scoreData.avalancheBonus >= 3 && jumpT >= 0.3) {
				this.trickTime = 0;
				this.trickStarted = true;
				this.jumpTime = jumpT;
			}
			break;
		case 30:
			var _g = e.startNew;
			if(this.currentTrick != null) {
				this.stopTrick();
				this.trickStarted = false;
			}
			break;
		default:
		}
	}
	,startTrick: function() {
		this.currentTrick = new kro13_kk_gameObjects_tricks_Trick(this.getTrickConf());
		this.currentTrick.build();
		var _this = this.currentTrick;
		var binder;
		if(_this.componentsMap == null) {
			binder = null;
		} else {
			var component = _this.componentsMap.h[11];
			binder = component;
		}
		binder.bindTo(this.playerTransform);
		this.playerTransform.set_visible(false);
		this.scene.addContainer(this.currentTrick);
		this.currentTrick.start();
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.TRICK_START);
	}
	,stopTrick: function() {
		this.currentTrick.stop();
		this.currentTrick.destroy();
		this.playerTransform.set_visible(true);
		this.currentTrick = null;
		this.eventDispatcher.dispatchGameEvent(kro13_kk_EGameEvent.TRICK_STOP);
	}
	,getTrickConf: function() {
		var chance = Math.random();
		if(chance <= 0.333) {
			return { source : "images/t1.png", originY : 0.75};
		} else if(chance <= 0.666) {
			return { source : "images/t2.png", originY : 0.25};
		} else {
			return { source : "images/t3.png", originY : 0.75};
		}
	}
	,__class__: kro13_kk_systems_TricksSystem
});
var kro13_kk_systems_VisibilityBuffer = function() {
	this.visible = [];
	this.typeToVisible = new haxe_ds_IntMap();
};
$hxClasses["kro13.kk.systems.VisibilityBuffer"] = kro13_kk_systems_VisibilityBuffer;
kro13_kk_systems_VisibilityBuffer.__name__ = "kro13.kk.systems.VisibilityBuffer";
kro13_kk_systems_VisibilityBuffer.prototype = {
	get: function() {
		return this.visible;
	}
	,getByType: function(type) {
		if(!this.typeToVisible.exists(type)) {
			this.typeToVisible.set(type,[]);
		}
		return this.typeToVisible.get(type);
	}
	,add: function(t) {
		this.visible.push(t);
		if(!this.typeToVisible.exists(t.type)) {
			this.typeToVisible.set(t.type,[]);
		}
		this.typeToVisible.get(t.type).push(t);
	}
	,remove: function(t) {
		HxOverrides.remove(this.visible,t);
		if(this.typeToVisible.exists(t.type)) {
			HxOverrides.remove(this.typeToVisible.get(t.type),t);
		}
	}
	,clear: function() {
		this.visible = [];
		this.typeToVisible = new haxe_ds_IntMap();
	}
	,length: function() {
		return this.visible.length;
	}
	,__class__: kro13_kk_systems_VisibilityBuffer
};
var kro13_kk_threading_ThreadingManager = function() {
};
$hxClasses["kro13.kk.threading.ThreadingManager"] = kro13_kk_threading_ThreadingManager;
kro13_kk_threading_ThreadingManager.__name__ = "kro13.kk.threading.ThreadingManager";
kro13_kk_threading_ThreadingManager.__properties__ = {get_instance:"get_instance"};
kro13_kk_threading_ThreadingManager.get_instance = function() {
	if(kro13_kk_threading_ThreadingManager.instance == null) {
		kro13_kk_threading_ThreadingManager.instance = new kro13_kk_threading_ThreadingManager();
	}
	return kro13_kk_threading_ThreadingManager.instance;
};
kro13_kk_threading_ThreadingManager.prototype = {
	run: function(task,callback,onError) {
		task();
		callback();
	}
	,__class__: kro13_kk_threading_ThreadingManager
};
var kro13_kk_tween_AbstractTween = function() {
};
$hxClasses["kro13.kk.tween.AbstractTween"] = kro13_kk_tween_AbstractTween;
kro13_kk_tween_AbstractTween.__name__ = "kro13.kk.tween.AbstractTween";
kro13_kk_tween_AbstractTween.__interfaces__ = [kro13_kk_IUpdatable];
kro13_kk_tween_AbstractTween.prototype = {
	update: function(dt) {
	}
	,isRunning: function() {
		return false;
	}
	,reset: function() {
	}
	,getValue: function() {
		return 0;
	}
	,__class__: kro13_kk_tween_AbstractTween
};
var kro13_kk_tween_FloatTween = function(from,to,duration,ease,onComplete) {
	kro13_kk_tween_AbstractTween.call(this);
	this.ease = ease;
	if(this.ease == null) {
		this.ease = haxepunk_utils_Ease.linear;
	}
	this.from = from;
	this.to = to;
	this.duration = duration;
	this.range = to - from;
	this.onComplete = onComplete;
	this.reset();
};
$hxClasses["kro13.kk.tween.FloatTween"] = kro13_kk_tween_FloatTween;
kro13_kk_tween_FloatTween.__name__ = "kro13.kk.tween.FloatTween";
kro13_kk_tween_FloatTween.__super__ = kro13_kk_tween_AbstractTween;
kro13_kk_tween_FloatTween.prototype = $extend(kro13_kk_tween_AbstractTween.prototype,{
	reset: function() {
		this.val = this.from;
		this.elapsed = 0;
		this.ratio = 0;
		this.isComplete = false;
	}
	,update: function(dt) {
		var result = this.elapsed <= this.duration || this.ratio < 1;
		if(!result && this.onComplete != null && !this.isComplete) {
			this.onComplete();
			this.isComplete = true;
		}
		if(result) {
			this.ratio = this.elapsed / this.duration;
			if(this.ratio > 1) {
				this.ratio = 1;
			}
			this.ratio = this.ease(this.ratio);
			this.val = this.from + this.range * this.ratio;
		}
		this.elapsed += dt;
	}
	,isRunning: function() {
		var result = this.elapsed <= this.duration || this.ratio < 1;
		if(!result && this.onComplete != null && !this.isComplete) {
			this.onComplete();
			this.isComplete = true;
		}
		return result;
	}
	,getValue: function() {
		return this.val;
	}
	,__class__: kro13_kk_tween_FloatTween
});
var kro13_kk_tween_RepeatTween = function(tween) {
	kro13_kk_tween_AbstractTween.call(this);
	this.tween = tween;
};
$hxClasses["kro13.kk.tween.RepeatTween"] = kro13_kk_tween_RepeatTween;
kro13_kk_tween_RepeatTween.__name__ = "kro13.kk.tween.RepeatTween";
kro13_kk_tween_RepeatTween.__super__ = kro13_kk_tween_AbstractTween;
kro13_kk_tween_RepeatTween.prototype = $extend(kro13_kk_tween_AbstractTween.prototype,{
	reset: function() {
		this.tween.reset();
	}
	,update: function(dt) {
		if(this.isRunning()) {
			this.tween.update(dt);
		} else {
			this.reset();
		}
	}
	,isRunning: function() {
		return this.tween.isRunning();
	}
	,getValue: function() {
		return this.tween.getValue();
	}
	,__class__: kro13_kk_tween_RepeatTween
});
var kro13_kk_tween_SequenceTween = function(sequence) {
	kro13_kk_tween_AbstractTween.call(this);
	this.seq = sequence;
	this.reset();
};
$hxClasses["kro13.kk.tween.SequenceTween"] = kro13_kk_tween_SequenceTween;
kro13_kk_tween_SequenceTween.__name__ = "kro13.kk.tween.SequenceTween";
kro13_kk_tween_SequenceTween.__super__ = kro13_kk_tween_AbstractTween;
kro13_kk_tween_SequenceTween.prototype = $extend(kro13_kk_tween_AbstractTween.prototype,{
	reset: function() {
		this.currIdx = 0;
		var _g = 0;
		var _g1 = this.seq;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.reset();
		}
	}
	,update: function(dt) {
		if(this.isRunning()) {
			if(this.seq[this.currIdx].isRunning()) {
				this.seq[this.currIdx].update(dt);
			} else if(this.currIdx < this.seq.length - 1) {
				this.currIdx++;
			}
		}
	}
	,isRunning: function() {
		if(this.currIdx >= this.seq.length - 1) {
			return this.seq[this.currIdx].isRunning();
		} else {
			return true;
		}
	}
	,getValue: function() {
		return this.seq[this.currIdx].getValue();
	}
	,getCurrIdx: function() {
		return this.currIdx;
	}
	,__class__: kro13_kk_tween_SequenceTween
});
var kro13_kk_utils_CollisionUtils = function() {
};
$hxClasses["kro13.kk.utils.CollisionUtils"] = kro13_kk_utils_CollisionUtils;
kro13_kk_utils_CollisionUtils.__name__ = "kro13.kk.utils.CollisionUtils";
kro13_kk_utils_CollisionUtils.__properties__ = {get_instance:"get_instance"};
kro13_kk_utils_CollisionUtils.get_instance = function() {
	if(kro13_kk_utils_CollisionUtils.instance == null) {
		kro13_kk_utils_CollisionUtils.instance = new kro13_kk_utils_CollisionUtils();
	}
	return kro13_kk_utils_CollisionUtils.instance;
};
kro13_kk_utils_CollisionUtils.prototype = {
	getMinTranslationVector: function(obb1,obb2) {
		var axes = this.getPerpendicularAxes(obb1,obb2);
		var minOverlap = Infinity;
		var mtv = null;
		var _g = 0;
		while(_g < axes.length) {
			var axis = axes[_g];
			++_g;
			var proj1 = this.projectOnAxis(obb1,axis);
			var proj2 = this.projectOnAxis(obb2,axis);
			var overlap = this.getOverapLength(proj1,proj2);
			if(overlap == 0) {
				var x = 0;
				var y = 0;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var this1 = { x : x, y : y};
				mtv = this1;
				return mtv;
			} else if(overlap < minOverlap) {
				minOverlap = overlap;
				var x1 = axis.x * minOverlap;
				var y1 = axis.y * minOverlap;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var this2 = { x : x1, y : y1};
				mtv = this2;
			}
		}
		var this1 = this.getCenter(obb1);
		var other = this.getCenter(obb2);
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x -= other.x;
		this2.y -= other.y;
		var notPointingTheSameDirection = this.scalarProduct(this2,mtv) > 0;
		if(notPointingTheSameDirection) {
			var x = -mtv.x;
			var y = -mtv.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var this1 = { x : x, y : y};
			mtv = this1;
		}
		return mtv;
	}
	,getPerpendicularAxes: function(vertices1,vertices2) {
		var axes = [];
		axes[0] = this.getPerpendicularAxis(vertices1,0);
		axes[1] = this.getPerpendicularAxis(vertices1,1);
		axes[2] = this.getPerpendicularAxis(vertices2,0);
		axes[3] = this.getPerpendicularAxis(vertices2,1);
		return axes;
	}
	,getOverapLength: function(a,b) {
		if(!this.areOverlapping(a,b)) {
			return 0;
		}
		return Math.min(a.y,b.y) - Math.max(a.x,b.x);
	}
	,areOverlapping: function(a,b) {
		if(a.x < b.y) {
			return a.y > b.x;
		} else {
			return false;
		}
	}
	,projectOnAxis: function(vertices,axis) {
		var min = Infinity;
		var max = -Infinity;
		var _g = 0;
		while(_g < vertices.length) {
			var vertex = vertices[_g];
			++_g;
			var projection = this.scalarProduct(vertex,axis);
			if(projection < min) {
				min = projection;
			}
			if(projection > max) {
				max = projection;
			}
		}
		var x = min;
		var y = max;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		return this1;
	}
	,scalarProduct: function(a,b) {
		return a.x * b.x + a.y * b.y;
	}
	,getPerpendicularAxis: function(vertices,index) {
		if(index < 0 && index >= 4) {
			throw haxe_Exception.thrown("Index ont of bounds!");
		}
		var this1 = vertices[index + 1];
		var other = vertices[index];
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var this2 = this1;
		this2.x -= other.x;
		this2.y -= other.y;
		return this.getNormal(this.getNormalized(this2));
	}
	,getNormal: function(v) {
		var x = -v.y;
		var y = v.x;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		return this1;
	}
	,getNormalized: function(v) {
		var length = Math.sqrt(v.x * v.x + v.y * v.y);
		var x = v.x / length;
		var y = v.y / length;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		return this1;
	}
	,getCenter: function(obb) {
		var this1 = obb[0];
		var other = obb[2];
		var x = this1.x;
		var y = this1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var sum_x = x;
		var sum_y = y;
		sum_x += other.x;
		sum_y += other.y;
		var x = sum_x * 0.5;
		var y = sum_y * 0.5;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var this1 = { x : x, y : y};
		var center = this1;
		return center;
	}
	,__class__: kro13_kk_utils_CollisionUtils
};
var kro13_kk_utils_FxUtils = function() { };
$hxClasses["kro13.kk.utils.FxUtils"] = kro13_kk_utils_FxUtils;
kro13_kk_utils_FxUtils.__name__ = "kro13.kk.utils.FxUtils";
kro13_kk_utils_FxUtils.addBoomFx = function(scene,radius,color,target) {
	var boom = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildCircularBoom(radius,color);
	var binder;
	if(boom.componentsMap == null) {
		binder = null;
	} else {
		var component = boom.componentsMap.h[11];
		binder = component;
	}
	var binder1 = binder;
	binder1.bindTo(target);
	boom.start();
	scene.addContainer(boom);
};
kro13_kk_utils_FxUtils.addSnowmanDestroyFx = function(scene,target) {
	var blowFx = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildSnowBlow({ distance : 60, duration : 0.3, eminCount : 10, emitFrequency : 0.002});
	var blowFx1 = blowFx;
	if(target.get_position() == null) {
		haxe_Log.trace(target.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
	}
	target.absPosition.x = target.get_position().x;
	target.absPosition.y = target.get_position().y;
	var parent = target.parent;
	while(parent != null) {
		target.absPosition.x += parent.get_position().x;
		target.absPosition.y += parent.get_position().y;
		parent = parent.parent;
	}
	var x = target.absPosition.x + 23;
	if(target.get_position() == null) {
		haxe_Log.trace(target.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
	}
	target.absPosition.x = target.get_position().x;
	target.absPosition.y = target.get_position().y;
	var parent = target.parent;
	while(parent != null) {
		target.absPosition.x += parent.get_position().x;
		target.absPosition.y += parent.get_position().y;
		parent = parent.parent;
	}
	var y = target.absPosition.y - 23;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	blowFx1.set_position(this1);
	scene.addContainer(blowFx);
	haxe_Timer.delay(function() {
		blowFx.destroy();
	},1000);
};
kro13_kk_utils_FxUtils.addJumpLandFx = function(scene,speedCoef,target) {
	var blowFx = kro13_kk_gameObjects_GameObjectsFactory.get_instance().buildSnowBlow({ distance : 150 * speedCoef, duration : 0.6, eminCount : 5, emitFrequency : 0.002});
	var blowFx1 = blowFx;
	if(target.get_position() == null) {
		haxe_Log.trace(target.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
	}
	target.absPosition.x = target.get_position().x;
	target.absPosition.y = target.get_position().y;
	var parent = target.parent;
	while(parent != null) {
		target.absPosition.x += parent.get_position().x;
		target.absPosition.y += parent.get_position().y;
		parent = parent.parent;
	}
	var x = target.absPosition.x;
	if(target.get_position() == null) {
		haxe_Log.trace(target.owner.name,{ fileName : "src/kro13/kk/components/Transform.hx", lineNumber : 115, className : "kro13.kk.components.Transform", methodName : "getAbsPosition"});
	}
	target.absPosition.x = target.get_position().x;
	target.absPosition.y = target.get_position().y;
	var parent = target.parent;
	while(parent != null) {
		target.absPosition.x += parent.get_position().x;
		target.absPosition.y += parent.get_position().y;
		parent = parent.parent;
	}
	var y = target.absPosition.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	blowFx1.set_position(this1);
	scene.addContainer(blowFx);
	haxe_Timer.delay(function() {
		blowFx.destroy();
	},1000);
};
var kro13_kk_utils_GameObjetIds = function() { };
$hxClasses["kro13.kk.utils.GameObjetIds"] = kro13_kk_utils_GameObjetIds;
kro13_kk_utils_GameObjetIds.__name__ = "kro13.kk.utils.GameObjetIds";
kro13_kk_utils_GameObjetIds.getNext = function() {
	return kro13_kk_utils_GameObjetIds.id++;
};
var kro13_kk_utils_IntVector2 = {};
kro13_kk_utils_IntVector2._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	return this1;
};
kro13_kk_utils_IntVector2.setTo = function(this1,x,y) {
	this1.x = x;
	this1.y = y;
};
kro13_kk_utils_IntVector2.plus = function(this1,other) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x += other.x;
	this2.y += other.y;
	return this2;
};
kro13_kk_utils_IntVector2.minus = function(this1,other) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x -= other.x;
	this2.y -= other.y;
	return this2;
};
kro13_kk_utils_IntVector2.mult = function(this1,scalar) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x = Math.round(this2.x * scalar);
	this2.y = Math.round(this2.y * scalar);
	return this2;
};
kro13_kk_utils_IntVector2.div = function(this1,scalar) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	var scalar1 = 1 / scalar;
	this2.x = Math.round(this2.x * scalar1);
	this2.y = Math.round(this2.y * scalar1);
	return this2;
};
kro13_kk_utils_IntVector2.scale = function(this1,scalar) {
	this1.x = Math.round(this1.x * scalar);
	this1.y = Math.round(this1.y * scalar);
	return this1;
};
kro13_kk_utils_IntVector2.add = function(this1,other) {
	this1.x += other.x;
	this1.y += other.y;
	return this1;
};
kro13_kk_utils_IntVector2.subtract = function(this1,other) {
	this1.x -= other.x;
	this1.y -= other.y;
	return this1;
};
kro13_kk_utils_IntVector2.clone = function(this1) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	return this1;
};
var kro13_kk_utils_KKVector2 = {};
kro13_kk_utils_KKVector2._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	return this1;
};
kro13_kk_utils_KKVector2.setTo = function(this1,x,y) {
	this1.x = x;
	this1.y = y;
	return this1;
};
kro13_kk_utils_KKVector2.fromVector2 = function(v) {
	var x = v.x;
	var y = v.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	return this1;
};
kro13_kk_utils_KKVector2.toVector2 = function(v) {
	var x = v.x;
	var y = v.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	return this1;
};
kro13_kk_utils_KKVector2.plus = function(this1,other) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x += other.x;
	this2.y += other.y;
	return this2;
};
kro13_kk_utils_KKVector2.minus = function(this1,other) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x -= other.x;
	this2.y -= other.y;
	return this2;
};
kro13_kk_utils_KKVector2.neg = function(this1) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x = -this2.x;
	this2.y = -this2.y;
	return this2;
};
kro13_kk_utils_KKVector2.mult = function(this1,scalar) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	this2.x *= scalar;
	this2.y *= scalar;
	return this2;
};
kro13_kk_utils_KKVector2.div = function(this1,scalar) {
	var x = this1.x;
	var y = this1.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	var this2 = this1;
	var scalar1 = 1 / scalar;
	this2.x *= scalar1;
	this2.y *= scalar1;
	return this2;
};
var kro13_kk_utils_L = function() {
	this.PRIVACY_MESSAGE = "PRIVACY_MESSAGE";
	this.PRIVACY_BTN = "PRIVACY_BTN";
	this.TUTOR_END = "TUTOR_END";
	this.TUTOR_RUN = "TUTOR_RUN";
	this.AUDIO_CREDITS = "Music: Gjallar by Alexander Nakarada\n(www.serpentsoundstudios.com)\nLicensed under Creative Commons BY Attribution 4.0 License\nhttp://creativecommons.org/licenses/by/4.0/";
	this.TUTOR_WELCOME = "TUTOR_WELCOME";
	this.METER = "METER";
	this.BIG_CIRCLE_MSG = "BIG_CIRCLE_MSG";
	this.SMALL_CIRCLE_MSG = "SMALL_CIRCLE_MSG";
	this.CHASE_FAIL_MSG1 = "CHASE_FAIL_MSG1";
	this.CHASE_SUCCESS_MSG1 = "CHASE_SUCCESS_MSG1";
	this.ROLLBACK_MSG1 = "ROLLBACK_MSG1";
	this.CHASE_MSG1 = "CHASE_MSG1";
	this.PLAY_MSG1 = "PLAY_MSG1";
	this.STUCK_MSG1 = "STUCK_MSG1";
	this.AVALANCHE_CATCH_MSG1 = "AVALANCHE_CATCH_MSG1";
	this.AVALANCHE_END_MSG1 = "AVALANCHE_END_MSG1";
	this.AVALANCHE_START_MSG2 = "AVALANCHE_START_MSG2";
	this.AVALANCHE_START_MSG1 = "AVALANCHE_START_MSG1";
	this.DESTROY_MSG2 = "DESTROY_MSG2";
	this.DESTROY_MSG1 = "DESTROY_MSG1";
	this.HIT_MSG1 = "HIT_MSG1";
	this.JUMP_MSG3 = "JUMP_MSG3";
	this.JUMP_MSG2 = "JUMP_MSG2";
	this.JUMP_MSG1 = "JUMP_MSG1";
	this.NOTIF_COME_BACK = "NOTIF_COME_BACK";
	this.HELP_ABOUT_MANDALA = "HELP_ABOUT_MANDALA";
	this.HELP_ABOUT_FAUNA = "HELP_ABOUT_FAUNA";
	this.HELP_ABOUT_AVALANCHE = "HELP_ABOUT_AVALANCHE";
	this.HELP_ABOUT_MAIN = "HELP_ABOUT_MAIN";
	this.HELP_ABOUT_SNOWMEN = "HELP_ABOUT_SNOWMEN";
	this.ERROR_ADS = "ERROR_ADS";
	this.ERROR_DEFAULT = "ERROR_DEFAULT";
	this.HELP9 = "HELP9";
	this.HELP8 = "HELP8";
	this.HELP7 = "HELP7";
	this.HELP6 = "HELP6";
	this.HELP5 = "HELP5";
	this.HELP4 = "HELP4";
	this.HELP3 = "HELP3";
	this.HELP2 = "HELP2";
	this.HELP1_D = "HELP1_D";
	this.HELP1 = "HELP1";
	this.MUSIC_SETTING = "MUSIC_SETTING";
	this.SETTING_OFF = "SETTING_OFF";
	this.SETTING_ON = "SETTING_ON";
	this.SOUND_FX_SETTING = "SOUND_FX_SETTING";
	this.MENU_LOCALE = "MENU_LOCALE";
	this.MENU_POS_RIGHT = "MENU_POS_RIGHT";
	this.MENU_POS_LEFT = "MENU_POS_LEFT";
	this.MENU_POS = "MENU_POS";
	this.SENSITIVITY = "SENSITIVITY";
	this.BTN_INVITE = "BTN_INVITE";
	this.NO_RESTART_NO_ADS = "NO_RESTART_NO_ADS";
	this.NO_RESTART = "NO_RESTART";
	this.RESTART = "RESTART";
	this.BTN_CREDITS = "BTN_CREDITS";
	this.BTN_GLOBAL_ALL = "BTN_GLOBAL_ALL";
	this.BTN_GLOBAL_FRIENDS = "BTN_GLOBAL_FRIENDS";
	this.BTN_SOCIAL = "BTN_SOCIAL";
	this.BTN_SETTINGS = "BTN_SETTINGS";
	this.BTN_QUIT = "BTN_QUIT";
	this.BTN_HELP = "BTN_HELP";
	this.BTN_RESET = "BTN_RESET";
	this.BTN_STATS = "BTN_STATS";
	this.BTN_PREMIUM = "BTN_PREMIUM";
	this.BTN_TUTOR = "BTN_TUTOR";
	this.BTN_PLAY = "BTN_PLAY";
	this.DESKTOP_NOTE = "DESKTOP_NOTE";
	this.HELP_AVALANCHE = "HELP_AVALANCHE";
	this.HELP_SNOWMEN = "HELP_SNOWMEN";
	this.HELP = "HELP";
	this.RESET = "RESET";
	this.NAME = "NAME";
	this.TOP_SCORE = "TOP_SCORE";
	this.LOADING = "LOADING";
	this.SPEED_BONUS = "SPEED_BONUS";
	this.ERROR_SERVER = "ERROR_SERVER";
	this.TOTAL_SCORE = "TOTAL_SCORE";
	this.FINISH_TXT = "FINISH_TXT";
	this.AVALANCHES_ESCAPED = "AVALANCHES_ESCAPED";
	this.SNOWMEN_DESTROYED = "SNOWMEN_DESTROYED";
	this.TOTAL_JUMPS = "TOTAL_JUMPS";
	this.TOTAL_DISTANCE = "TOTAL_DISTANCE";
	this.BEST_ROTATION = "BEST_ROTATION";
	this.BEST_JUMP = "BEST_JUMP";
	this.BEST_COMBO = "BEST_COMBO";
	this.FINISH_BAD = "FINISH_BAD";
	this.FINISH_GOOD = "FINISH_GOOD";
	this.FINISH_NEW_RECORD = "FINISH_NEW_RECORD";
	this.FINISH_TUTOR = "FINISH_TUTOR";
	this.PAUSE = "PAUSE";
};
$hxClasses["kro13.kk.utils.L"] = kro13_kk_utils_L;
kro13_kk_utils_L.__name__ = "kro13.kk.utils.L";
kro13_kk_utils_L.__properties__ = {get_instance:"get_instance"};
kro13_kk_utils_L.get_instance = function() {
	if(kro13_kk_utils_L.instance == null) {
		kro13_kk_utils_L.instance = new kro13_kk_utils_L();
	}
	return kro13_kk_utils_L.instance;
};
kro13_kk_utils_L.prototype = {
	init: function(path) {
		var data = JSON.parse(openfl_utils_Assets.getText(path));
		var _g = 0;
		var _g1 = Reflect.fields(data);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			this[key] = data[key];
		}
	}
	,__class__: kro13_kk_utils_L
};
var kro13_kk_utils__$L_LL = {};
kro13_kk_utils__$L_LL.add = function(this1,data) {
	return new haxe_Template(this1).execute(data);
};
var kro13_kk_utils_MathUtils = function() {
};
$hxClasses["kro13.kk.utils.MathUtils"] = kro13_kk_utils_MathUtils;
kro13_kk_utils_MathUtils.__name__ = "kro13.kk.utils.MathUtils";
kro13_kk_utils_MathUtils.__properties__ = {get_instance:"get_instance"};
kro13_kk_utils_MathUtils.get_instance = function() {
	if(kro13_kk_utils_MathUtils.instance == null) {
		kro13_kk_utils_MathUtils.instance = new kro13_kk_utils_MathUtils();
		kro13_kk_utils_MathUtils.instance.initRandom(Math.random);
	}
	return kro13_kk_utils_MathUtils.instance;
};
kro13_kk_utils_MathUtils.prototype = {
	roundWithPrec: function(val,precision) {
		var str = "" + val;
		var pointIdx = str.indexOf(".");
		if(pointIdx < 0) {
			pointIdx = str.length;
			precision = 0;
		}
		if(pointIdx + precision > str.length) {
			pointIdx = str.length;
			precision = 0;
		}
		return str.substring(0,pointIdx + precision);
	}
	,degToRad: function(degValue) {
		return degValue * Math.PI / 180;
	}
	,radToDeg: function(radValue) {
		return radValue / Math.PI * 180;
	}
	,randomRange: function(from,to) {
		return Math.round(this.random() * (to - from)) + from;
	}
	,randomArray: function(count,source) {
		if(count >= source.length) {
			return source;
		} else {
			var intervals = [source];
			var result = [];
			while(result.length < count) {
				var rndIntervalIdx = Math.round(this.random() * (intervals.length - 1));
				var rndInterval = intervals[rndIntervalIdx];
				var rndValIdx = Math.round(Math.random() * (rndInterval.length - 1));
				var rndVal = rndInterval[rndValIdx];
				result.push(rndVal);
				var newInterval1 = rndInterval.slice(0,rndValIdx);
				var newInterval2 = rndInterval.slice(rndValIdx + 1,rndInterval.length);
				HxOverrides.remove(intervals,rndInterval);
				if(newInterval1.length > 0) {
					intervals.push(newInterval1);
				}
				if(newInterval2.length > 0) {
					intervals.push(newInterval2);
				}
			}
			return result;
		}
	}
	,initRandom: function(random) {
		this.random = random;
	}
	,__class__: kro13_kk_utils_MathUtils
};
var kro13_kk_utils_TextUtils = function() { };
$hxClasses["kro13.kk.utils.TextUtils"] = kro13_kk_utils_TextUtils;
kro13_kk_utils_TextUtils.__name__ = "kro13.kk.utils.TextUtils";
kro13_kk_utils_TextUtils.getTextRect = function(text) {
	var config = text.materialConfig;
	var options = config.options;
	var bmText = new haxepunk_graphics_text_BitmapText(config.text,0,0,Math.floor(config.width),Math.floor(config.height),options);
	if(bmText._dirty) {
		bmText.parseText();
	}
	var x = bmText.textWidth;
	if(bmText._dirty) {
		bmText.parseText();
	}
	var y = bmText.textHeight;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	return this1;
};
kro13_kk_utils_TextUtils.getColoredString = function(val,addPlusSign) {
	if(addPlusSign == null) {
		addPlusSign = false;
	}
	var tag = val >= 0 ? kro13_kk_utils_TextUtils.pinkTag : kro13_kk_utils_TextUtils.guiTag;
	var plus = addPlusSign && val >= 0 ? kro13_kk_utils_TextUtils.plusSign : "";
	return "<" + tag + ">" + plus + val + "</" + tag + ">";
};
var kro13_kk_utils_VectorUtils = function() { };
$hxClasses["kro13.kk.utils.VectorUtils"] = kro13_kk_utils_VectorUtils;
kro13_kk_utils_VectorUtils.__name__ = "kro13.kk.utils.VectorUtils";
kro13_kk_utils_VectorUtils.evenify = function(value) {
	value.x = Math.floor(value.x);
	value.y = Math.floor(value.y);
	if(value.x % 2 != 0) {
		value.x += 1;
	}
	if(value.y % 2 != 0) {
		value.y += 1;
	}
};
kro13_kk_utils_VectorUtils.evenifyKK = function(value) {
	value.x = Math.round(value.x);
	value.y = Math.round(value.y);
	if(value.x % 2 != 0) {
		value.x += 1;
	}
	if(value.y % 2 != 0) {
		value.y += 1;
	}
};
var kro13_kk_utils_macro_AbstractEnumTools = function() { };
$hxClasses["kro13.kk.utils.macro.AbstractEnumTools"] = kro13_kk_utils_macro_AbstractEnumTools;
kro13_kk_utils_macro_AbstractEnumTools.__name__ = "kro13.kk.utils.macro.AbstractEnumTools";
var kro13_kk_utils_macro_Macro = function() { };
$hxClasses["kro13.kk.utils.macro.Macro"] = kro13_kk_utils_macro_Macro;
kro13_kk_utils_macro_Macro.__name__ = "kro13.kk.utils.macro.Macro";
var kro13_ya_Ya = function() {
};
$hxClasses["kro13.ya.Ya"] = kro13_ya_Ya;
kro13_ya_Ya.__name__ = "kro13.ya.Ya";
kro13_ya_Ya.__properties__ = {get_instance:"get_instance"};
kro13_ya_Ya.get_instance = function() {
	if(kro13_ya_Ya.instance == null) {
		kro13_ya_Ya.instance = new kro13_ya_Ya();
	}
	return kro13_ya_Ya.instance;
};
kro13_ya_Ya.prototype = {
	init: function(callback) {
		YaGames.init({ adv : { onAdvClose : function(wasShown) {
			haxe_Log.trace("ya ads " + (wasShown == null ? "null" : "" + wasShown),{ fileName : "src/kro13/ya/Ya.hx", lineNumber : 20, className : "kro13.ya.Ya", methodName : "init"});
		}}}).then(function(yaSDKImpl) {
			kro13_ya_sdk_YaSDK.get_instance().init(yaSDKImpl);
			callback();
		});
	}
	,__class__: kro13_ya_Ya
};
var kro13_ya_YaRemoteDataProvider = function() {
};
$hxClasses["kro13.ya.YaRemoteDataProvider"] = kro13_ya_YaRemoteDataProvider;
kro13_ya_YaRemoteDataProvider.__name__ = "kro13.ya.YaRemoteDataProvider";
kro13_ya_YaRemoteDataProvider.__interfaces__ = [kro13_kk_data_IRemoteDataProvider];
kro13_ya_YaRemoteDataProvider.prototype = {
	loadProfile: function(remoteId,onSuccess,onError) {
		var _gthis = this;
		var profile = { remoteId : "", userName : "Kanyon Karver", totalScore : 0, tags : []};
		kro13_ya_sdk_YaSDK.get_instance().getPlayer({ scopes : true}).then(function(player) {
			_gthis.player = player;
			profile.remoteId = player.getUniqueID();
			var name = player.getName();
			if(name != "") {
				profile.userName = player.getName();
			} else {
				profile.userName = profile.userName;
			}
			return player.getData();
		}).then(function(data) {
			haxe_Log.trace("got data",{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 34, className : "kro13.ya.YaRemoteDataProvider", methodName : "loadProfile", customParams : [data]});
			if(data.tags == null) {
				data.tags = [];
			}
			profile.tags = data.tags;
			return _gthis.player.getStats();
		}).then(function(stats) {
			haxe_Log.trace("got stats",{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 43, className : "kro13.ya.YaRemoteDataProvider", methodName : "loadProfile", customParams : [stats]});
			if(stats.totalScore == null) {
				stats.totalScore = 0;
			}
			profile.totalScore = stats.totalScore;
			onSuccess(profile);
		}).catch(function(e) {
			haxe_Log.trace(e,{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 52, className : "kro13.ya.YaRemoteDataProvider", methodName : "loadProfile"});
			onSuccess(profile);
		});
	}
	,updateProfile: function(profile,onSuccess,onError) {
		var _gthis = this;
		if(this.player == null) {
			haxe_Log.trace("player is null!",{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 69, className : "kro13.ya.YaRemoteDataProvider", methodName : "updateProfile"});
			onSuccess("OK");
			return;
		}
		haxe_Log.trace("update profile",{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 73, className : "kro13.ya.YaRemoteDataProvider", methodName : "updateProfile", customParams : [profile]});
		this.player.getData().then(function(data) {
			var _g = 0;
			var _g1 = profile.tags;
			while(_g < _g1.length) {
				var tag = _g1[_g];
				++_g;
				if(data.tags.indexOf(tag) < 0) {
					haxe_Log.trace("data changed",{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 83, className : "kro13.ya.YaRemoteDataProvider", methodName : "updateProfile"});
					return _gthis.player.setData({ tags : profile.tags});
				}
			}
			haxe_Log.trace("data not changed",{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 87, className : "kro13.ya.YaRemoteDataProvider", methodName : "updateProfile"});
			return Promise.resolve();
		}).then(function(val) {
			return _gthis.player.setStats({ totalScore : profile.totalScore});
		}).then(function(val) {
			haxe_Log.trace("update profile success",{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 100, className : "kro13.ya.YaRemoteDataProvider", methodName : "updateProfile"});
			onSuccess("OK");
		}).catch(function(e) {
			haxe_Log.trace(e,{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 107, className : "kro13.ya.YaRemoteDataProvider", methodName : "updateProfile"});
			onError(e);
		});
	}
	,updateProfileProp: function(remoteId,prop,value,onSuccess,onError) {
		haxe_Log.trace("set property",{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 115, className : "kro13.ya.YaRemoteDataProvider", methodName : "updateProfileProp", customParams : [prop,value]});
		if(this.player == null) {
			haxe_Log.trace("player is null!",{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 118, className : "kro13.ya.YaRemoteDataProvider", methodName : "updateProfileProp"});
			onSuccess("OK");
			return;
		}
		if(prop == "totalScore") {
			this.player.setStats({ totalScore : value}).then(function(res) {
				onSuccess("OK");
				return kro13_ya_sdk_YaSDK.get_instance().getLeaderboards();
			}).then(function(lb) {
				lb.setLeaderboardScore("topscore1",value);
			}).catch(function(e) {
				haxe_Log.trace(e,{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 134, className : "kro13.ya.YaRemoteDataProvider", methodName : "updateProfileProp"});
				onError(e);
			});
		} else {
			throw haxe_Exception.thrown("update " + prop + " prop not implemented!");
		}
	}
	,getTopScores: function(count,global,onSuccess,onError) {
		kro13_ya_sdk_YaSDK.get_instance().getLeaderboards().then(function(lb) {
			return lb.getLeaderboardEntries("topscore1",{ includeUser : true, quantityAround : 0, quantityTop : count});
		}).then(function(result) {
			haxe_Log.trace(result,{ fileName : "src/kro13/ya/YaRemoteDataProvider.hx", lineNumber : 149, className : "kro13.ya.YaRemoteDataProvider", methodName : "getTopScores"});
			var scores = [];
			var entries = result.entries;
			var _g = 0;
			while(_g < entries.length) {
				var e = entries[_g];
				++_g;
				scores.push({ remoteId : "", userName : e.player.publicName, totalScore : e.formattedScore | 0, tags : []});
			}
			onSuccess(scores);
		});
	}
	,__class__: kro13_ya_YaRemoteDataProvider
};
var kro13_ya_ads_YaAds = function() {
	this.lastAdsTs = new Date().getTime() / 1000 - 120;
};
$hxClasses["kro13.ya.ads.YaAds"] = kro13_ya_ads_YaAds;
kro13_ya_ads_YaAds.__name__ = "kro13.ya.ads.YaAds";
kro13_ya_ads_YaAds.__interfaces__ = [kro13_ads_IAdsManager];
kro13_ya_ads_YaAds.prototype = {
	showAds: function(onSuccess,onSkip,onError) {
		this.lastAdsTs = new Date().getTime() / 1000;
		var _g = $bind(this,this.onAdsSuccess);
		var shownCallback = onSuccess;
		var notShownCallback = onSkip;
		var tmp = function(wasShown) {
			_g(shownCallback,notShownCallback,wasShown);
		};
		var _g1 = $bind(this,this.onAdsError);
		var callback = onError;
		var tmp1 = function(e) {
			_g1(callback,e);
		};
		kro13_ya_sdk_YaSDK.get_instance().adv.showFullscreenAdv({ callbacks : { onClose : tmp, onError : tmp1}});
	}
	,showVideoAds: function(onSuccess,onSkip,onError) {
		var _g = $bind(this,this.onAdsSuccess);
		var shownCallback = onSuccess;
		var notShownCallback = onSuccess;
		var wasShown = true;
		var tmp = function() {
			_g(shownCallback,notShownCallback,wasShown);
		};
		var _g1 = $bind(this,this.onAdsClose);
		var callback = function() {
		};
		var tmp1 = function() {
			_g1(callback);
		};
		var _g2 = $bind(this,this.onAdsError);
		var callback1 = onError;
		var tmp2 = function(e) {
			_g2(callback1,e);
		};
		kro13_ya_sdk_YaSDK.get_instance().adv.showRewardedVideo({ callbacks : { onOpen : $bind(this,this.onAdsOpen), onRewarded : tmp, onClose : tmp1, onError : tmp2}});
	}
	,onAdsOpen: function() {
		haxe_Log.trace("ya ads open",{ fileName : "src/kro13/ya/ads/YaAds.hx", lineNumber : 55, className : "kro13.ya.ads.YaAds", methodName : "onAdsOpen"});
	}
	,onAdsSuccess: function(shownCallback,notShownCallback,wasShown) {
		if(wasShown) {
			haxe_Log.trace("ya ads success",{ fileName : "src/kro13/ya/ads/YaAds.hx", lineNumber : 62, className : "kro13.ya.ads.YaAds", methodName : "onAdsSuccess"});
			shownCallback();
		} else {
			haxe_Log.trace("ya ads not shown",{ fileName : "src/kro13/ya/ads/YaAds.hx", lineNumber : 67, className : "kro13.ya.ads.YaAds", methodName : "onAdsSuccess"});
			notShownCallback();
		}
	}
	,onAdsClose: function(callback) {
		haxe_Log.trace("ya ads close",{ fileName : "src/kro13/ya/ads/YaAds.hx", lineNumber : 74, className : "kro13.ya.ads.YaAds", methodName : "onAdsClose"});
		callback();
	}
	,onAdsError: function(callback,e) {
		haxe_Log.trace("ya ads error",{ fileName : "src/kro13/ya/ads/YaAds.hx", lineNumber : 80, className : "kro13.ya.ads.YaAds", methodName : "onAdsError", customParams : [e]});
		callback(JSON.stringify(e));
	}
	,__class__: kro13_ya_ads_YaAds
};
var kro13_ya_sdk_IYaSDK = function() { };
$hxClasses["kro13.ya.sdk.IYaSDK"] = kro13_ya_sdk_IYaSDK;
kro13_ya_sdk_IYaSDK.__name__ = "kro13.ya.sdk.IYaSDK";
kro13_ya_sdk_IYaSDK.__isInterface__ = true;
kro13_ya_sdk_IYaSDK.prototype = {
	__class__: kro13_ya_sdk_IYaSDK
};
var kro13_ya_sdk_YaSDK = function() {
};
$hxClasses["kro13.ya.sdk.YaSDK"] = kro13_ya_sdk_YaSDK;
kro13_ya_sdk_YaSDK.__name__ = "kro13.ya.sdk.YaSDK";
kro13_ya_sdk_YaSDK.__interfaces__ = [kro13_ya_sdk_IYaSDK];
kro13_ya_sdk_YaSDK.__properties__ = {get_instance:"get_instance"};
kro13_ya_sdk_YaSDK.get_instance = function() {
	if(kro13_ya_sdk_YaSDK.instance == null) {
		kro13_ya_sdk_YaSDK.instance = new kro13_ya_sdk_YaSDK();
	}
	return kro13_ya_sdk_YaSDK.instance;
};
kro13_ya_sdk_YaSDK.prototype = {
	init: function(yaSDK) {
		this.impl = yaSDK;
		this.yandexApp = this.impl.yandexApp;
		this.adv = this.impl.adv;
		this.auth = this.impl.auth;
		this.environment = this.impl.environment;
	}
	,getPlayer: function(params) {
		return this.impl.getPlayer(params);
	}
	,getLeaderboards: function() {
		return this.impl.getLeaderboards();
	}
	,__class__: kro13_ya_sdk_YaSDK
};
var kro13_ya_sdk_IYaPlayer = function() { };
$hxClasses["kro13.ya.sdk.IYaPlayer"] = kro13_ya_sdk_IYaPlayer;
kro13_ya_sdk_IYaPlayer.__name__ = "kro13.ya.sdk.IYaPlayer";
kro13_ya_sdk_IYaPlayer.__isInterface__ = true;
kro13_ya_sdk_IYaPlayer.prototype = {
	__class__: kro13_ya_sdk_IYaPlayer
};
var kro13_ya_sdk_IYaLeaderboard = function() { };
$hxClasses["kro13.ya.sdk.IYaLeaderboard"] = kro13_ya_sdk_IYaLeaderboard;
kro13_ya_sdk_IYaLeaderboard.__name__ = "kro13.ya.sdk.IYaLeaderboard";
kro13_ya_sdk_IYaLeaderboard.__isInterface__ = true;
kro13_ya_sdk_IYaLeaderboard.prototype = {
	__class__: kro13_ya_sdk_IYaLeaderboard
};
var kro13_ya_sdk_IYaAuth = function() { };
$hxClasses["kro13.ya.sdk.IYaAuth"] = kro13_ya_sdk_IYaAuth;
kro13_ya_sdk_IYaAuth.__name__ = "kro13.ya.sdk.IYaAuth";
kro13_ya_sdk_IYaAuth.__isInterface__ = true;
kro13_ya_sdk_IYaAuth.prototype = {
	__class__: kro13_ya_sdk_IYaAuth
};
var kro13_ya_sdk_IYaAdv = function() { };
$hxClasses["kro13.ya.sdk.IYaAdv"] = kro13_ya_sdk_IYaAdv;
kro13_ya_sdk_IYaAdv.__name__ = "kro13.ya.sdk.IYaAdv";
kro13_ya_sdk_IYaAdv.__isInterface__ = true;
kro13_ya_sdk_IYaAdv.prototype = {
	__class__: kro13_ya_sdk_IYaAdv
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = "lime._internal.backend.html5.GameDeviceData";
lime__$internal_backend_html5_GameDeviceData.prototype = {
	__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._internal.backend.html5.HTML5AudioSource"] = lime__$internal_backend_html5_HTML5AudioSource;
lime__$internal_backend_html5_HTML5AudioSource.__name__ = "lime._internal.backend.html5.HTML5AudioSource";
lime__$internal_backend_html5_HTML5AudioSource.prototype = {
	dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null || this.parent.buffer.__srcHowl == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.pause(this.id);
		}
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.getLength();
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null && this.id != -1) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
		}
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		if(this.parent.buffer.__srcHowl != null && this.parent.buffer.__srcHowl.pos != null) {
			this.parent.buffer.__srcHowl.pos(this.position.x,this.position.y,this.position.z,this.id);
		}
		return this.position;
	}
	,__class__: lime__$internal_backend_html5_HTML5AudioSource
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = "lime._internal.backend.html5.HTML5HTTPRequest";
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,0);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 0});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes = function(bytes,type) {
	var uri = URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
	if(uri != null) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,1);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 1});
		}
		return promise.future;
	} else {
		return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + lime__$internal_format_Base64.encode(bytes));
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		switch(queueItem.type) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise,queueItem.options);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__createBlobURIFromBytes = function(bytes,type) {
	return URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI = function(uri) {
	if(!StringTools.startsWith(uri,"data:")) {
		return StringTools.startsWith(uri,"blob:");
	} else {
		return true;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(path == null || path == "") {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(path)) {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname($global.location.hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol($global.location.protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort($global.location.port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise,options) {
	var image = new Image();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(uri)) {
		image.addEventListener("load",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event) {
			promise.progress(event.loaded,event.total);
		},false);
		image.addEventListener("error",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img) {
				promise.complete(img);
			});
		};
		request.onerror = function(event) {
			promise.error(event.message);
		};
		request.onprogress = function(event) {
			if(event.lengthComputable) {
				promise.progress(event.loaded,event.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI = function(uri,options) {
	if((options & 1) != 0) {
		URL.revokeObjectURL(uri);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = haxe_ds_StringMap.keysIterator(this.parent.formData.h);
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var value = this.parent.formData.h[key1];
				if(key1.indexOf("[]") > -1 && ((value) instanceof Array)) {
					var _g = [];
					var x = $getIterator(value);
					while(x.hasNext()) {
						var x1 = x.next();
						_g.push(encodeURIComponent(x1));
					}
					var arrayValue = _g.join("&amp;" + key1 + "=");
					query += encodeURIComponent(key1) + "=" + arrayValue;
				} else {
					var query1 = encodeURIComponent(key1) + "=";
					var s = Std.string(value);
					query += query1 + encodeURIComponent(s);
				}
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY", options : 0});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT", options : 0});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new haxe_ds_List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cursor = lime_ui_MouseCursor.DEFAULT;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Object.prototype.hasOwnProperty.call(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Object.prototype.hasOwnProperty.call(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	if(Object.prototype.hasOwnProperty.call(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Object.prototype.hasOwnProperty.call(attributes,"width") ? attributes.width : 0;
	this.setHeight = Object.prototype.hasOwnProperty.call(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(((element) instanceof HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = window.document.createElement("div");
	} else {
		this.canvas = window.document.createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style = this.div.style;
		style.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style.setProperty("transform","translate3D(0,0,0)",null);
		style.position = "relative";
		style.overflow = "hidden";
		style.setProperty("-webkit-user-select","none",null);
		style.setProperty("-moz-user-select","none",null);
		style.setProperty("-ms-user-select","none",null);
		style.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = window.innerWidth;
			parent.__height = window.innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && attributes.resizable || !Object.prototype.hasOwnProperty.call(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("dragstart",$bind(this,this.handleDragEvent),true);
		element.addEventListener("dragover",$bind(this,this.handleDragEvent),true);
		element.addEventListener("drop",$bind(this,this.handleDragEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = "lime._internal.backend.html5.HTML5Window";
lime__$internal_backend_html5_HTML5Window.prototype = {
	alert: function(message,title) {
		if(message != null) {
			window.alert(Std.string(message));
		}
	}
	,close: function() {
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = true;
			var allowWebGL2 = !Object.prototype.hasOwnProperty.call(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(contextAttributes,"antialiasing") && contextAttributes.antialiasing > 0;
				var options1 = Object.prototype.hasOwnProperty.call(contextAttributes,"depth") ? contextAttributes.depth : true;
				var options2 = Object.prototype.hasOwnProperty.call(contextAttributes,"stencil") && contextAttributes.stencil;
				var options3 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : options1, premultipliedAlpha : true, stencil : options2, preserveDrawingBuffer : false, failIfMajorPerformanceCaveat : true};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options3);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics_WebGLRenderContext.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,focus: function() {
	}
	,getCursor: function() {
		return this.cursor;
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getDisplayMode: function() {
		return lime_system_System.getDisplay(0).currentMode;
	}
	,getFrameRate: function() {
		if(this.parent.application == null) {
			return 0;
		}
		if(this.parent.application.__backend.framePeriod < 0) {
			return 60;
		} else if(this.parent.application.__backend.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.parent.application.__backend.framePeriod;
		}
	}
	,getMouseLock: function() {
		return false;
	}
	,getTextInputEnabled: function() {
		return this.textInputEnabled;
	}
	,handleContextEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			if(event.cancelable) {
				event.preventDefault();
			}
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if((this.parent.onMouseUp.canceled || this.parent.onMouseDown.canceled) && event.cancelable) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		if(event.cancelable) {
			event.preventDefault();
		}
	}
	,handleDragEvent: function(event) {
		switch(event.type) {
		case "dragover":
			event.preventDefault();
			return false;
		case "dragstart":
			if((js_Boot.__cast(event.target , HTMLElement)).nodeName.toLowerCase() == "img" && event.cancelable) {
				event.preventDefault();
				return false;
			}
			break;
		case "drop":
			if(event.dataTransfer != null && event.dataTransfer.files.length > 0) {
				this.parent.onDropFile.dispatch(event.dataTransfer.files);
				event.preventDefault();
				return false;
			}
			break;
		}
		return true;
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.textInputEnabled) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.textInputEnabled) {
						lime__$internal_backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			this.parent.onRestore.dispatch();
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g = 0;
			var _g1 = changeEvents.length;
			while(_g < _g1) {
				var i = _g++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$internal_backend_html5_HTML5Window.textInput.value != lime__$internal_backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$internal_backend_html5_HTML5Window.textInput.value,lime__$internal_backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect = this.div.getBoundingClientRect();
					x = event.clientX - rect.left;
					y = event.clientY - rect.top;
				} else {
					var rect = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			switch(event.type) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					window.addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if((this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				window.removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			switch(event.deltaMode) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled && event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.textInputEnabled) {
				this.parent.onTextInput.dispatch(text);
			}
			if(event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					switch(event.type) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.parent.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.parent.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,move: function(x,y) {
	}
	,readPixels: function(rect) {
		if(this.canvas != null) {
			var stageRect = new lime_math_Rectangle(0,0,this.canvas.width,this.canvas.height);
			if(rect == null) {
				rect = stageRect;
			} else {
				rect.intersection(stageRect,rect);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas2 = window.document.createElement("canvas");
				canvas2.width = rect.width | 0;
				canvas2.height = rect.height | 0;
				var context = canvas2.getContext("2d");
				context.drawImage(this.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas2);
			}
		}
		return null;
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setClipboard: function(value) {
		if(lime__$internal_backend_html5_HTML5Window.textArea == null) {
			lime__$internal_backend_html5_HTML5Window.textArea = window.document.createElement("textarea");
			lime__$internal_backend_html5_HTML5Window.textArea.style.height = "0px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.left = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.opacity = "0";
			lime__$internal_backend_html5_HTML5Window.textArea.style.position = "fixed";
			lime__$internal_backend_html5_HTML5Window.textArea.style.top = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.width = "0px";
			window.document.body.appendChild(lime__$internal_backend_html5_HTML5Window.textArea);
		}
		lime__$internal_backend_html5_HTML5Window.textArea.value = value;
		lime__$internal_backend_html5_HTML5Window.textArea.focus();
		lime__$internal_backend_html5_HTML5Window.textArea.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
	}
	,setCursor: function(value) {
		if(this.cursor != value) {
			if(value == null) {
				this.parent.element.style.cursor = "none";
			} else {
				var tmp;
				switch(value._hx_index) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				this.parent.element.style.cursor = tmp;
			}
			this.cursor = value;
		}
		return this.cursor;
	}
	,setDisplayMode: function(value) {
		return value;
	}
	,setFrameRate: function(value) {
		if(this.parent.application != null) {
			if(value >= 60) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = -1;
				}
			} else if(value > 0) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = 1000 / value;
				}
			} else if(this.parent == this.parent.application.__window) {
				this.parent.application.__backend.framePeriod = 1000;
			}
		}
		return value;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.parent.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.requestFullscreen();
				} else if(this.parent.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.mozRequestFullScreen();
				} else if(this.parent.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.webkitRequestFullscreen();
				} else if(this.parent.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return value;
	}
	,setIcon: function(image) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
		var link = window.document.querySelector("link[rel*='icon']");
		if(link == null) {
			link = window.document.createElement("link");
		}
		link.type = "image/x-icon";
		link.rel = "shortcut icon";
		link.href = image.buffer.get_src().toDataURL("image/x-icon");
		window.document.getElementsByTagName("head")[0].appendChild(link);
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setMouseLock: function(value) {
	}
	,setResizable: function(value) {
		return value;
	}
	,setTextInputEnabled: function(value) {
		if(value) {
			if(lime__$internal_backend_html5_HTML5Window.textInput == null) {
				lime__$internal_backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$internal_backend_html5_HTML5Window.textInput.type = "text";
				lime__$internal_backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$internal_backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$internal_backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
				lime__$internal_backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$internal_backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$internal_backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$internal_backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$internal_backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
			}
			if(lime__$internal_backend_html5_HTML5Window.textInput.parentNode == null) {
				this.parent.element.appendChild(lime__$internal_backend_html5_HTML5Window.textInput);
			}
			if(!this.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.focus();
			lime__$internal_backend_html5_HTML5Window.textInput.select();
		} else if(lime__$internal_backend_html5_HTML5Window.textInput != null) {
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.blur();
		}
		return this.textInputEnabled = value;
	}
	,setTitle: function(value) {
		if(value != null) {
			window.document.title = value;
		}
		return value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,warpMouse: function(x,y) {
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_backend_native_NativeCFFI = function() { };
$hxClasses["lime._internal.backend.native.NativeCFFI"] = lime__$internal_backend_native_NativeCFFI;
lime__$internal_backend_native_NativeCFFI.__name__ = "lime._internal.backend.native.NativeCFFI";
var lime__$internal_format_BMP = function() { };
$hxClasses["lime._internal.format.BMP"] = lime__$internal_format_BMP;
lime__$internal_format_BMP.__name__ = "lime._internal.format.BMP";
lime__$internal_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime__$internal_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			pixelValuesLength = (image.width * 3 + image.width * 3 % 4) * image.height;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.b[position++] = 66;
		data.b[position++] = 77;
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime__$internal_format_BMPType.ICO ? image.height * 2 : image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime__$internal_format_BMPType.RGB ? 24 : 32);
	position += 2;
	data.setInt32(position,type == lime__$internal_format_BMPType.BITFIELD ? 3 : 0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime__$internal_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g4 = 0;
				var _g5 = image.width * 3 % 4;
				while(_g4 < _g5) {
					var i = _g4++;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime__$internal_format_BMPType = $hxEnums["lime._internal.format.BMPType"] = { __ename__ : "lime._internal.format.BMPType", __constructs__ : ["RGB","BITFIELD","ICO"]
	,RGB: {_hx_index:0,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,BITFIELD: {_hx_index:1,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,ICO: {_hx_index:2,__enum__:"lime._internal.format.BMPType",toString:$estr}
};
var lime__$internal_format_Base64 = function() { };
$hxClasses["lime._internal.format.Base64"] = lime__$internal_format_Base64;
lime__$internal_format_Base64.__name__ = "lime._internal.format.Base64";
lime__$internal_format_Base64.decode = function(source) {
	return haxe_crypto_Base64.decode(source);
};
lime__$internal_format_Base64.encode = function(source) {
	var result = [];
	var dictionary = lime__$internal_format_Base64.DICTIONARY;
	var extendedDictionary = lime__$internal_format_Base64.EXTENDED_DICTIONARY;
	var numBytes = source.length;
	var numInputTriplets = Math.floor(numBytes / 3);
	var numChunksToWrite = numInputTriplets * 2;
	result.length = Math.ceil(numBytes / 3) * 2;
	var numBytesRead = 0;
	var numChunksWritten = 0;
	var inputTriplet;
	while(numChunksWritten < numChunksToWrite) {
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8 | source.b[numBytesRead + 2];
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = extendedDictionary[inputTriplet & 4095];
		numBytesRead += 3;
		numChunksWritten += 2;
	}
	switch(numBytes - numInputTriplets * 3) {
	case 1:
		inputTriplet = source.b[numBytesRead] << 16;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = "==";
		break;
	case 2:
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = dictionary[inputTriplet >> 6 & 63] + "=";
		break;
	default:
	}
	return result.join("");
};
var lime__$internal_format_Deflate = function() { };
$hxClasses["lime._internal.format.Deflate"] = lime__$internal_format_Deflate;
lime__$internal_format_Deflate.__name__ = "lime._internal.format.Deflate";
lime__$internal_format_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_GZip = function() { };
$hxClasses["lime._internal.format.GZip"] = lime__$internal_format_GZip;
lime__$internal_format_GZip.__name__ = "lime._internal.format.GZip";
lime__$internal_format_GZip.compress = function(bytes) {
	var data = pako.gzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_GZip.decompress = function(bytes) {
	var data = pako.ungzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_JPEG = function() { };
$hxClasses["lime._internal.format.JPEG"] = lime__$internal_format_JPEG;
lime__$internal_format_JPEG.__name__ = "lime._internal.format.JPEG";
lime__$internal_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_LZMA = function() { };
$hxClasses["lime._internal.format.LZMA"] = lime__$internal_format_LZMA;
lime__$internal_format_LZMA.__name__ = "lime._internal.format.LZMA";
lime__$internal_format_LZMA.compress = function(bytes) {
	return null;
};
lime__$internal_format_LZMA.decompress = function(bytes) {
	return null;
};
var lime__$internal_format_PNG = function() { };
$hxClasses["lime._internal.format.PNG"] = lime__$internal_format_PNG;
lime__$internal_format_PNG.__name__ = "lime._internal.format.PNG";
lime__$internal_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_Zlib = function() { };
$hxClasses["lime._internal.format.Zlib"] = lime__$internal_format_Zlib;
lime__$internal_format_Zlib.__name__ = "lime._internal.format.Zlib";
lime__$internal_format_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = "lime._internal.graphics.ImageCanvasUtil";
lime__$internal_graphics_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime__$internal_graphics_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = sourceImage.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(sourceRect.x + alphaPoint.x,sourceRect.y + alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer1,0);
			} else {
				this1 = new Uint8Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		a = image.get_transparent() ? color >> 24 & 255 : 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		a = image.get_transparent() ? color & 255 : 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel32(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixels(image,rect,format);
};
lime__$internal_graphics_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime__$internal_graphics_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixels(image,rect,bytePointer,format,endian);
};
lime__$internal_graphics_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS && (image.buffer.__srcCanvas != null || image.buffer.data != null)) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,clear);
	} else if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = "lime._internal.graphics.ImageDataUtil";
lime__$internal_graphics_ImageDataUtil.displaceMap = function(target,source,map,mapPoint,componentX,componentY,smooth) {
	var targetData = target.buffer.data;
	var sourceData = source.buffer.data;
	var mapData = map.buffer.data;
	var targetFormat = target.buffer.format;
	var sourceFormat = source.buffer.format;
	var mapFormat = map.buffer.format;
	var targetPremultiplied = target.get_premultiplied();
	var sourcePremultiplied = source.get_premultiplied();
	var mapPremultiplied = map.get_premultiplied();
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(source);
	var mapView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(map);
	var row;
	var sourceOffset;
	var sourcePixel;
	var mapPixel;
	var targetPixel;
	var mapPixelX;
	var mapPixelY;
	var mapPixelA;
	var s1;
	var s2;
	var s3;
	var s4;
	var mPointXFloor;
	var mPointYFloor;
	var disOffsetXFloor;
	var disOffsetYFloor;
	var disX;
	var disY;
	var _g = 0;
	var _g1 = sourceView.height;
	while(_g < _g1) {
		var y = _g++;
		row = sourceView.byteOffset + sourceView.stride * y;
		var _g2 = 0;
		var _g3 = sourceView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			sourceOffset = row + x * 4;
			mPointXFloor = mapPoint.x | 0;
			mPointYFloor = mapPoint.y | 0;
			if(smooth) {
				var offset = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor) * 4;
				var format = mapFormat;
				var premultiplied = mapPremultiplied;
				if(premultiplied == null) {
					premultiplied = false;
				}
				if(format == null) {
					format = 0;
				}
				switch(format) {
				case 0:
					s1 = (mapData[offset] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset + 2] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				case 1:
					s1 = (mapData[offset + 1] & 255) << 24 | (mapData[offset + 2] & 255) << 16 | (mapData[offset + 3] & 255) << 8 | mapData[offset] & 255;
					break;
				case 2:
					s1 = (mapData[offset + 2] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				}
				if(premultiplied) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math_RGBA.__clamp[Math.round((s1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset1 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor + 1) * 4;
				var format1 = mapFormat;
				var premultiplied1 = mapPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				switch(format1) {
				case 0:
					s2 = (mapData[offset1] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1 + 2] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				case 1:
					s2 = (mapData[offset1 + 1] & 255) << 24 | (mapData[offset1 + 2] & 255) << 16 | (mapData[offset1 + 3] & 255) << 8 | mapData[offset1] & 255;
					break;
				case 2:
					s2 = (mapData[offset1 + 2] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				}
				if(premultiplied1) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math_RGBA.__clamp[Math.round((s2 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset2 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor + 1) * 4;
				var format2 = mapFormat;
				var premultiplied2 = mapPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				switch(format2) {
				case 0:
					s3 = (mapData[offset2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2 + 2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				case 1:
					s3 = (mapData[offset2 + 1] & 255) << 24 | (mapData[offset2 + 2] & 255) << 16 | (mapData[offset2 + 3] & 255) << 8 | mapData[offset2] & 255;
					break;
				case 2:
					s3 = (mapData[offset2 + 2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				}
				if(premultiplied2) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math_RGBA.__clamp[Math.round((s3 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset3 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format3 = mapFormat;
				var premultiplied3 = mapPremultiplied;
				if(premultiplied3 == null) {
					premultiplied3 = false;
				}
				if(format3 == null) {
					format3 = 0;
				}
				switch(format3) {
				case 0:
					s4 = (mapData[offset3] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3 + 2] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				case 1:
					s4 = (mapData[offset3 + 1] & 255) << 24 | (mapData[offset3 + 2] & 255) << 16 | (mapData[offset3 + 3] & 255) << 8 | mapData[offset3] & 255;
					break;
				case 2:
					s4 = (mapData[offset3 + 2] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				}
				if(premultiplied3) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math_RGBA.__clamp[Math.round((s4 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				mapPixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,mapPoint.x - mPointXFloor,mapPoint.y - mPointYFloor);
			} else {
				var offset4 = mapView.byteOffset + mapView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format4 = mapFormat;
				var premultiplied4 = mapPremultiplied;
				if(premultiplied4 == null) {
					premultiplied4 = false;
				}
				if(format4 == null) {
					format4 = 0;
				}
				switch(format4) {
				case 0:
					mapPixel = (mapData[offset4] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4 + 2] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				case 1:
					mapPixel = (mapData[offset4 + 1] & 255) << 24 | (mapData[offset4 + 2] & 255) << 16 | (mapData[offset4 + 3] & 255) << 8 | mapData[offset4] & 255;
					break;
				case 2:
					mapPixel = (mapData[offset4 + 2] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				}
				if(premultiplied4) {
					if((mapPixel & 255) != 0 && (mapPixel & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (mapPixel & 255);
						mapPixel = (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | mapPixel & 255 & 255;
					}
				}
			}
			mapPixelA = (mapPixel & 255) / 255.0;
			mapPixelX = ((mapPixel >>> 24 & 255) - 128) / 255.0 * mapPixelA;
			mapPixelY = ((mapPixel >>> 16 & 255) - 128) / 255.0 * mapPixelA;
			disX = mapPixelX * componentX.x + mapPixelY * componentY.x;
			disY = mapPixelX * componentX.y + mapPixelY * componentY.y;
			disOffsetXFloor = Math.floor(disX * sourceView.width);
			disOffsetYFloor = Math.floor(disY * sourceView.height);
			if(smooth) {
				var offset5 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor) * 4;
				var format5 = sourceFormat;
				var premultiplied5 = sourcePremultiplied;
				if(premultiplied5 == null) {
					premultiplied5 = false;
				}
				if(format5 == null) {
					format5 = 0;
				}
				switch(format5) {
				case 0:
					s1 = (sourceData[offset5] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5 + 2] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				case 1:
					s1 = (sourceData[offset5 + 1] & 255) << 24 | (sourceData[offset5 + 2] & 255) << 16 | (sourceData[offset5 + 3] & 255) << 8 | sourceData[offset5] & 255;
					break;
				case 2:
					s1 = (sourceData[offset5 + 2] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				}
				if(premultiplied5) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math_RGBA.__clamp[Math.round((s1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset6 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor + 1) * 4;
				var format6 = sourceFormat;
				var premultiplied6 = sourcePremultiplied;
				if(premultiplied6 == null) {
					premultiplied6 = false;
				}
				if(format6 == null) {
					format6 = 0;
				}
				switch(format6) {
				case 0:
					s2 = (sourceData[offset6] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6 + 2] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				case 1:
					s2 = (sourceData[offset6 + 1] & 255) << 24 | (sourceData[offset6 + 2] & 255) << 16 | (sourceData[offset6 + 3] & 255) << 8 | sourceData[offset6] & 255;
					break;
				case 2:
					s2 = (sourceData[offset6 + 2] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				}
				if(premultiplied6) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math_RGBA.__clamp[Math.round((s2 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset7 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor + 1) * 4;
				var format7 = sourceFormat;
				var premultiplied7 = sourcePremultiplied;
				if(premultiplied7 == null) {
					premultiplied7 = false;
				}
				if(format7 == null) {
					format7 = 0;
				}
				switch(format7) {
				case 0:
					s3 = (sourceData[offset7] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7 + 2] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				case 1:
					s3 = (sourceData[offset7 + 1] & 255) << 24 | (sourceData[offset7 + 2] & 255) << 16 | (sourceData[offset7 + 3] & 255) << 8 | sourceData[offset7] & 255;
					break;
				case 2:
					s3 = (sourceData[offset7 + 2] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				}
				if(premultiplied7) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math_RGBA.__clamp[Math.round((s3 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset8 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format8 = sourceFormat;
				var premultiplied8 = sourcePremultiplied;
				if(premultiplied8 == null) {
					premultiplied8 = false;
				}
				if(format8 == null) {
					format8 = 0;
				}
				switch(format8) {
				case 0:
					s4 = (sourceData[offset8] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8 + 2] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				case 1:
					s4 = (sourceData[offset8 + 1] & 255) << 24 | (sourceData[offset8 + 2] & 255) << 16 | (sourceData[offset8 + 3] & 255) << 8 | sourceData[offset8] & 255;
					break;
				case 2:
					s4 = (sourceData[offset8 + 2] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				}
				if(premultiplied8) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math_RGBA.__clamp[Math.round((s4 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				sourcePixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,disX * sourceView.width - disOffsetXFloor,disY * sourceView.height - disOffsetYFloor);
			} else {
				var offset9 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format9 = sourceFormat;
				var premultiplied9 = sourcePremultiplied;
				if(premultiplied9 == null) {
					premultiplied9 = false;
				}
				if(format9 == null) {
					format9 = 0;
				}
				switch(format9) {
				case 0:
					sourcePixel = (sourceData[offset9] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9 + 2] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[offset9 + 1] & 255) << 24 | (sourceData[offset9 + 2] & 255) << 16 | (sourceData[offset9 + 3] & 255) << 8 | sourceData[offset9] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[offset9 + 2] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				}
				if(premultiplied9) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
			}
			var format10 = targetFormat;
			var premultiplied10 = targetPremultiplied;
			if(premultiplied10 == null) {
				premultiplied10 = false;
			}
			if(format10 == null) {
				format10 = 0;
			}
			if(premultiplied10) {
				if((sourcePixel & 255) == 0) {
					if(sourcePixel != 0) {
						sourcePixel = 0;
					}
				} else if((sourcePixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
					sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(format10) {
			case 0:
				targetData[sourceOffset] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			case 1:
				targetData[sourceOffset] = sourcePixel & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 3] = sourcePixel >>> 8 & 255;
				break;
			case 2:
				targetData[sourceOffset] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			}
		}
	}
	target.dirty = true;
	target.version++;
};
lime__$internal_graphics_ImageDataUtil.bilinear = function(s1,s2,s3,s4,su,sv) {
	return lime__$internal_graphics_ImageDataUtil.lerpRGBA(lime__$internal_graphics_ImageDataUtil.lerpRGBA(s4,s2,su),lime__$internal_graphics_ImageDataUtil.lerpRGBA(s1,s3,su),sv);
};
lime__$internal_graphics_ImageDataUtil.lerpRGBA = function(v0,v1,x) {
	var this1 = 0;
	var result = this1;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 24 & 255,v1 >>> 24 & 255,x));
	result = (value & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 16 & 255,v1 >>> 16 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 8 & 255,v1 >>> 8 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 & 255,v1 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | value & 255;
	return result;
};
lime__$internal_graphics_ImageDataUtil.lerp4f = function(v0,v1,x) {
	return new lime_math_Vector4(lime__$internal_graphics_ImageDataUtil.lerp(v0.x,v1.x,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.y,v1.y,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.z,v1.z,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.w,v1.w,x));
};
lime__$internal_graphics_ImageDataUtil.lerp = function(v0,v1,x) {
	return (1.0 - x) * v0 + x * v1;
};
lime__$internal_graphics_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math_ColorMatrix.getAlphaTable(colorMatrix);
	var redTable = lime_math_ColorMatrix.getRedTable(colorMatrix);
	var greenTable = lime_math_ColorMatrix.getGreenTable(colorMatrix);
	var blueTable = lime_math_ColorMatrix.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			offset = row + x * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			var format2 = format;
			var premultiplied2 = premultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel._hx_index) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel._hx_index) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent() || !mergeAlpha && !image.get_transparent() && sourceImage.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						if(premultiplied1) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format1) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(sourceView.x + (alphaPoint == null ? 0 : alphaPoint.x),sourceView.y + (alphaPoint == null ? 0 : alphaPoint.y),sourceView.width,sourceView.height));
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						var format2 = alphaFormat;
						var premultiplied2 = false;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						switch(format2) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied2) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
							var format3 = destFormat;
							var premultiplied3 = destPremultiplied;
							if(premultiplied3 == null) {
								premultiplied3 = false;
							}
							if(format3 == null) {
								format3 = 0;
							}
							if(premultiplied3) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(format3) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = alphaFormat;
						var premultiplied1 = false;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						var value = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value & 255;
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var offset = row + x * 4;
			var format1 = format;
			var premultiplied = false;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) {
						fillColor = 0;
					}
				} else if((fillColor & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
					fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var format1 = format;
	var premultiplied1 = premultiplied;
	if(premultiplied1 == null) {
		premultiplied1 = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied1) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math_RGBA.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math_RGBA.__clamp[Math.round((readColor >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((readColor >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((readColor >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				var format2 = format;
				var premultiplied2 = false;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied2) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) {
							fillColor = 0;
						}
					} else if((fillColor & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
						fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength,color) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var imagePremultiplied = image.get_premultiplied();
	if(imagePremultiplied) {
		image.set_premultiplied(false);
	}
	lime__$internal_graphics_StackBlur.blur(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality);
	image.dirty = true;
	image.version++;
	if(imagePremultiplied) {
		image.set_premultiplied(true);
	}
	return image;
};
lime__$internal_graphics_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_mask = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba;
		var bgra = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_mask = rgba;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		hit = false;
		var _g2 = 0;
		var _g3 = image.height;
		while(_g2 < _g3) {
			var y = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		ix = image.width - 1 - x;
		hit = false;
		var _g2 = 0;
		var _g3 = image.height;
		while(_g2 < _g3) {
			var y = _g2++;
			pixel = image.getPixel32(ix,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g = 0;
	var _g1 = image.height;
	while(_g < _g1) {
		var y = _g++;
		hit = false;
		var _g2 = 0;
		var _g3 = image.width;
		while(_g2 < _g3) {
			var x = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(y < top) {
					top = y;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g = 0;
	var _g1 = image.height;
	while(_g < _g1) {
		var y = _g++;
		iy = image.height - 1 - y;
		hit = false;
		var _g2 = 0;
		var _g3 = image.width;
		while(_g2 < _g3) {
			var x = _g2++;
			pixel = image.getPixel32(x,iy,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime__$internal_graphics_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this1 = 0;
		var bgra = this1;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this1 = 0;
		var bgra = this1;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var this1 = 0;
				var argb1 = this1;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var this2 = 0;
				var bgra1 = this2;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime__$internal_graphics_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		sourcePosition = sourceView.byteOffset + sourceView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = sourceFormat;
			var premultiplied = sourcePremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value1 = ((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value2 = ((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = false;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = true;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var array = null;
	var vector = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newBuffer = new lime_graphics_ImageBuffer(this1,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	var _g1 = newHeight;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = newWidth;
		while(_g2 < _g3) {
			var x = _g2++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			sourceIndexX = sourceX < imageWidth - 1 ? sourceIndex + 4 : sourceIndex;
			sourceIndexY = sourceY < imageHeight - 1 ? sourceIndex + imageWidth * 4 : sourceIndex;
			sourceIndexXY = sourceIndexX != sourceIndex ? sourceIndexY + 4 : sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (UInt.toFloat(data[sourceIndex]) * uOpposite + UInt.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY]) * uOpposite + UInt.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (UInt.toFloat(data[sourceIndex + 1]) * uOpposite + UInt.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY + 1]) * uOpposite + UInt.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (UInt.toFloat(data[sourceIndex + 2]) * uOpposite + UInt.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY + 2]) * uOpposite + UInt.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var array = null;
	var vector = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newData = this1;
	var sourceIndex;
	var index;
	var _g = 0;
	var _g1 = buffer.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = buffer.width;
		while(_g2 < _g3) {
			var x = _g2++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba;
		break;
	default:
		pixel = color;
	}
	var this1 = 0;
	var source = this1;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (source & 255);
			source = (lime_math_RGBA.__clamp[Math.round((source >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((source >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((source >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | value & 255;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var bytes = bytePointer.bytes;
	var dataPosition = bytePointer.offset;
	var littleEndian = endian != lime_system_Endian.BIG_ENDIAN;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			if(littleEndian) {
				color = bytes.getInt32(dataPosition);
			} else {
				color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			}
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var this1 = 0;
				var rgba = this1;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var this2 = 0;
				var rgba1 = this2;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied1) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_mask = rgba;
		var argb = threshold;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_threshold = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba;
		var bgra = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_mask = rgba;
		var bgra = threshold;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_threshold = rgba;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var pixelMask;
	var test;
	var value;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1 = pixelMask >>> 24 & 255;
			var tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				value = UInt.gt(tmp1,tmp2) ? 1 : -1;
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					value = UInt.gt(tmp1,tmp2) ? 1 : -1;
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						value = UInt.gt(tmp1,tmp2) ? 1 : -1;
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						value = tmp1 != tmp2 ? UInt.gt(tmp1,tmp2) ? 1 : -1 : 0;
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				test = value == 0 || value == -1;
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				test = value == 0 || value == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				var format1 = destFormat;
				var premultiplied1 = destPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				if(premultiplied1) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(format1) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				var format2 = destFormat;
				var premultiplied2 = destPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied2) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = true;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = false;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.__boxBlur = function(imgA,imgB,w,h,bx,by) {
	imgB.set(imgA);
	var bx1 = bx | 0;
	var by1 = by | 0;
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,0);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,1);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,2);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,3);
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 1;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 2;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 3;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurH = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = h;
	while(_g < _g1) {
		var i = _g++;
		ti = i * w;
		li = ti;
		ri = ti + r;
		fv = imgA[ti * 4 + off];
		lv = imgA[(ti + w - 1) * 4 + off];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g3 = r;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[(ti + j) * 4 + off];
		}
		var _g4 = 0;
		var _g5 = r + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri * 4 + off] - fv);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++ri;
			++ti;
		}
		var _g6 = r + 1;
		var _g7 = w - r;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++ri;
			++li;
			++ti;
		}
		var _g8 = w - r;
		var _g9 = w;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++li;
			++ti;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurT = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + off;
		li = ti;
		ri = ti + r * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g3 = r;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = r + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = r + 1;
		var _g7 = h - r;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - r;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset = function(sourceRect,destPoint,destX,destY) {
	var sourceX = destX - (destPoint.x | 0);
	var sourceY = destY - (destPoint.y | 0);
	var offset = 0;
	if(sourceX < 0 || sourceY < 0 || sourceX >= sourceRect.width || sourceY >= sourceRect.height) {
		offset = -1;
	} else {
		offset = 4 * (sourceY * (sourceRect.width | 0) + sourceX);
	}
	return offset;
};
lime__$internal_graphics_ImageDataUtil.__getBoxesForGaussianBlur = function(sigma,n) {
	var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
	var wl = Math.floor(wIdeal);
	if(wl % 2 == 0) {
		--wl;
	}
	var wu = wl + 2;
	var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
	var m = Math.round(mIdeal);
	var sizes = [];
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		sizes.push(i < m ? wl : wu);
	}
	return sizes;
};
lime__$internal_graphics_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1 = n1 >>> 24 & 255;
	var tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(UInt.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(UInt.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(UInt.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(UInt.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__translatePixel = function(imgB,sourceRect,destRect,destPoint,destX,destY,strength) {
	var d = 4 * (destY * (destRect.width | 0) + destX);
	var s = lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset(sourceRect,destPoint,destX,destY);
	if(s < 0) {
		imgB[d] = imgB[d + 1] = imgB[d + 2] = imgB[d + 3] = 0;
	} else {
		imgB[d] = imgB[s];
		imgB[d + 1] = imgB[s + 1];
		imgB[d + 2] = imgB[s + 2];
		var a = UInt.toFloat(imgB[s + 3]) * strength | 0;
		imgB[d + 3] = a < 0 ? 0 : a > 255 ? 255 : a;
	}
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = "lime._internal.graphics._ImageDataUtil.ImageDataView";
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	clip: function(x,y,width,height) {
		if(this.tempRect == null) {
			this.tempRect = new lime_math_Rectangle();
		}
		this.tempRect.setTo(x,y,width,height);
		this.rect.intersection(this.tempRect,this.rect);
		this.__update();
	}
	,hasRow: function(y) {
		if(y >= 0) {
			return y < this.height;
		} else {
			return false;
		}
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime__$internal_graphics_StackBlur = function() { };
$hxClasses["lime._internal.graphics.StackBlur"] = lime__$internal_graphics_StackBlur;
lime__$internal_graphics_StackBlur.__name__ = "lime._internal.graphics.StackBlur";
lime__$internal_graphics_StackBlur.blur = function(dest,source,sourceRect,destPoint,blurX,blurY,quality) {
	dest.copyPixels(source,sourceRect,destPoint);
	lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA(dest,sourceRect.width | 0,sourceRect.height | 0,blurX,blurY,quality);
};
lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA = function(image,width,height,blurX,blurY,quality) {
	var radiusX = Math.round(blurX) >> 1;
	var radiusY = Math.round(blurY) >> 1;
	if(lime__$internal_graphics_StackBlur.MUL_TABLE == null) {
		return;
	}
	if(radiusX >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusX = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusY >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusY = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusX < 0 || radiusY < 0) {
		return;
	}
	var iterations = quality;
	if(iterations < 1) {
		iterations = 1;
	}
	if(iterations > 3) {
		iterations = 3;
	}
	var px = image.get_data();
	var x;
	var y;
	var i;
	var p;
	var yp;
	var yi;
	var yw;
	var r;
	var g;
	var b;
	var a;
	var pr;
	var pg;
	var pb;
	var pa;
	var f;
	var divx = radiusX + radiusX + 1;
	var divy = radiusY + radiusY + 1;
	var w = width;
	var h = height;
	var w1 = w - 1;
	var h1 = h - 1;
	var rxp1 = radiusX + 1;
	var ryp1 = radiusY + 1;
	var ssx = new lime__$internal_graphics_BlurStack();
	var sx = ssx;
	var _g = 1;
	var _g1 = divx;
	while(_g < _g1) {
		var i1 = _g++;
		sx = sx.n = new lime__$internal_graphics_BlurStack();
	}
	sx.n = ssx;
	var ssy = new lime__$internal_graphics_BlurStack();
	var sy = ssy;
	var _g = 1;
	var _g1 = divy;
	while(_g < _g1) {
		var i1 = _g++;
		sy = sy.n = new lime__$internal_graphics_BlurStack();
	}
	sy.n = ssy;
	var si = null;
	var mtx = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusX];
	var stx = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusX];
	var mty = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusY];
	var sty = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusY];
	while(iterations > 0) {
		--iterations;
		yi = 0;
		yw = yi;
		var ms = mtx;
		var ss = stx;
		y = h;
		while(true) {
			pr = px[yi];
			r = rxp1 * pr;
			pg = px[yi + 1];
			g = rxp1 * pg;
			pb = px[yi + 2];
			b = rxp1 * pb;
			pa = px[yi + 3];
			a = rxp1 * pa;
			sx = ssx;
			i = rxp1;
			while(true) {
				sx.r = pr;
				sx.g = pg;
				sx.b = pb;
				sx.a = pa;
				sx = sx.n;
				if(!(--i > -1)) {
					break;
				}
			}
			var _g = 1;
			var _g1 = rxp1;
			while(_g < _g1) {
				var i1 = _g++;
				p = yi + ((w1 < i1 ? w1 : i1) << 2);
				r += sx.r = px[p];
				g += sx.g = px[p + 1];
				b += sx.b = px[p + 2];
				a += sx.a = px[p + 3];
				sx = sx.n;
			}
			si = ssx;
			var _g2 = 0;
			var _g3 = w;
			while(_g2 < _g3) {
				var x = _g2++;
				px[yi++] = r * ms >>> ss;
				px[yi++] = g * ms >>> ss;
				px[yi++] = b * ms >>> ss;
				px[yi++] = a * ms >>> ss;
				p = x + radiusX + 1;
				p = yw + (p < w1 ? p : w1) << 2;
				r -= si.r - (si.r = px[p]);
				g -= si.g - (si.g = px[p + 1]);
				b -= si.b - (si.b = px[p + 2]);
				a -= si.a - (si.a = px[p + 3]);
				si = si.n;
			}
			yw += w;
			if(!(--y > 0)) {
				break;
			}
		}
		ms = mty;
		ss = sty;
		var _g4 = 0;
		var _g5 = w;
		while(_g4 < _g5) {
			var x1 = _g4++;
			yi = x1 << 2;
			pr = px[yi];
			r = ryp1 * pr;
			pg = px[yi + 1];
			g = ryp1 * pg;
			pb = px[yi + 2];
			b = ryp1 * pb;
			pa = px[yi + 3];
			a = ryp1 * pa;
			sy = ssy;
			var _g6 = 0;
			var _g7 = ryp1;
			while(_g6 < _g7) {
				var i2 = _g6++;
				sy.r = pr;
				sy.g = pg;
				sy.b = pb;
				sy.a = pa;
				sy = sy.n;
			}
			yp = w;
			var _g8 = 1;
			var _g9 = radiusY + 1;
			while(_g8 < _g9) {
				var i3 = _g8++;
				yi = yp + x1 << 2;
				r += sy.r = px[yi];
				g += sy.g = px[yi + 1];
				b += sy.b = px[yi + 2];
				a += sy.a = px[yi + 3];
				sy = sy.n;
				if(i3 < h1) {
					yp += w;
				}
			}
			yi = x1;
			si = ssy;
			if(iterations > 0) {
				var _g10 = 0;
				var _g11 = h;
				while(_g10 < _g11) {
					var y1 = _g10++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						px[p] = r * ms >>> ss;
						px[p + 1] = g * ms >>> ss;
						px[p + 2] = b * ms >>> ss;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y1 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			} else {
				var _g12 = 0;
				var _g13 = h;
				while(_g12 < _g13) {
					var y2 = _g12++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						f = 255 / pa;
						pr = (r * ms >>> ss) * f | 0;
						pg = (g * ms >>> ss) * f | 0;
						pb = (b * ms >>> ss) * f | 0;
						px[p] = pr > 255 ? 255 : pr;
						px[p + 1] = pg > 255 ? 255 : pg;
						px[p + 2] = pb > 255 ? 255 : pb;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y2 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			}
		}
	}
};
var lime__$internal_graphics_BlurStack = function() {
	this.r = 0;
	this.g = 0;
	this.b = 0;
	this.a = 0;
	this.n = null;
};
$hxClasses["lime._internal.graphics.BlurStack"] = lime__$internal_graphics_BlurStack;
lime__$internal_graphics_BlurStack.__name__ = "lime._internal.graphics.BlurStack";
lime__$internal_graphics_BlurStack.prototype = {
	__class__: lime__$internal_graphics_BlurStack
};
var lime__$internal_macros_AssetsMacro = function() { };
$hxClasses["lime._internal.macros.AssetsMacro"] = lime__$internal_macros_AssetsMacro;
lime__$internal_macros_AssetsMacro.__name__ = "lime._internal.macros.AssetsMacro";
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = "lime.app.Event";
lime_app_Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = "lime.app.Future";
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) {
		onError.add(function(error) {
			promise.error(error);
		},true);
	}
	if(onProgress != null) {
		onProgress.add(function(progress,total) {
			promise.progress(progress,total);
		},true);
	}
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "lime/app/Future.hx", lineNumber : 209, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future = next(val);
				future.onError($bind(promise,promise.error));
				future.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = "lime.app._Future.FutureWork";
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = "lime.app.Promise";
lime_app_Promise.prototype = {
	complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isError:"get_isError",get_isComplete:"get_isComplete"}
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = "lime.app._Event_Dynamic_Void";
lime_app__$Event_$Dynamic_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = "lime.app._Event_Float_Float_Int_Void";
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseButton_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Float_Void";
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Void";
lime_app__$Event_$Int_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = "lime.app._Event_Int_Int_Void";
lime_app__$Event_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = "lime.app._Event_Int_Void";
lime_app__$Event_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = "lime.app._Event_Int_lime_ui_JoystickHatPosition_Void";
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = "lime.app._Event_String_Int_Int_Void";
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = "lime.app._Event_String_Void";
lime_app__$Event_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = "lime.app._Event_Void_Void";
lime_app__$Event_$Void_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = "lime.app._Event_lime_graphics_RenderContext_Void";
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = "lime.app._Event_lime_ui_GamepadAxis_Float_Void";
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = "lime.app._Event_lime_ui_GamepadButton_Void";
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = "lime.app._Event_lime_ui_Gamepad_Void";
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = "lime.app._Event_lime_ui_Joystick_Void";
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = "lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void";
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = "lime.app._Event_lime_ui_Touch_Void";
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = "lime.app._Event_lime_ui_Window_Void";
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = "lime.app._Event_ofEvents_T_Void";
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_graphics_CairoRenderContext = {};
lime_graphics_CairoRenderContext.fromRenderContext = function(context) {
	return context.cairo;
};
var lime_graphics_Canvas2DRenderContext = {};
lime_graphics_Canvas2DRenderContext.fromRenderContext = function(context) {
	return context.canvas2D;
};
var lime_graphics_DOMRenderContext = {};
lime_graphics_DOMRenderContext.fromRenderContext = function(context) {
	return context.dom;
};
var lime_graphics_FlashRenderContext = {};
lime_graphics_FlashRenderContext.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type._hx_index) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var array = null;
				var vector = null;
				var view = null;
				var buffer1 = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer1 != null) {
					if(len == null) {
						this1 = new Uint8Array(buffer1,0);
					} else {
						this1 = new Uint8Array(buffer1,0,len);
					}
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = "lime.graphics.Image";
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromBytes(bytes)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromFile(path)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes(bytes,type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math_ColorMatrix.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel._hx_index) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel._hx_index) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		if(alphaImage == sourceImage && (alphaPoint == null || alphaPoint.x == 0 && alphaPoint.y == 0)) {
			alphaImage = null;
			alphaPoint = null;
		}
		switch(this.type._hx_index) {
		case 0:
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime__$internal_graphics_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			return lime__$internal_format_PNG.encode(this);
		} else {
			switch(format._hx_index) {
			case 0:
				return lime__$internal_format_BMP.encode(this);
			case 1:
				return lime__$internal_format_JPEG.encode(this,quality);
			case 2:
				return lime__$internal_format_PNG.encode(this);
			}
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this1 = 0;
					var bgra = this1;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this1 = 0;
					var rgba = this1;
					rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba1 = rgba;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this1 = 0;
					var bgra = this1;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this1 = 0;
					var rgba = this1;
					rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba1 = rgba;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			lime__$internal_graphics_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime__$internal_graphics_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytePointer,format,endian) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		if(endian == null) {
			endian = lime_system_Endian.BIG_ENDIAN;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			return lime__$internal_graphics_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb = this1;
					argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb = this1;
					argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					_color = argb;
				}
			}
			var _mask;
			if(format == null) {
				var rgba = mask;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_mask = argb;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra = mask;
					var this1 = 0;
					var argb = this1;
					argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_mask = argb;
					break;
				default:
					var rgba = mask;
					var this1 = 0;
					var argb = this1;
					argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					_mask = argb;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return false;
		}
		this.__fromBase64(lime__$internal_format_Base64.encode(bytes),type,onload);
		return true;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
		return true;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			if(newWidth == this.buffer.width && newHeight == this.buffer.height) {
				return value;
			}
			switch(this.type._hx_index) {
			case 0:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 1:
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type._hx_index) {
			case 0:case 1:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null && (this.buffer.data != null || this.type == lime_graphics_ImageType.DATA)) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = "lime.graphics.ImageBuffer";
lime_graphics_ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var elements = null;
			var array = null;
			var vector = null;
			var view = this.data;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			var copy = this1;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(((value) instanceof Image)) {
			this.__srcImage = value;
		} else if(((value) instanceof HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * (this.bitsPerPixel / 8 | 0);
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxEnums["lime.graphics.ImageChannel"] = { __ename__ : "lime.graphics.ImageChannel", __constructs__ : ["RED","GREEN","BLUE","ALPHA"]
	,RED: {_hx_index:0,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,GREEN: {_hx_index:1,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,BLUE: {_hx_index:2,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,ALPHA: {_hx_index:3,__enum__:"lime.graphics.ImageChannel",toString:$estr}
};
var lime_graphics_ImageFileFormat = $hxEnums["lime.graphics.ImageFileFormat"] = { __ename__ : "lime.graphics.ImageFileFormat", __constructs__ : ["BMP","JPEG","PNG"]
	,BMP: {_hx_index:0,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,JPEG: {_hx_index:1,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,PNG: {_hx_index:2,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
};
var lime_graphics_ImageType = $hxEnums["lime.graphics.ImageType"] = { __ename__ : "lime.graphics.ImageType", __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"]
	,CANVAS: {_hx_index:0,__enum__:"lime.graphics.ImageType",toString:$estr}
	,DATA: {_hx_index:1,__enum__:"lime.graphics.ImageType",toString:$estr}
	,FLASH: {_hx_index:2,__enum__:"lime.graphics.ImageType",toString:$estr}
	,CUSTOM: {_hx_index:3,__enum__:"lime.graphics.ImageType",toString:$estr}
};
var lime_graphics_OpenGLES2RenderContext = {};
lime_graphics_OpenGLES2RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromOpenGLES3RenderContext = function(gl) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromWebGLRenderContext = function(gl) {
	return null;
};
var lime_graphics_OpenGLES3RenderContext = {};
lime_graphics_OpenGLES3RenderContext.fromRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromOpenGLES2RenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromWebGLRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromWebGL2RenderContext = function(context) {
	return null;
};
var lime_graphics_OpenGLRenderContext = {};
lime_graphics_OpenGLRenderContext.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = "lime.graphics.RenderContext";
lime_graphics_RenderContext.prototype = {
	__class__: lime_graphics_RenderContext
};
var lime_graphics_WebGL2RenderContext = {};
lime_graphics_WebGL2RenderContext.bufferData = function(this1,target,srcData,usage,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_WebGL2RenderContext.bufferSubData = function(this1,target,dstByteOffset,srcData,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_WebGL2RenderContext.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_WebGL2RenderContext.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_WebGL2RenderContext.getBufferSubData = function(this1,target,srcByteOffset,dstData,srcOffset,length) {
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_WebGL2RenderContext.readPixels = function(this1,x,y,width,height,format,type,pixels,dstOffset) {
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_WebGL2RenderContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_WebGL2RenderContext.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_WebGL2RenderContext.uniform1fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform1iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform2fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform2iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform3fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform3iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform4fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform4iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix2fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix3fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix4fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_WebGL2RenderContext.fromRenderContext = function(context) {
	return context.webgl2;
};
lime_graphics_WebGL2RenderContext.toWebGLRenderContext = function(gl) {
	return gl;
};
var lime_graphics_WebGLRenderContext = {};
lime_graphics_WebGLRenderContext.bufferData = function(this1,target,srcData,usage) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,null);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_WebGLRenderContext.bufferSubData = function(this1,target,offset,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferSubData(target,offset,srcData,srcOffset,null);
	} else {
		this1.bufferSubData(target,offset,srcData);
	}
};
lime_graphics_WebGLRenderContext.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,null);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_WebGLRenderContext.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,null);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_WebGLRenderContext.readPixels = function(this1,x,y,width,height,format,type,pixels) {
	var dstOffset = null;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_WebGLRenderContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_WebGLRenderContext.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix2fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix3fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix4fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.fromWebGL2RenderContext = function(gl) {
	return gl;
};
lime_graphics_WebGLRenderContext.fromRenderContext = function(context) {
	return context.webgl;
};
lime_graphics_WebGLRenderContext.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_graphics_cairo_Cairo = function(surface) {
	var tmp = surface != null;
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = "lime.graphics.cairo.Cairo";
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"};
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,getOperator: function() {
		return 0;
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,moveTo: function(x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,rotate: function(amount) {
	}
	,save: function() {
	}
	,scale: function(x,y) {
	}
	,setFontSize: function(size) {
	}
	,setOperator: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,textPath: function(utf8) {
	}
	,transform: function(matrix) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo_CairoFTFontFace = {};
lime_graphics_cairo_CairoFTFontFace._new = function() {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo_CairoFTFontFace.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo_CairoFontFace = {};
lime_graphics_cairo_CairoFontFace._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo_CairoFontFace.status = function(this1) {
	return 0;
};
var lime_graphics_cairo_CairoFontOptions = {};
lime_graphics_cairo_CairoFontOptions.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"};
lime_graphics_cairo_CairoFontOptions._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo_CairoFontOptions.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = "lime.graphics.cairo.CairoGlyph";
lime_graphics_cairo_CairoGlyph.prototype = {
	__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo_CairoImageSurface = {};
lime_graphics_cairo_CairoImageSurface.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"};
lime_graphics_cairo_CairoImageSurface._new = function(format,width,height) {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo_CairoImageSurface.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.fromImage = function(image) {
	return null;
};
lime_graphics_cairo_CairoImageSurface.get_data = function(this1) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_graphics_cairo_CairoImageSurface.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo_CairoPattern = {};
lime_graphics_cairo_CairoPattern.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"};
lime_graphics_cairo_CairoPattern._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_graphics_cairo_CairoPattern.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo_CairoPattern.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo_CairoPattern.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo_CairoPattern.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoPattern.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoPattern.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo_CairoPattern.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoSurface = {};
lime_graphics_cairo_CairoSurface.flush = function(this1) {
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = "lime.graphics.opengl.GL";
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.beginQuery = function(target,query) {
	lime_graphics_opengl_GL.context.beginQuery(target,query);
};
lime_graphics_opengl_GL.beginTransformFeedback = function(primitiveNode) {
	lime_graphics_opengl_GL.context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindBufferBase = function(target,index,buffer) {
	lime_graphics_opengl_GL.context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl_GL.bindBufferRange = function(target,index,buffer,offset,size) {
	lime_graphics_opengl_GL.context.bindBufferRange(target,index,buffer,offset,lime_utils_DataPointer.fromFloat(size));
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindSampler = function(unit,sampler) {
	lime_graphics_opengl_GL.context.bindSampler(unit,sampler);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.bindTransformFeedback = function(target,transformFeedback) {
	lime_graphics_opengl_GL.context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl_GL.bindVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.bindVertexArray(vertexArray);
};
lime_graphics_opengl_GL.blitFramebuffer = function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	lime_graphics_opengl_GL.context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferDataWEBGL = function(target,srcData,usage,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_opengl_GL.bufferSubDataWEBGL = function(target,dstByteOffset,srcData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearBufferfi = function(buffer,drawbuffer,depth,stencil) {
	lime_graphics_opengl_GL.context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl_GL.clearBufferfvWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferuivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.clientWaitSync = function(sync,flags,timeout) {
	return lime_graphics_opengl_GL.context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2DWEBGL = function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.copyTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createQuery = function() {
	return lime_graphics_opengl_GL.context.createQuery();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createSampler = function() {
	return lime_graphics_opengl_GL.context.createSampler();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.createTransformFeedback = function() {
	return lime_graphics_opengl_GL.context.createTransformFeedback();
};
lime_graphics_opengl_GL.createVertexArray = function() {
	return lime_graphics_opengl_GL.context.createVertexArray();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteQuery = function(query) {
	lime_graphics_opengl_GL.context.deleteQuery(query);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteSampler = function(sampler) {
	lime_graphics_opengl_GL.context.deleteSampler(sampler);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteSync = function(sync) {
	lime_graphics_opengl_GL.context.deleteSync(sync);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.deleteTransformFeedback = function(transformFeedback) {
	lime_graphics_opengl_GL.context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.deleteVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawArraysInstanced = function(mode,first,count,instanceCount) {
	lime_graphics_opengl_GL.context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl_GL.drawBuffers = function(buffers) {
	lime_graphics_opengl_GL.context.drawBuffers(buffers);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.drawElementsInstanced = function(mode,count,type,offset,instanceCount) {
	lime_graphics_opengl_GL.context.drawElementsInstanced(mode,count,type,offset,instanceCount);
};
lime_graphics_opengl_GL.drawRangeElements = function(mode,start,end,count,type,offset) {
	lime_graphics_opengl_GL.context.drawRangeElements(mode,start,end,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.endQuery = function(target) {
	lime_graphics_opengl_GL.context.endQuery(target);
};
lime_graphics_opengl_GL.endTransformFeedback = function() {
	lime_graphics_opengl_GL.context.endTransformFeedback();
};
lime_graphics_opengl_GL.fenceSync = function(condition,flags) {
	return lime_graphics_opengl_GL.context.fenceSync(condition,flags);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.framebufferTextureLayer = function(target,attachment,texture,level,layer) {
	lime_graphics_opengl_GL.context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getActiveUniformBlockName = function(program,uniformBlockIndex) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl_GL.getActiveUniformBlockParameter = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniforms = function(program,uniformIndices,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferSubDataWEBGL = function(target,srcByteOffset,dstData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFragDataLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getFragDataLocation(program,name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getIndexedParameter = function(target,index) {
	return lime_graphics_opengl_GL.context.getIndexedParameter(target,index);
};
lime_graphics_opengl_GL.getInternalformatParameter = function(target,internalformat,pname) {
	return lime_graphics_opengl_GL.context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getQuery = function(target,pname) {
	return lime_graphics_opengl_GL.context.getQuery(target,pname);
};
lime_graphics_opengl_GL.getQueryParameter = function(query,pname) {
	return lime_graphics_opengl_GL.context.getQueryParameter(query,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getSamplerParameter = function(sampler,pname) {
	return lime_graphics_opengl_GL.context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getSyncParameter = function(sync,pname) {
	return lime_graphics_opengl_GL.context.getSyncParameter(sync,pname);
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTransformFeedbackVarying = function(program,index) {
	return lime_graphics_opengl_GL.context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformBlockIndex = function(program,uniformBlockName) {
	return lime_graphics_opengl_GL.context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl_GL.getUniformIndices = function(program,uniformNames) {
	return lime_graphics_opengl_GL.context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_utils_DataPointer.fromFloat(lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.invalidateFramebuffer = function(target,attachments) {
	lime_graphics_opengl_GL.context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl_GL.invalidateSubFramebuffer = function(target,attachments,x,y,width,height) {
	lime_graphics_opengl_GL.context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isQuery = function(query) {
	return lime_graphics_opengl_GL.context.isQuery(query);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isSampler = function(sampler) {
	return lime_graphics_opengl_GL.context.isSampler(sampler);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isSync = function(sync) {
	return lime_graphics_opengl_GL.context.isSync(sync);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.isTransformFeedback = function(transformFeedback) {
	return lime_graphics_opengl_GL.context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.isVertexArray = function(vertexArray) {
	return lime_graphics_opengl_GL.context.isVertexArray(vertexArray);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pauseTransformFeedback = function() {
	lime_graphics_opengl_GL.context.pauseTransformFeedback();
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readBuffer = function(src) {
	lime_graphics_opengl_GL.context.readBuffer(src);
};
lime_graphics_opengl_GL.readPixelsWEBGL = function(x,y,width,height,format,type,pixels,dstOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.renderbufferStorageMultisample = function(target,samples,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl_GL.resumeTransformFeedback = function() {
	lime_graphics_opengl_GL.context.resumeTransformFeedback();
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.samplerParameterf = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl_GL.samplerParameteri = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2DWEBGL = function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_opengl_GL.texImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texStorage2D = function(target,level,internalformat,width,height) {
	lime_graphics_opengl_GL.context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl_GL.texStorage3D = function(target,level,internalformat,width,height,depth) {
	lime_graphics_opengl_GL.context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_opengl_GL.texSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
	lime_graphics_opengl_GL.context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
};
lime_graphics_opengl_GL.transformFeedbackVaryings = function(program,varyings,bufferMode) {
	lime_graphics_opengl_GL.context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl_GL.uniform1f = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1f(location,v0);
};
lime_graphics_opengl_GL.uniform1fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1i = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1i(location,v0);
};
lime_graphics_opengl_GL.uniform1ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1ui = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1ui(location,v0);
};
lime_graphics_opengl_GL.uniform1uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2f = function(location,v0,v1) {
	lime_graphics_opengl_GL.context.uniform2f(location,v0,v1);
};
lime_graphics_opengl_GL.uniform2fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_WebGL2RenderContext.uniform2fv(lime_graphics_opengl_GL.context,location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform2ui = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2ui(location,x,y);
};
lime_graphics_opengl_GL.uniform2uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3f = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3i = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3ui = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4f = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4i = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4ui = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformBlockBinding = function(program,uniformBlockIndex,uniformBlockBinding) {
	lime_graphics_opengl_GL.context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl_GL.uniformMatrix2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix2x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix3x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix4x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(index,v0) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(index,v0);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib1fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(index,v0,v1) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(index,v0,v1);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(index,v0,v1,v2) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(index,v0,v1,v2);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttribDivisor = function(index,divisor) {
	lime_graphics_opengl_GL.context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl_GL.vertexAttribI4i = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4i(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4iv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ui = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4ui(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4uiv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4uivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribIPointer = function(index,size,type,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribIPointer(index,size,type,stride,offset);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(index,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(index,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.waitSync = function(sync,flags,timeout) {
	lime_graphics_opengl_GL.context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.__getObjectID = function(object) {
	if(object == null) {
		return 0;
	} else {
		return object.id;
	}
};
var lime_graphics_opengl_GLProgram = {};
lime_graphics_opengl_GLProgram.fromSources = function(gl,vertexSource,fragmentSource) {
	var vertexShader = lime_graphics_opengl_GLShader.fromSource(gl,vertexSource,gl.VERTEX_SHADER);
	var fragmentShader = lime_graphics_opengl_GLShader.fromSource(gl,fragmentSource,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	gl.attachShader(program,vertexShader);
	gl.attachShader(program,fragmentShader);
	gl.linkProgram(program);
	if(gl.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message += "\n" + lime_graphics_opengl_GL.context.getProgramInfoLog(program);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLProgram.hx", lineNumber : 39, className : "lime.graphics.opengl._GLProgram.GLProgram_Impl_", methodName : "fromSources"});
	}
	return program;
};
var lime_graphics_opengl_GLShader = {};
lime_graphics_opengl_GLShader.fromSource = function(gl,source,type) {
	var shader = gl.createShader(type);
	gl.shaderSource(shader,source);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		var message;
		if(type == gl.VERTEX_SHADER) {
			message = "Error compiling vertex shader";
		} else if(type == gl.FRAGMENT_SHADER) {
			message = "Error compiling fragment shader";
		} else {
			message = "Error compiling unknown shader type";
		}
		message += "\n" + gl.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLShader.hx", lineNumber : 40, className : "lime.graphics.opengl._GLShader.GLShader_Impl_", methodName : "fromSource"});
	}
	return shader;
};
var lime_graphics_opengl_ext_KHR_$debug = function() {
	this.STACK_UNDERFLOW = 1284;
	this.STACK_OVERFLOW = 1283;
	this.CONTEXT_FLAG_DEBUG_BIT = 2;
	this.DEBUG_OUTPUT = 37600;
	this.DEBUG_SEVERITY_LOW = 37192;
	this.DEBUG_SEVERITY_MEDIUM = 37191;
	this.DEBUG_SEVERITY_HIGH = 37190;
	this.DEBUG_LOGGED_MESSAGES = 37189;
	this.MAX_DEBUG_LOGGED_MESSAGES = 37188;
	this.MAX_DEBUG_MESSAGE_LENGTH = 37187;
	this.MAX_LABEL_LENGTH = 33512;
	this.SAMPLER = 33510;
	this.QUERY = 33507;
	this.PROGRAM = 33506;
	this.SHADER = 33505;
	this.BUFFER = 33504;
	this.DEBUG_GROUP_STACK_DEPTH = 33389;
	this.MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
	this.DEBUG_SEVERITY_NOTIFICATION = 33387;
	this.DEBUG_TYPE_POP_GROUP = 33386;
	this.DEBUG_TYPE_PUSH_GROUP = 33385;
	this.DEBUG_TYPE_MARKER = 33384;
	this.DEBUG_TYPE_OTHER = 33361;
	this.DEBUG_TYPE_PERFORMANCE = 33360;
	this.DEBUG_TYPE_PORTABILITY = 33359;
	this.DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
	this.DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
	this.DEBUG_TYPE_ERROR = 33356;
	this.DEBUG_SOURCE_OTHER = 33355;
	this.DEBUG_SOURCE_APPLICATION = 33354;
	this.DEBUG_SOURCE_THIRD_PARTY = 33353;
	this.DEBUG_SOURCE_SHADER_COMPILER = 33352;
	this.DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
	this.DEBUG_SOURCE_API = 33350;
	this.DEBUG_CALLBACK_USER_PARAM = 33349;
	this.DEBUG_CALLBACK_FUNCTION = 33348;
	this.DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
	this.DEBUG_OUTPUT_SYNCHRONOUS = 33346;
};
$hxClasses["lime.graphics.opengl.ext.KHR_debug"] = lime_graphics_opengl_ext_KHR_$debug;
lime_graphics_opengl_ext_KHR_$debug.__name__ = "lime.graphics.opengl.ext.KHR_debug";
lime_graphics_opengl_ext_KHR_$debug.prototype = {
	__class__: lime_graphics_opengl_ext_KHR_$debug
};
var lime_math_ARGB = {};
lime_math_ARGB.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_ARGB._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	var this1 = argb;
	return this1;
};
lime_math_ARGB.create = function(a,r,g,b) {
	var this1 = 0;
	var argb = this1;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_ARGB.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		lime_math_ARGB.a16 = lime_math_RGBA.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_ARGB.a16 >> 16 & 255;
	}
};
lime_math_ARGB.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			lime_math_ARGB.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_ARGB.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_ARGB.unmult)] & 255) << 8 | lime_math_RGBA.__clamp[Math.floor((this1 & 255) * lime_math_ARGB.unmult)] & 255;
		}
	}
};
lime_math_ARGB.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_ARGB.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		lime_math_ARGB.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_ARGB.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_ARGB.unmult)] & 255) << 8 | lime_math_RGBA.__clamp[Math.floor((this1 & 255) * lime_math_ARGB.unmult)] & 255;
	}
};
lime_math_ARGB.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			lime_math_ARGB.a16 = lime_math_RGBA.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_ARGB.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
lime_math_ARGB.__fromBGRA = function(bgra) {
	var this1 = 0;
	var argb = this1;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
lime_math_ARGB.__fromRGBA = function(rgba) {
	var this1 = 0;
	var argb = this1;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
lime_math_ARGB.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_ARGB.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_ARGB.get_b = function(this1) {
	return this1 & 255;
};
lime_math_ARGB.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_ARGB.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_ARGB.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_ARGB.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_ARGB.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_BGRA = {};
lime_math_BGRA.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_BGRA._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	var this1 = bgra;
	return this1;
};
lime_math_BGRA.create = function(b,g,r,a) {
	var this1 = 0;
	var bgra = this1;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_BGRA.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_BGRA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_BGRA.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_BGRA.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_RGBA.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_BGRA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_BGRA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_BGRA.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_BGRA.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_BGRA.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_BGRA.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_RGBA.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_BGRA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_BGRA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_BGRA.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_BGRA.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_BGRA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_BGRA.__fromARGB = function(argb) {
	var this1 = 0;
	var bgra = this1;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
lime_math_BGRA.__fromRGBA = function(rgba) {
	var this1 = 0;
	var bgra = this1;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_BGRA.get_a = function(this1) {
	return this1 & 255;
};
lime_math_BGRA.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_BGRA.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_BGRA.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_BGRA.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_BGRA.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_BGRA.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_BGRA.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_ColorMatrix = {};
lime_math_ColorMatrix.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"};
lime_math_ColorMatrix._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math_ColorMatrix.__identity;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(vector != null) {
			this2 = new Float32Array(vector.__array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math_ColorMatrix.clone = function(this1) {
	var elements = null;
	var array = null;
	var vector = null;
	var view = lime_utils_Float32Array.toArrayBufferView(this1);
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return lime_math_ColorMatrix._new(this1);
};
lime_math_ColorMatrix.concat = function(this1,second) {
	this1[0] += second[0];
	this1[6] += second[6];
	this1[12] += second[12];
	this1[18] += second[18];
};
lime_math_ColorMatrix.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math_ColorMatrix.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math_ColorMatrix.getAlphaTable = function(this1) {
	if(lime_math_ColorMatrix.__alphaTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__alphaTable = this2;
	}
	var value;
	lime_math_ColorMatrix.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__alphaTable[i] = value;
	}
	return lime_math_ColorMatrix.__alphaTable;
};
lime_math_ColorMatrix.getBlueTable = function(this1) {
	if(lime_math_ColorMatrix.__blueTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__blueTable[i] = value;
	}
	return lime_math_ColorMatrix.__blueTable;
};
lime_math_ColorMatrix.getGreenTable = function(this1) {
	if(lime_math_ColorMatrix.__greenTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__greenTable[i] = value;
	}
	return lime_math_ColorMatrix.__greenTable;
};
lime_math_ColorMatrix.getRedTable = function(this1) {
	if(lime_math_ColorMatrix.__redTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__redTable[i] = value;
	}
	return lime_math_ColorMatrix.__redTable;
};
lime_math_ColorMatrix.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math_ColorMatrix.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math_ColorMatrix.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math_ColorMatrix.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math_ColorMatrix.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math_ColorMatrix.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math_ColorMatrix.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math_ColorMatrix.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math_ColorMatrix.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math_ColorMatrix.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math_ColorMatrix.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math_ColorMatrix.get_color(this1);
};
lime_math_ColorMatrix.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math_ColorMatrix.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math_ColorMatrix.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math_ColorMatrix.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math_ColorMatrix.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math_ColorMatrix.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math_ColorMatrix.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math_ColorMatrix.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math_ColorMatrix.get = function(this1,index) {
	return this1[index];
};
lime_math_ColorMatrix.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = "lime.math.Matrix3";
lime_math_Matrix3.prototype = {
	clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.b = vector4.y;
		} else if(column == 1) {
			this.c = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
			this.tx = vector4.z;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
			this.ty = vector4.z;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix3) {
		if(matrix3 != null && this.tx == matrix3.tx && this.ty == matrix3.ty && this.a == matrix3.a && this.b == matrix3.b && this.c == matrix3.c) {
			return this.d == matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector: function(Vector2,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = Vector2.x * this.a + Vector2.y * this.c;
		result.y = Vector2.x * this.b + Vector2.y * this.d;
		return result;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformRect: function(rect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var tx0 = this.a * rect.x + this.c * rect.y;
		var tx1 = tx0;
		var ty0 = this.b * rect.x + this.d * rect.y;
		var ty1 = ty0;
		var tx = this.a * (rect.x + rect.width) + this.c * rect.y;
		var ty = this.b * (rect.x + rect.width) + this.d * rect.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * (rect.x + rect.width) + this.c * (rect.y + rect.height);
		ty = this.b * (rect.x + rect.width) + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * rect.x + this.c * (rect.y + rect.height);
		ty = this.b * rect.x + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		result.setTo(tx0 + tx,ty0 + ty,tx1 - tx0,ty1 - ty0);
		return result;
	}
	,transformVector: function(pos,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = pos.x * this.a + pos.y * this.c + this.tx;
		result.y = pos.x * this.b + pos.y * this.d + this.ty;
		return result;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: lime_math_Matrix3
};
var lime_math_Matrix4 = {};
lime_math_Matrix4.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"};
lime_math_Matrix4._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math_Matrix4.__identity;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(vector != null) {
			this2 = new Float32Array(vector.__array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math_Matrix4.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math_Matrix4.get(lhs,0);
	var m221 = lime_math_Matrix4.get(lhs,4);
	var m231 = lime_math_Matrix4.get(lhs,8);
	var m241 = lime_math_Matrix4.get(lhs,12);
	var m212 = lime_math_Matrix4.get(lhs,1);
	var m222 = lime_math_Matrix4.get(lhs,5);
	var m232 = lime_math_Matrix4.get(lhs,9);
	var m242 = lime_math_Matrix4.get(lhs,13);
	var m213 = lime_math_Matrix4.get(lhs,2);
	var m223 = lime_math_Matrix4.get(lhs,6);
	var m233 = lime_math_Matrix4.get(lhs,10);
	var m243 = lime_math_Matrix4.get(lhs,14);
	var m214 = lime_math_Matrix4.get(lhs,3);
	var m224 = lime_math_Matrix4.get(lhs,7);
	var m234 = lime_math_Matrix4.get(lhs,11);
	var m244 = lime_math_Matrix4.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math_Matrix4.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math_Matrix4.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math_Matrix4.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math_Matrix4.append(this1,m);
};
lime_math_Matrix4.appendScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math_Matrix4.append(this1,lime_math_Matrix4._new(this2));
};
lime_math_Matrix4.appendTranslation = function(this1,x,y,z) {
	this1[12] += x;
	this1[13] += y;
	this1[14] += z;
};
lime_math_Matrix4.clone = function(this1) {
	var elements = null;
	var array = null;
	var vector = null;
	var view = lime_utils_Float32Array.toArrayBufferView(this1);
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return lime_math_Matrix4._new(this1);
};
lime_math_Matrix4.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 187, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnFrom"});
	}
};
lime_math_Matrix4.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 225, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnTo"});
	}
};
lime_math_Matrix4.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math_Matrix4.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 272, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowFrom"});
	}
};
lime_math_Matrix4.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 310, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowTo"});
	}
};
lime_math_Matrix4.create2D = function(this1,a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	this1[0] = a;
	this1[1] = b;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = c;
	this1[5] = d;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = tx;
	this1[13] = ty;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math_Matrix4.createOrtho = function(this1,left,right,bottom,top,zNear,zFar) {
	var sx = 1.0 / (right - left);
	var sy = 1.0 / (top - bottom);
	var sz = 1.0 / (zFar - zNear);
	this1[0] = 2 * sx;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 2 * sy;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = -2 * sz;
	this1[11] = 0;
	this1[12] = -(left + right) * sx;
	this1[13] = -(bottom + top) * sy;
	this1[14] = -(zNear + zFar) * sz;
	this1[15] = 1;
};
lime_math_Matrix4.deltaTransformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[3];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[7];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[11];
	return result;
};
lime_math_Matrix4.fromMatrix3 = function(matrix3) {
	var mat = lime_math_Matrix4._new();
	lime_math_Matrix4.create2D(mat,matrix3.a,matrix3.b,matrix3.c,matrix3.d,matrix3.tx,matrix3.ty);
	return mat;
};
lime_math_Matrix4.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math_Matrix4.interpolate = function(thisMat,toMat,percent,result) {
	if(result == null) {
		result = lime_math_Matrix4._new();
	}
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math_Matrix4.set(result,i,lime_math_Matrix4.get(thisMat,i) + (lime_math_Matrix4.get(toMat,i) - lime_math_Matrix4.get(thisMat,i)) * percent);
	}
	return result;
};
lime_math_Matrix4.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] += (lime_math_Matrix4.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math_Matrix4.invert = function(this1) {
	var d = lime_math_Matrix4.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math_Matrix4.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,1,0);
	}
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	result.x = pos.x - at.x;
	result.y = pos.y - at.y;
	result.z = pos.z - at.z;
	var dir = result;
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l != 0) {
		vup.x /= l;
		vup.y /= l;
		vup.z /= l;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	result.x = vup.x - dir2.x;
	result.y = vup.y - dir2.y;
	result.z = vup.z - dir2.z;
	vup = result;
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l != 0) {
			vup.x /= l;
			vup.y /= l;
			vup.z /= l;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var ya = vup.z * dir.x - vup.x * dir.z;
	var za = vup.x * dir.y - vup.y * dir.x;
	result.x = vup.y * dir.z - vup.z * dir.y;
	result.y = ya;
	result.z = za;
	result.w = 1;
	var right = result;
	var l = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l != 0) {
		right.x /= l;
		right.y /= l;
		right.z /= l;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math_Matrix4.prepend = function(this1,rhs) {
	var m111 = lime_math_Matrix4.get(rhs,0);
	var m121 = lime_math_Matrix4.get(rhs,4);
	var m131 = lime_math_Matrix4.get(rhs,8);
	var m141 = lime_math_Matrix4.get(rhs,12);
	var m112 = lime_math_Matrix4.get(rhs,1);
	var m122 = lime_math_Matrix4.get(rhs,5);
	var m132 = lime_math_Matrix4.get(rhs,9);
	var m142 = lime_math_Matrix4.get(rhs,13);
	var m113 = lime_math_Matrix4.get(rhs,2);
	var m123 = lime_math_Matrix4.get(rhs,6);
	var m133 = lime_math_Matrix4.get(rhs,10);
	var m143 = lime_math_Matrix4.get(rhs,14);
	var m114 = lime_math_Matrix4.get(rhs,3);
	var m124 = lime_math_Matrix4.get(rhs,7);
	var m134 = lime_math_Matrix4.get(rhs,11);
	var m144 = lime_math_Matrix4.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math_Matrix4.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math_Matrix4.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math_Matrix4.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math_Matrix4.prepend(this1,m);
};
lime_math_Matrix4.prependScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math_Matrix4.prepend(this1,lime_math_Matrix4._new(this2));
};
lime_math_Matrix4.prependTranslation = function(this1,x,y,z) {
	var m = lime_math_Matrix4._new();
	lime_math_Matrix4.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math_Matrix4.prepend(this1,m);
};
lime_math_Matrix4.transformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
	result.w = x * this1[3] + y * this1[7] + z * this1[11] + this1[15];
	return result;
};
lime_math_Matrix4.transformVectors = function(this1,ain,aout) {
	var i = 0;
	var x;
	var y;
	var z;
	while(i + 3 <= ain.length) {
		x = ain[i];
		y = ain[i + 1];
		z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math_Matrix4.transpose = function(this1) {
	var temp = this1[1];
	this1[1] = this1[4];
	this1[4] = temp;
	var temp = this1[2];
	this1[2] = this1[8];
	this1[8] = temp;
	var temp = this1[3];
	this1[3] = this1[12];
	this1[12] = temp;
	var temp = this1[6];
	this1[6] = this1[9];
	this1[9] = temp;
	var temp = this1[7];
	this1[7] = this1[13];
	this1[13] = temp;
	var temp = this1[11];
	this1[11] = this1[14];
	this1[14] = temp;
};
lime_math_Matrix4.__getAxisRotation = function(this1,x,y,z,degrees) {
	var m = lime_math_Matrix4._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math_Matrix4.set(m,0,c + a1.x * a1.x * t);
	lime_math_Matrix4.set(m,5,c + a1.y * a1.y * t);
	lime_math_Matrix4.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math_Matrix4.set(m,4,tmp1 + tmp2);
	lime_math_Matrix4.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math_Matrix4.set(m,8,tmp1 - tmp2);
	lime_math_Matrix4.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math_Matrix4.set(m,9,tmp1 + tmp2);
	lime_math_Matrix4.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math_Matrix4.__swap = function(this1,a,b) {
	var temp = this1[a];
	this1[a] = this1[b];
	this1[b] = temp;
};
lime_math_Matrix4.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math_Matrix4.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math_Matrix4.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math_Matrix4.get = function(this1,index) {
	return this1[index];
};
lime_math_Matrix4.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_RGBA = {};
lime_math_RGBA.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_RGBA._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	var this1 = rgba;
	return this1;
};
lime_math_RGBA.create = function(r,g,b,a) {
	var this1 = 0;
	var rgba = this1;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_RGBA.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_RGBA.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_RGBA.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_RGBA.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_RGBA.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_RGBA.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_RGBA.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_RGBA.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_RGBA.__fromARGB = function(argb) {
	var this1 = 0;
	var rgba = this1;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
lime_math_RGBA.__fromBGRA = function(bgra) {
	var this1 = 0;
	var rgba = this1;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_RGBA.get_a = function(this1) {
	return this1 & 255;
};
lime_math_RGBA.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_RGBA.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_RGBA.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_RGBA.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_RGBA.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_RGBA.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_RGBA.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = "lime.math.Rectangle";
lime_math_Rectangle.prototype = {
	clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.containsVector(point);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,containsVector: function(vector) {
		return this.contains(vector.x,vector.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflateVector: function(vector) {
		this.inflate(vector.x,vector.y);
	}
	,intersection: function(toIntersect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			result.setEmpty();
			return result;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			result.setEmpty();
			return result;
		}
		result.x = x0;
		result.y = y0;
		result.width = x1 - x0;
		result.height = y1 - y0;
		return result;
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetVector: function(vector) {
		this.x += vector.x;
		this.y += vector.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,union: function(toUnion,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		if(this.width == 0 || this.height == 0) {
			result.copyFrom(toUnion);
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			result.copyFrom(this);
		} else {
			var x0 = this.x > toUnion.x ? toUnion.x : this.x;
			var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
			var y0 = this.y > toUnion.y ? toUnion.y : this.y;
			var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
			result.setTo(x0,y0,x1 - x0,y1 - y0);
		}
		return result;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = "lime.math.Vector2";
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	result.x = pt2.x + f * (pt1.x - pt2.x);
	result.y = pt2.y + f * (pt1.y - pt2.y);
	return result;
};
lime_math_Vector2.polar = function(len,angle,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	var ya = len * Math.sin(angle);
	result.x = len * Math.cos(angle);
	result.y = ya;
	return result;
};
lime_math_Vector2.prototype = {
	add: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = v.x + this.x;
		result.y = v.y + this.y;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = this.x - v.x;
		result.y = this.y - v.y;
		return result;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = "lime.math.Vector4";
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l != 0) {
		b0.x /= l;
		b0.y /= l;
		b0.z /= l;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.distanceSquared = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return x * x + y * y + z * z;
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	add: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x + a.x;
		result.y = this.y + a.y;
		result.z = this.z + a.z;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		var ya = this.z * a.x - this.x * a.z;
		var za = this.x * a.y - this.y * a.x;
		result.x = this.y * a.z - this.z * a.y;
		result.y = ya;
		result.z = za;
		result.w = 1;
		return result;
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x - a.x;
		result.y = this.y - a.y;
		result.z = this.z - a.z;
		return result;
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = "lime.media.AudioBuffer";
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(lime__$internal_format_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + lime__$internal_format_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[2];
			var _g1 = bytes.b[1];
			switch(bytes.b[0]) {
			case 73:
				if(_g1 == 68) {
					if(_g == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g1) {
				case 243:case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g = bytes.b[2];
		var _g1 = bytes.b[1];
		switch(bytes.b[0]) {
		case 73:
			if(_g1 == 68) {
				if(_g == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g1) {
			case 243:case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "lime/media/AudioBuffer.hx", lineNumber : 362, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
var lime_media_AudioContext = function(type) {
	if(type != "custom") {
		if(type == null || type == "web") {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				this.web = new window.AudioContext ();
				this.type = "web";
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
		if(this.web == null && type != "web") {
			this.html5 = new lime_media_HTML5AudioContext();
			this.type = "html5";
		}
	} else {
		this.type = "custom";
	}
};
$hxClasses["lime.media.AudioContext"] = lime_media_AudioContext;
lime_media_AudioContext.__name__ = "lime.media.AudioContext";
lime_media_AudioContext.prototype = {
	__class__: lime_media_AudioContext
};
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = "lime.media.AudioManager";
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			lime_media_AudioManager.context = new lime_media_AudioContext();
			context = lime_media_AudioManager.context;
			if(context.type == "openal") {
				var alc = context.openal;
				var device = alc.openDevice();
				var ctx = alc.createContext(device);
				alc.makeContextCurrent(ctx);
				alc.processContext(ctx);
			}
		}
		lime_media_AudioManager.context = context;
	}
};
lime_media_AudioManager.resume = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.resumeDevice(device);
			alc.processContext(currentContext);
		}
	}
};
lime_media_AudioManager.shutdown = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.makeContextCurrent(null);
			alc.destroyContext(currentContext);
			if(device != null) {
				alc.closeDevice(device);
			}
		}
	}
	lime_media_AudioManager.context = null;
};
lime_media_AudioManager.suspend = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			alc.suspendContext(currentContext);
			var device = alc.getContextsDevice(currentContext);
			if(device != null) {
				alc.pauseDevice(device);
			}
		}
	}
};
var lime_media_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.__backend = new lime__$internal_backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
lime_media_AudioSource.__name__ = "lime.media.AudioSource";
lime_media_AudioSource.prototype = {
	dispose: function() {
		this.__backend.dispose();
	}
	,init: function() {
		this.__backend.init();
	}
	,play: function() {
		this.__backend.play();
	}
	,pause: function() {
		this.__backend.pause();
	}
	,stop: function() {
		this.__backend.stop();
	}
	,get_currentTime: function() {
		return this.__backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.__backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.__backend.getGain();
	}
	,set_gain: function(value) {
		return this.__backend.setGain(value);
	}
	,get_length: function() {
		return this.__backend.getLength();
	}
	,set_length: function(value) {
		return this.__backend.setLength(value);
	}
	,get_loops: function() {
		return this.__backend.getLoops();
	}
	,set_loops: function(value) {
		return this.__backend.setLoops(value);
	}
	,get_position: function() {
		return this.__backend.getPosition();
	}
	,set_position: function(value) {
		return this.__backend.setPosition(value);
	}
	,__class__: lime_media_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_media_FlashAudioContext = function() {
};
$hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
lime_media_FlashAudioContext.__name__ = "lime.media.FlashAudioContext";
lime_media_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_media_FlashAudioContext
};
var lime_media_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = "lime.media.HTML5AudioContext";
lime_media_HTML5AudioContext.prototype = {
	canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_media_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.load();
		}
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.pause();
		}
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.play();
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.volume = value;
		}
	}
	,__class__: lime_media_HTML5AudioContext
};
var lime_media_OpenALAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.media.OpenALAudioContext"] = lime_media_OpenALAudioContext;
lime_media_OpenALAudioContext.__name__ = "lime.media.OpenALAudioContext";
lime_media_OpenALAudioContext.prototype = {
	bufferData: function(buffer,format,data,size,freq) {
		lime_media_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_media_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_media_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_media_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_media_openal_AL.bufferiv(buffer,param,values);
	}
	,closeDevice: function(device) {
		return lime_media_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,createBuffer: function() {
		return lime_media_openal_AL.createBuffer();
	}
	,createSource: function() {
		return lime_media_openal_AL.createSource();
	}
	,deleteBuffer: function(buffer) {
		lime_media_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_media_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_media_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_media_openal_AL.deleteSources(sources);
	}
	,destroyContext: function(context) {
		if(context == null) {
			return;
		}
		lime_media_openal_ALC.destroyContext(context);
	}
	,disable: function(capability) {
		lime_media_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_media_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_media_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_media_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_media_openal_AL.enable(capability);
	}
	,genSource: function() {
		return this.createSource();
	}
	,genSources: function(n) {
		return lime_media_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return this.createBuffer();
	}
	,genBuffers: function(n) {
		return lime_media_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_media_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_media_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_media_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferiv(buffer,param,count);
	}
	,getContextsDevice: function(context) {
		if(context == null) {
			return null;
		}
		return lime_media_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_media_openal_ALC.getCurrentContext();
	}
	,getDouble: function(param) {
		return lime_media_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_media_openal_AL.getEnumValue(ename);
	}
	,getError: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getError();
		} else {
			return lime_media_openal_ALC.getError(device);
		}
	}
	,getErrorString: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getErrorString();
		} else {
			return lime_media_openal_ALC.getErrorString(device);
		}
	}
	,getFloat: function(param) {
		return lime_media_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_media_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count,device) {
		if(count == null) {
			count = 1;
		}
		if(device == null) {
			return lime_media_openal_AL.getIntegerv(param,count);
		} else {
			return lime_media_openal_ALC.getIntegerv(device,param,count);
		}
	}
	,getListener3f: function(param) {
		return lime_media_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_media_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_media_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_media_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_media_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_media_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_media_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_media_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_media_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param,device) {
		if(device == null) {
			return lime_media_openal_AL.getString(param);
		} else {
			return lime_media_openal_ALC.getString(device,param);
		}
	}
	,isBuffer: function(buffer) {
		return lime_media_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_media_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_media_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_media_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_media_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_media_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_media_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_media_openal_AL.listeneriv(param,values);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_media_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_media_openal_ALC.resumeDevice(device);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_media_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_media_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_media_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_media_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_media_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_media_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_media_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_media_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_media_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_media_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_media_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_media_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_media_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_media_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_media_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_media_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_media_openal_AL.speedOfSound(value);
	}
	,suspendContext: function(context) {
		lime_media_openal_ALC.suspendContext(context);
	}
	,__class__: lime_media_OpenALAudioContext
};
var lime_media_openal_AL = function() { };
$hxClasses["lime.media.openal.AL"] = lime_media_openal_AL;
lime_media_openal_AL.__name__ = "lime.media.openal.AL";
lime_media_openal_AL.removeDirectFilter = function(source) {
};
lime_media_openal_AL.removeSend = function(source,index) {
};
lime_media_openal_AL.auxf = function(aux,param,value) {
};
lime_media_openal_AL.auxfv = function(aux,param,values) {
};
lime_media_openal_AL.auxi = function(aux,param,value) {
};
lime_media_openal_AL.auxiv = function(aux,param,values) {
};
lime_media_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_media_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.bufferf = function(buffer,param,value) {
};
lime_media_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_media_openal_AL.bufferi = function(buffer,param,value) {
};
lime_media_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_media_openal_AL.createAux = function() {
	return null;
};
lime_media_openal_AL.createBuffer = function() {
	return null;
};
lime_media_openal_AL.createEffect = function() {
	return null;
};
lime_media_openal_AL.createFilter = function() {
	return null;
};
lime_media_openal_AL.createSource = function() {
	return null;
};
lime_media_openal_AL.deleteBuffer = function(buffer) {
};
lime_media_openal_AL.deleteBuffers = function(buffers) {
};
lime_media_openal_AL.deleteSource = function(source) {
};
lime_media_openal_AL.deleteSources = function(sources) {
};
lime_media_openal_AL.disable = function(capability) {
};
lime_media_openal_AL.distanceModel = function(distanceModel) {
};
lime_media_openal_AL.dopplerFactor = function(value) {
};
lime_media_openal_AL.dopplerVelocity = function(value) {
};
lime_media_openal_AL.effectf = function(effect,param,value) {
};
lime_media_openal_AL.effectfv = function(effect,param,values) {
};
lime_media_openal_AL.effecti = function(effect,param,value) {
};
lime_media_openal_AL.effectiv = function(effect,param,values) {
};
lime_media_openal_AL.enable = function(capability) {
};
lime_media_openal_AL.genSource = function() {
	return null;
};
lime_media_openal_AL.genSources = function(n) {
	return null;
};
lime_media_openal_AL.genBuffer = function() {
	return null;
};
lime_media_openal_AL.genBuffers = function(n) {
	return null;
};
lime_media_openal_AL.getBoolean = function(param) {
	return false;
};
lime_media_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getDouble = function(param) {
	return 0;
};
lime_media_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_media_openal_AL.getError = function() {
	return 0;
};
lime_media_openal_AL.getErrorString = function() {
	switch(lime_media_openal_AL.getError()) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_AL.getFilteri = function(filter,param) {
	return 0;
};
lime_media_openal_AL.getFloat = function(param) {
	return 0;
};
lime_media_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getInteger = function(param) {
	return 0;
};
lime_media_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListener3f = function(param) {
	return null;
};
lime_media_openal_AL.getListener3i = function(param) {
	return null;
};
lime_media_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_media_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_media_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getParameter = function(param) {
	return null;
};
lime_media_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_media_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getString = function(param) {
	return null;
};
lime_media_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_media_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_media_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_media_openal_AL.isAux = function(aux) {
	return false;
};
lime_media_openal_AL.isEffect = function(effect) {
	return false;
};
lime_media_openal_AL.isFilter = function(filter) {
	return false;
};
lime_media_openal_AL.isSource = function(source) {
	return false;
};
lime_media_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listenerf = function(param,value) {
};
lime_media_openal_AL.listenerfv = function(param,values) {
};
lime_media_openal_AL.listeneri = function(param,value) {
};
lime_media_openal_AL.listeneriv = function(param,values) {
};
lime_media_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.sourcef = function(source,param,value) {
};
lime_media_openal_AL.sourcefv = function(source,param,values) {
};
lime_media_openal_AL.sourcei = function(source,param,value) {
};
lime_media_openal_AL.filteri = function(filter,param,value) {
};
lime_media_openal_AL.filterf = function(filter,param,value) {
};
lime_media_openal_AL.sourceiv = function(source,param,values) {
};
lime_media_openal_AL.sourcePlay = function(source) {
};
lime_media_openal_AL.sourcePlayv = function(sources) {
};
lime_media_openal_AL.sourceStop = function(source) {
};
lime_media_openal_AL.sourceStopv = function(sources) {
};
lime_media_openal_AL.sourceRewind = function(source) {
};
lime_media_openal_AL.sourceRewindv = function(sources) {
};
lime_media_openal_AL.sourcePause = function(source) {
};
lime_media_openal_AL.sourcePausev = function(sources) {
};
lime_media_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_media_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_media_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_media_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_media_openal_AL.speedOfSound = function(value) {
};
var lime_media_openal_ALAuxiliaryEffectSlot = {};
lime_media_openal_ALAuxiliaryEffectSlot._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALBuffer = {};
lime_media_openal_ALBuffer._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = "lime.media.openal.ALC";
lime_media_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.destroyContext = function(context) {
};
lime_media_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_media_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_media_openal_ALC.getError = function(device) {
	return 0;
};
lime_media_openal_ALC.getErrorString = function(device) {
	switch(lime_media_openal_ALC.getError(device)) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_media_openal_ALC.getString = function(device,param) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.pauseDevice = function(device) {
};
lime_media_openal_ALC.processContext = function(context) {
};
lime_media_openal_ALC.resumeDevice = function(device) {
};
lime_media_openal_ALC.suspendContext = function(context) {
};
var lime_media_openal_ALContext = {};
lime_media_openal_ALContext._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALDevice = {};
lime_media_openal_ALDevice._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALEffect = {};
lime_media_openal_ALEffect._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALFilter = {};
lime_media_openal_ALFilter._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALSource = {};
lime_media_openal_ALSource._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_vorbis_VorbisComment = function() {
};
$hxClasses["lime.media.vorbis.VorbisComment"] = lime_media_vorbis_VorbisComment;
lime_media_vorbis_VorbisComment.__name__ = "lime.media.vorbis.VorbisComment";
lime_media_vorbis_VorbisComment.prototype = {
	__class__: lime_media_vorbis_VorbisComment
};
var lime_media_vorbis_VorbisFile = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.media.vorbis.VorbisFile"] = lime_media_vorbis_VorbisFile;
lime_media_vorbis_VorbisFile.__name__ = "lime.media.vorbis.VorbisFile";
lime_media_vorbis_VorbisFile.fromBytes = function(bytes) {
	return null;
};
lime_media_vorbis_VorbisFile.fromFile = function(path) {
	return null;
};
lime_media_vorbis_VorbisFile.prototype = {
	bitrate: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,bitrateInstant: function() {
		return 0;
	}
	,clear: function() {
	}
	,comment: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,crosslap: function(other) {
		return 0;
	}
	,info: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,pcmSeek: function(pos) {
		return 0;
	}
	,pcmSeekLap: function(pos) {
		return 0;
	}
	,pcmSeekPage: function(pos) {
		return 0;
	}
	,pcmSeekPageLap: function(pos) {
		return 0;
	}
	,pcmTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,pcmTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawSeek: function(pos) {
		return 0;
	}
	,rawSeekLap: function(pos) {
		return 0;
	}
	,rawTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,read: function(buffer,position,length,bigEndianPacking,wordSize,signed) {
		if(signed == null) {
			signed = true;
		}
		if(wordSize == null) {
			wordSize = 2;
		}
		if(bigEndianPacking == null) {
			bigEndianPacking = false;
		}
		if(length == null) {
			length = 4096;
		}
		return 0;
	}
	,readFloat: function(pcmChannels,samples) {
		return 0;
	}
	,seekable: function() {
		return false;
	}
	,serialNumber: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,streams: function() {
		return 0;
	}
	,timeSeek: function(s) {
		return 0;
	}
	,timeSeekLap: function(s) {
		return 0;
	}
	,timeSeekPage: function(s) {
		return 0;
	}
	,timeSeekPageLap: function(s) {
		return 0;
	}
	,timeTell: function() {
		return 0;
	}
	,timeTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,__class__: lime_media_vorbis_VorbisFile
};
var lime_media_vorbis_VorbisInfo = function() {
};
$hxClasses["lime.media.vorbis.VorbisInfo"] = lime_media_vorbis_VorbisInfo;
lime_media_vorbis_VorbisInfo.__name__ = "lime.media.vorbis.VorbisInfo";
lime_media_vorbis_VorbisInfo.prototype = {
	__class__: lime_media_vorbis_VorbisInfo
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = "lime.net._IHTTPRequest";
lime_net__$IHTTPRequest.__isInterface__ = true;
lime_net__$IHTTPRequest.prototype = {
	__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.__backend = new lime__$internal_backend_html5_HTML5HTTPRequest();
	this.__backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = "lime.net._HTTPRequest.AbstractHTTPRequest";
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	cancel: function() {
		this.__backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = "lime.net.HTTPRequest";
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = "lime.net._HTTPRequest_Bytes";
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = "lime.net._HTTPRequest_String";
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = "lime.net.HTTPRequestHeader";
lime_net_HTTPRequestHeader.prototype = {
	__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$text_$Font = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_text_Font"] = lime_net__$HTTPRequest_$lime_$text_$Font;
lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = "lime.net._HTTPRequest_lime_text_Font";
lime_net__$HTTPRequest_$lime_$text_$Font.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_text_Font.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$text_$Font
});
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = "lime.net._HTTPRequest_lime_utils_Bytes";
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils_Bytes.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = "lime.net._HTTPRequest_openfl_utils_ByteArray";
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils_ByteArray.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = "lime.system.CFFI";
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system_CFFIPointer = {};
lime_system_CFFIPointer._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_system_CFFIPointer.get = function(this1) {
	var tmp = this1 != null;
	return 0;
};
lime_system_CFFIPointer.equals = function(a,b) {
	return lime_system_CFFIPointer.get(a) == b;
};
lime_system_CFFIPointer.equalsPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) == lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.greaterThan = function(a,b) {
	return lime_system_CFFIPointer.get(a) > b;
};
lime_system_CFFIPointer.greaterThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) > lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.greaterThanOrEqual = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= b;
};
lime_system_CFFIPointer.greaterThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.lessThan = function(a,b) {
	return lime_system_CFFIPointer.get(a) < b;
};
lime_system_CFFIPointer.lessThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) < lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.lessThanOrEqual = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= b;
};
lime_system_CFFIPointer.lessThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.notEquals = function(a,b) {
	return lime_system_CFFIPointer.get(a) != b;
};
lime_system_CFFIPointer.notEqualsPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) != lime_system_CFFIPointer.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = "lime.system.Clipboard";
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"};
lime_system_Clipboard.__update = function() {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = null;
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
};
lime_system_Clipboard.get_text = function() {
	lime_system_Clipboard.__update();
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var window1 = lime_app_Application.current.__window;
	if(window1 != null) {
		window1.__backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = "lime.system.Display";
lime_system_Display.prototype = {
	__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = "lime.system.DisplayMode";
lime_system_DisplayMode.prototype = {
	__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxEnums["lime.system.Endian"] = { __ename__ : "lime.system.Endian", __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"]
	,LITTLE_ENDIAN: {_hx_index:0,__enum__:"lime.system.Endian",toString:$estr}
	,BIG_ENDIAN: {_hx_index:1,__enum__:"lime.system.Endian",toString:$estr}
};
var lime_system_JNI = function() { };
$hxClasses["lime.system.JNI"] = lime_system_JNI;
lime_system_JNI.__name__ = "lime.system.JNI";
lime_system_JNI.callMember = function(method,jobject,a) {
	switch(a.length) {
	case 0:
		return method(jobject);
	case 1:
		return method(jobject,a[0]);
	case 2:
		return method(jobject,a[0],a[1]);
	case 3:
		return method(jobject,a[0],a[1],a[2]);
	case 4:
		return method(jobject,a[0],a[1],a[2],a[3]);
	case 5:
		return method(jobject,a[0],a[1],a[2],a[3],a[4]);
	case 6:
		return method(jobject,a[0],a[1],a[2],a[3],a[4],a[5]);
	case 7:
		return method(jobject,a[0],a[1],a[2],a[3],a[4],a[5],a[6]);
	default:
		return null;
	}
};
lime_system_JNI.callStatic = function(method,a) {
	switch(a.length) {
	case 0:
		return method();
	case 1:
		return method(a[0]);
	case 2:
		return method(a[0],a[1]);
	case 3:
		return method(a[0],a[1],a[2]);
	case 4:
		return method(a[0],a[1],a[2],a[3]);
	case 5:
		return method(a[0],a[1],a[2],a[3],a[4]);
	case 6:
		return method(a[0],a[1],a[2],a[3],a[4],a[5]);
	case 7:
		return method(a[0],a[1],a[2],a[3],a[4],a[5],a[6]);
	default:
		return null;
	}
};
lime_system_JNI.createMemberField = function(className,memberName,signature) {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createMemberMethod = function(className,memberName,signature,useArray,quietFail) {
	if(quietFail == null) {
		quietFail = false;
	}
	if(useArray == null) {
		useArray = false;
	}
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createStaticField = function(className,memberName,signature) {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createStaticMethod = function(className,memberName,signature,useArray,quietFail) {
	if(quietFail == null) {
		quietFail = false;
	}
	if(useArray == null) {
		useArray = false;
	}
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.getEnv = function() {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.init = function() {
	if(!lime_system_JNI.initialized) {
		lime_system_JNI.initialized = true;
	}
};
lime_system_JNI.onCallback = function(object,method,args) {
	var field = Reflect.field(object,method);
	if(field != null) {
		if(args == null) {
			args = [];
		}
		return field.apply(object,args);
	}
	haxe_Log.trace("onCallback - unknown field " + method,{ fileName : "lime/system/JNI.hx", lineNumber : 173, className : "lime.system.JNI", methodName : "onCallback"});
	return null;
};
lime_system_JNI.postUICallback = function(callback) {
	callback();
};
var lime_system_JNIMemberField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIMemberField"] = lime_system_JNIMemberField;
lime_system_JNIMemberField.__name__ = "lime.system.JNIMemberField";
lime_system_JNIMemberField.prototype = {
	get: function(jobject) {
		return null;
	}
	,set: function(jobject,value) {
		return value;
	}
	,__class__: lime_system_JNIMemberField
};
var lime_system_JNIStaticField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIStaticField"] = lime_system_JNIStaticField;
lime_system_JNIStaticField.__name__ = "lime.system.JNIStaticField";
lime_system_JNIStaticField.prototype = {
	get: function() {
		return null;
	}
	,set: function(value) {
		return value;
	}
	,__class__: lime_system_JNIStaticField
};
var lime_system_JNIMethod = function(method) {
	this.method = method;
};
$hxClasses["lime.system.JNIMethod"] = lime_system_JNIMethod;
lime_system_JNIMethod.__name__ = "lime.system.JNIMethod";
lime_system_JNIMethod.prototype = {
	callMember: function(args) {
		return null;
	}
	,callStatic: function(args) {
		return null;
	}
	,getMemberMethod: function(useArray) {
		if(useArray) {
			return $bind(this,this.callMember);
		} else {
			return Reflect.makeVarArgs($bind(this,this.callMember));
		}
	}
	,getStaticMethod: function(useArray) {
		if(useArray) {
			return $bind(this,this.callStatic);
		} else {
			return Reflect.makeVarArgs($bind(this,this.callStatic));
		}
	}
	,__class__: lime_system_JNIMethod
};
var lime_system_Sensor = function(type,id) {
	this.onUpdate = new lime_app__$Event_$Float_$Float_$Float_$Void();
	this.type = type;
	this.id = id;
};
$hxClasses["lime.system.Sensor"] = lime_system_Sensor;
lime_system_Sensor.__name__ = "lime.system.Sensor";
lime_system_Sensor.getSensors = function(type) {
	if(type == null) {
		return lime_system_Sensor.sensors.slice();
	} else {
		var result = [];
		var _g = 0;
		var _g1 = lime_system_Sensor.sensors;
		while(_g < _g1.length) {
			var sensor = _g1[_g];
			++_g;
			if(sensor.type == type) {
				result.push(sensor);
			}
		}
		return result;
	}
};
lime_system_Sensor.registerSensor = function(type,id) {
	var sensor = new lime_system_Sensor(type,id);
	lime_system_Sensor.sensors.push(sensor);
	lime_system_Sensor.sensorByID.h[id] = sensor;
	return sensor;
};
lime_system_Sensor.prototype = {
	__class__: lime_system_Sensor
};
var lime_system_SensorType = $hxEnums["lime.system.SensorType"] = { __ename__ : "lime.system.SensorType", __constructs__ : ["ACCELEROMETER"]
	,ACCELEROMETER: {_hx_index:0,__enum__:"lime.system.SensorType",toString:$estr}
};
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = "lime.system.System";
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_platformVersion:"get_platformVersion",get_platformName:"get_platformName",get_platformLabel:"get_platformLabel",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_deviceVendor:"get_deviceVendor",get_deviceModel:"get_deviceModel",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"};
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,config) {
	if(lime_system_System.__applicationEntryPoint == null) {
		return;
	}
	if(Object.prototype.hasOwnProperty.call(lime_system_System.__applicationEntryPoint.h,projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(config == null) {
			config = { };
		}
		if(Object.prototype.hasOwnProperty.call(config,"background") && typeof(config.background) == "string") {
			var background = StringTools.replace(Std.string(config.background),"#","");
			if(background.indexOf("0x") > -1) {
				config.background = Std.parseInt(background);
			} else {
				config.background = Std.parseInt("0x" + background);
			}
		}
		config.element = htmlElement;
		config.width = width;
		config.height = height;
		lime_system_System.__applicationEntryPoint.h[projectName](config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96 * window.devicePixelRatio;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return window.performance.now() | 0;
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) {
		window.open(path,"_blank");
	}
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__copyMissingFields = function(target,source) {
	if(source == null || target == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(target,field)) {
			target[field] = Reflect.field(source,field);
		}
	}
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.__parseBool = function(value) {
	return value == "true";
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint) {
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	lime_system_System.__applicationEntryPoint.h[projectName] = entryPoint;
};
lime_system_System.__runProcess = function(command,args) {
	return null;
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	if(lime_system_System.__applicationDirectory == null) {
		lime_system_System.__applicationDirectory = lime_system_System.__getDirectory(0);
	}
	return lime_system_System.__applicationDirectory;
};
lime_system_System.get_applicationStorageDirectory = function() {
	if(lime_system_System.__applicationStorageDirectory == null) {
		lime_system_System.__applicationStorageDirectory = lime_system_System.__getDirectory(1);
	}
	return lime_system_System.__applicationStorageDirectory;
};
lime_system_System.get_deviceModel = function() {
	var tmp = lime_system_System.__deviceModel == null;
	return lime_system_System.__deviceModel;
};
lime_system_System.get_deviceVendor = function() {
	var tmp = lime_system_System.__deviceVendor == null;
	return lime_system_System.__deviceVendor;
};
lime_system_System.get_desktopDirectory = function() {
	if(lime_system_System.__desktopDirectory == null) {
		lime_system_System.__desktopDirectory = lime_system_System.__getDirectory(2);
	}
	return lime_system_System.__desktopDirectory;
};
lime_system_System.get_documentsDirectory = function() {
	if(lime_system_System.__documentsDirectory == null) {
		lime_system_System.__documentsDirectory = lime_system_System.__getDirectory(3);
	}
	return lime_system_System.__documentsDirectory;
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.__endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint8Array(arrayBuffer,0);
			} else {
				this1 = new Uint8Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint16Array(elements);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint16Array(arrayBuffer,0);
			} else {
				this1 = new Uint16Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint16array = this1;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) {
			lime_system_System.__endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.__endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.__endianness;
};
lime_system_System.get_fontsDirectory = function() {
	if(lime_system_System.__fontsDirectory == null) {
		lime_system_System.__fontsDirectory = lime_system_System.__getDirectory(4);
	}
	return lime_system_System.__fontsDirectory;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_platformLabel = function() {
	if(lime_system_System.__platformLabel == null) {
		var name = lime_system_System.get_platformName();
		var version = lime_system_System.get_platformVersion();
		if(name != null && version != null) {
			lime_system_System.__platformLabel = name + " " + version;
		} else if(name != null) {
			lime_system_System.__platformLabel = name;
		}
	}
	return lime_system_System.__platformLabel;
};
lime_system_System.get_platformName = function() {
	if(lime_system_System.__platformName == null) {
		lime_system_System.__platformName = "HTML5";
	}
	return lime_system_System.__platformName;
};
lime_system_System.get_platformVersion = function() {
	var tmp = lime_system_System.__platformVersion == null;
	return lime_system_System.__platformVersion;
};
lime_system_System.get_userDirectory = function() {
	if(lime_system_System.__userDirectory == null) {
		lime_system_System.__userDirectory = lime_system_System.__getDirectory(5);
	}
	return lime_system_System.__userDirectory;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$Dynamic_$Void();
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = "lime.system.ThreadPool";
lime_system_ThreadPool.prototype = {
	queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxEnums["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : "lime.system._ThreadPool.ThreadPoolMessageType", __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"]
	,COMPLETE: {_hx_index:0,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,ERROR: {_hx_index:1,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,EXIT: {_hx_index:2,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,PROGRESS: {_hx_index:3,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,WORK: {_hx_index:4,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
};
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = "lime.system._ThreadPool.ThreadPoolMessage";
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Glyph = {};
lime_text_Glyph._new = function(i) {
	var this1 = i;
	return this1;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = "lime.text.GlyphMetrics";
lime_text_GlyphMetrics.prototype = {
	__class__: lime_text_GlyphMetrics
};
var lime_text_harfbuzz_HB = function() { };
$hxClasses["lime.text.harfbuzz.HB"] = lime_text_harfbuzz_HB;
lime_text_harfbuzz_HB.__name__ = "lime.text.harfbuzz.HB";
lime_text_harfbuzz_HB.shape = function(font,buffer,features) {
};
var lime_text_harfbuzz_HBBlob = {};
lime_text_harfbuzz_HBBlob.__properties__ = {get_length:"get_length",get_immutable:"get_immutable",get_dataWritable:"get_dataWritable",get_data:"get_data",get_empty:"get_empty"};
lime_text_harfbuzz_HBBlob._new = function(data,length,memoryMode) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz_HBBlob.createSubBlob = function(this1,offset,length) {
	return null;
};
lime_text_harfbuzz_HBBlob.makeImmutable = function(this1) {
};
lime_text_harfbuzz_HBBlob.get_data = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBlob.get_dataWritable = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBlob.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBBlob.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz_HBBlob.get_length = function(this1) {
	return 0;
};
var lime_text_harfbuzz_HBBuffer = {};
lime_text_harfbuzz_HBBuffer.__properties__ = {set_segmentProperties:"set_segmentProperties",get_segmentProperties:"get_segmentProperties",set_script:"set_script",get_script:"get_script",set_replacementCodepoint:"set_replacementCodepoint",get_replacementCodepoint:"get_replacementCodepoint",set_length:"set_length",get_length:"get_length",set_language:"set_language",get_language:"get_language",set_flags:"set_flags",get_flags:"get_flags",set_direction:"set_direction",get_direction:"get_direction",set_contentType:"set_contentType",get_contentType:"get_contentType",set_clusterLevel:"set_clusterLevel",get_clusterLevel:"get_clusterLevel",get_allocationSuccessful:"get_allocationSuccessful"};
lime_text_harfbuzz_HBBuffer._new = function() {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz_HBBuffer.add = function(this1,codepoint,cluster) {
};
lime_text_harfbuzz_HBBuffer.addCodepoints = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.addUTF8 = function(this1,text,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.addUTF16 = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.addUTF32 = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.clearContents = function(this1) {
};
lime_text_harfbuzz_HBBuffer.getGlyphInfo = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.getGlyphPositions = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.guessSegmentProperties = function(this1) {
};
lime_text_harfbuzz_HBBuffer.normalizeGlyphs = function(this1) {
};
lime_text_harfbuzz_HBBuffer.preallocate = function(this1,size) {
	return false;
};
lime_text_harfbuzz_HBBuffer.reset = function(this1) {
};
lime_text_harfbuzz_HBBuffer.reverse = function(this1) {
};
lime_text_harfbuzz_HBBuffer.reverseClusters = function(this1) {
};
lime_text_harfbuzz_HBBuffer.get_allocationSuccessful = function(this1) {
	return false;
};
lime_text_harfbuzz_HBBuffer.get_clusterLevel = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_clusterLevel = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_contentType = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_contentType = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_direction = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_direction = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBBuffer.get_flags = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_flags = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_language = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.set_language = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_length = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_length = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_replacementCodepoint = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_replacementCodepoint = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_script = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_script = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_segmentProperties = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.set_segmentProperties = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBFTFont = {};
lime_text_harfbuzz_HBFTFont.__properties__ = {set_loadFlags:"set_loadFlags",get_loadFlags:"get_loadFlags"};
lime_text_harfbuzz_HBFTFont._new = function(font) {
	var this1;
	if(font.src != null) {
		this1 = null;
	} else {
		this1 = null;
	}
	return this1;
};
lime_text_harfbuzz_HBFTFont.get_loadFlags = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFTFont.set_loadFlags = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBFace = {};
lime_text_harfbuzz_HBFace.__properties__ = {set_upem:"set_upem",get_upem:"get_upem",set_index:"set_index",get_index:"get_index",get_immutable:"get_immutable",set_glyphCount:"set_glyphCount",get_glyphCount:"get_glyphCount",get_empty:"get_empty"};
lime_text_harfbuzz_HBFace._new = function(blob,index) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz_HBFace.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBFace.get_glyphCount = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFace.set_glyphCount = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBFace.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz_HBFace.get_index = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFace.set_index = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBFace.get_upem = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFace.set_upem = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBFeature = function() {
};
$hxClasses["lime.text.harfbuzz.HBFeature"] = lime_text_harfbuzz_HBFeature;
lime_text_harfbuzz_HBFeature.__name__ = "lime.text.harfbuzz.HBFeature";
lime_text_harfbuzz_HBFeature.prototype = {
	__class__: lime_text_harfbuzz_HBFeature
};
var lime_text_harfbuzz_HBFont = {};
lime_text_harfbuzz_HBFont.__properties__ = {set_scale:"set_scale",get_scale:"get_scale",set_ppem:"set_ppem",get_ppem:"get_ppem",get_parent:"get_parent",get_immutable:"get_immutable",get_face:"get_face",get_empty:"get_empty"};
lime_text_harfbuzz_HBFont._new = function(face) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz_HBFont.addGlyphOriginForDirection = function(this1,glyph,direction,x,y) {
};
lime_text_harfbuzz_HBFont.createSubFont = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.getGlyphAdvanceForDirection = function(this1,glyph,direction) {
	return null;
};
lime_text_harfbuzz_HBFont.getGlyphKerningForDirection = function(this1,glyph,firstGlyph,secondGlyph,direction) {
	return null;
};
lime_text_harfbuzz_HBFont.getGlyphOriginForDirection = function(this1,glyph,direction) {
	return null;
};
lime_text_harfbuzz_HBFont.glyphFromString = function(this1,s) {
	return 0;
};
lime_text_harfbuzz_HBFont.glyphToString = function(this1,codepoint) {
	return null;
};
lime_text_harfbuzz_HBFont.makeImmutable = function(this1) {
};
lime_text_harfbuzz_HBFont.subtractGlyphOriginForDirection = function(this1,glyph,direction,x,y) {
};
lime_text_harfbuzz_HBFont.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBFont.get_face = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz_HBFont.get_parent = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.get_ppem = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.set_ppem = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBFont.get_scale = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.set_scale = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBGlyphInfo = function() {
};
$hxClasses["lime.text.harfbuzz.HBGlyphInfo"] = lime_text_harfbuzz_HBGlyphInfo;
lime_text_harfbuzz_HBGlyphInfo.__name__ = "lime.text.harfbuzz.HBGlyphInfo";
lime_text_harfbuzz_HBGlyphInfo.prototype = {
	__class__: lime_text_harfbuzz_HBGlyphInfo
};
var lime_text_harfbuzz_HBGlyphPosition = function() {
};
$hxClasses["lime.text.harfbuzz.HBGlyphPosition"] = lime_text_harfbuzz_HBGlyphPosition;
lime_text_harfbuzz_HBGlyphPosition.__name__ = "lime.text.harfbuzz.HBGlyphPosition";
lime_text_harfbuzz_HBGlyphPosition.prototype = {
	__class__: lime_text_harfbuzz_HBGlyphPosition
};
var lime_text_harfbuzz_HBLanguage = {};
lime_text_harfbuzz_HBLanguage._new = function(language) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz_HBLanguage.toString = function(this1) {
	return null;
};
lime_text_harfbuzz_HBLanguage.fromString = function(value) {
	return lime_text_harfbuzz_HBLanguage._new(value);
};
var lime_text_harfbuzz_HBSegmentProperties = function() {
};
$hxClasses["lime.text.harfbuzz.HBSegmentProperties"] = lime_text_harfbuzz_HBSegmentProperties;
lime_text_harfbuzz_HBSegmentProperties.__name__ = "lime.text.harfbuzz.HBSegmentProperties";
lime_text_harfbuzz_HBSegmentProperties.prototype = {
	__class__: lime_text_harfbuzz_HBSegmentProperties
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = "lime.ui.Gamepad";
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui_GamepadAxis = {};
lime_ui_GamepadAxis.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_GamepadButton = {};
lime_ui_GamepadButton.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = "lime.ui.Joystick";
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui_JoystickHatPosition = {};
lime_ui_JoystickHatPosition.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"};
lime_ui_JoystickHatPosition._new = function(value) {
	var this1 = value;
	return this1;
};
lime_ui_JoystickHatPosition.get_center = function(this1) {
	return this1 == 0;
};
lime_ui_JoystickHatPosition.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui_JoystickHatPosition.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435455 - 4;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui_JoystickHatPosition.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435455 - 8;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui_JoystickHatPosition.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435455 - 2;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui_JoystickHatPosition.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435455 - 1;
	}
	return value;
};
var lime_ui_KeyCode = {};
lime_ui_KeyCode.fromScanCode = function(scanCode) {
	return 0;
};
lime_ui_KeyCode.toScanCode = function(keyCode) {
	return 0;
};
lime_ui_KeyCode.gt = function(a,b) {
	return a > b;
};
lime_ui_KeyCode.gte = function(a,b) {
	return a >= b;
};
lime_ui_KeyCode.lt = function(a,b) {
	return a < b;
};
lime_ui_KeyCode.lte = function(a,b) {
	return a <= b;
};
lime_ui_KeyCode.plus = function(a,b) {
	return a + b;
};
var lime_ui_KeyModifier = {};
lime_ui_KeyModifier.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"};
lime_ui_KeyModifier.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268435455 - 768;
	}
	return value;
};
lime_ui_KeyModifier.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268435455 - 8192;
	}
	return value;
};
lime_ui_KeyModifier.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435455 - 192;
	}
	return value;
};
lime_ui_KeyModifier.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268435455 - 3072;
	}
	return value;
};
lime_ui_KeyModifier.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268435455 - 4096;
	}
	return value;
};
lime_ui_KeyModifier.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435455 - 3;
	}
	return value;
};
var lime_ui_MouseCursor = $hxEnums["lime.ui.MouseCursor"] = { __ename__ : "lime.ui.MouseCursor", __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"]
	,ARROW: {_hx_index:0,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CROSSHAIR: {_hx_index:1,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,DEFAULT: {_hx_index:2,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,MOVE: {_hx_index:3,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,POINTER: {_hx_index:4,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NESW: {_hx_index:5,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NS: {_hx_index:6,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NWSE: {_hx_index:7,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_WE: {_hx_index:8,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,TEXT: {_hx_index:9,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT: {_hx_index:10,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT_ARROW: {_hx_index:11,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CUSTOM: {_hx_index:12,__enum__:"lime.ui.MouseCursor",toString:$estr}
};
var lime_ui_MouseWheelMode = $hxEnums["lime.ui.MouseWheelMode"] = { __ename__ : "lime.ui.MouseWheelMode", __constructs__ : ["PIXELS","LINES","PAGES","UNKNOWN"]
	,PIXELS: {_hx_index:0,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,LINES: {_hx_index:1,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,PAGES: {_hx_index:2,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,UNKNOWN: {_hx_index:3,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
};
var lime_ui_ScanCode = {};
lime_ui_ScanCode.fromKeyCode = function(keyCode) {
	return lime_ui_KeyCode.toScanCode(keyCode);
};
lime_ui_ScanCode.toKeyCode = function(scanCode) {
	return lime_ui_KeyCode.fromScanCode(scanCode);
};
lime_ui_ScanCode.gt = function(a,b) {
	return a > b;
};
lime_ui_ScanCode.gte = function(a,b) {
	return a >= b;
};
lime_ui_ScanCode.lt = function(a,b) {
	return a < b;
};
lime_ui_ScanCode.lte = function(a,b) {
	return a <= b;
};
lime_ui_ScanCode.plus = function(a,b) {
	return a + b;
};
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = "lime.ui.Touch";
lime_ui_Touch.prototype = {
	__class__: lime_ui_Touch
};
var lime_ui_Window = function(application,attributes) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onRenderContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onRenderContextLost = new lime_app__$Event_$Void_$Void();
	this.onRender = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onMaximize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onExpose = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.application = application;
	this.__attributes = attributes != null ? attributes : { };
	if(Object.prototype.hasOwnProperty.call(this.__attributes,"parameters")) {
		this.parameters = this.__attributes.parameters;
	}
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	this.__backend = new lime__$internal_backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = "lime.ui.Window";
lime_ui_Window.prototype = {
	alert: function(message,title) {
		this.__backend.alert(message,title);
	}
	,close: function() {
		this.__backend.close();
	}
	,focus: function() {
		this.__backend.focus();
	}
	,move: function(x,y) {
		this.__backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,readPixels: function(rect) {
		return this.__backend.readPixels(rect);
	}
	,resize: function(width,height) {
		this.__backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
		this.__backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,warpMouse: function(x,y) {
		this.__backend.warpMouse(x,y);
	}
	,get_cursor: function() {
		return this.__backend.getCursor();
	}
	,set_cursor: function(value) {
		return this.__backend.setCursor(value);
	}
	,get_display: function() {
		return this.__backend.getDisplay();
	}
	,get_displayMode: function() {
		return this.__backend.getDisplayMode();
	}
	,set_displayMode: function(value) {
		return this.__backend.setDisplayMode(value);
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.__backend.setBorderless(value);
	}
	,get_frameRate: function() {
		return this.__backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.__backend.setFrameRate(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.__backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_hidden: function() {
		return this.__hidden;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.__backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.__backend.setMinimized(value);
	}
	,get_mouseLock: function() {
		return this.__backend.getMouseLock();
	}
	,set_mouseLock: function(value) {
		this.__backend.setMouseLock(value);
		return value;
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.__backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_textInputEnabled: function() {
		return this.__backend.getTextInputEnabled();
	}
	,set_textInputEnabled: function(value) {
		return this.__backend.setTextInputEnabled(value);
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.__backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",set_textInputEnabled:"set_textInputEnabled",get_textInputEnabled:"get_textInputEnabled",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_mouseLock:"set_mouseLock",get_mouseLock:"get_mouseLock",set_minimized:"set_minimized",get_minimized:"get_minimized",set_maximized:"set_maximized",get_maximized:"get_maximized",get_hidden:"get_hidden",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_displayMode:"set_displayMode",get_displayMode:"get_displayMode",get_display:"get_display",set_cursor:"set_cursor",get_cursor:"get_cursor",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxEnums["lime.utils.TAError"] = { __ename__ : "lime.utils.TAError", __constructs__ : ["RangeError"]
	,RangeError: {_hx_index:0,__enum__:"lime.utils.TAError",toString:$estr}
};
var lime_utils_AssetBundle = function() {
	this.data = new haxe_ds_StringMap();
	this.paths = [];
};
$hxClasses["lime.utils.AssetBundle"] = lime_utils_AssetBundle;
lime_utils_AssetBundle.__name__ = "lime.utils.AssetBundle";
lime_utils_AssetBundle.fromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	return lime_utils_AssetBundle.__extractBundle(input);
};
lime_utils_AssetBundle.fromFile = function(path) {
	return null;
};
lime_utils_AssetBundle.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_AssetBundle.fromBytes(bytes));
};
lime_utils_AssetBundle.loadFromFile = function(path) {
	return lime_utils_Bytes.loadFromFile(path).then(lime_utils_AssetBundle.loadFromBytes);
};
lime_utils_AssetBundle.__extractBundle = function(input) {
	var entries = haxe_zip_Reader.readZip(input);
	var bundle = new lime_utils_AssetBundle();
	var _g_head = entries.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var entry = val;
		if(entry.compressed) {
			var bytes = entry.data;
			var this1 = bundle.data;
			var key = entry.fileName;
			var value = lime_utils_Bytes.decompress(bytes,lime_utils_CompressionAlgorithm.DEFLATE);
			this1.h[key] = value;
		} else {
			bundle.data.h[entry.fileName] = entry.data;
		}
		bundle.paths.push(entry.fileName);
	}
	return bundle;
};
lime_utils_AssetBundle.prototype = {
	__class__: lime_utils_AssetBundle
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 638989;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = "lime.utils.AssetCache";
lime_utils_AssetCache.prototype = {
	exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.image.h,id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.font.h,id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.audio.h,id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.h[id] = asset;
			break;
		case "IMAGE":
			if(!((asset) instanceof lime_graphics_Image)) {
				throw haxe_Exception.thrown("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.h[id] = asset;
			break;
		case "MUSIC":case "SOUND":
			if(!((asset) instanceof lime_media_AudioBuffer)) {
				throw haxe_Exception.thrown("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.h[id] = asset;
			break;
		default:
			throw haxe_Exception.thrown(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = haxe_ds_StringMap.keysIterator(this.audio.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					var _this = this.audio;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
			}
			var keys = haxe_ds_StringMap.keysIterator(this.font.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					var _this = this.font;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
			}
			var keys = haxe_ds_StringMap.keysIterator(this.image.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					var _this = this.image;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = "lime.utils.AssetLibrary";
lime_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
lime_utils_AssetLibrary.fromBundle = function(bundle) {
	if(Object.prototype.hasOwnProperty.call(bundle.data.h,"library.json")) {
		var manifest = lime_utils_AssetManifest.fromBytes(bundle.data.h["library.json"]);
		if(manifest != null) {
			var library = null;
			if(manifest.libraryType == null) {
				library = new lime_utils_AssetLibrary();
			} else {
				var name = manifest.libraryType;
				var libraryClass = $hxClasses[name];
				if(libraryClass != null) {
					library = Type.createInstance(libraryClass,manifest.libraryArgs);
				} else {
					lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 122, className : "lime.utils.AssetLibrary", methodName : "fromBundle"});
					return null;
				}
			}
			library.__fromBundle(bundle,manifest);
			return library;
		}
	} else {
		var library = new lime_utils_AssetLibrary();
		library.__fromBundle(bundle);
		return library;
	}
	return null;
};
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var name = manifest.libraryType;
		var libraryClass = $hxClasses[name];
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 160, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(bytes,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load();
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
lime_utils_AssetLibrary.prototype = {
	exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var assetType = this.types.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		case "TEXT":
			return this.getText(id);
		default:
			throw haxe_Exception.thrown("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return this.cachedAudioBuffers.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes));
		} else {
			return lime_media_AudioBuffer.fromFile(this.paths.h[id]);
		}
	}
	,getBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return this.cachedBytes.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			var bytes = lime_utils_Bytes.ofString(this.cachedText.h[id]);
			this.cachedBytes.h[id] = bytes;
			return bytes;
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes);
		} else {
			return lime_utils_Bytes.fromFile(this.paths.h[id]);
		}
	}
	,getFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return this.cachedFonts.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_text_Font);
		} else {
			return lime_text_Font.fromFile(this.paths.h[id]);
		}
	}
	,getImage: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return this.cachedImages.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_graphics_Image);
		} else {
			return lime_graphics_Image.fromFile(this.paths.h[id]);
		}
	}
	,getPath: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.paths.h,id)) {
			return this.paths.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			return this.pathGroups.h[id][0];
		} else {
			return null;
		}
	}
	,getText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return this.cachedText.h[id];
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return true;
		}
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		if(requestedType == null) {
			if(!Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
				return Object.prototype.hasOwnProperty.call(this.cachedText.h,id);
			} else {
				return true;
			}
		} else {
			switch(requestedType) {
			case "FONT":
				return Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id);
			case "IMAGE":
				return Object.prototype.hasOwnProperty.call(this.cachedImages.h,id);
			case "MUSIC":case "SOUND":
				return Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id);
			default:
				if(!Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
					return Object.prototype.hasOwnProperty.call(this.cachedText.h,id);
				} else {
					return true;
				}
			}
		}
	}
	,list: function(type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var items = [];
		var id = haxe_ds_StringMap.keysIterator(this.types.h);
		while(id.hasNext()) {
			var id1 = id.next();
			if(requestedType == null || this.exists(id1,type)) {
				items.push(id1);
			}
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to load template: " + id);
		case "TEXT":
			return this.loadText(id);
		default:
			throw haxe_Exception.thrown("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var id = haxe_ds_StringMap.keysIterator(this.preload.h);
			while(id.hasNext()) {
				var id1 = id.next();
				if(!this.preload.h[id1]) {
					continue;
				}
				lime_utils_Log.verbose("Preloading asset: " + id1 + " [" + this.types.h[id1] + "]",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 405, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.h[id1];
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id1);
						future.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future.onComplete((function(id,_g) {
							return function(bytes) {
								_g[0](id[0],bytes);
							};
						})([id1],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id1);
						future1.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id,_g) {
							return function(font) {
								_g[0](id[0],font);
							};
						})([id1],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id1);
						future2.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id,_g) {
							return function(image) {
								_g[0](id[0],image);
							};
						})([id1],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id1);
						future3.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onError)]));
						future3.onComplete((function(id,_g) {
							return function(audioBuffer) {
								_g[0](id[0],audioBuffer);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id1);
						future4.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id,_g) {
							return function(text) {
								_g[0](id[0],text);
							};
						})([id1],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return lime_app_Future.withValue(this.cachedAudioBuffers.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			return lime_media_AudioBuffer.loadFromFiles(this.pathGroups.h[id]);
		} else {
			return lime_media_AudioBuffer.loadFromFile(this.paths.h[id]);
		}
	}
	,loadBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_app_Future.withValue(this.cachedBytes.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else {
			return lime_utils_Bytes.loadFromFile(this.paths.h[id]);
		}
	}
	,loadFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return lime_app_Future.withValue(this.cachedFonts.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var font = Type.createInstance(this.classTypes.h[id],[]);
			return font.__loadFromName(font.name);
		} else {
			return lime_text_Font.loadFromName(this.paths.h[id]);
		}
	}
	,loadImage: function(id) {
		var _gthis = this;
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return lime_app_Future.withValue(this.cachedImages.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_graphics_Image.loadFromBytes(this.cachedBytes.h[id]).then(function(image) {
				var _this = _gthis.cachedBytes;
				if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
					delete(_this.h[id]);
				}
				_gthis.cachedImages.h[id] = image;
				return lime_app_Future.withValue(image);
			});
		} else {
			return lime_graphics_Image.loadFromFile(this.paths.h[id]);
		}
	}
	,loadText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return lime_app_Future.withValue(this.cachedText.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id) || Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return lime_app_Future.withValue(null);
			} else {
				var text = bytes.getString(0,bytes.length);
				this.cachedText.h[id] = text;
				return lime_app_Future.withValue(text);
			}
		} else {
			var request = new lime_net__$HTTPRequest_$String();
			return request.load(this.paths.h[id]);
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + this.types.h[id] + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 619, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var size = Object.prototype.hasOwnProperty.call(this.sizes.h,id) ? this.sizes.h[id] : 0;
			if(!Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				this.bytesLoaded += size;
			} else {
				var cache = this.bytesLoadedCache.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			this.bytesLoadedCache.h[id] = size;
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		return lime_utils_Assets.__cacheBreak(path);
	}
	,__fromBundle: function(bundle,manifest) {
		if(manifest != null) {
			var id;
			var data;
			var type;
			var _g = 0;
			var _g1 = manifest.assets;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
				data = bundle.data.h[asset.path];
				if(Object.prototype.hasOwnProperty.call(asset,"type")) {
					type = asset.type;
					if(type == "TEXT") {
						this.cachedText.h[id] = data != null ? Std.string(data) : null;
					} else {
						this.cachedBytes.h[id] = data;
					}
					this.types.h[id] = asset.type;
				} else {
					this.cachedBytes.h[id] = data;
					this.types.h[id] = "BINARY";
				}
			}
		} else {
			var _g = 0;
			var _g1 = bundle.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				this.cachedBytes.h[path] = bundle.data.h[path];
				this.types.h[path] = "BINARY";
			}
		}
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			size = hasSize && Object.prototype.hasOwnProperty.call(asset,"size") ? asset.size : 100;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(this.__resolvePath(basePath + Std.string(Reflect.field(asset,"path"))));
				this1.h[id] = value;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g2 = 0;
				var _g3 = pathGroup.length;
				while(_g2 < _g3) {
					var i = _g2++;
					pathGroup[i] = this.__cacheBreak(this.__resolvePath(basePath + pathGroup[i]));
				}
				this.pathGroups.h[id] = pathGroup;
			}
			this.sizes.h[id] = size;
			this.types.h[id] = asset.type;
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				this.preload.h[id] = Reflect.field(asset,"preload");
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				var name = Reflect.field(asset,"className");
				classRef = $hxClasses[name];
				this.classTypes.h[id] = classRef;
			}
		}
		this.bytesTotal = 0;
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(this.preload.h,id) && this.preload.h[id] && Object.prototype.hasOwnProperty.call(this.sizes.h,id)) {
				this.bytesTotal += this.sizes.h[id];
			}
		}
	}
	,__resolvePath: function(path) {
		path = StringTools.replace(path,"\\","/");
		var colonIdx = path.indexOf(":");
		if(StringTools.startsWith(path,"http") && colonIdx > 0) {
			var lastSlashIdx = colonIdx + 3;
			var httpSection = HxOverrides.substr(path,0,lastSlashIdx);
			path = httpSection + StringTools.replace(HxOverrides.substr(path,lastSlashIdx,null),"//","/");
		} else {
			path = StringTools.replace(path,"//","/");
		}
		if(path.indexOf("./") > -1) {
			var split = path.split("/");
			var newPath = [];
			var _g = 0;
			var _g1 = split.length;
			while(_g < _g1) {
				var i = _g++;
				if(split[i] == "..") {
					if(i == 0 || newPath[i - 1] == "..") {
						newPath.push("..");
					} else {
						newPath.pop();
					}
				} else if(split[i] == ".") {
					if(i == 0) {
						newPath.push(".");
					}
				} else {
					newPath.push(split[i]);
				}
			}
			path = newPath.join("/");
		}
		return path;
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		this.cachedAudioBuffers.h[id] = audioBuffer;
		if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			var pathGroup = this.pathGroups.h[id];
			var otherID = haxe_ds_StringMap.keysIterator(this.pathGroups.h);
			while(otherID.hasNext()) {
				var otherID1 = otherID.next();
				if(otherID1 == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					if(this.pathGroups.h[otherID1].indexOf(path) > -1) {
						this.cachedAudioBuffers.h[otherID1] = audioBuffer;
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadAudioBuffer_onError: function(id,message) {
		if(message != null && message != "") {
			lime_utils_Log.warn("Could not load \"" + id + "\": " + Std.string(message),{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 865, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		} else {
			lime_utils_Log.warn("Could not load \"" + id + "\"",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 869, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		}
		this.loadAudioBuffer_onComplete(id,new lime_media_AudioBuffer());
	}
	,loadBytes_onComplete: function(id,bytes) {
		this.cachedBytes.h[id] = bytes;
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		this.cachedFonts.h[id] = font;
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		this.cachedImages.h[id] = image;
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		this.cachedText.h[id] = text;
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var size = this.sizes.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			if(Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				var cache = this.bytesLoadedCache.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			this.bytesLoadedCache.h[id] = bytesLoaded;
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = "lime.utils.AssetManifest";
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_AssetManifest.fromBytes(lime_utils_Bytes.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_Bytes.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	if(Object.prototype.hasOwnProperty.call(manifestData,"name")) {
		manifest.name = manifestData.name;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryType")) {
		manifest.libraryType = manifestData.libraryType;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryArgs")) {
		manifest.libraryArgs = manifestData.libraryArgs;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"assets")) {
		var assets = manifestData.assets;
		if(Object.prototype.hasOwnProperty.call(manifestData,"version") && manifestData.version <= 2) {
			manifest.assets = haxe_Unserializer.run(assets);
		} else {
			manifest.assets = assets;
		}
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"rootPath")) {
		manifest.rootPath = manifestData.rootPath;
	}
	if(rootPath != null && rootPath != "") {
		if(manifest.rootPath == null || manifest.rootPath == "") {
			manifest.rootPath = rootPath;
		} else {
			manifest.rootPath = rootPath + "/" + manifest.rootPath;
		}
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	basePath = StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	rootPath = StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		manifestData.rootPath = this.rootPath;
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = "lime.utils.Assets";
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.h[id];
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "lime/utils/Assets.hx", lineNumber : 133, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 138, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 143, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	return lime_utils_Assets.libraries.h[name];
};
lime_utils_Assets.getPath = function(id) {
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,null)) {
			return symbol_library.getPath(symbol_symbolName);
		} else {
			lime_utils_Log.error("There is no asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 224, className : "lime.utils.Assets", methodName : "getPath"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 229, className : "lime.utils.Assets", methodName : "getPath"});
	}
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.hasLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	return Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraries.h,name);
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var library = haxe_ds_StringMap.valueIterator(lime_utils_Assets.libraries.h);
	while(library.hasNext()) {
		var library1 = library.next();
		var libraryItems = library1.list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.h[id];
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError(lime_utils_Assets.__libraryNotFound(symbol_libraryName));
	}
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.bundlePaths.h,id)) {
		lime_utils_AssetBundle.loadFromFile(lime_utils_Assets.bundlePaths.h[id]).onComplete(function(bundle) {
			if(bundle == null) {
				promise.error("Cannot load bundle for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromBundle(bundle);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	} else {
		if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraryPaths.h,id)) {
			path = lime_utils_Assets.libraryPaths.h[id];
			rootPath = haxe_io_Path.directory(path);
		} else {
			if(StringTools.endsWith(path,".bundle")) {
				rootPath = path;
				path += "/library.json";
			} else {
				rootPath = haxe_io_Path.directory(path);
			}
			path = lime_utils_Assets.__cacheBreak(path);
		}
		lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
			if(manifest == null) {
				promise.error("Cannot parse asset manifest for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	}
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	return lime_utils_Assets.loadAsset(id,"TEXT",false);
};
lime_utils_Assets.registerLibrary = function(name,library) {
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraries.h,name)) {
		if(lime_utils_Assets.libraries.h[name] == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	lime_utils_Assets.libraries.h[name] = library;
};
lime_utils_Assets.unloadLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var library = lime_utils_Assets.libraries.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	var _this = lime_utils_Assets.libraries;
	if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
		delete(_this.h[name]);
	}
};
lime_utils_Assets.__cacheBreak = function(path) {
	if(lime_utils_Assets.cache.version > 0) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
	}
	return path;
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = "lime.utils._Assets.LibrarySymbol";
lime_utils__$Assets_LibrarySymbol.prototype = {
	isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils_BytePointer = {};
lime_utils_BytePointer._new = function(bytes,offset) {
	if(offset == null) {
		offset = 0;
	}
	var this1 = new lime_utils_BytePointerData(bytes,offset);
	return this1;
};
lime_utils_BytePointer.set = function(this1,bytes,bufferView,buffer,offset) {
	if(buffer != null) {
		bytes = haxe_io_Bytes.ofData(buffer);
	}
	if(bytes != null || bufferView == null) {
		this1.bytes = bytes;
		this1.offset = offset != null ? offset : 0;
	} else {
		this1.bytes = haxe_io_Bytes.ofData(bufferView.buffer);
		this1.offset = offset != null ? bufferView.byteOffset + offset : bufferView.byteOffset;
	}
};
lime_utils_BytePointer.__arrayGet = function(this1,index) {
	if(this1.bytes != null) {
		return this1.bytes.b[index + this1.offset];
	} else {
		return 0;
	}
};
lime_utils_BytePointer.__arraySet = function(this1,index,value) {
	if(this1.bytes == null) {
		this1.bytes.b[index + this1.offset] = value & 255;
	}
	return value;
};
lime_utils_BytePointer.fromArrayBufferView = function(arrayBufferView) {
	if(arrayBufferView == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(arrayBufferView.buffer),arrayBufferView.byteOffset);
};
lime_utils_BytePointer.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(buffer),0);
};
lime_utils_BytePointer.fromBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils_BytePointer.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return new lime_utils_BytePointerData(null,0);
	} else {
		return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(bytesData),0);
	}
};
lime_utils_BytePointer.fromFile = function(path) {
	return new lime_utils_BytePointerData(lime_utils_Bytes.fromFile(path),0);
};
lime_utils_BytePointer.fromLimeBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils_BytePointer.toUInt8Array = function(bytePointer) {
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer,byteoffset);
		} else {
			this1 = new Uint8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt8ClampedArray = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8ClampedArray(elements);
	} else if(array != null) {
		this1 = new Uint8ClampedArray(array);
	} else if(vector != null) {
		this1 = new Uint8ClampedArray(vector.__array);
	} else if(view != null) {
		this1 = new Uint8ClampedArray(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8ClampedArray(buffer,byteoffset);
		} else {
			this1 = new Uint8ClampedArray(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt8Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int8Array(elements);
	} else if(array != null) {
		this1 = new Int8Array(array);
	} else if(vector != null) {
		this1 = new Int8Array(vector.__array);
	} else if(view != null) {
		this1 = new Int8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int8Array(buffer,byteoffset);
		} else {
			this1 = new Int8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint16Array(elements);
	} else if(array != null) {
		this1 = new Uint16Array(array);
	} else if(vector != null) {
		this1 = new Uint16Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint16Array(buffer,byteoffset);
		} else {
			this1 = new Uint16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int16Array(elements);
	} else if(array != null) {
		this1 = new Int16Array(array);
	} else if(vector != null) {
		this1 = new Int16Array(vector.__array);
	} else if(view != null) {
		this1 = new Int16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int16Array(buffer,byteoffset);
		} else {
			this1 = new Int16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint32Array(elements);
	} else if(array != null) {
		this1 = new Uint32Array(array);
	} else if(vector != null) {
		this1 = new Uint32Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint32Array(buffer,byteoffset);
		} else {
			this1 = new Uint32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int32Array(elements);
	} else if(array != null) {
		this1 = new Int32Array(array);
	} else if(vector != null) {
		this1 = new Int32Array(vector.__array);
	} else if(view != null) {
		this1 = new Int32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int32Array(buffer,byteoffset);
		} else {
			this1 = new Int32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toFloat32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,byteoffset);
		} else {
			this1 = new Float32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toFloat64Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 64 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float64Array(elements);
	} else if(array != null) {
		this1 = new Float64Array(array);
	} else if(vector != null) {
		this1 = new Float64Array(vector.__array);
	} else if(view != null) {
		this1 = new Float64Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float64Array(buffer,byteoffset);
		} else {
			this1 = new Float64Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = "lime.utils.BytePointerData";
lime_utils_BytePointerData.prototype = {
	__class__: lime_utils_BytePointerData
};
var lime_utils_Bytes = {};
lime_utils_Bytes._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
lime_utils_Bytes.compress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.compress(this1);
	case 1:
		return lime__$internal_format_GZip.compress(this1);
	case 2:
		return lime__$internal_format_LZMA.compress(this1);
	case 3:
		return lime__$internal_format_Zlib.compress(this1);
	}
};
lime_utils_Bytes.decompress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.decompress(this1);
	case 1:
		return lime__$internal_format_GZip.decompress(this1);
	case 2:
		return lime__$internal_format_LZMA.decompress(this1);
	case 3:
		return lime__$internal_format_Zlib.decompress(this1);
	}
};
lime_utils_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils_Bytes.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fromFile = function(path) {
	return null;
};
lime_utils_Bytes.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_Bytes.fromBytes(bytes));
};
lime_utils_Bytes.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils_Bytes.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils_CompressionAlgorithm = $hxEnums["lime.utils.CompressionAlgorithm"] = { __ename__ : "lime.utils.CompressionAlgorithm", __constructs__ : ["DEFLATE","GZIP","LZMA","ZLIB"]
	,DEFLATE: {_hx_index:0,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,GZIP: {_hx_index:1,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,LZMA: {_hx_index:2,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,ZLIB: {_hx_index:3,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
};
var lime_utils_DataPointer = {};
lime_utils_DataPointer._new = function(data) {
	var this1 = data;
	return this1;
};
lime_utils_DataPointer.fromFloat = function(value) {
	return value;
};
lime_utils_DataPointer.fromBytesPointer = function(pointer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromArrayBufferView = function(arrayBufferView) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromArrayBuffer = function(buffer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromBytes = function(bytes) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromBytesData = function(bytesData) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromLimeBytes = function(bytes) {
	return lime_utils_DataPointer.fromBytes(bytes);
};
lime_utils_DataPointer.fromCFFIPointer = function(pointer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromFile = function(path) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.__withOffset = function(data,offset) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.equals = function(a,b) {
	return a == b;
};
lime_utils_DataPointer.equalsPointer = function(a,b) {
	return a == b;
};
lime_utils_DataPointer.greaterThan = function(a,b) {
	return a > b;
};
lime_utils_DataPointer.greaterThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) > lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.greaterThanOrEqual = function(a,b) {
	return a >= b;
};
lime_utils_DataPointer.greaterThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.lessThan = function(a,b) {
	return a < b;
};
lime_utils_DataPointer.lessThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) < lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.lessThanOrEqual = function(a,b) {
	return a <= b;
};
lime_utils_DataPointer.lessThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.notEquals = function(a,b) {
	return a != b;
};
lime_utils_DataPointer.notEqualsPointer = function(a,b) {
	return a != b;
};
lime_utils_DataPointer.plus = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,b);
};
lime_utils_DataPointer.plusPointer = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,b | 0);
};
lime_utils_DataPointer.minus = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,-b);
};
lime_utils_DataPointer.minusPointer = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,-(b | 0));
};
var lime_utils_Float32Array = {};
lime_utils_Float32Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Float32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Float32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Float32Array.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Float64Array = {};
lime_utils_Float64Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Float64Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float64Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float64Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float64Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Float64Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Float64Array.toString = function(this1) {
	if(this1 != null) {
		return "Float64Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int16Array = {};
lime_utils_Int16Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Int16Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int16Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int16Array.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int32Array = {};
lime_utils_Int32Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Int32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int32Array.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int8Array = {};
lime_utils_Int8Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Int8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	return new Int8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int8Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int8Array.toString = function(this1) {
	if(this1 != null) {
		return "Int8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = "lime.utils.Log";
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) {
		console.debug("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + Std.string(message);
		if(lime_utils_Log.throwErrors) {
			throw haxe_Exception.thrown(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.info("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		var message1 = "[" + info.className + "] " + Std.string(message);
		console.log(message1);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + Std.string(message));
	}
};
var lime_utils_LogLevel = {};
lime_utils_LogLevel.gt = function(a,b) {
	return a > b;
};
lime_utils_LogLevel.gte = function(a,b) {
	return a >= b;
};
lime_utils_LogLevel.lt = function(a,b) {
	return a < b;
};
lime_utils_LogLevel.lte = function(a,b) {
	return a <= b;
};
var lime_utils_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.utils.Preloader"] = lime_utils_Preloader;
lime_utils_Preloader.__name__ = "lime.utils.Preloader";
lime_utils_Preloader.prototype = {
	addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = [_g1[_g]];
			++_g;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "lime/utils/Preloader.hx", lineNumber : 132, className : "lime.utils.Preloader", methodName : "load"});
			library[0].load().onProgress((function(library) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library)).onComplete((function(library) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += library[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library[0].bytesTotal - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 168, className : "lime.utils.Preloader", methodName : "load"});
				};
			})());
		}
		var _g = 0;
		var _g1 = this.libraryNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 195, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 199, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete || this.simulateProgress || !this.preloadComplete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "lime/utils/Preloader.hx", lineNumber : 236, className : "lime.utils.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name) {
					return function(loaded,total) {
						if(total > 0) {
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
								_gthis.bytesTotalCache.h[name[0]] = total;
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
								_gthis.bytesLoaded += loaded;
							} else {
								_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache2.h[name[0]];
							}
							_gthis.bytesLoadedCache2.h[name[0]] = loaded;
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name) {
					return function(library) {
						var total = 200;
						if(Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
							total = _gthis.bytesTotalCache.h[name[0]];
						}
						if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
							_gthis.bytesLoaded += total;
						} else {
							_gthis.bytesLoaded += total - _gthis.bytesLoadedCache2.h[name[0]];
						}
						_gthis.loadedAssetLibrary(name[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 290, className : "lime.utils.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "lime/utils/Preloader.hx", lineNumber : 301, className : "lime.utils.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_utils_Preloader
};
var lime_utils_UInt16Array = {};
lime_utils_UInt16Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt16Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt16Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt16Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt32Array = {};
lime_utils_UInt32Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt32Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt8Array = {};
lime_utils_UInt8Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt8Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt8Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt8ClampedArray = {};
lime_utils_UInt8ClampedArray.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt8ClampedArray.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt8ClampedArray.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt8ClampedArray.toString = function(this1) {
	if(this1 != null) {
		return "UInt8ClampedArray [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
lime_utils_UInt8ClampedArray._clamp = function(_in) {
	var _out = _in | 0;
	if(_out > 255) {
		_out = 255;
	}
	if(_out < 0) {
		return 0;
	} else {
		return _out;
	}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = "openfl.Lib";
openfl_Lib.__properties__ = {get_current:"get_current",get_application:"get_application"};
openfl_Lib.as = function(v,c) {
	if(js_Boot.__instanceof(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.clearInterval = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.clearTimeout = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.getDefinitionByName = function(name) {
	if(name == null) {
		return null;
	}
	return $hxClasses[name];
};
openfl_Lib.getQualifiedClassName = function(value) {
	if(value == null) {
		return null;
	}
	var ref = js_Boot.__instanceof(value,Class) ? value : js_Boot.getClass(value);
	if(ref == null) {
		if(typeof(value) == "boolean" || value == Bool) {
			return "Bool";
		} else if(typeof(value) == "number" && ((value | 0) === value) || value == Int) {
			return "Int";
		} else if(typeof(value) == "number" || value == Float) {
			return "Float";
		} else {
			return null;
		}
	}
	return ref.__name__;
};
openfl_Lib.getQualifiedSuperclassName = function(value) {
	if(value == null) {
		return null;
	}
	var ref = js_Boot.__instanceof(value,Class) ? value : js_Boot.getClass(value);
	if(ref == null) {
		return null;
	}
	var parentRef = ref.__super__;
	if(parentRef == null) {
		return null;
	}
	return parentRef.__name__;
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	openfl_Lib.navigateToURL(request,target);
};
openfl_Lib.navigateToURL = function(request,window1) {
	if(window1 == null) {
		window1 = "_blank";
	}
	var uri = request.url;
	if(Type.typeof(request.data) == ValueType.TObject) {
		var query = "";
		var fields = Reflect.fields(request.data);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(query.length > 0) {
				query += "&";
			}
			var query1 = encodeURIComponent(field) + "=";
			var s = Std.string(Reflect.field(request.data,field));
			query += query1 + encodeURIComponent(s);
		}
		if(uri.indexOf("?") > -1) {
			uri += "&" + query;
		} else {
			uri += "?" + query;
		}
	}
	lime_system_System.openURL(uri,window1);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	if(!Object.prototype.hasOwnProperty.call(openfl_Lib.__sentWarnings.h,api)) {
		openfl_Lib.__sentWarnings.h[api] = true;
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.sendToURL = function(request) {
	var urlLoader = new openfl_net_URLLoader();
	urlLoader.load(request);
};
openfl_Lib.setInterval = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var timer = new haxe_Timer(delay);
	openfl_Lib.__timers.h[id] = timer;
	timer.run = function() {
		closure.apply(closure,args == null ? [] : args);
	};
	return id;
};
openfl_Lib.setTimeout = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var this1 = openfl_Lib.__timers;
	var v = haxe_Timer.delay(function() {
		closure.apply(closure,args == null ? [] : args);
	},delay);
	this1.h[id] = v;
	return id;
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "openfl/Lib.hx", lineNumber : 565, className : "openfl.Lib", methodName : "trace"});
};
openfl_Lib.get_application = function() {
	return openfl_utils__$internal_Lib.application;
};
openfl_Lib.get_current = function() {
	if(openfl_utils__$internal_Lib.current == null) {
		openfl_utils__$internal_Lib.current = new openfl_display_MovieClip();
	}
	return openfl_utils__$internal_Lib.current;
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = "openfl._Vector.IVector";
openfl__$Vector_IVector.__isInterface__ = true;
openfl__$Vector_IVector.prototype = {
	__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = "openfl._Vector.BoolVector";
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_BoolVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_BoolVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_BoolVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_BoolVector(0,tmp,_g);
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return false;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_BoolVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = false;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = "openfl._Vector.FloatVector";
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FloatVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FloatVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_FloatVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_FloatVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(value != this.__array.length && !this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = "openfl._Vector.FunctionVector";
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FunctionVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FunctionVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FunctionVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_FunctionVector(0,tmp,_g);
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_FunctionVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = null;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = "openfl._Vector.IntVector";
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_IntVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_IntVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_IntVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_IntVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_IntVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = "openfl._Vector.ObjectVector";
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_ObjectVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_ObjectVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_ObjectVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_ObjectVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_ObjectVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_utils__$internal_Lib.application == null) {
		openfl_utils__$internal_Lib.application = this;
	}
	if(openfl_utils__$internal_Lib.current == null) {
		openfl_utils__$internal_Lib.current = new openfl_display_MovieClip();
	}
	openfl_utils__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
	openfl_utils__$internal_Lib.current.__loaderInfo.content = openfl_utils__$internal_Lib.current;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = "openfl.display.Application";
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	createWindow: function(attributes) {
		var window1 = new openfl_display_Window(this,attributes);
		this.__windows.push(window1);
		this.__windowByID.h[window1.id] = window1;
		var _g = $bind(this,this.__onWindowClose);
		var window2 = window1;
		var tmp = function() {
			_g(window2);
		};
		window1.onClose.add(tmp,false,-10000);
		if(this.__window == null) {
			this.__window = window1;
			window1.onActivate.add($bind(this,this.onWindowActivate));
			window1.onRenderContextLost.add($bind(this,this.onRenderContextLost));
			window1.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
			window1.onDeactivate.add($bind(this,this.onWindowDeactivate));
			window1.onDropFile.add($bind(this,this.onWindowDropFile));
			window1.onEnter.add($bind(this,this.onWindowEnter));
			window1.onExpose.add($bind(this,this.onWindowExpose));
			window1.onFocusIn.add($bind(this,this.onWindowFocusIn));
			window1.onFocusOut.add($bind(this,this.onWindowFocusOut));
			window1.onFullscreen.add($bind(this,this.onWindowFullscreen));
			window1.onKeyDown.add($bind(this,this.onKeyDown));
			window1.onKeyUp.add($bind(this,this.onKeyUp));
			window1.onLeave.add($bind(this,this.onWindowLeave));
			window1.onMinimize.add($bind(this,this.onWindowMinimize));
			window1.onMouseDown.add($bind(this,this.onMouseDown));
			window1.onMouseMove.add($bind(this,this.onMouseMove));
			window1.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
			window1.onMouseUp.add($bind(this,this.onMouseUp));
			window1.onMouseWheel.add($bind(this,this.onMouseWheel));
			window1.onMove.add($bind(this,this.onWindowMove));
			window1.onRender.add($bind(this,this.render));
			window1.onResize.add($bind(this,this.onWindowResize));
			window1.onRestore.add($bind(this,this.onWindowRestore));
			window1.onTextEdit.add($bind(this,this.onTextEdit));
			window1.onTextInput.add($bind(this,this.onTextInput));
			this.onWindowCreate();
		}
		this.onCreateWindow.dispatch(window1);
		return window1;
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 2;
	this.__bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = "openfl.display.Bitmap";
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__enterFrame: function(deltaTime) {
		if(this.__bitmapData != null && this.__bitmapData.image != null && this.__bitmapData.image.version != this.__imageVersion) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		if(this.__bitmapData != null) {
			bounds.setTo(0,0,this.__bitmapData.width,this.__bitmapData.height);
		} else {
			bounds.setTo(0,0,0,0);
		}
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.__bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			return true;
		}
		return false;
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		this.smoothing = false;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		var tmp = this.__filters != null;
		this.__imageVersion = -1;
		return this.__bitmapData;
	}
	,set_height: function(value) {
		if(this.__bitmapData != null) {
			this.set_scaleY(value / this.__bitmapData.height);
		} else {
			this.set_scaleY(0);
		}
		return value;
	}
	,set_width: function(value) {
		if(this.__bitmapData != null) {
			this.set_scaleX(value / this.__bitmapData.width);
		} else {
			this.set_scaleX(0);
		}
		return value;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.__drawableType = 0;
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width < 0) {
		width = 0;
	}
	if(height < 0) {
		height = 0;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	this.__textureWidth = width;
	this.__textureHeight = height;
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = "openfl.display.BitmapData";
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	return null;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	return null;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	return null;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	if(bitmapData.image != null) {
		return bitmapData;
	} else {
		return null;
	}
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		var needSecondBitmapData = filter.__needSecondBitmapData;
		var needCopyOfOriginal = filter.__preserveObject;
		var bitmapData2 = null;
		var bitmapData3 = null;
		if(needSecondBitmapData) {
			bitmapData2 = new openfl_display_BitmapData(this.width,this.height,true,0);
		} else {
			bitmapData2 = this;
		}
		if(needCopyOfOriginal) {
			bitmapData3 = new openfl_display_BitmapData(this.width,this.height,true,0);
		}
		if(filter.__preserveObject) {
			bitmapData3.copyPixels(this,this.rect,destPoint);
		}
		var lastBitmap = filter.__applyFilter(bitmapData2,this,sourceRect,destPoint);
		if(filter.__preserveObject) {
			lastBitmap.draw(bitmapData3,null,null);
		}
		if(needSecondBitmapData && lastBitmap == bitmapData2) {
			bitmapData2.image.version = this.image.version;
			this.image = bitmapData2.image;
		}
		this.image.dirty = true;
		this.image.version++;
	}
	,clone: function() {
		var bitmapData;
		if(!this.__isValid) {
			bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.__textureWidth = this.__textureWidth;
			bitmapData.__textureHeight = this.__textureHeight;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__framebufferContext = this.__framebufferContext;
			bitmapData.__texture = this.__texture;
			bitmapData.__textureContext = this.__textureContext;
			bitmapData.__isValid = true;
		} else {
			bitmapData = openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
		bitmapData.__worldTransform.copyFrom(this.__worldTransform);
		bitmapData.__renderTransform.copyFrom(this.__renderTransform);
		return bitmapData;
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.width;
			while(_g2 < _g3) {
				var x = _g2++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | 255;
							comparePixel = (a & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__vertexBuffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(source == null) {
			return;
		}
		source.__update(false,true);
		var transform = openfl_geom_Matrix.__pool.get();
		transform.copyFrom(source.__renderTransform);
		transform.invert();
		if(matrix != null) {
			transform.concat(matrix);
		}
		var clipMatrix = null;
		if(clipRect != null) {
			clipMatrix = openfl_geom_Matrix.__pool.get();
			clipMatrix.copyFrom(transform);
			clipMatrix.invert();
		}
		var _colorTransform = new openfl_geom_ColorTransform();
		_colorTransform.__copyFrom(source.__worldColorTransform);
		_colorTransform.__invert();
		if(!this.readable && openfl_Lib.get_current().stage.context3D != null) {
			if(this.__textureContext == null) {
				this.__textureContext = lime_app_Application.current.__window.context;
			}
			if(colorTransform != null) {
				_colorTransform.__combine(colorTransform);
			}
			var renderer = new openfl_display_OpenGLRenderer(openfl_Lib.get_current().stage.context3D,this);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			renderer.__resize(this.width,this.height);
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawGL(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				boundsMatrix.tx = -bounds.x;
				boundsMatrix.ty = -bounds.y;
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source,boundsMatrix);
				copy.colorTransform(copy.rect,colorTransform);
				copy.__renderTransform.identity();
				copy.__renderTransform.tx = bounds.x;
				copy.__renderTransform.ty = bounds.y;
				copy.__renderTransform.concat(source.__renderTransform);
				copy.__worldAlpha = source.__worldAlpha;
				copy.__worldColorTransform.__copyFrom(source.__worldColorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
			var renderer = new openfl_display_CanvasRenderer(this.image.buffer.__srcContext);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawCanvas(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		}
		openfl_geom_Matrix.__pool.release(transform);
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,quality != 2 && smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			var this1 = new openfl_utils_ByteArrayData(0);
			byteArray = this1;
		}
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = Math.round(-rect.x);
			matrix.ty = Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData(Math.ceil(rect.width),Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(((compressor) instanceof openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils_ByteArray.fromBytes(image.encode(lime_graphics_ImageFileFormat.PNG)),0,0);
			return byteArray;
		} else if(((compressor) instanceof openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils_ByteArray.fromBytes(image.encode(lime_graphics_ImageFileFormat.JPEG,(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)),0,0);
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		this.__fillRect(rect,color,true);
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getIndexBuffer: function(context,scale9Grid) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context || scale9Grid != null && this.__indexBufferGrid == null || this.__indexBufferGrid != null && !this.__indexBufferGrid.equals(scale9Grid)) {
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = null;
			if(scale9Grid != null) {
				if(this.__indexBufferGrid == null) {
					this.__indexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__indexBufferGrid.copyFrom(scale9Grid);
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(54);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBufferData[18] = 8;
					this.__indexBufferData[19] = 9;
					this.__indexBufferData[20] = 0;
					this.__indexBufferData[21] = 0;
					this.__indexBufferData[22] = 9;
					this.__indexBufferData[23] = 1;
					this.__indexBufferData[24] = 10;
					this.__indexBufferData[25] = 8;
					this.__indexBufferData[26] = 4;
					this.__indexBufferData[27] = 4;
					this.__indexBufferData[28] = 8;
					this.__indexBufferData[29] = 0;
					this.__indexBufferData[30] = 11;
					this.__indexBufferData[31] = 10;
					this.__indexBufferData[32] = 6;
					this.__indexBufferData[33] = 6;
					this.__indexBufferData[34] = 10;
					this.__indexBufferData[35] = 4;
					this.__indexBufferData[36] = 12;
					this.__indexBufferData[37] = 13;
					this.__indexBufferData[38] = 8;
					this.__indexBufferData[39] = 8;
					this.__indexBufferData[40] = 13;
					this.__indexBufferData[41] = 9;
					this.__indexBufferData[42] = 14;
					this.__indexBufferData[43] = 12;
					this.__indexBufferData[44] = 10;
					this.__indexBufferData[45] = 10;
					this.__indexBufferData[46] = 12;
					this.__indexBufferData[47] = 8;
					this.__indexBufferData[48] = 15;
					this.__indexBufferData[49] = 14;
					this.__indexBufferData[50] = 11;
					this.__indexBufferData[51] = 11;
					this.__indexBufferData[52] = 14;
					this.__indexBufferData[53] = 10;
					this.__indexBuffer = context.createIndexBuffer(54);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(18);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 5;
					this.__indexBufferData[8] = 0;
					this.__indexBufferData[9] = 0;
					this.__indexBufferData[10] = 5;
					this.__indexBufferData[11] = 1;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 7;
					this.__indexBufferData[14] = 4;
					this.__indexBufferData[15] = 4;
					this.__indexBufferData[16] = 7;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				} else if(centerX != 0 && centerY == 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(18);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				}
			} else {
				this.__indexBufferGrid = null;
			}
			if(this.__indexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1 = new Uint16Array(6);
				this.__indexBufferData = this1;
				this.__indexBufferData[0] = 0;
				this.__indexBufferData[1] = 1;
				this.__indexBufferData[2] = 2;
				this.__indexBufferData[3] = 2;
				this.__indexBufferData[4] = 1;
				this.__indexBufferData[5] = 3;
				this.__indexBuffer = context.createIndexBuffer(6);
			}
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,getVertexBuffer: function(context,scale9Grid,targetObject) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context || scale9Grid != null && this.__vertexBufferGrid == null || this.__vertexBufferGrid != null && !this.__vertexBufferGrid.equals(scale9Grid) || targetObject != null && (this.__vertexBufferWidth != targetObject.get_width() || this.__vertexBufferHeight != targetObject.get_height() || this.__vertexBufferScaleX != targetObject.get_scaleX() || this.__vertexBufferScaleY != targetObject.get_scaleY())) {
			this.__uvRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
			var uvWidth = 1;
			var uvHeight = 1;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = null;
			if(targetObject != null) {
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
			}
			if(scale9Grid != null && targetObject != null) {
				if(this.__vertexBufferGrid == null) {
					this.__vertexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__vertexBufferGrid.copyFrom(scale9Grid);
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(224);
					this.__vertexBufferData = this1;
					var left = scale9Grid.x;
					var top = scale9Grid.y;
					var right = this.width - centerX - left;
					var bottom = this.height - centerY - top;
					var uvLeft = left / this.width;
					var uvTop = top / this.height;
					var uvCenterX = centerX / this.width;
					var uvCenterY = centerY / this.height;
					var uvRight = right / this.width;
					var uvBottom = bottom / this.height;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedTop = top / targetObject.get_scaleY();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedTop;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight * uvTop;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedTop;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight * uvTop;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBufferData[112] = renderedLeft;
					this.__vertexBufferData[113] = renderedTop + renderedCenterY;
					this.__vertexBufferData[115] = uvWidth * uvLeft;
					this.__vertexBufferData[116] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[127] = renderedTop + renderedCenterY;
					this.__vertexBufferData[130] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[140] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[141] = renderedTop + renderedCenterY;
					this.__vertexBufferData[143] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[144] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[154] = this.width;
					this.__vertexBufferData[155] = renderedTop + renderedCenterY;
					this.__vertexBufferData[157] = uvWidth;
					this.__vertexBufferData[158] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[168] = renderedLeft;
					this.__vertexBufferData[169] = this.height;
					this.__vertexBufferData[171] = uvWidth * uvLeft;
					this.__vertexBufferData[172] = uvHeight;
					this.__vertexBufferData[183] = this.height;
					this.__vertexBufferData[186] = uvHeight;
					this.__vertexBufferData[196] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[197] = this.height;
					this.__vertexBufferData[199] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[200] = uvHeight;
					this.__vertexBufferData[210] = this.width;
					this.__vertexBufferData[211] = this.height;
					this.__vertexBufferData[213] = uvWidth;
					this.__vertexBufferData[214] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(16,14);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(112);
					this.__vertexBufferData = this1;
					var top = scale9Grid.y;
					var bottom = this.height - centerY - top;
					var uvTop = top / this.height;
					var uvCenterY = centerY / this.height;
					var uvBottom = bottom / this.height;
					var renderedTop = top / targetObject.get_scaleY();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					var renderedWidth = targetObject.get_width() / targetObject.get_scaleX();
					this.__vertexBufferData[0] = renderedWidth;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedWidth;
					this.__vertexBufferData[31] = uvWidth;
					this.__vertexBufferData[56] = renderedWidth;
					this.__vertexBufferData[57] = renderedTop + renderedCenterY;
					this.__vertexBufferData[59] = uvWidth;
					this.__vertexBufferData[60] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[71] = renderedTop + renderedCenterY;
					this.__vertexBufferData[74] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[84] = renderedWidth;
					this.__vertexBufferData[85] = this.height;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[99] = this.height;
					this.__vertexBufferData[102] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				} else if(centerY == 0 && centerX != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(112);
					this.__vertexBufferData = this1;
					var left = scale9Grid.x;
					var right = this.width - centerX - left;
					var uvLeft = left / this.width;
					var uvCenterX = centerX / this.width;
					var uvRight = right / this.width;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedHeight = targetObject.get_height() / targetObject.get_scaleY();
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedHeight;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight;
					this.__vertexBufferData[15] = renderedHeight;
					this.__vertexBufferData[18] = uvHeight;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedHeight;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedHeight;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				}
			} else {
				this.__vertexBufferGrid = null;
			}
			if(this.__vertexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1 = new Float32Array(56);
				this.__vertexBufferData = this1;
				this.__vertexBufferData[0] = this.width;
				this.__vertexBufferData[1] = this.height;
				this.__vertexBufferData[3] = uvWidth;
				this.__vertexBufferData[4] = uvHeight;
				this.__vertexBufferData[15] = this.height;
				this.__vertexBufferData[18] = uvHeight;
				this.__vertexBufferData[28] = this.width;
				this.__vertexBufferData[31] = uvWidth;
				this.__vertexBuffer = context.createVertexBuffer(3,14);
			}
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
		return this.__vertexBuffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		var byteArray = openfl_utils_ByteArray.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
		byteArray.__endian = 0;
		return byteArray;
	}
	,getSurface: function() {
		if(!this.readable) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo_CairoImageSurface.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(context) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != context.__context) {
			this.__textureContext = context.__context;
			this.__texture = context.createRectangleTexture(this.width,this.height,1,false);
			this.__textureVersion = -1;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version > this.__textureVersion) {
			if(this.__surface != null) {
				lime_graphics_cairo_CairoSurface.flush(this.__surface);
			}
			var textureImage = this.image;
			if(!openfl_display3D_textures_TextureBase.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			this.__texture.__uploadFromImage(textureImage);
			this.__textureVersion = this.image.version;
			this.__textureWidth = textureImage.buffer.width;
			this.__textureHeight = textureImage.buffer.height;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = UInt.toFloat(openfl_utils_ByteArray.get_length(pixels)) / UInt.toFloat(4) | 0;
		var result = openfl_Vector.toIntVector(null,length,true);
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			result.set(i,pixels.readUnsignedInt());
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect = hRect != null ? hRect : new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var _g = [];
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var result = _g;
		var _g = 0;
		var _g1 = openfl_utils_ByteArray.get_length(pixels);
		while(_g < _g1) {
			var i = _g++;
			var result1 = result[i % 4];
			++result1[pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.readable) {
			return false;
		}
		if(((secondObject) instanceof openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).__bitmapData;
		}
		if(((secondObject) instanceof openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) > firstAlphaThreshold) {
					return true;
				}
			}
		} else if(((secondObject) instanceof openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x;
			var y;
			if(secondBitmapDataPoint == null) {
				x = 0;
				y = 0;
			} else {
				x = Math.round(secondBitmapDataPoint.x - firstPoint.x);
				y = Math.round(secondBitmapDataPoint.y - firstPoint.y);
			}
			var hitRect = openfl_geom_Rectangle.__pool.get();
			hitRect.setTo(x,y,secondBitmapData.width,secondBitmapData.height);
			if(this.rect.intersects(hitRect)) {
				if(x < 0) {
					hitRect.x = 0;
					hitRect.width = Math.min(secondBitmapData.width + x,this.width);
				} else {
					hitRect.width = Math.min(secondBitmapData.width,this.width - x);
				}
				if(y < 0) {
					hitRect.y = 0;
					hitRect.height = Math.min(secondBitmapData.height + y,this.height);
				} else {
					hitRect.height = Math.min(secondBitmapData.height,this.height - y);
				}
				var pixels = this.getPixels(hitRect);
				hitRect.x = x < 0 ? -x : 0;
				hitRect.y = y < 0 ? -y : 0;
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel;
				var testPixel;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if(UInt.gt(pixel >>> 24 & 255,firstAlphaThreshold) && UInt.gt(testPixel >>> 24 & 255,secondAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(hitRect);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(hitRect);
		} else if(((secondObject) instanceof openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__pool.get();
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels = this.getPixels(secondRectangle);
				var length = UInt.toFloat(openfl_utils_ByteArray.get_length(pixels)) / UInt.toFloat(4) | 0;
				var pixel;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel = pixels.readUnsignedInt();
					if(UInt.gt(pixel >>> 24 & 255,firstAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(secondRectangle);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(secondRectangle);
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		var rand = func;
		rand();
		var range = high - low;
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.width;
			while(_g2 < _g3) {
				var x = _g2++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + rand() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + rand() % range;
					}
					if(greenChannel) {
						green = low + rand() % range;
					}
					if(blueChannel) {
						blue = low + rand() % range;
					}
					if(alphaChannel) {
						alpha = low + rand() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = sourceBitmapData.getPixels(sourceRect);
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var _g = 0;
		var _g1 = sh * sw;
		while(_g < _g1) {
			var i = _g++;
			pixelValue = pixels.readUnsignedInt();
			a = alphaArray == null ? pixelValue & -16777216 : alphaArray[pixelValue >> 24 & 255];
			r = redArray == null ? pixelValue & 16711680 : redArray[pixelValue >> 16 & 255];
			g = greenArray == null ? pixelValue & 65280 : greenArray[pixelValue >> 8 & 255];
			b = blueArray == null ? pixelValue & 255 : blueArray[pixelValue & 255];
			color = a + r + g + b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = openfl_geom_Rectangle.__pool.get();
		destRect.setTo(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
		openfl_geom_Rectangle.__pool.release(destRect);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.readable) {
			return;
		}
		var noise = new openfl_display__$internal_PerlinNoise(randomSeed,numOctaves,channelOptions,grayScale,0.5,stitch,0.15);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) {
			return;
		}
		var length = rect.width * rect.height * 4;
		if(UInt.toFloat(byteArray.length - byteArray.position) < length) {
			throw haxe_Exception.thrown(new openfl_errors_Error("End of file was encountered.",2030));
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils_ByteArray.toBytePointer(byteArray),1,openfl_utils_Endian.toLimeEndian(byteArray.__endian));
	}
	,setVector: function(rect,inputVector) {
		var this1 = new openfl_utils_ByteArrayData(0);
		var byteArray = this1;
		openfl_utils_ByteArray.set_length(byteArray,inputVector.get_length() * 4);
		var color = inputVector.iterator();
		while(color.hasNext()) {
			var color1 = color.next();
			byteArray.writeUnsignedInt(color1);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__applyAlpha: function(alpha) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g = 0;
		var _g1 = openfl_utils_ByteArray.get_length(alpha);
		while(_g < _g1) {
			var i = _g++;
			data[i * 4 + 3] = alpha.readUnsignedByte();
		}
		this.image.version++;
	}
	,__drawCairo: function(source,renderer) {
	}
	,__drawCanvas: function(source,renderer) {
		var buffer = this.image.buffer;
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,false);
		}
		renderer.__render(source);
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,true);
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
		this.image.dirty = true;
		this.image.version++;
	}
	,__drawGL: function(source,renderer) {
		var context = renderer.__context3D;
		var cacheRTT = context.__state.renderToTexture;
		var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
		context.setRenderToTexture(this.getTexture(context),true);
		renderer.__render(source);
		if(cacheRTT != null) {
			context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			context.setRenderToBackBuffer();
		}
	}
	,__fillRect: function(rect,color,allowFramebuffer) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(allowFramebuffer && this.__texture != null && this.__texture.__glFramebuffer != null && openfl_Lib.get_current().stage.__renderer.__type == "opengl") {
			var renderer = openfl_Lib.get_current().stage.__renderer;
			var context = renderer.__context3D;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			var cacheRTT = context.__state.renderToTexture;
			var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
			var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
			var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
			context.setRenderToTexture(this.__texture);
			if(useScissor) {
				context.setScissorRectangle(rect);
			}
			context.clear((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,this.transparent ? (color1 >>> 24 & 255) / 255 : 1,0,0,1);
			if(useScissor) {
				context.setScissorRectangle(null);
			}
			if(cacheRTT != null) {
				context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
			} else {
				context.setRenderToBackBuffer();
			}
		} else if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		}
	}
	,__fromBase64: function(base64,type) {
		var image = lime_graphics_Image.fromBase64(base64,type);
		this.__fromImage(image);
	}
	,__fromBytes: function(bytes,rawAlpha) {
		var image = lime_graphics_Image.fromBytes(openfl_utils_ByteArray.toBytes(bytes));
		this.__fromImage(image);
		if(rawAlpha != null) {
			this.__applyAlpha(rawAlpha);
		}
	}
	,__fromFile: function(path) {
		var image = lime_graphics_Image.fromFile(path);
		this.__fromImage(image);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__textureWidth = this.width;
			this.__textureHeight = this.height;
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__loadFromBase64: function(base64,type) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				_gthis.__applyAlpha(rawAlpha);
			}
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromFile: function(path) {
		var _gthis = this;
		return lime_graphics_Image.loadFromFile(path).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
		this.__textureWidth = width;
		this.__textureHeight = height;
	}
	,__setUVRect: function(context,x,y,width,height) {
		var buffer = this.getVertexBuffer(context);
		if(buffer != null && (width != this.__uvRect.width || height != this.__uvRect.height || x != this.__uvRect.x || y != this.__uvRect.y)) {
			var gl = context.gl;
			if(this.__uvRect == null) {
				this.__uvRect = new openfl_geom_Rectangle();
			}
			this.__uvRect.setTo(x,y,width,height);
			var uvX = this.__textureWidth > 0 ? x / this.__textureWidth : 0;
			var uvY = this.__textureHeight > 0 ? y / this.__textureHeight : 0;
			var uvWidth = this.__textureWidth > 0 ? width / this.__textureWidth : 0;
			var uvHeight = this.__textureHeight > 0 ? height / this.__textureHeight : 0;
			this.__vertexBufferData[0] = width;
			this.__vertexBufferData[1] = height;
			this.__vertexBufferData[3] = uvX + uvWidth;
			this.__vertexBufferData[4] = uvY + uvHeight;
			this.__vertexBufferData[15] = height;
			this.__vertexBufferData[17] = uvX;
			this.__vertexBufferData[18] = uvY + uvHeight;
			this.__vertexBufferData[28] = width;
			this.__vertexBufferData[31] = uvX + uvWidth;
			this.__vertexBufferData[32] = uvY;
			this.__vertexBufferData[45] = uvX;
			this.__vertexBufferData[46] = uvY;
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
	}
	,__sync: function() {
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
	}
	,__update: function(transformOnly,updateChildren) {
		this.__updateTransforms();
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform.copyFrom(overrideTransform);
		}
		this.__renderTransform.copyFrom(this.__worldTransform);
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display_BlendMode = {};
openfl_display_BlendMode.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display_BlendMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display_DisplayObjectRenderer = function() {
	openfl_events_EventDispatcher.call(this);
	this.__allowSmoothing = true;
	this.__tempColorTransform = new openfl_geom_ColorTransform();
	this.__worldAlpha = 1;
};
$hxClasses["openfl.display.DisplayObjectRenderer"] = openfl_display_DisplayObjectRenderer;
openfl_display_DisplayObjectRenderer.__name__ = "openfl.display.DisplayObjectRenderer";
openfl_display_DisplayObjectRenderer.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObjectRenderer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__clear: function() {
	}
	,__getAlpha: function(value) {
		return value * this.__worldAlpha;
	}
	,__getColorTransform: function(value) {
		if(this.__worldColorTransform != null) {
			this.__tempColorTransform.__copyFrom(this.__worldColorTransform);
			this.__tempColorTransform.__combine(value);
			return this.__tempColorTransform;
		} else {
			return value;
		}
	}
	,__popMask: function() {
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__popMaskRect: function() {
	}
	,__pushMask: function(mask) {
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__pushMaskRect: function(rect,transform) {
	}
	,__render: function(object) {
	}
	,__renderEvent: function(displayObject) {
		var renderer = this;
		if(displayObject.__customRenderEvent != null && displayObject.__renderable) {
			displayObject.__customRenderEvent.allowSmoothing = renderer.__allowSmoothing;
			displayObject.__customRenderEvent.objectMatrix.copyFrom(displayObject.__renderTransform);
			displayObject.__customRenderEvent.objectColorTransform.__copyFrom(displayObject.__worldColorTransform);
			displayObject.__customRenderEvent.renderer = renderer;
			switch(renderer.__type) {
			case "cairo":
				displayObject.__customRenderEvent.type = "renderCairo";
				break;
			case "canvas":
				displayObject.__customRenderEvent.type = "renderCanvas";
				break;
			case "dom":
				if(displayObject.stage != null && displayObject.__worldVisible) {
					displayObject.__customRenderEvent.type = "renderDOM";
				} else {
					displayObject.__customRenderEvent.type = "clearDOM";
				}
				break;
			case "opengl":
				if(!renderer.__cleared) {
					renderer.__clear();
				}
				var renderer1 = renderer;
				renderer1.setShader(displayObject.__worldShader);
				renderer1.__context3D.__flushGL();
				displayObject.__customRenderEvent.type = "renderOpenGL";
				break;
			default:
				return;
			}
			renderer.__setBlendMode(displayObject.__worldBlendMode);
			renderer.__pushMaskObject(displayObject);
			displayObject.dispatchEvent(displayObject.__customRenderEvent);
			renderer.__popMaskObject(displayObject);
			if(renderer.__type == "opengl") {
				var renderer1 = renderer;
				renderer1.setViewport();
			}
		}
	}
	,__resize: function(width,height) {
	}
	,__setBlendMode: function(value) {
	}
	,__shouldCacheHardware: function(displayObject,value) {
		if(displayObject == null) {
			return null;
		}
		switch(displayObject.__drawableType) {
		case 4:case 5:
			if(value == true) {
				return true;
			}
			value = this.__shouldCacheHardware_DisplayObject(displayObject,value);
			if(value == true) {
				return true;
			}
			if(displayObject.__children != null) {
				var _g = 0;
				var _g1 = displayObject.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					value = this.__shouldCacheHardware_DisplayObject(child,value);
					if(value == true) {
						return true;
					}
				}
			}
			return value;
		case 7:
			if(value == true) {
				return true;
			} else {
				return false;
			}
			break;
		case 9:
			return true;
		default:
			return this.__shouldCacheHardware_DisplayObject(displayObject,value);
		}
	}
	,__shouldCacheHardware_DisplayObject: function(displayObject,value) {
		if(value == true || displayObject.__filters != null) {
			return true;
		}
		if(value == false || displayObject.__graphics != null && !openfl_display__$internal_Context3DGraphics.isCompatible(displayObject.__graphics)) {
			return false;
		}
		return null;
	}
	,__updateCacheBitmap: function(displayObject,force) {
		if(displayObject == null) {
			return false;
		}
		var renderer = this;
		switch(displayObject.__drawableType) {
		case 2:
			var bitmap = displayObject;
			if(bitmap.__bitmapData == null || bitmap.__filters == null && renderer.__type == "opengl" && bitmap.__cacheBitmap == null) {
				return false;
			}
			force = bitmap.__bitmapData.image != null && bitmap.__bitmapData.image.version != bitmap.__imageVersion;
			break;
		case 7:
			var textField = displayObject;
			if(textField.__filters == null && renderer.__type == "opengl" && textField.__cacheBitmap == null && !textField.__domRender) {
				return false;
			}
			if(force) {
				textField.__renderDirty = true;
			}
			force = force || textField.__dirty;
			break;
		case 9:
			var tilemap = displayObject;
			if(tilemap.__filters == null && renderer.__type == "opengl" && tilemap.__cacheBitmap == null) {
				return false;
			}
			break;
		default:
		}
		if(displayObject.__isCacheBitmapRender) {
			return false;
		}
		var colorTransform = openfl_geom_ColorTransform.__pool.get();
		colorTransform.__copyFrom(displayObject.__worldColorTransform);
		if(renderer.__worldColorTransform != null) {
			colorTransform.__combine(renderer.__worldColorTransform);
		}
		var updated = false;
		if(displayObject.get_cacheAsBitmap() || renderer.__type != "opengl" && !colorTransform.__isDefault(true)) {
			var rect = null;
			var needRender = displayObject.__cacheBitmap == null || displayObject.__renderDirty && (force || displayObject.__children != null && displayObject.__children.length > 0) || displayObject.opaqueBackground != displayObject.__cacheBitmapBackground;
			var softwareDirty = needRender || displayObject.__graphics != null && displayObject.__graphics.__softwareDirty || !displayObject.__cacheBitmapColorTransform.__equals(colorTransform,true);
			var hardwareDirty = needRender || displayObject.__graphics != null && displayObject.__graphics.__hardwareDirty;
			var renderType = renderer.__type;
			if(softwareDirty || hardwareDirty) {
				if(renderType == "opengl") {
					if(this.__shouldCacheHardware(displayObject,null) == false) {
						renderType = "canvas";
					}
				}
				if(softwareDirty && (renderType == "canvas" || renderType == "cairo")) {
					needRender = true;
				}
				if(hardwareDirty && renderType == "opengl") {
					needRender = true;
				}
			}
			var updateTransform = needRender || !displayObject.__cacheBitmap.__worldTransform.equals(displayObject.__worldTransform);
			var hasFilters = displayObject.__filters != null;
			if(hasFilters && !needRender) {
				var _g = 0;
				var _g1 = displayObject.__filters;
				while(_g < _g1.length) {
					var filter = _g1[_g];
					++_g;
					if(filter.__renderDirty) {
						needRender = true;
						break;
					}
				}
			}
			if(displayObject.__cacheBitmapMatrix == null) {
				displayObject.__cacheBitmapMatrix = new openfl_geom_Matrix();
			}
			var bitmapMatrix = displayObject.__cacheAsBitmapMatrix != null ? displayObject.__cacheAsBitmapMatrix : displayObject.__renderTransform;
			if(!needRender && (bitmapMatrix.a != displayObject.__cacheBitmapMatrix.a || bitmapMatrix.b != displayObject.__cacheBitmapMatrix.b || bitmapMatrix.c != displayObject.__cacheBitmapMatrix.c || bitmapMatrix.d != displayObject.__cacheBitmapMatrix.d)) {
				needRender = true;
			}
			if(!needRender && renderer.__type != "opengl" && displayObject.__cacheBitmapData != null && displayObject.__cacheBitmapData.image != null && displayObject.__cacheBitmapData.image.version < displayObject.__cacheBitmapData.__textureVersion) {
				needRender = true;
			}
			displayObject.__cacheBitmapMatrix.copyFrom(bitmapMatrix);
			displayObject.__cacheBitmapMatrix.tx = 0;
			displayObject.__cacheBitmapMatrix.ty = 0;
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			var filterWidth = 0;
			var filterHeight = 0;
			var offsetX = 0.;
			var offsetY = 0.;
			if(updateTransform || needRender) {
				rect = openfl_geom_Rectangle.__pool.get();
				displayObject.__getFilterBounds(rect,displayObject.__cacheBitmapMatrix);
				filterWidth = Math.ceil(rect.width);
				filterHeight = Math.ceil(rect.height);
				offsetX = rect.x > 0 ? Math.ceil(rect.x) : Math.floor(rect.x);
				offsetY = rect.y > 0 ? Math.ceil(rect.y) : Math.floor(rect.y);
				if(displayObject.__cacheBitmapData != null) {
					if(filterWidth > displayObject.__cacheBitmapData.width || filterHeight > displayObject.__cacheBitmapData.height) {
						bitmapWidth = Math.ceil(Math.max(filterWidth * 1.25,displayObject.__cacheBitmapData.width));
						bitmapHeight = Math.ceil(Math.max(filterHeight * 1.25,displayObject.__cacheBitmapData.height));
						needRender = true;
					} else {
						bitmapWidth = displayObject.__cacheBitmapData.width;
						bitmapHeight = displayObject.__cacheBitmapData.height;
					}
				} else {
					bitmapWidth = filterWidth;
					bitmapHeight = filterHeight;
				}
			}
			if(needRender) {
				updateTransform = true;
				displayObject.__cacheBitmapBackground = displayObject.opaqueBackground;
				if(filterWidth >= 0.5 && filterHeight >= 0.5) {
					var needsFill = displayObject.opaqueBackground != null && (bitmapWidth != filterWidth || bitmapHeight != filterHeight);
					var fillColor = displayObject.opaqueBackground != null ? -16777216 | displayObject.opaqueBackground : 0;
					var bitmapColor = needsFill ? 0 : fillColor;
					var allowFramebuffer = renderer.__type == "opengl";
					if(displayObject.__cacheBitmapData == null || bitmapWidth > displayObject.__cacheBitmapData.width || bitmapHeight > displayObject.__cacheBitmapData.height) {
						displayObject.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,bitmapColor);
						if(displayObject.__cacheBitmap == null) {
							displayObject.__cacheBitmap = new openfl_display_Bitmap();
						}
						displayObject.__cacheBitmap.__bitmapData = displayObject.__cacheBitmapData;
						displayObject.__cacheBitmapRenderer = null;
					} else {
						displayObject.__cacheBitmapData.__fillRect(displayObject.__cacheBitmapData.rect,bitmapColor,allowFramebuffer);
					}
					if(needsFill) {
						rect.setTo(0,0,filterWidth,filterHeight);
						displayObject.__cacheBitmapData.__fillRect(rect,fillColor,allowFramebuffer);
					}
				} else {
					openfl_geom_ColorTransform.__pool.release(colorTransform);
					displayObject.__cacheBitmap = null;
					displayObject.__cacheBitmapData = null;
					displayObject.__cacheBitmapData2 = null;
					displayObject.__cacheBitmapData3 = null;
					displayObject.__cacheBitmapRenderer = null;
					if(displayObject.__drawableType == 7) {
						var textField = displayObject;
						if(textField.__cacheBitmap != null) {
							textField.__cacheBitmap.__renderTransform.tx -= textField.__offsetX;
							textField.__cacheBitmap.__renderTransform.ty -= textField.__offsetY;
						}
					}
					return true;
				}
			} else {
				displayObject.__cacheBitmapData = displayObject.__cacheBitmap.get_bitmapData();
				displayObject.__cacheBitmapData2 = null;
				displayObject.__cacheBitmapData3 = null;
			}
			if(updateTransform || needRender) {
				displayObject.__cacheBitmap.__worldTransform.copyFrom(displayObject.__worldTransform);
				if(bitmapMatrix == displayObject.__renderTransform) {
					displayObject.__cacheBitmap.__renderTransform.identity();
					displayObject.__cacheBitmap.__renderTransform.tx = displayObject.__renderTransform.tx + offsetX;
					displayObject.__cacheBitmap.__renderTransform.ty = displayObject.__renderTransform.ty + offsetY;
				} else {
					displayObject.__cacheBitmap.__renderTransform.copyFrom(displayObject.__cacheBitmapMatrix);
					displayObject.__cacheBitmap.__renderTransform.invert();
					displayObject.__cacheBitmap.__renderTransform.concat(displayObject.__renderTransform);
					displayObject.__cacheBitmap.__renderTransform.tx += offsetX;
					displayObject.__cacheBitmap.__renderTransform.ty += offsetY;
				}
			}
			displayObject.__cacheBitmap.smoothing = renderer.__allowSmoothing;
			displayObject.__cacheBitmap.__renderable = displayObject.__renderable;
			displayObject.__cacheBitmap.__worldAlpha = displayObject.__worldAlpha;
			displayObject.__cacheBitmap.__worldBlendMode = displayObject.__worldBlendMode;
			displayObject.__cacheBitmap.__worldShader = displayObject.__worldShader;
			displayObject.__cacheBitmap.set_mask(displayObject.__mask);
			if(needRender) {
				if(displayObject.__cacheBitmapRenderer == null || renderType != displayObject.__cacheBitmapRenderer.__type) {
					if(renderType == "opengl") {
						displayObject.__cacheBitmapRenderer = new openfl_display_OpenGLRenderer((js_Boot.__cast(renderer , openfl_display_OpenGLRenderer)).__context3D,displayObject.__cacheBitmapData);
					} else {
						if(displayObject.__cacheBitmapData.image == null) {
							var color = displayObject.opaqueBackground != null ? -16777216 | displayObject.opaqueBackground : 0;
							displayObject.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
							displayObject.__cacheBitmap.__bitmapData = displayObject.__cacheBitmapData;
						}
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(displayObject.__cacheBitmapData.image);
						displayObject.__cacheBitmapRenderer = new openfl_display_CanvasRenderer(displayObject.__cacheBitmapData.image.buffer.__srcContext);
					}
					displayObject.__cacheBitmapRenderer.__worldTransform = new openfl_geom_Matrix();
					displayObject.__cacheBitmapRenderer.__worldColorTransform = new openfl_geom_ColorTransform();
				}
				if(displayObject.__cacheBitmapColorTransform == null) {
					displayObject.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				displayObject.__cacheBitmapRenderer.__stage = displayObject.stage;
				displayObject.__cacheBitmapRenderer.__allowSmoothing = renderer.__allowSmoothing;
				displayObject.__cacheBitmapRenderer.__setBlendMode(10);
				displayObject.__cacheBitmapRenderer.__worldAlpha = 1 / displayObject.__worldAlpha;
				displayObject.__cacheBitmapRenderer.__worldTransform.copyFrom(displayObject.__renderTransform);
				displayObject.__cacheBitmapRenderer.__worldTransform.invert();
				displayObject.__cacheBitmapRenderer.__worldTransform.concat(displayObject.__cacheBitmapMatrix);
				displayObject.__cacheBitmapRenderer.__worldTransform.tx -= offsetX;
				displayObject.__cacheBitmapRenderer.__worldTransform.ty -= offsetY;
				displayObject.__cacheBitmapRenderer.__worldColorTransform.__copyFrom(colorTransform);
				displayObject.__cacheBitmapRenderer.__worldColorTransform.__invert();
				displayObject.__isCacheBitmapRender = true;
				if(displayObject.__cacheBitmapRenderer.__type == "opengl") {
					var parentRenderer = renderer;
					var childRenderer = displayObject.__cacheBitmapRenderer;
					var context = childRenderer.__context3D;
					var cacheRTT = context.__state.renderToTexture;
					var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
					var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
					var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
					var cacheBlendMode = parentRenderer.__blendMode;
					parentRenderer.__suspendClipAndMask();
					childRenderer.__copyShader(parentRenderer);
					displayObject.__cacheBitmapData.__setUVRect(context,0,0,filterWidth,filterHeight);
					childRenderer.__setRenderTarget(displayObject.__cacheBitmapData);
					if(displayObject.__cacheBitmapData.image != null) {
						displayObject.__cacheBitmapData.__textureVersion = displayObject.__cacheBitmapData.image.version + 1;
					}
					displayObject.__cacheBitmapData.__drawGL(displayObject,childRenderer);
					if(hasFilters) {
						var needSecondBitmapData = true;
						var needCopyOfOriginal = false;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								needCopyOfOriginal = true;
							}
						}
						var bitmap = displayObject.__cacheBitmapData;
						var bitmap2 = null;
						var bitmap3 = null;
						if(displayObject.__cacheBitmapData2 == null || bitmapWidth > displayObject.__cacheBitmapData2.width || bitmapHeight > displayObject.__cacheBitmapData2.height) {
							displayObject.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
						} else {
							displayObject.__cacheBitmapData2.fillRect(displayObject.__cacheBitmapData2.rect,0);
							if(displayObject.__cacheBitmapData2.image != null) {
								displayObject.__cacheBitmapData2.__textureVersion = displayObject.__cacheBitmapData2.image.version + 1;
							}
						}
						displayObject.__cacheBitmapData2.__setUVRect(context,0,0,filterWidth,filterHeight);
						bitmap2 = displayObject.__cacheBitmapData2;
						if(needCopyOfOriginal) {
							if(displayObject.__cacheBitmapData3 == null || bitmapWidth > displayObject.__cacheBitmapData3.width || bitmapHeight > displayObject.__cacheBitmapData3.height) {
								displayObject.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								displayObject.__cacheBitmapData3.fillRect(displayObject.__cacheBitmapData3.rect,0);
								if(displayObject.__cacheBitmapData3.image != null) {
									displayObject.__cacheBitmapData3.__textureVersion = displayObject.__cacheBitmapData3.image.version + 1;
								}
							}
							displayObject.__cacheBitmapData3.__setUVRect(context,0,0,filterWidth,filterHeight);
							bitmap3 = displayObject.__cacheBitmapData3;
						}
						childRenderer.__setBlendMode(10);
						childRenderer.__worldAlpha = 1;
						childRenderer.__worldTransform.identity();
						childRenderer.__worldColorTransform.__identity();
						var shader;
						var cacheBitmap;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								childRenderer.__setRenderTarget(bitmap3);
								childRenderer.__renderFilterPass(bitmap,childRenderer.__defaultDisplayShader,filter.__smooth);
							}
							var _g2 = 0;
							var _g3 = filter.__numShaderPasses;
							while(_g2 < _g3) {
								var i = _g2++;
								shader = filter.__initShader(childRenderer,i,filter.__preserveObject ? bitmap3 : null);
								childRenderer.__setBlendMode(filter.__shaderBlendMode);
								childRenderer.__setRenderTarget(bitmap2);
								childRenderer.__renderFilterPass(bitmap,shader,filter.__smooth);
								cacheBitmap = bitmap;
								bitmap = bitmap2;
								bitmap2 = cacheBitmap;
							}
							filter.__renderDirty = false;
						}
						displayObject.__cacheBitmap.__bitmapData = bitmap;
					}
					parentRenderer.__blendMode = 10;
					parentRenderer.__setBlendMode(cacheBlendMode);
					parentRenderer.__copyShader(childRenderer);
					if(cacheRTT != null) {
						context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
					} else {
						context.setRenderToBackBuffer();
					}
					parentRenderer.__resumeClipAndMask(childRenderer);
					parentRenderer.setViewport();
					displayObject.__cacheBitmapColorTransform.__copyFrom(colorTransform);
				} else {
					displayObject.__cacheBitmapData.__drawCanvas(displayObject,displayObject.__cacheBitmapRenderer);
					if(hasFilters) {
						var needSecondBitmapData = false;
						var needCopyOfOriginal = false;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__needSecondBitmapData) {
								needSecondBitmapData = true;
							}
							if(filter.__preserveObject) {
								needCopyOfOriginal = true;
							}
						}
						var bitmap = displayObject.__cacheBitmapData;
						var bitmap2 = null;
						var bitmap3 = null;
						if(needSecondBitmapData) {
							if(displayObject.__cacheBitmapData2 == null || displayObject.__cacheBitmapData2.image == null || bitmapWidth > displayObject.__cacheBitmapData2.width || bitmapHeight > displayObject.__cacheBitmapData2.height) {
								displayObject.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								displayObject.__cacheBitmapData2.fillRect(displayObject.__cacheBitmapData2.rect,0);
							}
							bitmap2 = displayObject.__cacheBitmapData2;
						} else {
							bitmap2 = bitmap;
						}
						if(needCopyOfOriginal) {
							if(displayObject.__cacheBitmapData3 == null || displayObject.__cacheBitmapData3.image == null || bitmapWidth > displayObject.__cacheBitmapData3.width || bitmapHeight > displayObject.__cacheBitmapData3.height) {
								displayObject.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								displayObject.__cacheBitmapData3.fillRect(displayObject.__cacheBitmapData3.rect,0);
							}
							bitmap3 = displayObject.__cacheBitmapData3;
						}
						if(displayObject.__tempPoint == null) {
							displayObject.__tempPoint = new openfl_geom_Point();
						}
						var destPoint = displayObject.__tempPoint;
						var cacheBitmap;
						var lastBitmap;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								bitmap3.copyPixels(bitmap,bitmap.rect,destPoint);
							}
							lastBitmap = filter.__applyFilter(bitmap2,bitmap,bitmap.rect,destPoint);
							if(filter.__preserveObject) {
								lastBitmap.draw(bitmap3,null,displayObject.__objectTransform != null ? displayObject.__objectTransform.__colorTransform : null);
							}
							filter.__renderDirty = false;
							if(needSecondBitmapData && lastBitmap == bitmap2) {
								cacheBitmap = bitmap;
								bitmap = bitmap2;
								bitmap2 = cacheBitmap;
							}
						}
						if(displayObject.__cacheBitmapData != bitmap) {
							cacheBitmap = displayObject.__cacheBitmapData;
							displayObject.__cacheBitmapData = bitmap;
							displayObject.__cacheBitmapData2 = cacheBitmap;
							displayObject.__cacheBitmap.__bitmapData = displayObject.__cacheBitmapData;
							displayObject.__cacheBitmapRenderer = null;
						}
						displayObject.__cacheBitmap.__imageVersion = displayObject.__cacheBitmapData.__textureVersion;
					}
					displayObject.__cacheBitmapColorTransform.__copyFrom(colorTransform);
					if(!displayObject.__cacheBitmapColorTransform.__isDefault(true)) {
						displayObject.__cacheBitmapColorTransform.alphaMultiplier = 1;
						displayObject.__cacheBitmapData.colorTransform(displayObject.__cacheBitmapData.rect,displayObject.__cacheBitmapColorTransform);
					}
				}
				displayObject.__isCacheBitmapRender = false;
			}
			if(updateTransform || needRender) {
				openfl_geom_Rectangle.__pool.release(rect);
			}
			updated = updateTransform;
		} else if(displayObject.__cacheBitmap != null) {
			if(renderer.__type == "dom") {
				var domRenderer = renderer;
				domRenderer.__renderDrawableClear(displayObject.__cacheBitmap);
			}
			displayObject.__cacheBitmap = null;
			displayObject.__cacheBitmapData = null;
			displayObject.__cacheBitmapData2 = null;
			displayObject.__cacheBitmapData3 = null;
			displayObject.__cacheBitmapColorTransform = null;
			displayObject.__cacheBitmapRenderer = null;
			updated = true;
		}
		openfl_geom_ColorTransform.__pool.release(colorTransform);
		if(updated && displayObject.__drawableType == 7) {
			var textField = displayObject;
			if(textField.__cacheBitmap != null) {
				textField.__cacheBitmap.__renderTransform.tx -= textField.__offsetX;
				textField.__cacheBitmap.__renderTransform.ty -= textField.__offsetY;
			}
		}
		return updated;
	}
	,__class__: openfl_display_DisplayObjectRenderer
});
var openfl_display_CairoRenderer = function(cairo) {
	openfl_display_DisplayObjectRenderer.call(this);
};
$hxClasses["openfl.display.CairoRenderer"] = openfl_display_CairoRenderer;
openfl_display_CairoRenderer.__name__ = "openfl.display.CairoRenderer";
openfl_display_CairoRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CairoRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	applyMatrix: function(transform,cairo) {
		if(cairo == null) {
			cairo = this.cairo;
		}
		this.__matrix.copyFrom(transform);
		if(this.cairo == cairo && this.__worldTransform != null) {
			this.__matrix.concat(this.__worldTransform);
		}
		this.__matrix3.a = this.__matrix.a;
		this.__matrix3.b = this.__matrix.b;
		this.__matrix3.c = this.__matrix.c;
		this.__matrix3.d = this.__matrix.d;
		if(this.__roundPixels) {
			this.__matrix3.tx = Math.round(this.__matrix.tx);
			this.__matrix3.ty = Math.round(this.__matrix.ty);
		} else {
			this.__matrix3.tx = this.__matrix.tx;
			this.__matrix3.ty = this.__matrix.ty;
		}
		cairo.set_matrix(this.__matrix3);
	}
	,__clear: function() {
		if(this.cairo == null) {
			return;
		}
		this.cairo.identityMatrix();
		if(this.__stage != null && this.__stage.__clearBeforeRender) {
			var cacheBlendMode = this.__blendMode;
			this.__setBlendMode(10);
			this.cairo.setSourceRGB(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2]);
			this.cairo.paint();
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.cairo.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.cairo.restore();
	}
	,__pushMask: function(mask) {
		this.cairo.save();
		this.applyMatrix(mask.__renderTransform,this.cairo);
		this.cairo.newPath();
		this.__renderDrawableMask(mask);
		this.cairo.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.cairo.save();
		this.applyMatrix(transform,this.cairo);
		this.cairo.newPath();
		this.cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		this.cairo.clip();
	}
	,__render: function(object) {
		if(this.cairo == null) {
			return;
		}
		this.__renderDrawable(object);
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:case 5:
			break;
		case 6:
			var simpleButton = object;
			if(!(!simpleButton.__renderable || simpleButton.__worldAlpha <= 0 || simpleButton.__currentState == null)) {
				this.__pushMaskObject(simpleButton);
				this.__renderDrawable(simpleButton.__currentState);
				this.__popMaskObject(simpleButton);
				this.__renderEvent(simpleButton);
			}
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		default:
		}
	}
	,__renderDrawableMask: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			var bitmap = object;
			this.cairo.rectangle(0,0,bitmap.get_width(),bitmap.get_height());
			break;
		case 3:
			break;
		case 4:case 5:
			break;
		case 6:
			this.__renderDrawableMask(object.__currentState);
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		default:
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		this.__setBlendModeCairo(this.cairo,value);
	}
	,__setBlendModeCairo: function(cairo,value) {
		switch(value) {
		case 0:
			cairo.setOperator(12);
			break;
		case 2:
			cairo.setOperator(17);
			break;
		case 3:
			cairo.setOperator(23);
			break;
		case 5:
			cairo.setOperator(21);
			break;
		case 7:
			cairo.setOperator(2);
			break;
		case 8:
			cairo.setOperator(18);
			break;
		case 9:
			cairo.setOperator(14);
			break;
		case 11:
			cairo.setOperator(16);
			break;
		case 12:
			cairo.setOperator(15);
			break;
		default:
			cairo.setOperator(2);
		}
	}
	,__class__: openfl_display_CairoRenderer
});
var openfl_display_CanvasRenderer = function(context) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.context = context;
	this.__tempMatrix = new openfl_geom_Matrix();
	this.__type = "canvas";
};
$hxClasses["openfl.display.CanvasRenderer"] = openfl_display_CanvasRenderer;
openfl_display_CanvasRenderer.__name__ = "openfl.display.CanvasRenderer";
openfl_display_CanvasRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CanvasRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	applySmoothing: function(context,value) {
		context.imageSmoothingEnabled = value;
	}
	,setTransform: function(transform,context) {
		if(context == null) {
			context = this.context;
		} else if(this.context == context && this.__worldTransform != null) {
			this.__tempMatrix.copyFrom(transform);
			this.__tempMatrix.concat(this.__worldTransform);
			transform = this.__tempMatrix;
		}
		if(this.__roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
	}
	,__clear: function() {
		if(this.__stage != null) {
			var cacheBlendMode = this.__blendMode;
			this.__blendMode = null;
			this.__setBlendMode(10);
			this.context.setTransform(1,0,0,1,0,0);
			this.context.globalAlpha = 1;
			if(!this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.fillStyle = this.__stage.__colorString;
				this.context.fillRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			} else if(this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.clearRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			}
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.context.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.context.restore();
	}
	,__pushMask: function(mask) {
		this.context.save();
		this.setTransform(mask.__renderTransform,this.context);
		this.context.beginPath();
		this.__renderDrawableMask(mask);
		this.context.closePath();
		this.context.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.context.save();
		this.setTransform(transform,this.context);
		this.context.beginPath();
		this.context.rect(rect.x,rect.y,rect.width,rect.height);
		this.context.clip();
	}
	,__render: function(object) {
		this.__renderDrawable(object);
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_CanvasBitmapData.renderDrawable(object,this);
			break;
		case 2:
			openfl_display__$internal_CanvasBitmap.renderDrawable(object,this);
			break;
		case 3:
			openfl_display__$internal_CanvasDisplayObject.renderDrawable(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawable(object,this);
			break;
		case 6:
			openfl_display__$internal_CanvasSimpleButton.renderDrawable(object,this);
			break;
		case 7:
			openfl_display__$internal_CanvasTextField.renderDrawable(object,this);
			break;
		case 8:
			openfl_display__$internal_CanvasVideo.renderDrawable(object,this);
			break;
		case 9:
			openfl_display__$internal_CanvasTilemap.renderDrawable(object,this);
			break;
		default:
		}
	}
	,__renderDrawableMask: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_CanvasBitmapData.renderDrawableMask(object,this);
			break;
		case 2:
			openfl_display__$internal_CanvasBitmap.renderDrawableMask(object,this);
			break;
		case 3:
			openfl_display__$internal_CanvasDisplayObject.renderDrawableMask(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawableMask(object,this);
			break;
		case 6:
			openfl_display__$internal_CanvasSimpleButton.renderDrawableMask(object,this);
			break;
		case 7:
			openfl_display__$internal_CanvasTextField.renderDrawableMask(object,this);
			break;
		case 8:
			openfl_display__$internal_CanvasVideo.renderDrawableMask(object,this);
			break;
		case 9:
			openfl_display__$internal_CanvasTilemap.renderDrawableMask(object,this);
			break;
		default:
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		this.__setBlendModeContext(this.context,value);
	}
	,__setBlendModeContext: function(context,value) {
		switch(value) {
		case 0:
			context.globalCompositeOperation = "lighter";
			break;
		case 2:
			context.globalCompositeOperation = "darken";
			break;
		case 3:
			context.globalCompositeOperation = "difference";
			break;
		case 5:
			context.globalCompositeOperation = "hard-light";
			break;
		case 8:
			context.globalCompositeOperation = "lighten";
			break;
		case 9:
			context.globalCompositeOperation = "multiply";
			break;
		case 11:
			context.globalCompositeOperation = "overlay";
			break;
		case 12:
			context.globalCompositeOperation = "screen";
			break;
		default:
			context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl_display_CanvasRenderer
});
var openfl_display_CapsStyle = {};
openfl_display_CapsStyle.fromInt = function(value) {
	return value;
};
openfl_display_CapsStyle.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display_CapsStyle.toInt = function(this1) {
	return this1;
};
openfl_display_CapsStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DOMElement = function(element) {
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 10;
	this.__element = element;
};
$hxClasses["openfl.display.DOMElement"] = openfl_display_DOMElement;
openfl_display_DOMElement.__name__ = "openfl.display.DOMElement";
openfl_display_DOMElement.__super__ = openfl_display_DisplayObject;
openfl_display_DOMElement.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__class__: openfl_display_DOMElement
});
var openfl_display_DOMRenderer = function(element) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.element = element;
	openfl_display_DisplayObject.__supportDOM = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('')
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.__vendorPrefix = prefix.lowercase;
	this.__transformProperty = prefix.lowercase == "webkit" ? "-webkit-transform" : "transform";
	this.__transformOriginProperty = prefix.lowercase == "webkit" ? "-webkit-transform-origin" : "transform-origin";
	this.__clipRects = [];
	this.__numClipRects = 0;
	this.__z = 0;
	this.__type = "dom";
	this.__canvasRenderer = new openfl_display_CanvasRenderer(null);
	this.__canvasRenderer.__isDOM = true;
};
$hxClasses["openfl.display.DOMRenderer"] = openfl_display_DOMRenderer;
openfl_display_DOMRenderer.__name__ = "openfl.display.DOMRenderer";
openfl_display_DOMRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_DOMRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	applyStyle: function(parent,childElement) {
		if(parent != null && childElement != null) {
			if(parent.__style == null || childElement.parentElement != this.element) {
				this.__initializeElement(parent,childElement);
			}
			parent.__style = childElement.style;
			this.__updateClip(parent);
			this.__applyStyle(parent,true,true,true);
		}
	}
	,clearStyle: function(childElement) {
		if(childElement != null && childElement.parentElement == this.element) {
			this.element.removeChild(childElement);
		}
	}
	,__applyStyle: function(displayObject,setTransform,setAlpha,setClip) {
		var style = displayObject.__style;
		if(setTransform && displayObject.__renderTransformChanged) {
			var _this = displayObject.__renderTransform;
			var roundPixels = this.__roundPixels;
			if(roundPixels == null) {
				roundPixels = false;
			}
			style.setProperty(this.__transformProperty,roundPixels ? "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)" : "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
		}
		if(displayObject.__worldZ != ++this.__z) {
			displayObject.__worldZ = this.__z;
			style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
		}
		if(setAlpha && displayObject.__worldAlphaChanged) {
			if(displayObject.__worldAlpha < 1) {
				style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
			} else {
				style.removeProperty("opacity");
			}
		}
		if(setClip && displayObject.__worldClipChanged) {
			if(displayObject.__worldClip == null) {
				style.removeProperty("clip");
			} else {
				var clip = displayObject.__worldClip;
				style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
			}
		}
	}
	,__initializeElement: function(displayObject,element) {
		var style = displayObject.__style = element.style;
		style.setProperty("position","absolute",null);
		style.setProperty("top","0",null);
		style.setProperty("left","0",null);
		style.setProperty(this.__transformOriginProperty,"0 0 0",null);
		this.element.appendChild(element);
		displayObject.__worldAlphaChanged = true;
		displayObject.__renderTransformChanged = true;
		displayObject.__worldVisibleChanged = true;
		displayObject.__worldClipChanged = true;
		displayObject.__worldClip = null;
		displayObject.__worldZ = -1;
	}
	,__popMask: function() {
		this.__popMaskRect();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__currentClipRect = this.__clipRects[this.__numClipRects - 1];
			} else {
				this.__currentClipRect = null;
			}
		}
	}
	,__pushMask: function(mask) {
		this.__pushMaskRect(mask.getBounds(mask),mask.__renderTransform);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,transform);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.__currentClipRect = clipRect;
		this.__numClipRects++;
	}
	,__render: function(object) {
		if(!this.__stage.__transparent) {
			this.element.style.background = this.__stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.__z = 1;
		this.__renderDrawable(object);
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			openfl_display__$internal_DOMBitmap.renderDrawable(object,this);
			break;
		case 3:
			openfl_display__$internal_DOMDisplayObject.renderDrawable(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_DOMDisplayObjectContainer.renderDrawable(object,this);
			break;
		case 6:
			openfl_display__$internal_DOMSimpleButton.renderDrawable(object,this);
			break;
		case 7:
			openfl_display__$internal_DOMTextField.renderDrawable(object,this);
			break;
		case 8:
			openfl_display__$internal_DOMVideo.renderDrawable(object,this);
			break;
		case 9:
			openfl_display__$internal_DOMTilemap.renderDrawable(object,this);
			break;
		case 10:
			var domElement = object;
			if(domElement.stage != null && domElement.__worldVisible && domElement.__renderable) {
				if(!domElement.__active) {
					this.__initializeElement(domElement,domElement.__element);
					domElement.__active = true;
				}
				this.__updateClip(domElement);
				this.__applyStyle(domElement,true,true,true);
			} else if(domElement.__active) {
				this.element.removeChild(domElement.__element);
				domElement.__active = false;
			}
			openfl_display__$internal_DOMDisplayObject.renderDrawable(domElement,this);
			break;
		default:
		}
	}
	,__renderDrawableClear: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			openfl_display__$internal_DOMBitmap.renderDrawableClear(object,this);
			break;
		case 3:
			openfl_display__$internal_DOMDisplayObject.renderDrawableClear(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_DOMDisplayObjectContainer.renderDrawableClear(object,this);
			break;
		case 6:
			openfl_display__$internal_DOMSimpleButton.renderDrawableClear(object,this);
			break;
		case 7:
			openfl_display__$internal_DOMTextField.renderDrawableClear(object,this);
			break;
		case 8:
			openfl_display__$internal_DOMVideo.renderDrawableClear(object,this);
			break;
		case 9:
			openfl_display__$internal_DOMTilemap.renderDrawableClear(object,this);
			break;
		default:
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
	}
	,__updateClip: function(displayObject) {
		if(this.__currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.__currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl_display_DOMRenderer
});
var openfl_display_Shader = function(code) {
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
	this.__data = openfl_display_ShaderData._new(code);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = "openfl.display.Shader";
openfl_display_Shader.prototype = {
	__clearUseArray: function() {
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
	}
	,__createGLShader: function(source,type) {
		var gl = this.__context.gl;
		var shader = gl.createShader(type);
		gl.shaderSource(shader,source);
		gl.compileShader(shader);
		if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
			var message = type == gl.VERTEX_SHADER ? "Error compiling vertex shader" : "Error compiling fragment shader";
			message += "\n" + gl.getShaderInfoLog(shader);
			message += "\n" + source;
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 331, className : "openfl.display.Shader", methodName : "__createGLShader"});
		}
		return shader;
	}
	,__createGLProgram: function(vertexSource,fragmentSource) {
		var gl = this.__context.gl;
		var vertexShader = this.__createGLShader(vertexSource,gl.VERTEX_SHADER);
		var fragmentShader = this.__createGLShader(fragmentSource,gl.FRAGMENT_SHADER);
		var program = gl.createProgram();
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(param.name.indexOf("Position") > -1 && StringTools.startsWith(param.name,"openfl_")) {
				gl.bindAttribLocation(program,0,param.name);
				break;
			}
		}
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(program);
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 364, className : "openfl.display.Shader", methodName : "__createGLProgram"});
		}
		return program;
	}
	,__disable: function() {
		if(this.program != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		var gl = this.__context.gl;
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__disableGL(this.__context,textureCount);
			++textureCount;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		this.__context.__bindGLArrayBuffer(null);
		if(this.__context.__context.type == "opengl") {
			gl.disable(gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.program != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var gl = this.__context.gl;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.__context.__context.type == "opengl" && textureCount > 0) {
			gl.enable(gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = openfl_display_ShaderData._new(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.program == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__paramBool == null) {
			this.__glSourceDirty = false;
			this.program = null;
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.__context != null && this.program == null) {
			var gl = this.__context.gl;
			var prefix = "#ifdef GL_ES\n\t\t\t\t" + (this.precisionHint == 1 ? "#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\t\t\tprecision highp float;\n\t\t\t\t#else\n\t\t\t\tprecision mediump float;\n\t\t\t\t#endif" : "precision lowp float;") + "\n\t\t\t\t#endif\n\t\t\t\t";
			var vertex = prefix + this.get_glVertexSource();
			var fragment = prefix + this.get_glFragmentSource();
			var id = vertex + fragment;
			if(Object.prototype.hasOwnProperty.call(this.__context.__programs.h,id)) {
				this.program = this.__context.__programs.h[id];
			} else {
				this.program = this.__context.createProgram(1);
				this.program.__glProgram = this.__createGLProgram(vertex,fragment);
				this.__context.__programs.h[id] = this.program;
			}
			if(this.program != null) {
				this.glProgram = this.program.__glProgram;
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(input.__isUniform) {
						input.index = gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramBool;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramFloat;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramInt;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			var isUniform = storageType == "uniform";
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				input.__isUniform = isUniform;
				this.__inputBitmapData.push(input);
				switch(name) {
				case "bitmap":
					this.__bitmap = input;
					break;
				case "openfl_Texture":
					this.__texture = input;
					break;
				default:
				}
				this.__data[name] = input;
				if(this.__isGenerated) {
					this[name] = input;
				}
			} else if(!Object.prototype.hasOwnProperty.call(this.__data,name) || Reflect.field(this.__data,name) == null) {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				var length;
				switch(parameterType) {
				case 1:case 5:case 9:
					length = 2;
					break;
				case 3:case 7:case 11:case 12:
					length = 4;
					break;
				case 2:case 6:case 10:
					length = 3;
					break;
				case 16:
					length = 9;
					break;
				case 20:
					length = 16;
					break;
				default:
					length = 1;
				}
				var arrayLength;
				switch(parameterType) {
				case 12:
					arrayLength = 2;
					break;
				case 16:
					arrayLength = 3;
					break;
				case 20:
					arrayLength = 4;
					break;
				default:
					arrayLength = 1;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.set_name(name);
					parameter.type = parameterType;
					parameter.__arrayLength = arrayLength;
					parameter.__isBool = true;
					parameter.__isUniform = isUniform;
					parameter.__length = length;
					this.__paramBool.push(parameter);
					if(name == "openfl_HasColorTransform") {
						this.__hasColorTransform = parameter;
					}
					this.__data[name] = parameter;
					if(this.__isGenerated) {
						this[name] = parameter;
					}
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.set_name(name);
					parameter1.type = parameterType;
					parameter1.__arrayLength = arrayLength;
					parameter1.__isInt = true;
					parameter1.__isUniform = isUniform;
					parameter1.__length = length;
					this.__paramInt.push(parameter1);
					this.__data[name] = parameter1;
					if(this.__isGenerated) {
						this[name] = parameter1;
					}
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.set_name(name);
					parameter2.type = parameterType;
					parameter2.__arrayLength = arrayLength;
					if(arrayLength > 0) {
						var elements = arrayLength * arrayLength;
						var array = null;
						var vector = null;
						var view = null;
						var buffer = null;
						var len = null;
						var this1;
						if(elements != null) {
							this1 = new Float32Array(elements);
						} else if(array != null) {
							this1 = new Float32Array(array);
						} else if(vector != null) {
							this1 = new Float32Array(vector.__array);
						} else if(view != null) {
							this1 = new Float32Array(view);
						} else if(buffer != null) {
							if(len == null) {
								this1 = new Float32Array(buffer,0);
							} else {
								this1 = new Float32Array(buffer,0,len);
							}
						} else {
							this1 = null;
						}
						parameter2.__uniformMatrix = this1;
					}
					parameter2.__isFloat = true;
					parameter2.__isUniform = isUniform;
					parameter2.__length = length;
					this.__paramFloat.push(parameter2);
					if(StringTools.startsWith(name,"openfl_")) {
						switch(name) {
						case "openfl_Alpha":
							this.__alpha = parameter2;
							break;
						case "openfl_ColorMultiplier":
							this.__colorMultiplier = parameter2;
							break;
						case "openfl_ColorOffset":
							this.__colorOffset = parameter2;
							break;
						case "openfl_Matrix":
							this.__matrix = parameter2;
							break;
						case "openfl_Position":
							this.__position = parameter2;
							break;
						case "openfl_TextureCoord":
							this.__textureCoord = parameter2;
							break;
						case "openfl_TextureSize":
							this.__textureSize = parameter2;
							break;
						default:
						}
					}
					this.__data[name] = parameter2;
					if(this.__isGenerated) {
						this[name] = parameter2;
					}
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.program != null) {
			this.__updateGL();
		}
	}
	,__updateFromBuffer: function(shaderBuffer,bufferOffset) {
		if(this.program != null) {
			this.__updateGLFromBuffer(shaderBuffer,bufferOffset);
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__updateGL(this.__context,textureCount);
			++textureCount;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
	}
	,__updateGLFromBuffer: function(shaderBuffer,bufferOffset) {
		var textureCount = 0;
		var input;
		var inputData;
		var inputFilter;
		var inputMipFilter;
		var inputWrap;
		var _g = 0;
		var _g1 = shaderBuffer.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shaderBuffer.inputRefs[i];
			inputData = shaderBuffer.inputs[i];
			inputFilter = shaderBuffer.inputFilter[i];
			inputMipFilter = shaderBuffer.inputMipFilter[i];
			inputWrap = shaderBuffer.inputWrap[i];
			if(inputData != null) {
				input.__updateGL(this.__context,textureCount,inputData,inputFilter,inputMipFilter,inputWrap);
				++textureCount;
			}
		}
		var gl = this.__context.gl;
		if(shaderBuffer.paramDataLength > 0) {
			if(shaderBuffer.paramDataBuffer == null) {
				shaderBuffer.paramDataBuffer = gl.createBuffer();
			}
			this.__context.__bindGLArrayBuffer(shaderBuffer.paramDataBuffer);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,shaderBuffer.paramData,gl.DYNAMIC_DRAW);
		} else {
			this.__context.__bindGLArrayBuffer(null);
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var boolCount = shaderBuffer.paramBoolCount;
		var floatCount = shaderBuffer.paramFloatCount;
		var paramData = shaderBuffer.paramData;
		var boolRef;
		var floatRef;
		var intRef;
		var hasOverride;
		var overrideBoolValue = null;
		var overrideFloatValue = null;
		var overrideIntValue = null;
		var _g = 0;
		var _g1 = shaderBuffer.paramCount;
		while(_g < _g1) {
			var i = _g++;
			hasOverride = false;
			if(i < boolCount) {
				boolRef = shaderBuffer.paramRefs_Bool[boolIndex];
				var _g2 = 0;
				var _g3 = shaderBuffer.overrideBoolCount;
				while(_g2 < _g3) {
					var j = _g2++;
					if(boolRef.name == shaderBuffer.overrideBoolNames[j]) {
						overrideBoolValue = shaderBuffer.overrideBoolValues[j];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					boolRef.__updateGL(this.__context,overrideBoolValue);
				} else {
					boolRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++boolIndex;
			} else if(i < boolCount + floatCount) {
				floatRef = shaderBuffer.paramRefs_Float[floatIndex];
				var _g4 = 0;
				var _g5 = shaderBuffer.overrideFloatCount;
				while(_g4 < _g5) {
					var j1 = _g4++;
					if(floatRef.name == shaderBuffer.overrideFloatNames[j1]) {
						overrideFloatValue = shaderBuffer.overrideFloatValues[j1];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					floatRef.__updateGL(this.__context,overrideFloatValue);
				} else {
					floatRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++floatIndex;
			} else {
				intRef = shaderBuffer.paramRefs_Int[intIndex];
				var _g6 = 0;
				var _g7 = shaderBuffer.overrideIntCount;
				while(_g6 < _g7) {
					var j2 = _g6++;
					if(intRef.name == shaderBuffer.overrideIntNames[j2]) {
						overrideIntValue = shaderBuffer.overrideIntValues[j2];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					intRef.__updateGL(this.__context,overrideIntValue);
				} else {
					intRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++intIndex;
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) {
			this.__glSourceDirty = true;
		}
		return this.__glVertexSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl_display_DisplayObjectShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.DisplayObjectShader"] = openfl_display_DisplayObjectShader;
openfl_display_DisplayObjectShader.__name__ = "openfl.display.DisplayObjectShader";
openfl_display_DisplayObjectShader.__super__ = openfl_display_Shader;
openfl_display_DisplayObjectShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl_display_DisplayObjectShader
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.name = name;
	this.frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = "openfl.display.FrameLabel";
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_FrameLabel
});
var openfl_display_FrameScript = function(script,frame) {
	this.script = script;
	this.frame = frame;
};
$hxClasses["openfl.display.FrameScript"] = openfl_display_FrameScript;
openfl_display_FrameScript.__name__ = "openfl.display.FrameScript";
openfl_display_FrameScript.prototype = {
	__class__: openfl_display_FrameScript
};
var openfl_display_GradientType = {};
openfl_display_GradientType.fromInt = function(value) {
	return value;
};
openfl_display_GradientType.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display_GradientType.toInt = function(this1) {
	return this1;
};
openfl_display_GradientType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl_display__$internal_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__usedShaderBuffers = new haxe_ds_List();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.__shaderBufferPool = new lime_utils_ObjectPool(function() {
		return new openfl_display__$internal_ShaderBuffer();
	});
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = "openfl.display.Graphics";
openfl_display_Graphics.prototype = {
	beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		if(colors == null || colors.length == 0) {
			return;
		}
		if(alphas == null) {
			alphas = [];
			var _g = 0;
			var _g1 = colors.length;
			while(_g < _g1) {
				var i = _g++;
				alphas.push(1);
			}
		}
		if(ratios == null) {
			ratios = [];
			var _g = 0;
			var _g1 = colors.length;
			while(_g < _g1) {
				var i = _g++;
				ratios.push(Math.ceil(i / colors.length * 255));
			}
		}
		if(alphas.length < colors.length || ratios.length < colors.length) {
			return;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,beginShaderFill: function(shader,matrix) {
		if(shader != null) {
			var shaderBuffer = this.__shaderBufferPool.get();
			this.__usedShaderBuffers.add(shaderBuffer);
			shaderBuffer.update(shader);
			this.__commands.beginShaderFill(shaderBuffer);
		}
	}
	,clear: function() {
		var _g_head = this.__usedShaderBuffers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var shaderBuffer = val;
			this.__shaderBufferPool.release(shaderBuffer);
		}
		this.__usedShaderBuffers.clear();
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__positionX = 0;
		this.__positionY = 0;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null ? sourceGraphics.__bounds.clone() : null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1 = anchorX;
		var ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			}
			if(t2 > 0 && t2 < 1) {
				ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
			}
		}
		var iy1 = anchorY;
		var iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v = controlY1 - this.__positionX;
			var w = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				iy1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlY1,controlY2,anchorY);
			}
			if(t2 > 0 && t2 < 1) {
				iy2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlY1,controlY2,anchorY);
			}
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var shaderFill;
		var stroke;
		var path;
		var trianglePath;
		var quadPath;
		var graphics = graphicsData.iterator();
		while(graphics.hasNext()) {
			var graphics1 = graphics.next();
			switch(graphics1.__graphicsDataType) {
			case 0:
				stroke = graphics1;
				if(stroke.fill != null) {
					var thickness = stroke.thickness;
					if(isNaN(thickness)) {
						thickness = null;
					}
					switch(stroke.fill.__graphicsFillType) {
					case 0:
						fill = stroke.fill;
						this.lineStyle(thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						break;
					case 1:
						gradientFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
						break;
					case 2:
						bitmapFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
						break;
					default:
					}
				} else {
					this.lineStyle();
				}
				break;
			case 1:
				fill = graphics1;
				this.beginFill(fill.color,fill.alpha);
				break;
			case 2:
				gradientFill = graphics1;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
				break;
			case 3:
				path = graphics1;
				this.drawPath(path.commands,path.data,path.winding);
				break;
			case 4:
				bitmapFill = graphics1;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
				break;
			case 5:
				this.endFill();
				break;
			case 6:
				quadPath = graphics1;
				this.drawQuads(quadPath.rects,quadPath.indices,quadPath.transforms);
				break;
			case 7:
				trianglePath = graphics1;
				this.drawTriangles(trianglePath.vertices,trianglePath.indices,trianglePath.uvtData,trianglePath.culling);
				break;
			case 8:
				shaderFill = graphics1;
				this.beginShaderFill(shaderFill.shader,shaderFill.matrix);
				break;
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) {
			winding = 0;
		}
		var dataIndex = 0;
		if(winding == 1) {
			this.__commands.windingNonZero();
		}
		var command = commands.iterator();
		_hx_loop1: while(command.hasNext()) {
			var command1 = command.next();
			switch(command1) {
			case 1:
				this.moveTo(data.get(dataIndex),data.get(dataIndex + 1));
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.get(dataIndex),data.get(dataIndex + 1));
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3));
				dataIndex += 4;
				break;
			case 4:
				this.moveTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
				break _hx_loop1;
			case 5:
				this.lineTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
				break _hx_loop1;
			case 6:
				this.cubicCurveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3),data.get(dataIndex + 4),data.get(dataIndex + 5));
				dataIndex += 6;
				break;
			default:
			}
		}
	}
	,drawQuads: function(rects,indices,transforms) {
		if(rects == null) {
			return;
		}
		var hasIndices = indices != null;
		var transformABCD = false;
		var transformXY = false;
		var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
		if(length == 0) {
			return;
		}
		if(transforms != null) {
			if(transforms.get_length() >= length * 6) {
				transformABCD = true;
				transformXY = true;
			} else if(transforms.get_length() >= length * 4) {
				transformABCD = true;
			} else if(transforms.get_length() >= length * 2) {
				transformXY = true;
			}
		}
		var tileRect = openfl_geom_Rectangle.__pool.get();
		var tileTransform = openfl_geom_Matrix.__pool.get();
		var minX = Infinity;
		var minY = Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var ri;
		var ti;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			ri = hasIndices ? indices.get(i) * 4 : i * 4;
			if(ri < 0) {
				continue;
			}
			tileRect.setTo(0,0,rects.get(ri + 2),rects.get(ri + 3));
			if(tileRect.width <= 0 || tileRect.height <= 0) {
				continue;
			}
			if(transformABCD && transformXY) {
				ti = i * 6;
				tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
			} else if(transformABCD) {
				ti = i * 4;
				tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
			} else if(transformXY) {
				ti = i * 2;
				tileTransform.tx = transforms.get(ti);
				tileTransform.ty = transforms.get(ti + 1);
			} else {
				tileTransform.tx = tileRect.x;
				tileTransform.ty = tileRect.y;
			}
			tileRect.__transform(tileRect,tileTransform);
			if(minX > tileRect.x) {
				minX = tileRect.x;
			}
			if(minY > tileRect.y) {
				minY = tileRect.y;
			}
			if(maxX < tileRect.get_right()) {
				maxX = tileRect.get_right();
			}
			if(maxY < tileRect.get_bottom()) {
				maxY = tileRect.get_bottom();
			}
		}
		this.__inflateBounds(minX,minY);
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawQuads(rects,indices,transforms);
		this.set___dirty(true);
		this.__visible = true;
		openfl_geom_Rectangle.__pool.release(tileRect);
		openfl_geom_Matrix.__pool.release(tileTransform);
	}
	,drawRect: function(x,y,width,height) {
		if(width == 0 && height == 0) {
			return;
		}
		var xSign = width < 0 ? -1 : 1;
		var ySign = height < 0 ? -1 : 1;
		this.__inflateBounds(x - this.__strokePadding * xSign,y - this.__strokePadding * ySign);
		this.__inflateBounds(x + width + this.__strokePadding * xSign,y + height + this.__strokePadding * ySign);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width == 0 && height == 0) {
			return;
		}
		var xSign = width < 0 ? -1 : 1;
		var ySign = height < 0 ? -1 : 1;
		this.__inflateBounds(x - this.__strokePadding * xSign,y - this.__strokePadding * ySign);
		this.__inflateBounds(x + width + this.__strokePadding * xSign,y + height + this.__strokePadding * ySign);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		var xw = x + width;
		var yh = y + height;
		var minSize = width < height ? width * 2 : height * 2;
		if(!(topLeftRadius < minSize)) {
			topLeftRadius = minSize;
		}
		if(!(topRightRadius < minSize)) {
			topRightRadius = minSize;
		}
		if(!(bottomLeftRadius < minSize)) {
			bottomLeftRadius = minSize;
		}
		if(!(bottomRightRadius < minSize)) {
			bottomRightRadius = minSize;
		}
		var anchor = 1 - Math.sin(45 * (Math.PI / 180));
		var control = 1 - Math.tan(22.5 * (Math.PI / 180));
		var a = bottomRightRadius * anchor;
		var s = bottomRightRadius * control;
		this.moveTo(xw,yh - bottomRightRadius);
		this.curveTo(xw,yh - s,xw - a,yh - a);
		this.curveTo(xw - s,yh,xw - bottomRightRadius,yh);
		a = bottomLeftRadius * anchor;
		s = bottomLeftRadius * control;
		this.lineTo(x + bottomLeftRadius,yh);
		this.curveTo(x + s,yh,x + a,yh - a);
		this.curveTo(x,yh - s,x,yh - bottomLeftRadius);
		a = topLeftRadius * anchor;
		s = topLeftRadius * control;
		this.lineTo(x,y + topLeftRadius);
		this.curveTo(x,y + s,x + a,y + a);
		this.curveTo(x + s,y,x + topLeftRadius,y);
		a = topRightRadius * anchor;
		s = topRightRadius * control;
		this.lineTo(xw - topRightRadius,y);
		this.curveTo(xw - s,y,xw - a,y + a);
		this.curveTo(xw,y + s,xw,y + topRightRadius);
		this.lineTo(xw,yh - bottomRightRadius);
		this.set___dirty(true);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		if(vertices == null || vertices.get_length() == 0) {
			return;
		}
		var vertLength = vertices.get_length() / 2 | 0;
		if(indices == null) {
			if(vertLength % 3 != 0) {
				throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			}
			indices = openfl_Vector.toIntVector(null);
			var _g = 0;
			var _g1 = vertLength;
			while(_g < _g1) {
				var i = _g++;
				indices.push(i);
			}
		}
		if(culling == null) {
			culling = 1;
		}
		var x;
		var y;
		var minX = Infinity;
		var minY = Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g = 0;
		var _g1 = vertLength;
		while(_g < _g1) {
			var i = _g++;
			x = vertices.get(i * 2);
			y = vertices.get(i * 2 + 1);
			if(minX > x) {
				minX = x;
			}
			if(minY > y) {
				minY = y;
			}
			if(maxX < x) {
				maxX = x;
			}
			if(maxY < y) {
				maxY = y;
			}
		}
		this.__inflateBounds(minX,minY);
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = Math.ceil(thickness);
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = Math.ceil(thickness / 2);
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,overrideBlendMode: function(blendMode) {
		if(blendMode == null) {
			blendMode = 10;
		}
		this.__commands.overrideBlendMode(blendMode);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) {
			recurse = true;
		}
		var graphicsData = openfl_Vector.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null && this.__canvas != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0 ? -matrix.tx : 1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm == 0 ? -matrix.ty : 1.0 / norm * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl_display__$internal_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl_display__$internal_DrawCommandReader(this.__commands);
		var path = null;
		var stroke;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 4:case 5:case 6:case 7:case 9:case 10:case 17:case 18:
				if(path == null) {
					path = new openfl_display_GraphicsPath();
				}
				break;
			default:
				if(path != null) {
					graphicsData.push(path);
					path = null;
				}
			}
			switch(type._hx_index) {
			case 0:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				graphicsData.push(new openfl_display_GraphicsBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]));
				break;
			case 1:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				graphicsData.push(new openfl_display_GraphicsSolidFill(c1.buffer.i[c1.iPos],1));
				break;
			case 2:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				graphicsData.push(new openfl_display_GraphicsGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]));
				break;
			case 3:
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				path.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				path.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				path.__drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				path.__drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				path.__drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				path.__drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos] != null ? c8.buffer.o[c8.oPos] : c8.buffer.f[c8.fPos + 4]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.END_FILL;
				var this10 = data;
				graphicsData.push(new openfl_display_GraphicsEndFill());
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
				var this11 = data;
				var c9 = this11;
				path = null;
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
				var this12 = data;
				var c10 = this12;
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
				var this13 = data;
				var c11 = this13;
				stroke = new openfl_display_GraphicsStroke(c11.buffer.o[c11.oPos],c11.buffer.b[c11.bPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos + 1]);
				stroke.fill = new openfl_display_GraphicsSolidFill(c11.buffer.i[c11.iPos],c11.buffer.f[c11.fPos]);
				graphicsData.push(stroke);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
				var this14 = data;
				var c12 = this14;
				path.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
				var this15 = data;
				var c13 = this15;
				path.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		if(path != null) {
			graphicsData.push(path);
		}
	}
	,__update: function(displayMatrix) {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) {
				scaleX = Math.abs(parentTransform.a);
			} else {
				scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = Math.abs(parentTransform.d);
			} else {
				scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
		} else {
			return;
		}
		if(displayMatrix != null) {
			if(displayMatrix.b == 0) {
				scaleX *= displayMatrix.a;
			} else {
				scaleX *= Math.sqrt(displayMatrix.a * displayMatrix.a + displayMatrix.b * displayMatrix.b);
			}
			if(displayMatrix.c == 0) {
				scaleY *= displayMatrix.d;
			} else {
				scaleY *= Math.sqrt(displayMatrix.c * displayMatrix.c + displayMatrix.d * displayMatrix.d);
			}
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) {
				this.set___dirty(true);
			}
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		this.__renderTransform.a = width / this.__bounds.width;
		this.__renderTransform.d = height / this.__bounds.height;
		var inverseA = 1 / this.__renderTransform.a;
		var inverseD = 1 / this.__renderTransform.d;
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		this.__worldTransform.tx = Math.round(tx);
		this.__worldTransform.ty = Math.round(ty);
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.tx = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - ty) + _this.d * (tx - _this.tx));
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.ty = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (ty - _this.ty) + _this.b * (_this.tx - tx));
		var newWidth = Math.ceil(width + 1.0);
		var newHeight = Math.ceil(height + 1.0);
		if(newWidth != this.__width || newHeight != this.__height) {
			this.set___dirty(true);
		}
		this.__width = newWidth;
		this.__height = newHeight;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value) {
			this.__softwareDirty = true;
			this.__hardwareDirty = true;
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = "openfl.display.IGraphicsFill";
openfl_display_IGraphicsFill.__isInterface__ = true;
openfl_display_IGraphicsFill.prototype = {
	__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = "openfl.display.IGraphicsData";
openfl_display_IGraphicsData.__isInterface__ = true;
openfl_display_IGraphicsData.prototype = {
	__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) {
		smooth = false;
	}
	if(repeat == null) {
		repeat = true;
	}
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = 4;
	this.__graphicsFillType = 2;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = "openfl.display.GraphicsBitmapFill";
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = 5;
	this.__graphicsFillType = 3;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = "openfl.display.GraphicsEndFill";
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) {
		focalPointRatio = 0;
	}
	if(type == null) {
		type = 0;
	}
	if(spreadMethod == null) {
		spreadMethod = 0;
	}
	if(interpolationMethod == null) {
		interpolationMethod = 1;
	}
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = 2;
	this.__graphicsFillType = 1;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = "openfl.display.GraphicsGradientFill";
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = "openfl.display.IGraphicsPath";
openfl_display_IGraphicsPath.__isInterface__ = true;
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) {
		winding = 0;
	}
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = 3;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = "openfl.display.GraphicsPath";
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(6);
		this.data.push(controlX1);
		this.data.push(controlY1);
		this.data.push(controlX2);
		this.data.push(controlY2);
		this.data.push(anchorX);
		this.data.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(3);
		this.data.push(controlX);
		this.data.push(controlY);
		this.data.push(anchorX);
		this.data.push(anchorY);
	}
	,lineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(2);
		this.data.push(x);
		this.data.push(y);
	}
	,moveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(1);
		this.data.push(x);
		this.data.push(y);
	}
	,wideLineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(2);
		this.data.push(x);
		this.data.push(y);
	}
	,wideMoveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(1);
		this.data.push(x);
		this.data.push(y);
	}
	,__drawCircle: function(x,y,radius) {
		this.__drawRoundRect(x - radius,y - radius,radius * 2,radius * 2,radius * 2,radius * 2);
	}
	,__drawEllipse: function(x,y,width,height) {
		this.__drawRoundRect(x,y,width,height,width,height);
	}
	,__drawRect: function(x,y,width,height) {
		this.moveTo(x,y);
		this.lineTo(x + width,y);
		this.lineTo(x + width,y + height);
		this.lineTo(x,y + height);
		this.lineTo(x,y);
	}
	,__drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		ellipseWidth *= 0.5;
		ellipseHeight *= 0.5;
		if(ellipseWidth > width / 2) {
			ellipseWidth = width / 2;
		}
		if(ellipseHeight > height / 2) {
			ellipseHeight = height / 2;
		}
		var xe = x + width;
		var ye = y + height;
		var cx1 = -ellipseWidth + ellipseWidth * 0.70710678118654752440084436210485;
		var cx2 = -ellipseWidth + ellipseWidth * 0.4142135623730950488016887242097;
		var cy1 = -ellipseHeight + ellipseHeight * 0.70710678118654752440084436210485;
		var cy2 = -ellipseHeight + ellipseHeight * 0.4142135623730950488016887242097;
		this.moveTo(xe,ye - ellipseHeight);
		this.curveTo(xe,ye + cy2,xe + cx1,ye + cy1);
		this.curveTo(xe + cx2,ye,xe - ellipseWidth,ye);
		this.lineTo(x + ellipseWidth,ye);
		this.curveTo(x - cx2,ye,x - cx1,ye + cy1);
		this.curveTo(x,ye + cy2,x,ye - ellipseHeight);
		this.lineTo(x,y + ellipseHeight);
		this.curveTo(x,y - cy2,x - cx1,y - cy1);
		this.curveTo(x - cx2,y,x + ellipseWidth,y);
		this.lineTo(xe - ellipseWidth,y);
		this.curveTo(xe + cx2,y,xe + cx1,y - cy1);
		this.curveTo(xe,y - cy2,xe,y + ellipseHeight);
		this.lineTo(xe,ye - ellipseHeight);
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display_GraphicsPathWinding = {};
openfl_display_GraphicsPathWinding.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display_GraphicsPathWinding.toString = function(this1) {
	switch(this1) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsQuadPath = function(rects,indices,transforms) {
	this.rects = rects;
	this.indices = indices;
	this.transforms = transforms;
	this.__graphicsDataType = 6;
};
$hxClasses["openfl.display.GraphicsQuadPath"] = openfl_display_GraphicsQuadPath;
openfl_display_GraphicsQuadPath.__name__ = "openfl.display.GraphicsQuadPath";
openfl_display_GraphicsQuadPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsQuadPath.prototype = {
	__class__: openfl_display_GraphicsQuadPath
};
var openfl_display_GraphicsShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.GraphicsShader"] = openfl_display_GraphicsShader;
openfl_display_GraphicsShader.__name__ = "openfl.display.GraphicsShader";
openfl_display_GraphicsShader.__super__ = openfl_display_Shader;
openfl_display_GraphicsShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl_display_GraphicsShader
});
var openfl_display_GraphicsShaderFill = function(shader,matrix) {
	this.shader = shader;
	this.matrix = matrix;
	this.__graphicsDataType = 8;
	this.__graphicsFillType = 4;
};
$hxClasses["openfl.display.GraphicsShaderFill"] = openfl_display_GraphicsShaderFill;
openfl_display_GraphicsShaderFill.__name__ = "openfl.display.GraphicsShaderFill";
openfl_display_GraphicsShaderFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsShaderFill.prototype = {
	__class__: openfl_display_GraphicsShaderFill
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = 1;
	this.__graphicsFillType = 0;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = "openfl.display.GraphicsSolidFill";
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = "openfl.display.IGraphicsStroke";
openfl_display_IGraphicsStroke.__isInterface__ = true;
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) {
		miterLimit = 3;
	}
	if(joints == null) {
		joints = 2;
	}
	if(caps == null) {
		caps = 0;
	}
	if(scaleMode == null) {
		scaleMode = 2;
	}
	if(pixelHinting == null) {
		pixelHinting = false;
	}
	if(thickness == null) {
		thickness = NaN;
	}
	this.caps = caps;
	this.fill = fill;
	this.joints = joints;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode;
	this.thickness = thickness;
	this.__graphicsDataType = 0;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = "openfl.display.GraphicsStroke";
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsTrianglePath = function(vertices,indices,uvtData,culling) {
	if(culling == null) {
		culling = 1;
	}
	this.vertices = vertices;
	this.indices = indices;
	this.uvtData = uvtData;
	this.culling = culling;
	this.__graphicsDataType = 7;
};
$hxClasses["openfl.display.GraphicsTrianglePath"] = openfl_display_GraphicsTrianglePath;
openfl_display_GraphicsTrianglePath.__name__ = "openfl.display.GraphicsTrianglePath";
openfl_display_GraphicsTrianglePath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsTrianglePath.prototype = {
	__class__: openfl_display_GraphicsTrianglePath
};
var openfl_display_ITileContainer = function() { };
$hxClasses["openfl.display.ITileContainer"] = openfl_display_ITileContainer;
openfl_display_ITileContainer.__name__ = "openfl.display.ITileContainer";
openfl_display_ITileContainer.__isInterface__ = true;
openfl_display_ITileContainer.prototype = {
	__class__: openfl_display_ITileContainer
	,__properties__: {get_numTiles:"get_numTiles"}
};
var openfl_display_InterpolationMethod = {};
openfl_display_InterpolationMethod.fromInt = function(value) {
	return value;
};
openfl_display_InterpolationMethod.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display_InterpolationMethod.toInt = function(this1) {
	return this1;
};
openfl_display_InterpolationMethod.toString = function(this1) {
	switch(this1) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = "openfl.display.JPEGEncoderOptions";
openfl_display_JPEGEncoderOptions.prototype = {
	__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display_JointStyle = {};
openfl_display_JointStyle.fromInt = function(value) {
	return value;
};
openfl_display_JointStyle.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display_JointStyle.toInt = function(this1) {
	return this1;
};
openfl_display_JointStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display_LineScaleMode = {};
openfl_display_LineScaleMode.fromInt = function(value) {
	return value;
};
openfl_display_LineScaleMode.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display_LineScaleMode.toInt = function(this1) {
	return this1;
};
openfl_display_LineScaleMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 4;
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
	this.__unloaded = true;
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = "openfl.display.Loader";
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	addChild: function(child) {
		throw haxe_Exception.thrown(new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069));
	}
	,addChildAt: function(child,index) {
		throw haxe_Exception.thrown(new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069));
	}
	,close: function() {
		openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/display/Loader.hx", lineNumber : 228, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		this.unload();
		this.contentLoaderInfo.loaderURL = openfl_Lib.get_current().get_loaderInfo().url;
		this.contentLoaderInfo.url = request.url;
		this.__unloaded = false;
		if(request.contentType == null || request.contentType == "") {
			var extension = "";
			this.__path = request.url;
			var queryIndex = this.__path.indexOf("?");
			if(queryIndex > -1) {
				this.__path = this.__path.substring(0,queryIndex);
			}
			while(StringTools.endsWith(this.__path,"/")) this.__path = this.__path.substring(0,this.__path.length - 1);
			if(StringTools.endsWith(this.__path,".bundle")) {
				this.__path += "/library.json";
				if(queryIndex > -1) {
					request.url = this.__path + request.url.substring(queryIndex);
				} else {
					request.url = this.__path;
				}
			}
			var extIndex = this.__path.lastIndexOf(".");
			if(extIndex > -1) {
				extension = this.__path.substring(extIndex + 1);
			}
			var tmp;
			switch(extension) {
			case "gif":
				tmp = "image/gif";
				break;
			case "jpeg":case "jpg":
				tmp = "image/jpeg";
				break;
			case "js":
				tmp = "application/javascript";
				break;
			case "json":
				tmp = "application/json";
				break;
			case "png":
				tmp = "image/png";
				break;
			case "swf":
				tmp = "application/x-shockwave-flash";
				break;
			default:
				tmp = "application/x-www-form-urlencoded";
			}
			this.contentLoaderInfo.contentType = tmp;
		} else {
			this.contentLoaderInfo.contentType = request.contentType;
		}
		if(this.contentLoaderInfo.contentType.indexOf("image/") > -1 && request.method == "GET" && (request.requestHeaders == null || request.requestHeaders.length == 0) && request.userAgent == null) {
			openfl_display_BitmapData.loadFromFile(request.url).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError)).onProgress($bind(this,this.BitmapData_onProgress));
			return;
		}
		var loader = new openfl_net_URLLoader();
		loader.dataFormat = 0;
		if(this.contentLoaderInfo.contentType.indexOf("/json") > -1 || this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1) {
			loader.dataFormat = 1;
		}
		loader.addEventListener("complete",$bind(this,this.loader_onComplete));
		loader.addEventListener("ioError",$bind(this,this.loader_onError));
		loader.addEventListener("progress",$bind(this,this.loader_onProgress));
		loader.load(request);
	}
	,loadBytes: function(buffer,context) {
		openfl_display_BitmapData.loadFromBytes(buffer).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
	}
	,removeChild: function(child) {
		if(child == this.content) {
			return openfl_display_DisplayObjectContainer.prototype.removeChild.call(this,this.content);
		} else {
			throw haxe_Exception.thrown(new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069));
		}
	}
	,removeChildAt: function(index) {
		throw haxe_Exception.thrown(new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069));
	}
	,setChildIndex: function(child,index) {
		throw haxe_Exception.thrown(new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069));
	}
	,unload: function() {
		if(!this.__unloaded) {
			if(this.content != null && this.content.parent == this) {
				openfl_display_DisplayObjectContainer.prototype.removeChild.call(this,this.content);
			}
			if(this.__library != null) {
				openfl_utils_Assets.unloadLibrary(this.contentLoaderInfo.url);
				this.__library = null;
			}
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			this.__unloaded = true;
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("unload"));
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) {
			gc = true;
		}
		if(this.content != null) {
			this.content.__stopAllMovieClips();
		}
		var _g = 0;
		var _g1 = this.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			this.getChildAt(i).__stopAllMovieClips();
		}
		this.unload();
		var gc1 = gc;
	}
	,__dispatchError: function(text) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.text = text;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__setContent: function(content,width,height) {
		this.content = content;
		this.contentLoaderInfo.content = content;
		this.contentLoaderInfo.width = width;
		this.contentLoaderInfo.height = height;
		if(content != null) {
			openfl_display_DisplayObjectContainer.prototype.addChildAt.call(this,content,0);
		}
	}
	,BitmapData_onError: function(error) {
		this.__dispatchError(Std.string(error));
	}
	,BitmapData_onLoad: function(bitmapData) {
		if(bitmapData == null) {
			this.__dispatchError("Unknown error");
			return;
		}
		this.__setContent(new openfl_display_Bitmap(bitmapData),bitmapData.width,bitmapData.height);
		this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
	}
	,BitmapData_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onComplete: function(event) {
		var _gthis = this;
		var loader = event.target;
		if(this.contentLoaderInfo.contentType != null && this.contentLoaderInfo.contentType.indexOf("/json") > -1) {
			var manifest = lime_utils_AssetManifest.parse(loader.data,haxe_io_Path.directory(this.__path));
			if(manifest == null) {
				this.__dispatchError("Cannot parse asset manifest");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				this.__dispatchError("Cannot open library");
				return;
			}
			if(((library) instanceof openfl_utils_AssetLibrary)) {
				library.load().onComplete(function(_) {
					_gthis.__library = library;
					openfl_utils_Assets.registerLibrary(_gthis.contentLoaderInfo.url,_gthis.__library);
					if(manifest.name != null && !openfl_utils_Assets.hasLibrary(manifest.name)) {
						openfl_utils_Assets.registerLibrary(manifest.name,_gthis.__library);
					}
					var clip = _gthis.__library.getMovieClip("");
					_gthis.__setContent(clip,clip.get_width() | 0,clip.get_height() | 0);
					_gthis.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
				}).onError(function(e) {
					_gthis.__dispatchError(e);
				});
			}
		} else if(this.contentLoaderInfo.contentType != null && (this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1)) {
			this.__setContent(new openfl_display_Sprite(),0,0);
			eval("(function () {" + Std.string(loader.data) + "})()");
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
		} else {
			this.contentLoaderInfo.bytes = loader.data;
			openfl_display_BitmapData.loadFromBytes(loader.data).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
		}
	}
	,loader_onError: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onProgress: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = "openfl.display.LoaderInfo";
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__enabled = true;
	if(openfl_display_MovieClip.__constructor != null) {
		var method = openfl_display_MovieClip.__constructor;
		openfl_display_MovieClip.__constructor = null;
		method(this);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = "openfl.display.MovieClip";
openfl_display_MovieClip.fromTimeline = function(timeline) {
	var movieClip = new openfl_display_MovieClip();
	movieClip.attachTimeline(timeline);
	return movieClip;
};
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	addFrameScript: function(index,method) {
		if(this.__timeline != null) {
			this.__timeline.__addFrameScript(index,method);
		}
	}
	,attachTimeline: function(timeline) {
		this.__timeline = timeline;
		if(timeline != null) {
			timeline.__attachMovieClip(this);
			this.play();
		}
	}
	,gotoAndPlay: function(frame,scene) {
		if(this.__timeline != null) {
			this.__timeline.__gotoAndPlay(frame,scene);
		}
	}
	,gotoAndStop: function(frame,scene) {
		if(this.__timeline != null) {
			this.__timeline.__gotoAndStop(frame,scene);
		}
	}
	,nextFrame: function() {
		if(this.__timeline != null) {
			this.__timeline.__nextFrame();
		}
	}
	,nextScene: function() {
		if(this.__timeline != null) {
			this.__timeline.__nextScene();
		}
	}
	,play: function() {
		if(this.__timeline != null) {
			this.__timeline.__play();
		}
	}
	,prevFrame: function() {
		if(this.__timeline != null) {
			this.__timeline.__prevFrame();
		}
	}
	,prevScene: function() {
		if(this.__timeline != null) {
			this.__timeline.__prevScene();
		}
	}
	,stop: function() {
		if(this.__timeline != null) {
			this.__timeline.__stop();
		}
	}
	,__enterFrame: function(deltaTime) {
		if(this.__timeline != null) {
			this.__timeline.__enterFrame(deltaTime);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__stopAllMovieClips: function() {
		openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
		this.stop();
	}
	,__tabTest: function(stack) {
		if(!this.__enabled) {
			return;
		}
		openfl_display_Sprite.prototype.__tabTest.call(this,stack);
	}
	,__onMouseDown: function(event) {
		if(this.__enabled && this.__hasDown) {
			this.gotoAndStop("_down");
		}
		this.__mouseIsDown = true;
		if(this.stage != null) {
			this.stage.addEventListener("mouseUp",$bind(this,this.__onMouseUp),true);
		}
	}
	,__onMouseUp: function(event) {
		this.__mouseIsDown = false;
		if(this.stage != null) {
			this.stage.removeEventListener("mouseUp",$bind(this,this.__onMouseUp));
		}
		if(!this.__buttonMode) {
			return;
		}
		if(event.target == this && this.__enabled && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__enabled && this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOut: function(event) {
		if(!this.__enabled) {
			return;
		}
		if(this.__mouseIsDown && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOver: function(event) {
		if(this.__enabled && this.__hasOver) {
			this.gotoAndStop("_over");
		}
	}
	,set_buttonMode: function(value) {
		if(this.__buttonMode != value) {
			if(value) {
				this.__hasDown = false;
				this.__hasOver = false;
				this.__hasUp = false;
				var _g = 0;
				var _g1 = this.get_currentLabels();
				while(_g < _g1.length) {
					var frameLabel = _g1[_g];
					++_g;
					switch(frameLabel.name) {
					case "_down":
						this.__hasDown = true;
						break;
					case "_over":
						this.__hasOver = true;
						break;
					case "_up":
						this.__hasUp = true;
						break;
					default:
					}
				}
				if(this.__hasDown || this.__hasOver || this.__hasUp) {
					this.addEventListener("rollOver",$bind(this,this.__onRollOver));
					this.addEventListener("rollOut",$bind(this,this.__onRollOut));
					this.addEventListener("mouseDown",$bind(this,this.__onMouseDown));
				}
			} else {
				this.removeEventListener("rollOver",$bind(this,this.__onRollOver));
				this.removeEventListener("rollOut",$bind(this,this.__onRollOut));
				this.removeEventListener("mouseDown",$bind(this,this.__onMouseDown));
			}
			this.__buttonMode = value;
		}
		return value;
	}
	,get_currentFrame: function() {
		if(this.__timeline != null) {
			return this.__timeline.__currentFrame;
		} else {
			return 1;
		}
	}
	,get_currentFrameLabel: function() {
		if(this.__timeline != null) {
			return this.__timeline.__currentFrameLabel;
		} else {
			return null;
		}
	}
	,get_currentLabel: function() {
		if(this.__timeline != null) {
			return this.__timeline.__currentLabel;
		} else {
			return null;
		}
	}
	,get_currentLabels: function() {
		if(this.__timeline != null) {
			return this.__timeline.__currentLabels.slice();
		} else {
			return [];
		}
	}
	,get_currentScene: function() {
		if(this.__timeline != null) {
			return this.__timeline.__currentScene;
		} else {
			if(this.__scene == null) {
				this.__scene = new openfl_display_Scene("",[],1);
			}
			return this.__scene;
		}
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,get_framesLoaded: function() {
		if(this.__timeline != null) {
			return this.__timeline.__framesLoaded;
		} else {
			return 1;
		}
	}
	,get_isPlaying: function() {
		if(this.__timeline != null) {
			return this.__timeline.__isPlaying;
		} else {
			return false;
		}
	}
	,get_scenes: function() {
		if(this.__timeline != null) {
			return this.__timeline.scenes.slice();
		} else {
			return [this.get_currentScene()];
		}
	}
	,get_totalFrames: function() {
		if(this.__timeline != null) {
			return this.__timeline.__totalFrames;
		} else {
			return 1;
		}
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_scenes:"get_scenes",get_isPlaying:"get_isPlaying",get_framesLoaded:"get_framesLoaded",set_enabled:"set_enabled",get_enabled:"get_enabled",get_currentScene:"get_currentScene",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = "openfl.geom.Rectangle";
openfl_geom_Rectangle.prototype = {
	clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl_display_OpenGLRenderer = function(context,defaultRenderTarget) {
	openfl_display_DisplayObjectRenderer.call(this);
	this.__context3D = context;
	this.__context = context.__context;
	this.gl = context.__context.webgl;
	this.__gl = this.gl;
	this.__defaultRenderTarget = defaultRenderTarget;
	this.__flipped = this.__defaultRenderTarget == null;
	if(openfl_display_Graphics.maxTextureWidth == null) {
		openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = this.__gl.getParameter(this.__gl.MAX_TEXTURE_SIZE);
	}
	this.__matrix = lime_math_Matrix4._new();
	this.__values = [];
	this.__softwareRenderer = new openfl_display_CanvasRenderer(null);
	this.__type = "opengl";
	this.__setBlendMode(10);
	this.__context3D.__setGLBlend(true);
	this.__clipRects = [];
	this.__maskObjects = [];
	this.__numClipRects = 0;
	this.__projection = lime_math_Matrix4._new();
	this.__projectionFlipped = lime_math_Matrix4._new();
	this.__stencilReference = 0;
	this.__tempRect = new openfl_geom_Rectangle();
	this.__defaultDisplayShader = new openfl_display_DisplayObjectShader();
	this.__defaultGraphicsShader = new openfl_display_GraphicsShader();
	this.__defaultShader = this.__defaultDisplayShader;
	this.__initShader(this.__defaultShader);
	this.__scrollRectMasks = new lime_utils_ObjectPool(function() {
		return new openfl_display_Shape();
	});
	this.__maskShader = new openfl_display__$internal_Context3DMaskShader();
};
$hxClasses["openfl.display.OpenGLRenderer"] = openfl_display_OpenGLRenderer;
openfl_display_OpenGLRenderer.__name__ = "openfl.display.OpenGLRenderer";
openfl_display_OpenGLRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_OpenGLRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	applyAlpha: function(alpha) {
		openfl_display_OpenGLRenderer.__alphaValue[0] = alpha * this.__worldAlpha;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_Alpha",openfl_display_OpenGLRenderer.__alphaValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__alpha != null) {
				this.__currentShader.__alpha.value = openfl_display_OpenGLRenderer.__alphaValue;
			}
		}
	}
	,applyBitmapData: function(bitmapData,smooth,repeat) {
		if(repeat == null) {
			repeat = false;
		}
		if(this.__currentShaderBuffer != null) {
			if(bitmapData != null) {
				openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
				openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
				this.__currentShaderBuffer.addFloatOverride("openfl_TextureSize",openfl_display_OpenGLRenderer.__textureSizeValue);
			}
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__bitmap != null) {
				this.__currentShader.__bitmap.input = bitmapData;
				this.__currentShader.__bitmap.filter = smooth && this.__allowSmoothing ? 4 : 5;
				this.__currentShader.__bitmap.mipFilter = 2;
				this.__currentShader.__bitmap.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = bitmapData;
				this.__currentShader.__texture.filter = smooth && this.__allowSmoothing ? 4 : 5;
				this.__currentShader.__texture.mipFilter = 2;
				this.__currentShader.__texture.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__textureSize != null) {
				if(bitmapData != null) {
					openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
					openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
					this.__currentShader.__textureSize.value = openfl_display_OpenGLRenderer.__textureSizeValue;
				} else {
					this.__currentShader.__textureSize.value = null;
				}
			}
		}
	}
	,applyColorTransform: function(colorTransform) {
		var enabled = colorTransform != null && !colorTransform.__isDefault(true);
		this.applyHasColorTransform(enabled);
		if(enabled) {
			colorTransform.__setArrays(openfl_display_OpenGLRenderer.__colorMultipliersValue,openfl_display_OpenGLRenderer.__colorOffsetsValue);
			if(this.__currentShaderBuffer != null) {
				this.__currentShaderBuffer.addFloatOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__colorMultipliersValue);
				this.__currentShaderBuffer.addFloatOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__colorOffsetsValue);
			} else if(this.__currentShader != null) {
				if(this.__currentShader.__colorMultiplier != null) {
					this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__colorMultipliersValue;
				}
				if(this.__currentShader.__colorOffset != null) {
					this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__colorOffsetsValue;
				}
			}
		} else if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__emptyColorValue);
			this.__currentShaderBuffer.addFloatOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__emptyColorValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__colorMultiplier != null) {
				this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
			if(this.__currentShader.__colorOffset != null) {
				this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
		}
	}
	,applyHasColorTransform: function(enabled) {
		openfl_display_OpenGLRenderer.__hasColorTransformValue[0] = enabled;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addBoolOverride("openfl_HasColorTransform",openfl_display_OpenGLRenderer.__hasColorTransformValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = openfl_display_OpenGLRenderer.__hasColorTransformValue;
			}
		}
	}
	,applyMatrix: function(matrix) {
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_Matrix",matrix);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = matrix;
			}
		}
	}
	,getMatrix: function(transform) {
		if(this.gl != null) {
			var values = this.__getMatrix(transform,1);
			lime_math_Matrix4.set(this.__matrix,0,values[0]);
			lime_math_Matrix4.set(this.__matrix,1,values[1]);
			lime_math_Matrix4.set(this.__matrix,2,values[2]);
			lime_math_Matrix4.set(this.__matrix,3,values[3]);
			lime_math_Matrix4.set(this.__matrix,4,values[4]);
			lime_math_Matrix4.set(this.__matrix,5,values[5]);
			lime_math_Matrix4.set(this.__matrix,6,values[6]);
			lime_math_Matrix4.set(this.__matrix,7,values[7]);
			lime_math_Matrix4.set(this.__matrix,8,values[8]);
			lime_math_Matrix4.set(this.__matrix,9,values[9]);
			lime_math_Matrix4.set(this.__matrix,10,values[10]);
			lime_math_Matrix4.set(this.__matrix,11,values[11]);
			lime_math_Matrix4.set(this.__matrix,12,values[12]);
			lime_math_Matrix4.set(this.__matrix,13,values[13]);
			lime_math_Matrix4.set(this.__matrix,14,values[14]);
			lime_math_Matrix4.set(this.__matrix,15,values[15]);
			return this.__matrix;
		} else {
			lime_math_Matrix4.identity(this.__matrix);
			lime_math_Matrix4.set(this.__matrix,0,transform.a);
			lime_math_Matrix4.set(this.__matrix,1,transform.b);
			lime_math_Matrix4.set(this.__matrix,4,transform.c);
			lime_math_Matrix4.set(this.__matrix,5,transform.d);
			lime_math_Matrix4.set(this.__matrix,12,transform.tx);
			lime_math_Matrix4.set(this.__matrix,13,transform.ty);
			return this.__matrix;
		}
	}
	,setShader: function(shader) {
		this.__currentShaderBuffer = null;
		if(this.__currentShader == shader) {
			return;
		}
		var tmp = this.__currentShader != null;
		if(shader == null) {
			this.__currentShader = null;
			this.__context3D.setProgram(null);
			return;
		} else {
			this.__currentShader = shader;
			this.__initShader(shader);
			this.__context3D.setProgram(shader.program);
			this.__context3D.__flushGLProgram();
			this.__currentShader.__enable();
			this.__context3D.__state.shader = shader;
		}
	}
	,setViewport: function() {
		this.__gl.viewport(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
	}
	,updateShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.__useArray = true;
			}
			if(this.__currentShader.__textureCoord != null) {
				this.__currentShader.__textureCoord.__useArray = true;
			}
			this.__context3D.setProgram(this.__currentShader.program);
			this.__context3D.__flushGLProgram();
			this.__context3D.__flushGLTextures();
			this.__currentShader.__update();
		}
	}
	,useAlphaArray: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__alpha != null) {
				this.__currentShader.__alpha.__useArray = true;
			}
		}
	}
	,useColorTransformArray: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__colorMultiplier != null) {
				this.__currentShader.__colorMultiplier.__useArray = true;
			}
			if(this.__currentShader.__colorOffset != null) {
				this.__currentShader.__colorOffset.__useArray = true;
			}
		}
	}
	,__cleanup: function() {
		if(this.__stencilReference > 0) {
			this.__stencilReference = 0;
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__numClipRects = 0;
			this.__scissorRect();
		}
	}
	,__clear: function() {
		if(this.__stage == null || this.__stage.__transparent) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		} else {
			this.__context3D.clear(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2],1,0,0,1);
		}
		this.__cleared = true;
	}
	,__clearShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShaderBuffer == null) {
				if(this.__currentShader.__bitmap != null) {
					this.__currentShader.__bitmap.input = null;
				}
			} else {
				this.__currentShaderBuffer.clearOverride();
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = null;
			}
			if(this.__currentShader.__textureSize != null) {
				this.__currentShader.__textureSize.value = null;
			}
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = null;
			}
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.value = null;
			}
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = null;
			}
			this.__currentShader.__clearUseArray();
		}
	}
	,__copyShader: function(other) {
		this.__currentShader = other.__currentShader;
		this.__currentShaderBuffer = other.__currentShaderBuffer;
		this.__currentDisplayShader = other.__currentDisplayShader;
		this.__currentGraphicsShader = other.__currentGraphicsShader;
	}
	,__getMatrix: function(transform,pixelSnapping) {
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		if(pixelSnapping == 0 || pixelSnapping == 1 && _matrix.b == 0 && _matrix.c == 0 && (_matrix.a < 1.001 && _matrix.a > 0.999) && (_matrix.d < 1.001 && _matrix.d > 0.999)) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math_Matrix4.identity(this.__matrix);
		lime_math_Matrix4.set(this.__matrix,0,_matrix.a);
		lime_math_Matrix4.set(this.__matrix,1,_matrix.b);
		lime_math_Matrix4.set(this.__matrix,4,_matrix.c);
		lime_math_Matrix4.set(this.__matrix,5,_matrix.d);
		lime_math_Matrix4.set(this.__matrix,12,_matrix.tx);
		lime_math_Matrix4.set(this.__matrix,13,_matrix.ty);
		lime_math_Matrix4.append(this.__matrix,this.__flipped ? this.__projectionFlipped : this.__projection);
		this.__values[0] = lime_math_Matrix4.get(this.__matrix,0);
		this.__values[1] = lime_math_Matrix4.get(this.__matrix,1);
		this.__values[2] = lime_math_Matrix4.get(this.__matrix,2);
		this.__values[3] = lime_math_Matrix4.get(this.__matrix,3);
		this.__values[4] = lime_math_Matrix4.get(this.__matrix,4);
		this.__values[5] = lime_math_Matrix4.get(this.__matrix,5);
		this.__values[6] = lime_math_Matrix4.get(this.__matrix,6);
		this.__values[7] = lime_math_Matrix4.get(this.__matrix,7);
		this.__values[8] = lime_math_Matrix4.get(this.__matrix,8);
		this.__values[9] = lime_math_Matrix4.get(this.__matrix,9);
		this.__values[10] = lime_math_Matrix4.get(this.__matrix,10);
		this.__values[11] = lime_math_Matrix4.get(this.__matrix,11);
		this.__values[12] = lime_math_Matrix4.get(this.__matrix,12);
		this.__values[13] = lime_math_Matrix4.get(this.__matrix,13);
		this.__values[14] = lime_math_Matrix4.get(this.__matrix,14);
		this.__values[15] = lime_math_Matrix4.get(this.__matrix,15);
		openfl_geom_Matrix.__pool.release(_matrix);
		return this.__values;
	}
	,__initShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultShader;
	}
	,__initDisplayShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultDisplayShader;
	}
	,__initGraphicsShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultGraphicsShader;
	}
	,__initShaderBuffer: function(shaderBuffer) {
		if(shaderBuffer != null) {
			return this.__initGraphicsShader(shaderBuffer.shader);
		}
		return this.__defaultGraphicsShader;
	}
	,__popMask: function() {
		if(this.__stencilReference == 0) {
			return;
		}
		var mask = this.__maskObjects.pop();
		if(this.__stencilReference > 1) {
			this.__context3D.setStencilActions(2,1,0,0,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
			this.__context3D.setColorMask(false,false,false,false);
			this.__renderDrawableMask(mask);
			this.__stencilReference--;
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
			this.__context3D.setColorMask(true,true,true,true);
		} else {
			this.__stencilReference = 0;
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				this.__scrollRectMasks.release(this.__maskObjects[this.__maskObjects.length - 1]);
				this.__popMask();
			} else {
				this.__popMaskRect();
			}
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
			} else {
				this.__scissorRect();
			}
		}
	}
	,__pushMask: function(mask) {
		if(this.__stencilReference == 0) {
			this.__context3D.clear(0,0,0,0,0,0,4);
			this.__updatedStencil = true;
		}
		this.__context3D.setStencilActions(2,1,2,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
		this.__context3D.setColorMask(false,false,false,false);
		this.__renderDrawableMask(mask);
		this.__maskObjects.push(mask);
		this.__stencilReference++;
		this.__context3D.setStencilActions(2,1,5,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		this.__context3D.setColorMask(true,true,true,true);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				var shape = this.__scrollRectMasks.get();
				shape.get_graphics().clear();
				shape.get_graphics().beginFill(65280);
				shape.get_graphics().drawRect(object.__scrollRect.x,object.__scrollRect.y,object.__scrollRect.width,object.__scrollRect.height);
				shape.__renderTransform.copyFrom(object.__renderTransform);
				this.__pushMask(shape);
			} else {
				this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
			}
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,_matrix);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		this.__scissorRect(clipRect);
		this.__numClipRects++;
	}
	,__render: function(object) {
		this.__context3D.setColorMask(true,true,true,true);
		this.__context3D.setCulling(3);
		this.__context3D.setDepthTest(false,0);
		this.__context3D.setStencilActions();
		this.__context3D.setStencilReferenceValue(0,0,0);
		this.__context3D.setScissorRectangle(null);
		this.__blendMode = null;
		this.__setBlendMode(10);
		if(this.__defaultRenderTarget == null) {
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
			this.__upscaled = this.__worldTransform.a != 1 || this.__worldTransform.d != 1;
			this.__renderDrawable(object);
			if(this.__offsetX > 0 || this.__offsetY > 0) {
				if(this.__offsetX > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__offsetX,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX + this.__displayWidth,0,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
				}
				if(this.__offsetY > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__width,this.__offsetY);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,this.__offsetY + this.__displayHeight,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
				}
				this.__context3D.setScissorRectangle(null);
			}
		} else {
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
			var cacheMask = object.__mask;
			var cacheScrollRect = object.__scrollRect;
			object.__mask = null;
			object.__scrollRect = null;
			this.__renderDrawable(object);
			object.__mask = cacheMask;
			object.__scrollRect = cacheScrollRect;
		}
		this.__context3D.present();
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_Context3DBitmapData.renderDrawable(object,this);
			break;
		case 2:
			openfl_display__$internal_Context3DBitmap.renderDrawable(object,this);
			break;
		case 3:
			openfl_display__$internal_Context3DDisplayObject.renderDrawable(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawable(object,this);
			break;
		case 6:
			openfl_display__$internal_Context3DSimpleButton.renderDrawable(object,this);
			break;
		case 7:
			openfl_display__$internal_Context3DTextField.renderDrawable(object,this);
			break;
		case 8:
			openfl_display__$internal_Context3DVideo.renderDrawable(object,this);
			break;
		case 9:
			openfl_display__$internal_Context3DTilemap.renderDrawable(object,this);
			break;
		default:
		}
	}
	,__renderDrawableMask: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_Context3DBitmapData.renderDrawableMask(object,this);
			break;
		case 2:
			openfl_display__$internal_Context3DBitmap.renderDrawableMask(object,this);
			break;
		case 3:
			openfl_display__$internal_Context3DDisplayObject.renderDrawableMask(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawableMask(object,this);
			break;
		case 6:
			openfl_display__$internal_Context3DSimpleButton.renderDrawableMask(object,this);
			break;
		case 7:
			openfl_display__$internal_Context3DTextField.renderDrawableMask(object,this);
			break;
		case 8:
			openfl_display__$internal_Context3DVideo.renderDrawableMask(object,this);
			break;
		case 9:
			openfl_display__$internal_Context3DTilemap.renderDrawableMask(object,this);
			break;
		default:
		}
	}
	,__renderFilterPass: function(source,shader,smooth,clear) {
		if(clear == null) {
			clear = true;
		}
		if(source == null || shader == null) {
			return;
		}
		if(this.__defaultRenderTarget == null) {
			return;
		}
		var cacheRTT = this.__context3D.__state.renderToTexture;
		var cacheRTTDepthStencil = this.__context3D.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = this.__context3D.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = this.__context3D.__state.renderToTextureSurfaceSelector;
		this.__context3D.setRenderToTexture(this.__defaultRenderTarget.getTexture(this.__context3D),false);
		if(clear) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		}
		var shader1 = this.__initShader(shader);
		this.setShader(shader1);
		this.applyAlpha(1);
		this.applyBitmapData(source,smooth);
		this.applyColorTransform(null);
		this.applyMatrix(this.__getMatrix(source.__renderTransform,1));
		this.updateShader();
		var vertexBuffer = source.getVertexBuffer(this.__context3D);
		if(shader1.__position != null) {
			this.__context3D.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
		}
		if(shader1.__textureCoord != null) {
			this.__context3D.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = source.getIndexBuffer(this.__context3D);
		this.__context3D.drawTriangles(indexBuffer);
		if(cacheRTT != null) {
			this.__context3D.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			this.__context3D.setRenderToBackBuffer();
		}
		this.__clearShader();
	}
	,__resize: function(width,height) {
		this.__width = width;
		this.__height = height;
		var w = this.__defaultRenderTarget == null ? this.__stage.stageWidth : this.__defaultRenderTarget.width;
		var h = this.__defaultRenderTarget == null ? this.__stage.stageHeight : this.__defaultRenderTarget.height;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.a + 0 * _this.c + _this.tx);
		} else {
			tmp = 0;
		}
		this.__offsetX = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.b + 0 * _this.d + _this.ty);
		} else {
			tmp = 0;
		}
		this.__offsetY = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(w * _this.a + 0 * _this.c + _this.tx - this.__offsetX);
		} else {
			tmp = w;
		}
		this.__displayWidth = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.b + h * _this.d + _this.ty - this.__offsetY);
		} else {
			tmp = h;
		}
		this.__displayHeight = tmp;
		lime_math_Matrix4.createOrtho(this.__projection,0,this.__displayWidth + this.__offsetX * 2,0,this.__displayHeight + this.__offsetY * 2,-1000,1000);
		lime_math_Matrix4.createOrtho(this.__projectionFlipped,0,this.__displayWidth + this.__offsetX * 2,this.__displayHeight + this.__offsetY * 2,0,-1000,1000);
	}
	,__resumeClipAndMask: function(childRenderer) {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		} else {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
		} else {
			this.__scissorRect();
		}
	}
	,__scissorRect: function(clipRect) {
		if(clipRect != null) {
			var x = Math.floor(clipRect.x);
			var y = Math.floor(clipRect.y);
			var width = clipRect.width > 0 ? Math.ceil(clipRect.get_right()) - x : 0;
			var height = clipRect.height > 0 ? Math.ceil(clipRect.get_bottom()) - y : 0;
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(x,y,width,height);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
		} else {
			this.__context3D.setScissorRectangle(null);
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		switch(value) {
		case 0:
			this.__context3D.setBlendFactors(2,2);
			break;
		case 9:
			this.__context3D.setBlendFactors(1,5);
			break;
		case 12:
			this.__context3D.setBlendFactors(2,6);
			break;
		case 14:
			this.__context3D.setBlendFactors(2,2);
			this.__context3D.__setGLBlendEquation(this.__gl.FUNC_REVERSE_SUBTRACT);
			break;
		default:
			this.__context3D.setBlendFactors(2,5);
		}
	}
	,__setRenderTarget: function(renderTarget) {
		this.__defaultRenderTarget = renderTarget;
		this.__flipped = renderTarget == null;
		if(renderTarget != null) {
			this.__resize(renderTarget.width,renderTarget.height);
		}
	}
	,__setShaderBuffer: function(shaderBuffer) {
		this.setShader(shaderBuffer.shader);
		this.__currentShaderBuffer = shaderBuffer;
	}
	,__suspendClipAndMask: function() {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect();
		}
	}
	,__updateShaderBuffer: function(bufferOffset) {
		if(this.__currentShader != null && this.__currentShaderBuffer != null) {
			this.__currentShader.__updateFromBuffer(this.__currentShaderBuffer,bufferOffset);
		}
	}
	,__class__: openfl_display_OpenGLRenderer
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = "openfl.display.PNGEncoderOptions";
openfl_display_PNGEncoderOptions.prototype = {
	__class__: openfl_display_PNGEncoderOptions
};
var openfl_display_PixelSnapping = {};
openfl_display_PixelSnapping.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display_PixelSnapping.toString = function(this1) {
	switch(this1) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.display = display;
	if(display != null) {
		display.addEventListener("unload",$bind(this,this.display_onUnload));
		openfl_Lib.get_current().addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = "openfl.display.Preloader";
openfl_display_Preloader.prototype = {
	start: function() {
		this.ready = true;
		openfl_Lib.get_current().get_loaderInfo().__complete();
		if(this.display != null) {
			var complete = new openfl_events_Event("complete",true,true);
			this.display.dispatchEvent(complete);
			if(!complete.isDefaultPrevented()) {
				this.display.dispatchEvent(new openfl_events_Event("unload"));
			}
		} else if(!this.complete) {
			this.complete = true;
			this.onComplete.dispatch();
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.get_current().get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onUnload: function(event) {
		if(this.display != null) {
			this.display.removeEventListener("unload",$bind(this,this.display_onUnload));
			if(this.display.parent == openfl_Lib.get_current()) {
				openfl_Lib.get_current().removeChild(this.display);
			}
			openfl_Lib.get_current().stage.set_focus(null);
			this.display = null;
		}
		if(this.ready) {
			if(!this.complete) {
				this.complete = true;
				this.onComplete.dispatch();
			}
		}
	}
	,__class__: openfl_display_Preloader
};
var openfl_display_Scene = function(name,labels,numFrames) {
	this.name = name;
	this.labels = labels;
	this.numFrames = numFrames;
};
$hxClasses["openfl.display.Scene"] = openfl_display_Scene;
openfl_display_Scene.__name__ = "openfl.display.Scene";
openfl_display_Scene.prototype = {
	__class__: openfl_display_Scene
};
var openfl_display_ShaderData = {};
openfl_display_ShaderData._new = function(byteArray) {
	var this1 = { };
	return this1;
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.filter = 5;
	this.height = 0;
	this.index = 0;
	this.mipFilter = 2;
	this.width = 0;
	this.wrap = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = "openfl.display.ShaderInput";
openfl_display_ShaderInput.prototype = {
	__disableGL: function(context,id) {
		var gl = context.gl;
		context.setTextureAt(id,null);
	}
	,__updateGL: function(context,id,overrideInput,overrideFilter,overrideMipFilter,overrideWrap) {
		var gl = context.gl;
		var input = overrideInput != null ? overrideInput : this.input;
		var filter = overrideFilter != null ? overrideFilter : this.filter;
		var mipFilter = overrideMipFilter != null ? overrideMipFilter : this.mipFilter;
		var wrap = overrideWrap != null ? overrideWrap : this.wrap;
		if(input != null) {
			var bitmapData = input;
			context.setTextureAt(id,bitmapData.getTexture(context));
			context.setSamplerStateAt(id,wrap,filter,mipFilter);
		} else {
			context.setTextureAt(id,null);
		}
	}
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = "openfl.display.ShaderParameter";
openfl_display_ShaderParameter.prototype = {
	__disableGL: function(context) {
		var gl = context.gl;
		if(!this.__isUniform) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
		}
	}
	,__updateGL: function(context,overrideValue) {
		var gl = context.gl;
		var value = overrideValue != null ? overrideValue : this.value;
		var boolValue = this.__isBool ? value : null;
		var floatValue = this.__isFloat ? value : null;
		var intValue = this.__isInt ? value : null;
		if(this.__isUniform) {
			if(value != null && value.length >= this.__length) {
				switch(this.type) {
				case 0:
					gl.uniform1i(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.uniform2i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.uniform3i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.uniform4i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.uniform1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.uniform2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.uniform3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.uniform4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.uniform1i(this.index,intValue[0]);
					break;
				case 9:
					gl.uniform2i(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.uniform3i(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.uniform4i(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					this.__uniformMatrix[4] = floatValue[4];
					this.__uniformMatrix[5] = floatValue[5];
					this.__uniformMatrix[6] = floatValue[6];
					this.__uniformMatrix[7] = floatValue[7];
					this.__uniformMatrix[8] = floatValue[8];
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					this.__uniformMatrix[4] = floatValue[4];
					this.__uniformMatrix[5] = floatValue[5];
					this.__uniformMatrix[6] = floatValue[6];
					this.__uniformMatrix[7] = floatValue[7];
					this.__uniformMatrix[8] = floatValue[8];
					this.__uniformMatrix[9] = floatValue[9];
					this.__uniformMatrix[10] = floatValue[10];
					this.__uniformMatrix[11] = floatValue[11];
					this.__uniformMatrix[12] = floatValue[12];
					this.__uniformMatrix[13] = floatValue[13];
					this.__uniformMatrix[14] = floatValue[14];
					this.__uniformMatrix[15] = floatValue[15];
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 1:case 9:
					gl.uniform2i(this.index,0,0);
					break;
				case 3:case 11:
					gl.uniform4i(this.index,0,0,0,0);
					break;
				case 4:
					gl.uniform1f(this.index,0);
					break;
				case 5:
					gl.uniform2f(this.index,0,0);
					break;
				case 6:
					gl.uniform3f(this.index,0,0,0);
					break;
				case 7:
					gl.uniform4f(this.index,0,0,0,0);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,0);
					break;
				case 2:case 10:
					gl.uniform3i(this.index,0,0,0);
					break;
				case 12:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					this.__uniformMatrix[4] = 0;
					this.__uniformMatrix[5] = 0;
					this.__uniformMatrix[6] = 0;
					this.__uniformMatrix[7] = 0;
					this.__uniformMatrix[8] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					this.__uniformMatrix[4] = 0;
					this.__uniformMatrix[5] = 0;
					this.__uniformMatrix[6] = 0;
					this.__uniformMatrix[7] = 0;
					this.__uniformMatrix[8] = 0;
					this.__uniformMatrix[9] = 0;
					this.__uniformMatrix[10] = 0;
					this.__uniformMatrix[11] = 0;
					this.__uniformMatrix[12] = 0;
					this.__uniformMatrix[13] = 0;
					this.__uniformMatrix[14] = 0;
					this.__uniformMatrix[15] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!this.__useArray && (value == null || value.length == this.__length)) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
			if(value != null) {
				switch(this.type) {
				case 0:
					gl.vertexAttrib1f(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.vertexAttrib2f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.vertexAttrib3f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.vertexAttrib4f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.vertexAttrib1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.vertexAttrib2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.vertexAttrib3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.vertexAttrib4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.vertexAttrib1f(this.index,intValue[0]);
					break;
				case 9:
					gl.vertexAttrib2f(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.vertexAttrib3f(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.vertexAttrib4f(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,floatValue[0],floatValue[1]);
					gl.vertexAttrib2f(this.index + 1,floatValue[2],floatValue[3]);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,floatValue[0],floatValue[1],floatValue[2]);
					gl.vertexAttrib3f(this.index + 1,floatValue[3],floatValue[4],floatValue[5]);
					gl.vertexAttrib3f(this.index + 2,floatValue[6],floatValue[7],floatValue[8]);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					gl.vertexAttrib4f(this.index + 1,floatValue[4],floatValue[5],floatValue[6],floatValue[7]);
					gl.vertexAttrib4f(this.index + 2,floatValue[8],floatValue[9],floatValue[10],floatValue[11]);
					gl.vertexAttrib4f(this.index + 3,floatValue[12],floatValue[13],floatValue[14],floatValue[15]);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,0,0);
					gl.vertexAttrib2f(this.index + 1,0,0);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,0,0,0);
					gl.vertexAttrib3f(this.index + 1,0,0,0);
					gl.vertexAttrib3f(this.index + 2,0,0,0);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,0,0,0,0);
					gl.vertexAttrib4f(this.index + 1,0,0,0,0);
					gl.vertexAttrib4f(this.index + 2,0,0,0,0);
					gl.vertexAttrib4f(this.index + 3,0,0,0,0);
					break;
				default:
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.enableVertexAttribArray(this.index + i);
			}
		}
	}
	,__updateGLFromBuffer: function(context,buffer,position,length,bufferOffset) {
		var gl = context.gl;
		if(this.__isUniform) {
			if(length >= this.__length) {
				switch(this.type) {
				case 1:case 9:
					gl.uniform2i(this.index,buffer[position] | 0,buffer[position + 1] | 0);
					break;
				case 3:case 11:
					gl.uniform4i(this.index,buffer[position] | 0,buffer[position + 1] | 0,buffer[position + 2] | 0,buffer[position + 3] | 0);
					break;
				case 4:
					gl.uniform1f(this.index,buffer[position]);
					break;
				case 5:
					gl.uniform2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 6:
					gl.uniform3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 7:
					gl.uniform4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,buffer[position] | 0);
					break;
				case 2:case 10:
					gl.uniform3i(this.index,buffer[position] | 0,buffer[position + 1] | 0,buffer[position + 2] | 0);
					break;
				case 12:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					this.__uniformMatrix[4] = buffer[position + 4];
					this.__uniformMatrix[5] = buffer[position + 5];
					this.__uniformMatrix[6] = buffer[position + 6];
					this.__uniformMatrix[7] = buffer[position + 7];
					this.__uniformMatrix[8] = buffer[position + 8];
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					this.__uniformMatrix[4] = buffer[position + 4];
					this.__uniformMatrix[5] = buffer[position + 5];
					this.__uniformMatrix[6] = buffer[position + 6];
					this.__uniformMatrix[7] = buffer[position + 7];
					this.__uniformMatrix[8] = buffer[position + 8];
					this.__uniformMatrix[9] = buffer[position + 9];
					this.__uniformMatrix[10] = buffer[position + 10];
					this.__uniformMatrix[11] = buffer[position + 11];
					this.__uniformMatrix[12] = buffer[position + 12];
					this.__uniformMatrix[13] = buffer[position + 13];
					this.__uniformMatrix[14] = buffer[position + 14];
					this.__uniformMatrix[15] = buffer[position + 15];
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!this.__internal && (length == 0 || length == this.__length)) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
			if(length > 0) {
				switch(this.type) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,buffer[position]);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,buffer[position],buffer[position + 1]);
					gl.vertexAttrib2f(this.index + 1,buffer[position + 2],buffer[position + 2 + 1]);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,buffer[position],buffer[position + 1],buffer[position + 2]);
					gl.vertexAttrib3f(this.index + 1,buffer[position + 3],buffer[position + 3 + 1],buffer[position + 3 + 2]);
					gl.vertexAttrib3f(this.index + 2,buffer[position + 6],buffer[position + 6 + 1],buffer[position + 6 + 2]);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					gl.vertexAttrib4f(this.index + 1,buffer[position + 4],buffer[position + 4 + 1],buffer[position + 4 + 2],buffer[position + 4 + 3]);
					gl.vertexAttrib4f(this.index + 2,buffer[position + 8],buffer[position + 8 + 1],buffer[position + 8 + 2],buffer[position + 8 + 3]);
					gl.vertexAttrib4f(this.index + 3,buffer[position + 12],buffer[position + 12 + 1],buffer[position + 12 + 2],buffer[position + 12 + 3]);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,0,0);
					gl.vertexAttrib2f(this.index + 1,0,0);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,0,0,0);
					gl.vertexAttrib3f(this.index + 1,0,0,0);
					gl.vertexAttrib3f(this.index + 2,0,0,0);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,0,0,0,0);
					gl.vertexAttrib4f(this.index + 1,0,0,0,0);
					gl.vertexAttrib4f(this.index + 2,0,0,0,0);
					gl.vertexAttrib4f(this.index + 3,0,0,0,0);
					break;
				default:
				}
			}
		} else {
			var type = gl.FLOAT;
			if(this.__isBool) {
				type = gl.INT;
			} else if(this.__isInt) {
				type = gl.INT;
			}
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.enableVertexAttribArray(this.index + i);
			}
			if(length > 0) {
				var _g = 0;
				var _g1 = this.__arrayLength;
				while(_g < _g1) {
					var i = _g++;
					gl.vertexAttribPointer(this.index + i,this.__length,type,false,this.__length * 4,(position + bufferOffset * this.__length + i * this.__arrayLength) * 4);
				}
			}
		}
	}
	,set_name: function(value) {
		this.__internal = StringTools.startsWith(value,"openfl_");
		return this.name = value;
	}
	,__class__: openfl_display_ShaderParameter
	,__properties__: {set_name:"set_name"}
};
var openfl_display_ShaderParameterType = {};
openfl_display_ShaderParameterType.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
};
openfl_display_ShaderParameterType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
};
var openfl_display_ShaderPrecision = {};
openfl_display_ShaderPrecision.fromString = function(value) {
	switch(value) {
	case "fast":
		return 0;
	case "full":
		return 1;
	default:
		return null;
	}
};
openfl_display_ShaderPrecision.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fast";
	case 1:
		return "full";
	default:
		return null;
	}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 3;
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = "openfl.display.Shape";
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.__drawableType = 6;
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.__upState = upState != null ? upState : new openfl_display_DisplayObject();
	this.__overState = overState;
	this.__downState = downState;
	this.set_hitTestState(hitTestState != null ? hitTestState : new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.__upState);
	if(openfl_display_SimpleButton.__constructor != null) {
		var method = openfl_display_SimpleButton.__constructor;
		openfl_display_SimpleButton.__constructor = null;
		method(this);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = "openfl.display.SimpleButton";
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getRenderBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent && this.enabled) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.get_hitTestState() != null) {
			if(this.get_hitTestState().__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					if(stack.length == 0) {
						stack[0] = hitObject;
					} else {
						stack[stack.length - 1] = hitObject;
					}
				}
				hitTest = !interactiveOnly || this.mouseEnabled;
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled || this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				hitTest = false;
			} else if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		return hitTest;
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setStageReference(stage);
		}
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__setTransformDirty();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setTransformDirty();
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			if(this.__currentState != null) {
				this.__currentState.__update(transformOnly,true);
			}
			if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
				this.get_hitTestState().__update(transformOnly,true);
			}
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		if(this.__currentState != null) {
			this.__currentState.__updateTransforms();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateTransforms();
		}
	}
	,get_downState: function() {
		return this.__downState;
	}
	,set_downState: function(downState) {
		if(this.__downState != null && this.__currentState == this.__downState) {
			this.set___currentState(this.__downState);
		}
		return this.__downState = downState;
	}
	,get_hitTestState: function() {
		return this.__hitTestState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.__hitTestState != null && this.__hitTestState != hitTestState) {
			if(this.__hitTestState != this.get_downState() && this.__hitTestState != this.get_upState() && this.__hitTestState != this.get_overState()) {
				this.__hitTestState.__renderParent = null;
			}
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			if(!hitTestState.__renderDirty) {
				hitTestState.__renderDirty = true;
				hitTestState.__setParentRenderDirty();
			}
		}
		return this.__hitTestState = hitTestState;
	}
	,get_overState: function() {
		return this.__overState;
	}
	,set_overState: function(overState) {
		if(this.__overState != null && this.__currentState == this.__overState) {
			this.set___currentState(overState);
		}
		return this.__overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) {
			this.__soundTransform = new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,get_upState: function() {
		return this.__upState;
	}
	,set_upState: function(upState) {
		if(this.__upState != null && this.__currentState == this.__upState) {
			this.set___currentState(upState);
		}
		return this.__upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.get_hitTestState()) {
			this.__currentState.__renderParent = null;
		}
		if(value != null && value.parent != null) {
			value.parent.removeChild(value);
		}
		if(openfl_display_DisplayObject.__supportDOM && this.__previousStates == null) {
			this.__previousStates = openfl_Vector.toObjectVector(null);
		}
		if(value != this.__currentState) {
			if(openfl_display_DisplayObject.__supportDOM) {
				if(this.__currentState != null) {
					this.__currentState.__setStageReference(null);
					this.__previousStates.push(this.__currentState);
				}
				var index = this.__previousStates.indexOf(value,0);
				if(index > -1) {
					this.__previousStates.splice(index,1);
				}
			}
			if(value != null) {
				value.__renderParent = this;
				if(!value.__renderDirty) {
					value.__renderDirty = true;
					value.__setParentRenderDirty();
				}
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		if(this.enabled) {
			this.set___currentState(this.get_downState());
		}
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.get_upState() != this.__currentState) {
			this.set___currentState(this.get_upState());
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.get_overState() != this.__currentState && this.get_overState() != null && !this.__ignoreEvent && this.enabled) {
			this.set___currentState(this.get_overState());
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.enabled && this.get_overState() != null) {
			this.set___currentState(this.get_overState());
		} else {
			this.set___currentState(this.get_upState());
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",get_upState:"get_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",get_overState:"get_overState",set_hitTestState:"set_hitTestState",get_hitTestState:"get_hitTestState",set_downState:"set_downState",get_downState:"get_downState"})
});
var openfl_display_SpreadMethod = {};
openfl_display_SpreadMethod.fromInt = function(value) {
	return value;
};
openfl_display_SpreadMethod.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display_SpreadMethod.toInt = function(this1) {
	return this1;
};
openfl_display_SpreadMethod.toString = function(this1) {
	switch(this1) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function(window1,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 5;
	this.set_name(null);
	this.__color = -1;
	this.__colorSplit = [255,255,255];
	this.__colorString = "#FFFFFF";
	this.__contentsScaleFactor = 1;
	this.__currentTabOrderIndex = 0;
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__displayRect = new openfl_geom_Rectangle();
	this.__renderDirty = true;
	this.stage3Ds = openfl_Vector.toObjectVector(null);
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = true;
	this.allowsFullScreenInteractive = true;
	this.__quality = 1;
	this.__scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__forceRender = false;
	this.__stack = [];
	this.__rollOutStack = [];
	this.__mouseOutStack = [];
	this.__touchData = new haxe_ds_IntMap();
	this.application = window1.application;
	this.window = window1;
	this.set_color(color);
	this.__contentsScaleFactor = window1.__scale;
	this.__wasFullscreen = window1.__fullscreen;
	this.__resize();
	if(openfl_Lib.get_current().stage == null) {
		this.stage.addChild(openfl_Lib.get_current());
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = "openfl.display.Stage";
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	invalidate: function() {
		this.__invalidated = true;
		this.__renderDirty = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,__broadcastEvent: function(event) {
		if(Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,event.type)) {
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.h[event.type];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				if(dispatcher.stage == this || dispatcher.stage == null) {
					dispatcher.__dispatch(event);
				}
			}
		}
	}
	,__createRenderer: function() {
		var pixelRatio = 1;
		if(this.window.__scale > 1) {
			pixelRatio = this.window.devicePixelRatio || 1;
		}
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		switch(this.window.context.type) {
		case "cairo":
			break;
		case "canvas":
			this.__renderer = new openfl_display_CanvasRenderer(this.window.context.canvas2D);
			(js_Boot.__cast(this.__renderer , openfl_display_CanvasRenderer)).pixelRatio = pixelRatio;
			break;
		case "dom":
			this.__renderer = new openfl_display_DOMRenderer(this.window.context.dom);
			(js_Boot.__cast(this.__renderer , openfl_display_DOMRenderer)).pixelRatio = pixelRatio;
			break;
		case "opengl":case "opengles":case "webgl":
			this.context3D = new openfl_display3D_Context3D(this);
			this.context3D.configureBackBuffer(windowWidth,windowHeight,0,true,true,true);
			this.context3D.present();
			this.__renderer = new openfl_display_OpenGLRenderer(this.context3D);
			break;
		default:
		}
		if(this.__renderer != null) {
			var tmp = this.get_quality();
			this.__renderer.__allowSmoothing = tmp != 2;
			this.__renderer.__worldTransform = this.__displayMatrix;
			this.__renderer.__stage = this;
			this.__renderer.__resize(windowWidth,windowHeight);
		}
	}
	,__dispatchEvent: function(event) {
		return openfl_display_DisplayObjectContainer.prototype.__dispatchEvent.call(this,event);
	}
	,__dispatchPendingMouseEvent: function() {
		if(this.__pendingMouseEvent) {
			this.__onMouse("mouseMove",this.__pendingMouseX,this.__pendingMouseY,0);
			this.__pendingMouseEvent = false;
		}
	}
	,__dispatchStack: function(event,stack) {
		var target;
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
		} else {
			event.eventPhase = 1;
			event.target = stack[stack.length - 1];
			var _g = 0;
			var _g1 = length - 1;
			while(_g < _g1) {
				var i = _g++;
				stack[i].__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
			}
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
			if(event.__isCanceled) {
				return;
			}
			if(event.bubbles) {
				event.eventPhase = 3;
				var i = length - 2;
				while(i >= 0) {
					stack[i].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
					--i;
				}
			}
		}
	}
	,__dispatchTarget: function(target,event) {
		return target.__dispatchEvent(event);
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) {
			local.copyFrom(global);
		}
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		try {
			openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		if(!event.__preventDefault) {
			var message = haxe_CallStack.toString(haxe_CallStack.exceptionStack());
			console.log(message);
			var message = Std.string(e);
			console.log(message);
			try {
				var exc = e;
				if(exc != null && Object.prototype.hasOwnProperty.call(exc,"stack") && exc.stack != null && exc.stack != "") {
					console.log(exc.stack);
					e.stack = exc.stack;
				} else {
					var msg = haxe_CallStack.toString(haxe_CallStack.callStack());
					console.log(msg);
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
			throw e;
		}
	}
	,__onKey: function(type,keyCode,modifier) {
		this.__dispatchPendingMouseEvent();
		openfl_events_MouseEvent.__altKey = lime_ui_KeyModifier.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui_KeyModifier.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui_KeyModifier.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui_KeyModifier.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 13;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui_KeyModifier.get_shiftKey(modifier));
			if(type == "keyUp" && (keyCode1 == 32 || keyCode1 == 13) && ((this.__focus) instanceof openfl_display_Sprite)) {
				var sprite = js_Boot.__cast(this.__focus , openfl_display_Sprite);
				if(sprite.get_buttonMode() && sprite.focusRect == true) {
					var localPoint = openfl_geom_Point.__pool.get();
					var targetPoint = openfl_geom_Point.__pool.get();
					targetPoint.x = this.__mouseX;
					targetPoint.y = this.__mouseY;
					var clickEvent = openfl_events_MouseEvent.__create("click",0,this.__mouseX,this.__mouseY,sprite.__globalToLocal(targetPoint,localPoint),sprite);
					this.__dispatchStack(clickEvent,stack);
					openfl_geom_Point.__pool.release(targetPoint);
					openfl_geom_Point.__pool.release(localPoint);
				}
			}
			var event = new openfl_events_KeyboardEvent(type,true,true,charCode,keyCode1,keyLocation,this.__macKeyboard ? lime_ui_KeyModifier.get_ctrlKey(modifier) || lime_ui_KeyModifier.get_metaKey(modifier) : lime_ui_KeyModifier.get_ctrlKey(modifier),lime_ui_KeyModifier.get_altKey(modifier),lime_ui_KeyModifier.get_shiftKey(modifier),lime_ui_KeyModifier.get_ctrlKey(modifier),lime_ui_KeyModifier.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			} else if(type == "keyDown" && keyCode1 == 9) {
				var tabStack = [];
				this.__tabTest(tabStack);
				var nextIndex = -1;
				var nextObject = null;
				var nextOffset = lime_ui_KeyModifier.get_shiftKey(modifier) ? -1 : 1;
				if(tabStack.length > 1) {
					haxe_ds_ArraySort.sort(tabStack,function(a,b) {
						return a.get_tabIndex() - b.get_tabIndex();
					});
					if(tabStack[tabStack.length - 1].get_tabIndex() != -1) {
						var i = 0;
						while(i < tabStack.length) {
							if(tabStack[i].get_tabIndex() > -1) {
								if(i > 0) {
									tabStack.splice(0,i);
								}
								break;
							}
							++i;
						}
					}
					if(this.get_focus() != null) {
						var current = this.get_focus();
						var index = tabStack.indexOf(current);
						while(index == -1 && current != null) {
							var currentParent = current.parent;
							if(currentParent != null && currentParent.get_tabChildren()) {
								var currentIndex = currentParent.getChildIndex(current);
								if(currentIndex == -1) {
									current = currentParent;
									continue;
								}
								var i = currentIndex + nextOffset;
								while(lime_ui_KeyModifier.get_shiftKey(modifier) ? i >= 0 : i < currentParent.get_numChildren()) {
									var sibling = currentParent.getChildAt(i);
									if(((sibling) instanceof openfl_display_InteractiveObject)) {
										var interactiveSibling = js_Boot.__cast(sibling , openfl_display_InteractiveObject);
										index = tabStack.indexOf(interactiveSibling);
										if(index != -1) {
											nextOffset = 0;
											break;
										}
									}
									i += nextOffset;
								}
							} else if(lime_ui_KeyModifier.get_shiftKey(modifier)) {
								index = tabStack.indexOf(currentParent);
								if(index != -1) {
									nextOffset = 0;
								}
							}
							current = currentParent;
						}
						if(index < 0) {
							nextIndex = 0;
						} else {
							nextIndex = index + nextOffset;
						}
					} else {
						nextIndex = this.__currentTabOrderIndex;
					}
				} else if(tabStack.length == 1) {
					nextObject = tabStack[0];
					if(this.get_focus() == nextObject) {
						nextObject = null;
					}
				}
				var cancelTab = nextIndex >= 0 && nextIndex < tabStack.length;
				if(tabStack.length == 1 || tabStack.length == 0 && this.get_focus() != null) {
					nextIndex = 0;
				} else if(tabStack.length > 1) {
					if(nextIndex < 0) {
						nextIndex += tabStack.length;
					}
					nextIndex %= tabStack.length;
					nextObject = tabStack[nextIndex];
					if(nextObject == this.get_focus()) {
						nextIndex += nextOffset;
						if(nextIndex < 0) {
							nextIndex += tabStack.length;
						}
						nextIndex %= tabStack.length;
						nextObject = tabStack[nextIndex];
					}
				}
				var focusEvent = null;
				if(this.get_focus() != null) {
					focusEvent = new openfl_events_FocusEvent("keyFocusChange",true,true,nextObject,lime_ui_KeyModifier.get_shiftKey(modifier),0);
					stack = [];
					this.get_focus().__getInteractive(stack);
					stack.reverse();
					this.__dispatchStack(focusEvent,stack);
					if(focusEvent.isDefaultPrevented()) {
						this.window.onKeyDown.cancel();
					}
				}
				if(focusEvent == null || !focusEvent.isDefaultPrevented()) {
					this.__currentTabOrderIndex = nextIndex;
					if(nextObject != null) {
						this.set_focus(nextObject);
					}
					if(cancelTab) {
						this.window.onKeyDown.cancel();
					}
				}
			}
		}
	}
	,__onLimeCreateWindow: function(window1) {
		if(this.window != window1) {
			return;
		}
		var _g = $bind(this,this.__onLimeWindowActivate);
		var window2 = window1;
		var tmp = function() {
			_g(window2);
		};
		window1.onActivate.add(tmp);
		var _g1 = $bind(this,this.__onLimeWindowClose);
		var window3 = window1;
		var tmp = function() {
			_g1(window3);
		};
		window1.onClose.add(tmp,false,-9000);
		var _g2 = $bind(this,this.__onLimeWindowDeactivate);
		var window4 = window1;
		var tmp = function() {
			_g2(window4);
		};
		window1.onDeactivate.add(tmp);
		var _g3 = $bind(this,this.__onLimeWindowDropFile);
		var window5 = window1;
		var tmp = function(file) {
			_g3(window5,file);
		};
		window1.onDropFile.add(tmp);
		var _g4 = $bind(this,this.__onLimeWindowEnter);
		var window6 = window1;
		var tmp = function() {
			_g4(window6);
		};
		window1.onEnter.add(tmp);
		var _g5 = $bind(this,this.__onLimeWindowExpose);
		var window7 = window1;
		var tmp = function() {
			_g5(window7);
		};
		window1.onExpose.add(tmp);
		var _g6 = $bind(this,this.__onLimeWindowFocusIn);
		var window8 = window1;
		var tmp = function() {
			_g6(window8);
		};
		window1.onFocusIn.add(tmp);
		var _g7 = $bind(this,this.__onLimeWindowFocusOut);
		var window9 = window1;
		var tmp = function() {
			_g7(window9);
		};
		window1.onFocusOut.add(tmp);
		var _g8 = $bind(this,this.__onLimeWindowFullscreen);
		var window10 = window1;
		var tmp = function() {
			_g8(window10);
		};
		window1.onFullscreen.add(tmp);
		var _g9 = $bind(this,this.__onLimeKeyDown);
		var window11 = window1;
		var tmp = function(keyCode,modifier) {
			_g9(window11,keyCode,modifier);
		};
		window1.onKeyDown.add(tmp);
		var _g10 = $bind(this,this.__onLimeKeyUp);
		var window12 = window1;
		var tmp = function(keyCode,modifier) {
			_g10(window12,keyCode,modifier);
		};
		window1.onKeyUp.add(tmp);
		var _g11 = $bind(this,this.__onLimeWindowLeave);
		var window13 = window1;
		var tmp = function() {
			_g11(window13);
		};
		window1.onLeave.add(tmp);
		var _g12 = $bind(this,this.__onLimeWindowMinimize);
		var window14 = window1;
		var tmp = function() {
			_g12(window14);
		};
		window1.onMinimize.add(tmp);
		var _g13 = $bind(this,this.__onLimeMouseDown);
		var window15 = window1;
		var tmp = function(x,y,button) {
			_g13(window15,x,y,button);
		};
		window1.onMouseDown.add(tmp);
		var _g14 = $bind(this,this.__onLimeMouseMove);
		var window16 = window1;
		var tmp = function(x,y) {
			_g14(window16,x,y);
		};
		window1.onMouseMove.add(tmp);
		var _g15 = $bind(this,this.__onLimeMouseMoveRelative);
		var window17 = window1;
		var tmp = function(x,y) {
			_g15(window17,x,y);
		};
		window1.onMouseMoveRelative.add(tmp);
		var _g16 = $bind(this,this.__onLimeMouseUp);
		var window18 = window1;
		var tmp = function(x,y,button) {
			_g16(window18,x,y,button);
		};
		window1.onMouseUp.add(tmp);
		var _g17 = $bind(this,this.__onLimeMouseWheel);
		var window19 = window1;
		var tmp = function(deltaX,deltaY,deltaMode) {
			_g17(window19,deltaX,deltaY,deltaMode);
		};
		window1.onMouseWheel.add(tmp);
		var _g18 = $bind(this,this.__onLimeWindowMove);
		var window20 = window1;
		var tmp = function(x,y) {
			_g18(window20,x,y);
		};
		window1.onMove.add(tmp);
		window1.onRender.add($bind(this,this.__onLimeRender));
		window1.onRenderContextLost.add($bind(this,this.__onLimeRenderContextLost));
		window1.onRenderContextRestored.add($bind(this,this.__onLimeRenderContextRestored));
		var _g19 = $bind(this,this.__onLimeWindowResize);
		var window21 = window1;
		var tmp = function(width,height) {
			_g19(window21,width,height);
		};
		window1.onResize.add(tmp);
		var _g20 = $bind(this,this.__onLimeWindowRestore);
		var window22 = window1;
		var tmp = function() {
			_g20(window22);
		};
		window1.onRestore.add(tmp);
		var _g21 = $bind(this,this.__onLimeTextEdit);
		var window23 = window1;
		var tmp = function(text,start,length) {
			_g21(window23,text,start,length);
		};
		window1.onTextEdit.add(tmp);
		var _g22 = $bind(this,this.__onLimeTextInput);
		var window24 = window1;
		var tmp = function(text) {
			_g22(window24,text);
		};
		window1.onTextInput.add(tmp);
		this.__onLimeWindowCreate(window1);
	}
	,__onLimeGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,__onLimeGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,__onLimeGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,__onLimeGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
		var _g = $bind(this,this.__onLimeGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.__onLimeGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.__onLimeGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.__onLimeGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onLimeGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,__onLimeKeyDown: function(window1,keyCode,modifier) {
		if(this.window == null || this.window != window1) {
			return;
		}
		this.__onKey("keyDown",keyCode,modifier);
	}
	,__onLimeKeyUp: function(window1,keyCode,modifier) {
		if(this.window == null || this.window != window1) {
			return;
		}
		this.__onKey("keyUp",keyCode,modifier);
	}
	,__onLimeModuleExit: function(code) {
		if(this.window != null) {
			var event = null;
			event = new openfl_events_Event("deactivate");
			this.__broadcastEvent(event);
		}
	}
	,__onLimeMouseDown: function(window1,x,y,button) {
		if(this.window == null || this.window != window1) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x * window1.__scale | 0,y * window1.__scale | 0,button);
		if(!this.showDefaultContextMenu && button == 2) {
			window1.onMouseDown.cancel();
		}
	}
	,__onLimeMouseMove: function(window1,x,y) {
		if(this.window == null || this.window != window1) {
			return;
		}
		this.__pendingMouseEvent = true;
		this.__pendingMouseX = x * window1.__scale | 0;
		this.__pendingMouseY = y * window1.__scale | 0;
	}
	,__onLimeMouseMoveRelative: function(window1,x,y) {
	}
	,__onLimeMouseUp: function(window1,x,y,button) {
		if(this.window == null || this.window != window1) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x * window1.__scale | 0,y * window1.__scale | 0,button);
		if(!this.showDefaultContextMenu && button == 2) {
			window1.onMouseUp.cancel();
		}
	}
	,__onLimeMouseWheel: function(window1,deltaX,deltaY,deltaMode) {
		if(this.window == null || this.window != window1) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		if(deltaMode == lime_ui_MouseWheelMode.PIXELS) {
			this.__onMouseWheel(deltaX * window1.__scale | 0,deltaY * window1.__scale | 0,deltaMode);
		} else {
			this.__onMouseWheel(deltaX | 0,deltaY | 0,deltaMode);
		}
	}
	,__onLimeRender: function(context) {
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		var event = null;
		this.__broadcastEvent(new openfl_events_Event("enterFrame"));
		this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
		this.__broadcastEvent(new openfl_events_Event("exitFrame"));
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		var shouldRender = this.__renderer != null && (this.__renderDirty || this.__forceRender);
		if(this.__invalidated && shouldRender) {
			this.__invalidated = false;
			event = new openfl_events_Event("render");
			this.__broadcastEvent(event);
		}
		this.__update(false,true);
		if(this.__renderer != null) {
			if(this.context3D != null) {
				var stage3D = this.stage3Ds.iterator();
				while(stage3D.hasNext()) {
					var stage3D1 = stage3D.next();
					this.context3D.__renderStage3D(stage3D1);
				}
				if(this.context3D.__present) {
					shouldRender = true;
				}
			}
			if(shouldRender) {
				var tmp = this.__renderer.__type == "cairo";
				if(this.context3D == null) {
					this.__renderer.__clear();
				}
				this.__renderer.__render(this);
			} else if(this.context3D == null) {
				this.window.onRender.cancel();
			}
			if(this.context3D != null) {
				if(!this.context3D.__present) {
					this.window.onRender.cancel();
				} else {
					if(!this.__renderer.__cleared) {
						this.__renderer.__clear();
					}
					this.context3D.__present = false;
					this.context3D.__cleared = false;
				}
			}
			this.__renderer.__cleared = false;
		}
		this.__rendering = false;
	}
	,__onLimeRenderContextLost: function() {
		this.__renderer = null;
		this.context3D = null;
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__lostContext();
		}
	}
	,__onLimeRenderContextRestored: function(context) {
		this.__createRenderer();
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__restoreContext();
		}
	}
	,__onLimeTextEdit: function(window1,text,start,length) {
	}
	,__onLimeTextInput: function(window1,text) {
		if(this.window == null || this.window != window1) {
			return;
		}
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		var event = new openfl_events_TextEvent("textInput",true,true,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__dispatchStack(event,stack);
		} else {
			this.__dispatchEvent(event);
		}
		if(event.isDefaultPrevented()) {
			window1.onTextInput.cancel();
		}
	}
	,__onLimeTouchCancel: function(touch) {
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		if(isPrimaryTouchPoint) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch,isPrimaryTouchPoint);
	}
	,__onLimeTouchMove: function(touch) {
		this.__onTouch("touchMove",touch,this.__primaryTouch == touch);
	}
	,__onLimeTouchEnd: function(touch) {
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		if(isPrimaryTouchPoint) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch,isPrimaryTouchPoint);
	}
	,__onLimeTouchStart: function(touch) {
		if(this.__primaryTouch == null) {
			this.__primaryTouch = touch;
		}
		this.__onTouch("touchBegin",touch,this.__primaryTouch == touch);
	}
	,__onLimeUpdate: function(deltaTime) {
		this.__deltaTime = deltaTime;
		this.__dispatchPendingMouseEvent();
	}
	,__onLimeWindowActivate: function(window1) {
		if(this.window == null || this.window != window1) {
			return;
		}
	}
	,__onLimeWindowClose: function(window1) {
		if(this.window == window1) {
			this.window = null;
		}
		this.__primaryTouch = null;
		var event = null;
		event = new openfl_events_Event("deactivate");
		this.__broadcastEvent(event);
	}
	,__onLimeWindowCreate: function(window1) {
		if(this.window == null || this.window != window1) {
			return;
		}
		if(window1.context != null) {
			this.__createRenderer();
		}
	}
	,__onLimeWindowDeactivate: function(window1) {
		if(this.window == null || this.window != window1) {
			return;
		}
	}
	,__onLimeWindowDropFile: function(window1,file) {
	}
	,__onLimeWindowEnter: function(window1) {
	}
	,__onLimeWindowExpose: function(window1) {
		if(this.window == null || this.window != window1) {
			return;
		}
		this.__renderDirty = true;
	}
	,__onLimeWindowFocusIn: function(window1) {
		if(this.window == null || this.window != window1) {
			return;
		}
		this.__renderDirty = true;
		var event = null;
		event = new openfl_events_Event("activate");
		this.__broadcastEvent(event);
		this.set_focus(this.__cacheFocus);
	}
	,__onLimeWindowFocusOut: function(window1) {
		if(this.window == null || this.window != window1) {
			return;
		}
		this.__primaryTouch = null;
		var event = null;
		event = new openfl_events_Event("deactivate");
		this.__broadcastEvent(event);
		var currentFocus = this.get_focus();
		this.set_focus(null);
		this.__cacheFocus = currentFocus;
		openfl_events_MouseEvent.__altKey = false;
		openfl_events_MouseEvent.__commandKey = false;
		openfl_events_MouseEvent.__ctrlKey = false;
		openfl_events_MouseEvent.__shiftKey = false;
	}
	,__onLimeWindowFullscreen: function(window1) {
		if(this.window == null || this.window != window1) {
			return;
		}
		this.__resize();
		if(!this.__wasFullscreen) {
			this.__wasFullscreen = true;
			if(this.__displayState == 2) {
				this.__displayState = 1;
			}
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
	,__onLimeWindowLeave: function(window1) {
		if(this.window == null || this.window != window1 || openfl_events_MouseEvent.__buttonDown) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var event = null;
		event = new openfl_events_Event("mouseLeave");
		this.__dispatchEvent(event);
	}
	,__onLimeWindowMinimize: function(window1) {
		if(this.window == null || this.window != window1) {
			return;
		}
	}
	,__onLimeWindowMove: function(window1,x,y) {
	}
	,__onLimeWindowResize: function(window1,width,height) {
		if(this.window == null || this.window != window1) {
			return;
		}
		this.__resize();
		if(this.__wasFullscreen && !window1.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,__onLimeWindowRestore: function(window1) {
		if(this.window == null || this.window != window1) {
			return;
		}
		if(this.__wasFullscreen && !window1.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.__allowMouseFocus()) {
				if(this.get_focus() != null) {
					var focusEvent = new openfl_events_FocusEvent("mouseFocusChange",true,true,target,false,0);
					this.__dispatchStack(focusEvent,stack);
					if(!focusEvent.isDefaultPrevented()) {
						this.set_focus(target);
					}
				} else {
					this.set_focus(target);
				}
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseDownLeft == target) {
					clickType = "click";
				} else {
					var event = null;
					event = openfl_events_MouseEvent.__create("releaseOutside",1,this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this);
					this.__mouseDownLeft.dispatchEvent(event);
				}
				this.__mouseDownLeft = null;
			}
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var event = null;
		event = openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
		this.__dispatchStack(event,stack);
		if(clickType != null) {
			event = openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
			this.__dispatchStack(event,stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					event = openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
					this.__dispatchStack(event,stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto" && !openfl_ui_Mouse.__hidden) {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						this.window.set_cursor(openfl_ui_MouseCursor.toLimeCursor(cursor));
						break;
					}
				}
			}
			if(cursor == null) {
				this.window.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__dispatchStack(event,this.__mouseOutStack);
			}
		}
		var item;
		var i = 0;
		while(i < this.__rollOutStack.length) {
			item = this.__rollOutStack[i];
			if(stack.indexOf(item) == -1) {
				HxOverrides.remove(this.__rollOutStack,item);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),item);
				event.bubbles = false;
				this.__dispatchTarget(item,event);
			} else {
				++i;
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var item = stack[_g];
			++_g;
			if(this.__rollOutStack.indexOf(item) == -1 && this.__mouseOverTarget != null) {
				if(item.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),item);
					event.bubbles = false;
					this.__dispatchTarget(item,event);
				}
				if(item.hasEventListener("rollOut") || item.hasEventListener("rollOver")) {
					this.__rollOutStack.push(item);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				this.__dispatchStack(event,stack);
			}
			this.__mouseOverTarget = target;
			this.__mouseOutStack = stack;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
					dropTarget = stack[stack.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY,deltaMode) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var delta = deltaY | 0;
		var event = openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,delta);
		event.cancelable = true;
		this.__dispatchStack(event,stack);
		if(event.isDefaultPrevented()) {
			this.window.onMouseWheel.cancel();
		}
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onTouch: function(type,touch,isPrimaryTouchPoint) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var touchX = targetPoint.x;
		var touchY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX,touchY,false,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var touchId = touch.id;
		var touchData = null;
		if(this.__touchData.h.hasOwnProperty(touchId)) {
			touchData = this.__touchData.h[touchId];
		} else {
			touchData = openfl_utils__$internal_TouchData.__pool.get();
			touchData.reset();
			touchData.touch = touch;
			this.__touchData.h[touchId] = touchData;
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) {
				touchType = "touchTap";
			}
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		touchEvent.pressure = touch.pressure;
		this.__dispatchStack(touchEvent,stack);
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchStack(touchEvent,stack);
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchTarget(touchOverTarget,touchEvent);
		}
		var touchOutStack = touchData.rollOutStack;
		var item;
		var i = 0;
		while(i < touchOutStack.length) {
			item = touchOutStack[i];
			if(stack.indexOf(item) == -1) {
				HxOverrides.remove(touchOutStack,item);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(item,touchEvent);
			} else {
				++i;
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var item = stack[_g];
			++_g;
			if(touchOutStack.indexOf(item) == -1) {
				if(item.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),item);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					touchEvent.pressure = touch.pressure;
					this.__dispatchTarget(item,touchEvent);
				}
				if(item.hasEventListener("touchRollOut")) {
					touchOutStack.push(item);
				}
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(target,touchEvent);
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl_utils__$internal_TouchData.__pool.release(touchData);
		}
	}
	,__registerLimeModule: function(application) {
		application.onCreateWindow.add($bind(this,this.__onLimeCreateWindow));
		application.onUpdate.add($bind(this,this.__onLimeUpdate));
		application.onExit.add($bind(this,this.__onLimeModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onLimeGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onLimeGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.__onLimeTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.__onLimeTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.__onLimeTouchEnd));
		lime_ui_Touch.onCancel.add($bind(this,this.__onLimeTouchCancel));
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = windowWidth;
		this.__logicalHeight = windowHeight;
		this.__displayMatrix.identity();
		if(this.get_fullScreenSourceRect() != null && this.window.__fullscreen) {
			this.stageWidth = this.get_fullScreenSourceRect().width | 0;
			this.stageHeight = this.get_fullScreenSourceRect().height | 0;
			var displayScaleX = windowWidth / this.stageWidth;
			var displayScaleY = windowHeight / this.stageHeight;
			this.__displayMatrix.translate(-this.get_fullScreenSourceRect().x,-this.get_fullScreenSourceRect().y);
			this.__displayMatrix.scale(displayScaleX,displayScaleY);
			this.__displayRect.setTo(this.get_fullScreenSourceRect().get_left(),this.get_fullScreenSourceRect().get_right(),this.get_fullScreenSourceRect().get_top(),this.get_fullScreenSourceRect().get_bottom());
		} else {
			if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
				this.stageWidth = windowWidth;
				this.stageHeight = windowHeight;
			} else {
				this.stageWidth = this.__logicalWidth;
				this.stageHeight = this.__logicalHeight;
				var scaleX = windowWidth / this.stageWidth;
				var scaleY = windowHeight / this.stageHeight;
				var targetScale = Math.min(scaleX,scaleY);
				var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
				var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
				this.__displayMatrix.scale(targetScale,targetScale);
				this.__displayMatrix.translate(offsetX,offsetY);
			}
			this.__displayRect.setTo(0,0,this.stageWidth,this.stageHeight);
		}
		if(this.context3D != null) {
			this.context3D.configureBackBuffer(windowWidth,windowHeight,0,true,true,true);
		}
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__resize(windowWidth,windowHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.__resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__renderDirty = true;
			this.__setTransformDirty();
			var event = null;
			event = new openfl_events_Event("resize");
			this.__dispatchEvent(event);
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) {
			this.__dragBounds = null;
		} else {
			this.__dragBounds = new openfl_geom_Rectangle();
			var right = bounds.get_right();
			var bottom = bounds.get_bottom();
			this.__dragBounds.x = right < bounds.x ? right : bounds.x;
			this.__dragBounds.y = bottom < bounds.y ? bottom : bounds.y;
			this.__dragBounds.width = Math.abs(bounds.width);
			this.__dragBounds.height = Math.abs(bounds.height);
		}
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = openfl_geom_Point.__pool.get();
				mouse.setTo(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					var _this = parent.__getWorldTransform();
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						mouse.x = -_this.tx;
						mouse.y = -_this.ty;
					} else {
						var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
						mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
						mouse.x = px;
					}
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
				openfl_geom_Point.__pool.release(mouse);
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__unregisterLimeModule: function(application) {
		application.onCreateWindow.remove($bind(this,this.__onLimeCreateWindow));
		application.onUpdate.remove($bind(this,this.__onLimeUpdate));
		application.onExit.remove($bind(this,this.__onLimeModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onLimeGamepadConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.__onLimeTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.__onLimeTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.__onLimeTouchEnd));
		lime_ui_Touch.onCancel.remove($bind(this,this.__onLimeTouchCancel));
	}
	,__update: function(transformOnly,updateChildren) {
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren);
				if(updateChildren) {
					this.__transformDirty = false;
				}
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__wasDirty = true;
				}
			}
		} else if(!this.__renderDirty && this.__wasDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				this.__wasDirty = false;
			}
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value == null) {
			this.__transparent = true;
			value = 0;
		} else {
			this.__transparent = false;
		}
		if(this.__color != value) {
			var r = (value & 16711680) >>> 16;
			var g = (value & 65280) >>> 8;
			var b = value & 255;
			this.__colorSplit[0] = r / 255;
			this.__colorSplit[1] = g / 255;
			this.__colorSplit[2] = b / 255;
			this.__colorString = "#" + StringTools.hex(value & 16777215,6);
			this.__renderDirty = true;
			this.__color = -16777216 | value & 16777215;
		}
		return value;
	}
	,get_contentsScaleFactor: function() {
		return this.__contentsScaleFactor;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,value,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(value != null) {
				var event = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack = [];
				value.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
		}
		return value;
	}
	,get_frameRate: function() {
		if(this.window != null) {
			return this.window.__backend.getFrameRate();
		}
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.window != null) {
			return this.window.__backend.setFrameRate(value);
		}
		return value;
	}
	,get_fullScreenHeight: function() {
		return Math.ceil(this.window.get_display().currentMode.height * this.window.__scale);
	}
	,get_fullScreenSourceRect: function() {
		if(this.__fullScreenSourceRect == null) {
			return null;
		} else {
			return this.__fullScreenSourceRect.clone();
		}
	}
	,set_fullScreenSourceRect: function(value) {
		if(value == null) {
			if(this.__fullScreenSourceRect != null) {
				this.__fullScreenSourceRect = null;
				this.__resize();
			}
		} else if(!value.equals(this.__fullScreenSourceRect)) {
			this.__fullScreenSourceRect = value.clone();
			this.__resize();
		}
		return value;
	}
	,get_fullScreenWidth: function() {
		return Math.ceil(this.window.get_display().currentMode.width * this.window.__scale);
	}
	,set_height: function(value) {
		return this.get_height();
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		this.__quality = value;
		if(this.__renderer != null) {
			var tmp = this.get_quality();
			this.__renderer.__allowSmoothing = tmp != 2;
		}
		return value;
	}
	,set_rotation: function(value) {
		return 0;
	}
	,get_scaleMode: function() {
		return this.__scaleMode;
	}
	,set_scaleMode: function(value) {
		return this.__scaleMode = value;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,get_tabEnabled: function() {
		return false;
	}
	,set_tabEnabled: function(value) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Error: The Stage class does not implement this property or method."));
	}
	,get_tabIndex: function() {
		return -1;
	}
	,set_tabIndex: function(value) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Error: The Stage class does not implement this property or method."));
	}
	,set_transform: function(value) {
		return this.get_transform();
	}
	,set_width: function(value) {
		return this.get_width();
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_scaleMode:"set_scaleMode",get_scaleMode:"get_scaleMode",set_quality:"set_quality",get_quality:"get_quality",get_fullScreenWidth:"get_fullScreenWidth",set_fullScreenSourceRect:"set_fullScreenSourceRect",get_fullScreenSourceRect:"get_fullScreenSourceRect",get_fullScreenHeight:"get_fullScreenHeight",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",get_contentsScaleFactor:"get_contentsScaleFactor",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function(stage) {
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__height = 0;
	this.__projectionTransform = new openfl_geom_Matrix3D();
	this.__renderTransform = new openfl_geom_Matrix3D();
	this.__width = 0;
	this.__x = 0;
	this.__y = 0;
	this.visible = true;
	if(stage.stageWidth > 0 && stage.stageHeight > 0) {
		this.__resize(stage.stageWidth,stage.stageHeight);
	}
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = "openfl.display.Stage3D";
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) {
			profile = 0;
		}
		if(context3DRenderMode == null) {
			context3DRenderMode = 0;
		}
		if(this.__contextLost) {
			this.__contextRequested = true;
			return;
		}
		if(this.context3D != null) {
			this.__contextRequested = true;
			haxe_Timer.delay($bind(this,this.__dispatchCreate),1);
		} else if(!this.__contextRequested) {
			this.__contextRequested = true;
			haxe_Timer.delay($bind(this,this.__createContext),1);
		}
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function() {
		var stage = this.__stage;
		var renderer = stage.__renderer;
		if(renderer.__type == "cairo" || renderer.__type == "canvas") {
			this.__dispatchError();
			return;
		}
		if(renderer.__type == "opengl") {
			this.context3D = new openfl_display3D_Context3D(stage,stage.context3D.__contextState,this);
			this.__dispatchCreate();
		} else if(renderer.__type == "dom") {
			this.__canvas = window.document.createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var window1 = stage.window;
			var attributes = renderer.__context.attributes;
			var transparentBackground = Object.prototype.hasOwnProperty.call(attributes,"background") && attributes.background == null;
			var colorDepth = Object.prototype.hasOwnProperty.call(attributes,"colorDepth") ? attributes.colorDepth : 32;
			var options = Object.prototype.hasOwnProperty.call(attributes,"antialiasing") && attributes.antialiasing > 0;
			var options1 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : true, premultipliedAlpha : true, stencil : true, preserveDrawingBuffer : false};
			this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,options1);
			if(this.__webgl != null) {
				this.__dispatchError();
			} else {
				this.__dispatchError();
			}
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__lostContext: function() {
		this.__contextLost = true;
		if(this.context3D != null) {
			this.context3D.__dispose();
			this.__contextRequested = true;
		}
	}
	,__resize: function(width,height) {
		if(width != this.__width || height != this.__height) {
			if(this.__canvas != null) {
				this.__canvas.width = width;
				this.__canvas.height = height;
			}
			this.__projectionTransform.copyRawDataFrom(openfl_Vector.toFloatVector(null,null,null,[2.0 / (width > 0 ? width : 1),0.0,0.0,0.0,0.0,-2.0 / (height > 0 ? height : 1),0.0,0.0,0.0,0.0,-0.001,0.0,-1.0,1.0,0.0,1.0]));
			this.__renderTransform.identity();
			this.__renderTransform.appendTranslation(this.__x,this.__y,0);
			this.__renderTransform.append(this.__projectionTransform);
			this.__width = width;
			this.__height = height;
		}
	}
	,__restoreContext: function() {
		this.__contextLost = false;
		this.__createContext();
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(this.__x == value) {
			return value;
		}
		this.__x = value;
		this.__renderTransform.identity();
		this.__renderTransform.appendTranslation(this.__x,this.__y,0);
		this.__renderTransform.append(this.__projectionTransform);
		return value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(this.__y == value) {
			return value;
		}
		this.__y = value;
		this.__renderTransform.identity();
		this.__renderTransform.appendTranslation(this.__x,this.__y,0);
		this.__renderTransform.append(this.__projectionTransform);
		return value;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
});
var openfl_display_StageAlign = {};
openfl_display_StageAlign.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display_StageAlign.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display_StageDisplayState = {};
openfl_display_StageDisplayState.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display_StageDisplayState.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display_StageQuality = {};
openfl_display_StageQuality.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display_StageQuality.toString = function(this1) {
	switch(this1) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display_StageScaleMode = {};
openfl_display_StageScaleMode.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display_StageScaleMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display_Tile = function(id,x,y,scaleX,scaleY,rotation,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(id == null) {
		id = 0;
	}
	this.__id = id;
	this.__matrix = new openfl_geom_Matrix();
	if(x != 0) {
		this.set_x(x);
	}
	if(y != 0) {
		this.set_y(y);
	}
	if(scaleX != 1) {
		this.set_scaleX(scaleX);
	}
	if(scaleY != 1) {
		this.set_scaleY(scaleY);
	}
	if(rotation != 0) {
		this.set_rotation(rotation);
	}
	this.__dirty = true;
	this.__length = 0;
	this.__originX = originX;
	this.__originY = originY;
	this.__alpha = 1;
	this.__blendMode = null;
	this.__visible = true;
};
$hxClasses["openfl.display.Tile"] = openfl_display_Tile;
openfl_display_Tile.__name__ = "openfl.display.Tile";
openfl_display_Tile.prototype = {
	clone: function() {
		var tile = new openfl_display_Tile(this.__id);
		tile.__alpha = this.__alpha;
		tile.__blendMode = this.__blendMode;
		tile.__originX = this.__originX;
		tile.__originY = this.__originY;
		if(this.__rect != null) {
			tile.__rect = this.__rect.clone();
		}
		tile.set_matrix(this.__matrix.clone());
		tile.__shader = this.__shader;
		tile.set_tileset(this.__tileset);
		if(this.__colorTransform != null) {
			tile.__colorTransform = this.__colorTransform.__clone();
		}
		return tile;
	}
	,getBounds: function(targetCoordinateSpace) {
		var result = new openfl_geom_Rectangle();
		this.__findTileRect(result);
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		this.__getBounds(result,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return result;
	}
	,__getBounds: function(result,matrix) {
		result.__transform(result,matrix);
	}
	,hitTestTile: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,invalidate: function() {
		this.__setRenderDirty();
	}
	,__findTileRect: function(result) {
		if(this.get_tileset() == null) {
			if(this.parent != null) {
				var parentTileset = this.parent.__findTileset();
				if(parentTileset == null) {
					result.setTo(0,0,0,0);
				} else {
					var _g = parentTileset.getRect(this.get_id());
					if(_g == null) {
						result.setTo(0,0,0,0);
					} else {
						var not_null = _g;
						result.copyFrom(not_null);
					}
				}
			} else {
				result.setTo(0,0,0,0);
			}
		} else {
			result.copyFrom(this.get_tileset().getRect(this.get_id()));
		}
		result.x = 0;
		result.y = 0;
	}
	,__findTileset: function() {
		if(this.get_tileset() != null) {
			return this.get_tileset();
		}
		if(((this.parent) instanceof openfl_display_Tilemap)) {
			return this.parent.get_tileset();
		}
		if(this.parent == null) {
			return null;
		}
		return this.parent.__findTileset();
	}
	,__getWorldTransform: function() {
		var retval = this.get_matrix().clone();
		if(this.parent != null) {
			retval.concat(this.parent.__getWorldTransform());
		}
		return retval;
	}
	,__setRenderDirty: function() {
		if(!this.__dirty) {
			this.__dirty = true;
			if(this.parent != null) {
				this.parent.__setRenderDirty();
			}
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__alpha = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value != this.__blendMode) {
			this.__blendMode = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(value != this.__colorTransform) {
			this.__colorTransform = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_height: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		this.__getBounds(result,this.get_matrix());
		var h = result.height;
		openfl_geom_Rectangle.__pool.release(result);
		return h;
	}
	,set_height: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		if(result.height != 0) {
			this.set_scaleY(value / result.height);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_id: function() {
		return this.__id;
	}
	,set_id: function(value) {
		if(value != this.__id) {
			this.__id = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(value) {
		if(value != this.__matrix) {
			this.__rotation = null;
			this.__scaleX = null;
			this.__scaleY = null;
			this.__matrix = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_originX: function() {
		return this.__originX;
	}
	,set_originX: function(value) {
		if(value != this.__originX) {
			this.__originX = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_originY: function() {
		return this.__originY;
	}
	,set_originY: function(value) {
		if(value != this.__originY) {
			this.__originY = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_rect: function() {
		return this.__rect;
	}
	,set_rect: function(value) {
		if(value != this.__rect) {
			this.__rect = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_rotation: function() {
		if(this.__rotation == null) {
			if(this.__matrix.b == 0 && this.__matrix.c == 0) {
				this.__rotation = 0;
				this.__rotationSine = 0;
				this.__rotationCosine = 1;
			} else {
				var radians = Math.atan2(this.__matrix.d,this.__matrix.c) - Math.PI / 2;
				this.__rotation = radians * (180 / Math.PI);
				this.__rotationSine = Math.sin(radians);
				this.__rotationCosine = Math.cos(radians);
			}
		}
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = value * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__matrix.a = this.__rotationCosine * __scaleX;
			this.__matrix.b = this.__rotationSine * __scaleX;
			this.__matrix.c = -this.__rotationSine * __scaleY;
			this.__matrix.d = this.__rotationCosine * __scaleY;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__scaleX == null) {
			if(this.get_matrix().b == 0) {
				this.__scaleX = this.__matrix.a;
			} else {
				this.__scaleX = Math.sqrt(this.__matrix.a * this.__matrix.a + this.__matrix.b * this.__matrix.b);
			}
		}
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__matrix.b == 0) {
				this.__matrix.a = value;
			} else {
				var rotation = this.get_rotation();
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				this.__matrix.a = a;
				this.__matrix.b = b;
			}
			this.__setRenderDirty();
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__scaleY == null) {
			if(this.__matrix.c == 0) {
				this.__scaleY = this.get_matrix().d;
			} else {
				this.__scaleY = Math.sqrt(this.__matrix.c * this.__matrix.c + this.__matrix.d * this.__matrix.d);
			}
		}
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__matrix.c == 0) {
				this.__matrix.d = value;
			} else {
				var rotation = this.get_rotation();
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				this.__matrix.c = c;
				this.__matrix.d = d;
			}
			this.__setRenderDirty();
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		if(value != this.__shader) {
			this.__shader = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_tileset: function() {
		return this.__tileset;
	}
	,set_tileset: function(value) {
		if(value != this.__tileset) {
			this.__tileset = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			this.__visible = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_width: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		this.__getBounds(result,this.get_matrix());
		var w = result.width;
		openfl_geom_Rectangle.__pool.release(result);
		return w;
	}
	,set_width: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		if(result.width != 0) {
			this.set_scaleX(value / result.width);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_x: function() {
		return this.__matrix.tx;
	}
	,set_x: function(value) {
		if(value != this.__matrix.tx) {
			this.__matrix.tx = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_y: function() {
		return this.__matrix.ty;
	}
	,set_y: function(value) {
		if(value != this.__matrix.ty) {
			this.__matrix.ty = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,__class__: openfl_display_Tile
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_tileset:"set_tileset",get_tileset:"get_tileset",set_shader:"set_shader",get_shader:"get_shader",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",set_rect:"set_rect",get_rect:"get_rect",set_originY:"set_originY",get_originY:"get_originY",set_originX:"set_originX",get_originX:"get_originX",set_matrix:"set_matrix",get_matrix:"get_matrix",set_id:"set_id",get_id:"get_id",set_height:"set_height",get_height:"get_height",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
};
var openfl_display_TileContainer = function(x,y,scaleX,scaleY,rotation,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	openfl_display_Tile.call(this,-1,x,y,scaleX,scaleY,rotation,originX,originY);
	this.__tiles = [];
	this.__length = 0;
};
$hxClasses["openfl.display.TileContainer"] = openfl_display_TileContainer;
openfl_display_TileContainer.__name__ = "openfl.display.TileContainer";
openfl_display_TileContainer.__interfaces__ = [openfl_display_ITileContainer];
openfl_display_TileContainer.__super__ = openfl_display_Tile;
openfl_display_TileContainer.prototype = $extend(openfl_display_Tile.prototype,{
	addTile: function(tile) {
		if(tile == null) {
			return null;
		}
		if(tile.parent == this) {
			HxOverrides.remove(this.__tiles,tile);
			this.__length--;
		}
		this.__tiles[this.get_numTiles()] = tile;
		tile.parent = this;
		this.__length++;
		this.__setRenderDirty();
		return tile;
	}
	,addTileAt: function(tile,index) {
		if(tile == null) {
			return null;
		}
		if(tile.parent == this) {
			HxOverrides.remove(this.__tiles,tile);
			this.__length--;
		}
		this.__tiles.splice(index,0,tile);
		tile.parent = this;
		this.__length++;
		this.__setRenderDirty();
		return tile;
	}
	,addTiles: function(tiles) {
		var _g = 0;
		while(_g < tiles.length) {
			var tile = tiles[_g];
			++_g;
			this.addTile(tile);
		}
		return tiles;
	}
	,clone: function() {
		var group = new openfl_display_TileContainer();
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			group.addTile(tile.clone());
		}
		return group;
	}
	,contains: function(tile) {
		return this.__tiles.indexOf(tile) > -1;
	}
	,getBounds: function(targetCoordinateSpace) {
		var result = new openfl_geom_Rectangle();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(targetCoordinateSpace);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		return result;
	}
	,getTileAt: function(index) {
		if(index >= 0 && index < this.get_numTiles()) {
			return this.__tiles[index];
		}
		return null;
	}
	,getTileIndex: function(tile) {
		var _g = 0;
		var _g1 = this.__tiles.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__tiles[i] == tile) {
				return i;
			}
		}
		return -1;
	}
	,removeTile: function(tile) {
		if(tile != null && tile.parent == this) {
			tile.parent = null;
			HxOverrides.remove(this.__tiles,tile);
			this.__length--;
			this.__setRenderDirty();
		}
		return tile;
	}
	,removeTileAt: function(index) {
		if(index >= 0 && index < this.get_numTiles()) {
			return this.removeTile(this.__tiles[index]);
		}
		return null;
	}
	,removeTiles: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(beginIndex < 0) {
			beginIndex = 0;
		}
		if(endIndex > this.__tiles.length - 1) {
			endIndex = this.__tiles.length - 1;
		}
		var removed = this.__tiles.splice(beginIndex,endIndex - beginIndex + 1);
		var _g = 0;
		while(_g < removed.length) {
			var tile = removed[_g];
			++_g;
			tile.parent = null;
		}
		this.__length = this.__tiles.length;
		this.__setRenderDirty();
	}
	,setTileIndex: function(tile,index) {
		if(index >= 0 && index <= this.get_numTiles() && tile.parent == this) {
			HxOverrides.remove(this.__tiles,tile);
			this.__tiles.splice(index,0,tile);
			this.__setRenderDirty();
		}
	}
	,sortTiles: function(compareFunction) {
		this.__tiles.sort(compareFunction);
		this.__setRenderDirty();
	}
	,swapTiles: function(tile1,tile2) {
		if(tile1.parent == this && tile2.parent == this) {
			var index1 = this.__tiles.indexOf(tile1);
			var index2 = this.__tiles.indexOf(tile2);
			this.__tiles[index1] = tile2;
			this.__tiles[index2] = tile1;
			this.__setRenderDirty();
		}
	}
	,swapTilesAt: function(index1,index2) {
		var swap = this.__tiles[index1];
		this.__tiles[index1] = this.__tiles[index2];
		this.__tiles[index2] = swap;
		swap = null;
		this.__setRenderDirty();
	}
	,get_numTiles: function() {
		return this.__length;
	}
	,get_height: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		this.__getBounds(result,this.get_matrix());
		var h = result.height;
		openfl_geom_Rectangle.__pool.release(result);
		return h;
	}
	,set_height: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		if(result.height != 0) {
			this.set_scaleY(value / result.height);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_width: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		this.__getBounds(result,this.get_matrix());
		var w = result.width;
		openfl_geom_Rectangle.__pool.release(result);
		return w;
	}
	,set_width: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		if(result.width != 0) {
			this.set_scaleX(value / result.width);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,__class__: openfl_display_TileContainer
	,__properties__: $extend(openfl_display_Tile.prototype.__properties__,{get_numTiles:"get_numTiles"})
});
var openfl_display_Tilemap = function(width,height,tileset,smoothing) {
	if(smoothing == null) {
		smoothing = true;
	}
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 9;
	this.__tileset = tileset;
	this.smoothing = smoothing;
	this.tileAlphaEnabled = true;
	this.tileBlendModeEnabled = true;
	this.tileColorTransformEnabled = true;
	this.__group = new openfl_display_TileContainer();
	this.__group.set_tileset(tileset);
	this.__width = width;
	this.__height = height;
};
$hxClasses["openfl.display.Tilemap"] = openfl_display_Tilemap;
openfl_display_Tilemap.__name__ = "openfl.display.Tilemap";
openfl_display_Tilemap.__interfaces__ = [openfl_display_ITileContainer];
openfl_display_Tilemap.__super__ = openfl_display_DisplayObject;
openfl_display_Tilemap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	addTile: function(tile) {
		return this.__group.addTile(tile);
	}
	,addTileAt: function(tile,index) {
		return this.__group.addTileAt(tile,index);
	}
	,addTiles: function(tiles) {
		return this.__group.addTiles(tiles);
	}
	,contains: function(tile) {
		return this.__group.contains(tile);
	}
	,getTileAt: function(index) {
		return this.__group.getTileAt(index);
	}
	,getTileIndex: function(tile) {
		return this.__group.getTileIndex(tile);
	}
	,getTiles: function() {
		return this.__group.clone();
	}
	,removeTile: function(tile) {
		return this.__group.removeTile(tile);
	}
	,removeTileAt: function(index) {
		return this.__group.removeTileAt(index);
	}
	,removeTiles: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		this.__group.removeTiles(beginIndex,endIndex);
	}
	,setTileIndex: function(tile,index) {
		this.__group.setTileIndex(tile,index);
	}
	,setTiles: function(group) {
		var _g = 0;
		var _g1 = this.__group.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			this.removeTile(tile);
		}
		var _g = 0;
		var _g1 = group.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			this.addTile(tile);
		}
	}
	,sortTiles: function(compareFunction) {
		this.__group.sortTiles(compareFunction);
	}
	,swapTiles: function(tile1,tile2) {
		this.__group.swapTiles(tile1,tile2);
	}
	,swapTilesAt: function(index1,index2) {
		this.__group.swapTilesAt(index1,index2);
	}
	,__enterFrame: function(deltaTime) {
		if(this.__group.__dirty) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__renderFlash: function() {
	}
	,get_height: function() {
		return this.__height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		this.__height = value | 0;
		return this.__height * Math.abs(this.get_scaleY());
	}
	,get_numTiles: function() {
		return this.__group.__length;
	}
	,get_tileset: function() {
		return this.__tileset;
	}
	,set_tileset: function(value) {
		if(value != this.__tileset) {
			this.__tileset = value;
			this.__group.set_tileset(value);
			this.__group.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_width: function() {
		return this.__width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		this.__width = value | 0;
		return this.__width * Math.abs(this.__scaleX);
	}
	,__class__: openfl_display_Tilemap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tileset:"set_tileset",get_tileset:"get_tileset",get_numTiles:"get_numTiles"})
});
var openfl_display_Tileset = function(bitmapData,rects) {
	this.__bitmapData = bitmapData;
	this.rectData = openfl_Vector.toFloatVector(null);
	this.__data = [];
	if(rects != null) {
		var _g = 0;
		while(_g < rects.length) {
			var rect = rects[_g];
			++_g;
			this.addRect(rect);
		}
	}
};
$hxClasses["openfl.display.Tileset"] = openfl_display_Tileset;
openfl_display_Tileset.__name__ = "openfl.display.Tileset";
openfl_display_Tileset.prototype = {
	addRect: function(rect) {
		if(rect == null) {
			return -1;
		}
		this.rectData.push(rect.x);
		this.rectData.push(rect.y);
		this.rectData.push(rect.width);
		this.rectData.push(rect.height);
		var tileData = new openfl_display__$Tileset_TileData(rect);
		tileData.__update(this.__bitmapData);
		this.__data.push(tileData);
		return this.__data.length - 1;
	}
	,clone: function() {
		var tileset = new openfl_display_Tileset(this.__bitmapData,null);
		var rect = openfl_geom_Rectangle.__pool.get();
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var tileData = _g1[_g];
			++_g;
			rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
			tileset.addRect(rect);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		return tileset;
	}
	,hasRect: function(rect) {
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var tileData = _g1[_g];
			++_g;
			if(rect.x == tileData.x && rect.y == tileData.y && rect.width == tileData.width && rect.height == tileData.height) {
				return true;
			}
		}
		return false;
	}
	,getRect: function(id) {
		if(id < this.__data.length && id >= 0) {
			return new openfl_geom_Rectangle(this.__data[id].x,this.__data[id].y,this.__data[id].width,this.__data[id].height);
		}
		return null;
	}
	,getRectID: function(rect) {
		var tileData;
		var _g = 0;
		var _g1 = this.__data.length;
		while(_g < _g1) {
			var i = _g++;
			tileData = this.__data[i];
			if(rect.x == tileData.x && rect.y == tileData.y && rect.width == tileData.width && rect.height == tileData.height) {
				return i;
			}
		}
		return null;
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			data.__update(this.__bitmapData);
		}
		return value;
	}
	,get_numRects: function() {
		return this.__data.length;
	}
	,__class__: openfl_display_Tileset
	,__properties__: {get_numRects:"get_numRects",set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"}
};
var openfl_display__$Tileset_TileData = function(rect) {
	if(rect != null) {
		this.x = rect.x | 0;
		this.y = rect.y | 0;
		this.width = rect.width | 0;
		this.height = rect.height | 0;
	}
};
$hxClasses["openfl.display._Tileset.TileData"] = openfl_display__$Tileset_TileData;
openfl_display__$Tileset_TileData.__name__ = "openfl.display._Tileset.TileData";
openfl_display__$Tileset_TileData.prototype = {
	__update: function(bitmapData) {
		if(bitmapData != null) {
			var bitmapWidth = bitmapData.width;
			var bitmapHeight = bitmapData.height;
			this.__uvX = this.x / bitmapWidth;
			this.__uvY = this.y / bitmapHeight;
			this.__uvWidth = (this.x + this.width) / bitmapWidth;
			this.__uvHeight = (this.y + this.height) / bitmapHeight;
		}
	}
	,__class__: openfl_display__$Tileset_TileData
};
var openfl_display_Timeline = function() {
	this.__framesLoaded = 1;
	this.__totalFrames = 1;
	this.__currentLabels = [];
	this.__currentFrame = 1;
	this.__lastFrameScriptEval = -1;
	this.__lastFrameUpdate = -1;
};
$hxClasses["openfl.display.Timeline"] = openfl_display_Timeline;
openfl_display_Timeline.__name__ = "openfl.display.Timeline";
openfl_display_Timeline.prototype = {
	attachMovieClip: function(movieClip) {
	}
	,enterFrame: function(frame) {
	}
	,__addFrameScript: function(index,method) {
		if(index < 0) {
			return;
		}
		var frame = index + 1;
		if(method != null) {
			if(this.__frameScripts == null) {
				this.__frameScripts = new haxe_ds_IntMap();
			}
			this.__frameScripts.h[frame] = function(scope) {
				method();
			};
		} else if(this.__frameScripts != null) {
			this.__frameScripts.remove(frame);
		}
	}
	,__attachMovieClip: function(movieClip) {
		this.__scope = movieClip;
		this.__totalFrames = 0;
		this.__framesLoaded = 0;
		if(this.scenes != null && this.scenes.length > 0) {
			var _g = 0;
			var _g1 = this.scenes;
			while(_g < _g1.length) {
				var scene = _g1[_g];
				++_g;
				this.__totalFrames += scene.numFrames;
				this.__framesLoaded += scene.numFrames;
				if(scene.labels != null) {
					this.__currentLabels = this.__currentLabels.concat(scene.labels);
				}
			}
			this.__currentScene = this.scenes[0];
		}
		if(this.scripts != null && this.scripts.length > 0) {
			this.__frameScripts = new haxe_ds_IntMap();
			var _g = 0;
			var _g1 = this.scripts;
			while(_g < _g1.length) {
				var script = _g1[_g];
				++_g;
				this.__frameScripts.h[script.frame] = script.script;
			}
		}
		this.attachMovieClip(movieClip);
	}
	,__enterFrame: function(deltaTime) {
		if(this.__isPlaying) {
			var nextFrame = this.__getNextFrame(deltaTime);
			if(this.__lastFrameScriptEval == nextFrame) {
				return;
			}
			if(this.__frameScripts != null) {
				if(nextFrame < this.__currentFrame) {
					if(!this.__evaluateFrameScripts(this.__totalFrames)) {
						return;
					}
					this.__currentFrame = 1;
				}
				if(!this.__evaluateFrameScripts(nextFrame)) {
					return;
				}
			} else {
				this.__currentFrame = nextFrame;
			}
		}
		this.__updateSymbol(this.__currentFrame);
	}
	,__evaluateFrameScripts: function(advanceToFrame) {
		if(this.__frameScripts == null) {
			return true;
		}
		var _g = this.__currentFrame;
		var _g1 = advanceToFrame + 1;
		while(_g < _g1) {
			var frame = _g++;
			if(frame == this.__lastFrameScriptEval) {
				continue;
			}
			this.__lastFrameScriptEval = frame;
			this.__currentFrame = frame;
			if(this.__frameScripts.h.hasOwnProperty(frame)) {
				this.__updateSymbol(frame);
				var script = this.__frameScripts.h[frame];
				script(this.__scope);
				if(this.__currentFrame != frame) {
					return false;
				}
			}
			if(!this.__isPlaying) {
				return false;
			}
		}
		return true;
	}
	,__getNextFrame: function(deltaTime) {
		var nextFrame = 0;
		if(this.frameRate != null) {
			this.__timeElapsed += deltaTime;
			nextFrame = this.__currentFrame + Math.floor(this.__timeElapsed / this.__frameTime);
			if(nextFrame < 1) {
				nextFrame = 1;
			}
			if(nextFrame > this.__totalFrames) {
				nextFrame = Math.floor((nextFrame - 1) % this.__totalFrames) + 1;
			}
			this.__timeElapsed %= this.__frameTime;
		} else {
			nextFrame = this.__currentFrame + 1;
			if(nextFrame > this.__totalFrames) {
				nextFrame = 1;
			}
		}
		return nextFrame;
	}
	,__goto: function(frame) {
		if(frame < 1) {
			frame = 1;
		} else if(frame > this.__totalFrames) {
			frame = this.__totalFrames;
		}
		this.__lastFrameScriptEval = -1;
		this.__currentFrame = frame;
		this.__updateSymbol(this.__currentFrame);
		this.__evaluateFrameScripts(this.__currentFrame);
	}
	,__gotoAndPlay: function(frame,scene) {
		this.__play();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,__gotoAndStop: function(frame,scene) {
		this.__stop();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,__nextFrame: function() {
		this.__stop();
		this.__goto(this.__currentFrame + 1);
	}
	,__nextScene: function() {
	}
	,__play: function() {
		if(this.__isPlaying || this.__totalFrames < 2) {
			return;
		}
		this.__isPlaying = true;
		if(this.frameRate != null) {
			this.__frameTime = 1000 / this.frameRate | 0;
			this.__timeElapsed = 0;
		}
	}
	,__prevFrame: function() {
		this.__stop();
		this.__goto(this.__currentFrame - 1);
	}
	,__prevScene: function() {
	}
	,__stop: function() {
		this.__isPlaying = false;
	}
	,__resolveFrameReference: function(frame) {
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			return frame;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.name == label) {
					return frameLabel.frame;
				}
			}
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Error #2109: Frame label " + label + " not found in scene."));
		} else {
			throw haxe_Exception.thrown("Invalid type for frame " + frame.__name__);
		}
	}
	,__updateFrameLabel: function() {
		this.__currentLabel = null;
		this.__currentFrameLabel = null;
		var _g = 0;
		var _g1 = this.__currentLabels;
		while(_g < _g1.length) {
			var label = _g1[_g];
			++_g;
			if(label.frame < this.__currentFrame) {
				this.__currentLabel = label.name;
			} else if(label.frame == this.__currentFrame) {
				this.__currentLabel = label.name;
				this.__currentFrameLabel = label.name;
			} else {
				break;
			}
		}
	}
	,__updateSymbol: function(targetFrame) {
		if(this.__currentFrame != this.__lastFrameUpdate) {
			this.__updateFrameLabel();
			this.enterFrame(targetFrame);
			this.__lastFrameUpdate = this.__currentFrame;
		}
	}
	,__class__: openfl_display_Timeline
};
var openfl_display_TriangleCulling = {};
openfl_display_TriangleCulling.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display_TriangleCulling.toString = function(this1) {
	switch(this1) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(application,attributes) {
	lime_ui_Window.call(this,application,attributes);
	this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(attributes.context,"background") ? attributes.context.background : 16777215);
	if(Object.prototype.hasOwnProperty.call(attributes,"parameters")) {
		try {
			this.stage.get_loaderInfo().parameters = attributes.parameters;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && !attributes.resizable) {
		this.stage.__setLogicalSize(attributes.width,attributes.height);
	}
	application.addModule(this.stage);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = "openfl.display.Window";
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	__class__: openfl_display_Window
});
var openfl_display__$internal_AbstractNoise = function(seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold) {
	if(stitch_threshold == null) {
		stitch_threshold = 0.05;
	}
	if(stitch == null) {
		stitch = false;
	}
	this.stitch = stitch;
	this.stitch_threshold = stitch_threshold;
	this.octaves = octaves;
	this.channels = channels;
	this.grayscale = grayScale;
	this.calculateOctaves(falloff);
};
$hxClasses["openfl.display._internal.AbstractNoise"] = openfl_display__$internal_AbstractNoise;
openfl_display__$internal_AbstractNoise.__name__ = "openfl.display._internal.AbstractNoise";
openfl_display__$internal_AbstractNoise.prototype = {
	fill: function(bitmap,_scale_x,_scale_y,_scale_z) {
	}
	,stitching: function(bitmap,color,px,py,stitch_w,stitch_h,width,height) {
		var r = color >> 16 & 255;
		var g = color >> 8 & 255;
		var b = color & 255;
		if(width - stitch_w < px) {
			var dest = bitmap.getPixel32(width - px,py);
			var dest_r = dest >> 16 & 255;
			var dest_g = dest >> 8 & 255;
			var dest_b = dest & 255;
			var u = (width - px) / stitch_w;
			var uu = u * u;
			r = this.mixI(dest_r,r,u);
			g = this.mixI(dest_g,g,u);
			b = this.mixI(dest_b,b,u);
		}
		if(height - stitch_h < py) {
			var dest = bitmap.getPixel32(px,height - py);
			var dest_r = dest >> 16 & 255;
			var dest_g = dest >> 8 & 255;
			var dest_b = dest & 255;
			var u = (height - py) / stitch_h;
			var uu = u * u;
			r = this.mixI(dest_r,r,u);
			g = this.mixI(dest_g,g,u);
			b = this.mixI(dest_b,b,u);
		}
		return -16777216 | r << 16 | g << 8 | b;
	}
	,color: function(r_noise,g_noise,b_noise) {
		var color_r = 0;
		var color_g = 0;
		var color_b = 0;
		if(null != r_noise) {
			color_r = this.noiseToColor(r_noise);
		}
		if(null != g_noise) {
			color_g = this.noiseToColor(g_noise);
		}
		if(null != b_noise) {
			color_b = this.noiseToColor(b_noise);
		}
		return -16777216 | color_r << 16 | color_g << 8 | color_b;
	}
	,noiseToColor: function(noise) {
		return (noise * this.persistence_max + 1.0) * 128 | 0;
	}
	,fade: function(t) {
		return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
	}
	,mixI: function(x,y,t) {
		return (1.0 - t) * x + t * y | 0;
	}
	,mix: function(x,y,t) {
		return (1.0 - t) * x + t * y;
	}
	,fastfloor: function(x) {
		if(x > 0) {
			return x | 0;
		} else {
			return x - 1 | 0;
		}
	}
	,dot2d: function(grad,x,y) {
		return grad[0] * x + grad[1] * y;
	}
	,dot: function(grad,x,y,z) {
		return grad[0] * x + grad[1] * y + grad[2] * z;
	}
	,calculateOctaves: function(fPersistence) {
		var fFreq;
		var fPers;
		this.octaves_frequencies = [];
		this.octaves_persistences = [];
		this.persistence_max = 0;
		var _g = 0;
		var _g1 = this.octaves;
		while(_g < _g1) {
			var i = _g++;
			fFreq = Math.pow(2.0,i);
			fPers = Math.pow(fPersistence,i);
			this.persistence_max += fPers;
			this.octaves_frequencies.push(fFreq);
			this.octaves_persistences.push(fPers);
		}
		this.persistence_max = 1.0 / this.persistence_max;
	}
	,__class__: openfl_display__$internal_AbstractNoise
};
var openfl_display__$internal_CairoBitmap = function() { };
$hxClasses["openfl.display._internal.CairoBitmap"] = openfl_display__$internal_CairoBitmap;
openfl_display__$internal_CairoBitmap.__name__ = "openfl.display._internal.CairoBitmap";
openfl_display__$internal_CairoBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
	if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var cairo = renderer.cairo;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		renderer.applyMatrix(bitmap.__renderTransform,cairo);
		var surface = bitmap.__bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo_CairoPattern.createForSurface(surface);
			lime_graphics_cairo_CairoPattern.set_filter(pattern,renderer.__allowSmoothing && bitmap.smoothing ? 1 : 3);
			cairo.set_source(pattern);
			if(alpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(alpha);
			}
		}
		renderer.__popMaskObject(bitmap);
		renderer.__setBlendMode(10);
	}
};
openfl_display__$internal_CairoBitmap.renderDrawable = function(bitmap,renderer) {
};
openfl_display__$internal_CairoBitmap.renderDrawableMask = function(bitmap,renderer) {
	renderer.cairo.rectangle(0,0,bitmap.get_width(),bitmap.get_height());
};
var openfl_display__$internal_CairoBitmapData = function() { };
$hxClasses["openfl.display._internal.CairoBitmapData"] = openfl_display__$internal_CairoBitmapData;
openfl_display__$internal_CairoBitmapData.__name__ = "openfl.display._internal.CairoBitmapData";
openfl_display__$internal_CairoBitmapData.renderDrawable = function(bitmapData,renderer) {
};
openfl_display__$internal_CairoBitmapData.renderDrawableMask = function(tilemap,renderer) {
};
var openfl_display__$internal_CairoDisplayObject = function() { };
$hxClasses["openfl.display._internal.CairoDisplayObject"] = openfl_display__$internal_CairoDisplayObject;
openfl_display__$internal_CairoDisplayObject.__name__ = "openfl.display._internal.CairoDisplayObject";
openfl_display__$internal_CairoDisplayObject.render = function(displayObject,renderer) {
};
openfl_display__$internal_CairoDisplayObject.renderDrawable = function(displayObject,renderer) {
};
openfl_display__$internal_CairoDisplayObject.renderDrawableMask = function(displayObject,renderer) {
};
var openfl_display__$internal_CairoDisplayObjectContainer = function() { };
$hxClasses["openfl.display._internal.CairoDisplayObjectContainer"] = openfl_display__$internal_CairoDisplayObjectContainer;
openfl_display__$internal_CairoDisplayObjectContainer.__name__ = "openfl.display._internal.CairoDisplayObjectContainer";
openfl_display__$internal_CairoDisplayObjectContainer.renderDrawable = function(displayObjectContainer,renderer) {
};
openfl_display__$internal_CairoDisplayObjectContainer.renderDrawableMask = function(displayObjectContainer,renderer) {
};
var openfl_display__$internal_CairoGraphics = function() { };
$hxClasses["openfl.display._internal.CairoGraphics"] = openfl_display__$internal_CairoGraphics;
openfl_display__$internal_CairoGraphics.__name__ = "openfl.display._internal.CairoGraphics";
openfl_display__$internal_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl_display__$internal_CairoGraphics.render = function(graphics,renderer) {
};
openfl_display__$internal_CairoGraphics.renderMask = function(graphics,renderer) {
};
var openfl_display__$internal_CairoShape = function() { };
$hxClasses["openfl.display._internal.CairoShape"] = openfl_display__$internal_CairoShape;
openfl_display__$internal_CairoShape.__name__ = "openfl.display._internal.CairoShape";
openfl_display__$internal_CairoShape.render = function(shape,renderer) {
};
openfl_display__$internal_CairoShape.renderDrawable = function(shape,renderer) {
};
openfl_display__$internal_CairoShape.renderDrawableMask = function(shape,renderer) {
};
var openfl_display__$internal_CairoSimpleButton = function() { };
$hxClasses["openfl.display._internal.CairoSimpleButton"] = openfl_display__$internal_CairoSimpleButton;
openfl_display__$internal_CairoSimpleButton.__name__ = "openfl.display._internal.CairoSimpleButton";
openfl_display__$internal_CairoSimpleButton.renderDrawable = function(simpleButton,renderer) {
	if(!simpleButton.__renderable || simpleButton.__worldAlpha <= 0 || simpleButton.__currentState == null) {
		return;
	}
	renderer.__pushMaskObject(simpleButton);
	renderer.__renderDrawable(simpleButton.__currentState);
	renderer.__popMaskObject(simpleButton);
	renderer.__renderEvent(simpleButton);
};
openfl_display__$internal_CairoSimpleButton.renderDrawableMask = function(simpleButton,renderer) {
	renderer.__renderDrawableMask(simpleButton.__currentState);
};
var openfl_display__$internal_CairoTextField = function() { };
$hxClasses["openfl.display._internal.CairoTextField"] = openfl_display__$internal_CairoTextField;
openfl_display__$internal_CairoTextField.__name__ = "openfl.display._internal.CairoTextField";
openfl_display__$internal_CairoTextField.render = function(textField,renderer,transform) {
};
openfl_display__$internal_CairoTextField.renderDrawable = function(textField,renderer) {
};
openfl_display__$internal_CairoTextField.renderDrawableMask = function(textField,renderer) {
};
var openfl_display__$internal_CairoTilemap = function() { };
$hxClasses["openfl.display._internal.CairoTilemap"] = openfl_display__$internal_CairoTilemap;
openfl_display__$internal_CairoTilemap.__name__ = "openfl.display._internal.CairoTilemap";
openfl_display__$internal_CairoTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0) {
		return;
	}
	var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	renderer.__setBlendMode(tilemap.__worldBlendMode);
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	openfl_display__$internal_CairoTilemap.renderTileContainer(tilemap.__group,renderer,tilemap.__renderTransform,tilemap.__tileset,renderer.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,null,rect,new lime_math_Matrix3());
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl_display__$internal_CairoTilemap.renderTileContainer = function(group,renderer,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData,surface,pattern,rect,matrix) {
	var cairo = renderer.cairo;
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var tiles = group.__tiles;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var _g = 0;
	while(_g < tiles.length) {
		var tile = tiles[_g];
		++_g;
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl_display__$internal_CairoTilemap.renderTileContainer(tile,renderer,tileTransform,tileset,smooth,alphaEnabled,alpha,blendModeEnabled,blendMode,cacheBitmapData,surface,pattern,rect,matrix);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
			}
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(bitmapData != cacheBitmapData) {
				surface = bitmapData.getSurface();
				pattern = lime_graphics_cairo_CairoPattern.createForSurface(surface);
				lime_graphics_cairo_CairoPattern.set_filter(pattern,smooth ? 1 : 3);
				cairo.set_source(pattern);
				cacheBitmapData = bitmapData;
			}
			if(blendModeEnabled) {
				renderer.__setBlendMode(blendMode);
			}
			renderer.applyMatrix(tileTransform,cairo);
			matrix.tx = tileRect.x;
			matrix.ty = tileRect.y;
			lime_graphics_cairo_CairoPattern.set_matrix(pattern,matrix);
			cairo.set_source(pattern);
			cairo.save();
			cairo.newPath();
			cairo.rectangle(0,0,tileRect.width,tileRect.height);
			cairo.clip();
			if(alpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(alpha);
			}
			cairo.restore();
		}
	}
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl_display__$internal_CairoTilemap.renderDrawable = function(tilemap,renderer) {
};
openfl_display__$internal_CairoTilemap.renderDrawableMask = function(tilemap,renderer) {
};
var openfl_display__$internal_CanvasBitmap = function() { };
$hxClasses["openfl.display._internal.CanvasBitmap"] = openfl_display__$internal_CanvasBitmap;
openfl_display__$internal_CanvasBitmap.__name__ = "openfl.display._internal.CanvasBitmap";
openfl_display__$internal_CanvasBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
	if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		var context = renderer.context;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap,false);
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		context.globalAlpha = alpha;
		var scrollRect = bitmap.__scrollRect;
		renderer.setTransform(bitmap.__renderTransform,context);
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
		} else {
			context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = true;
		}
		renderer.__popMaskObject(bitmap,false);
	}
};
openfl_display__$internal_CanvasBitmap.renderDrawable = function(bitmap,renderer) {
	renderer.__updateCacheBitmap(bitmap,false);
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.image != null) {
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	if(bitmap.__cacheBitmap != null && !bitmap.__isCacheBitmapRender) {
		var bitmap1 = bitmap.__cacheBitmap;
		if(bitmap1.__renderable) {
			var alpha = renderer.__getAlpha(bitmap1.__worldAlpha);
			if(alpha > 0 && bitmap1.__bitmapData != null && bitmap1.__bitmapData.__isValid && bitmap1.__bitmapData.readable) {
				var context = renderer.context;
				renderer.__setBlendMode(bitmap1.__worldBlendMode);
				renderer.__pushMaskObject(bitmap1,false);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap1.__bitmapData.image);
				context.globalAlpha = alpha;
				var scrollRect = bitmap1.__scrollRect;
				renderer.setTransform(bitmap1.__renderTransform,context);
				if(!renderer.__allowSmoothing || !bitmap1.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(bitmap1.__bitmapData.image.get_src(),0,0,bitmap1.__bitmapData.image.width,bitmap1.__bitmapData.image.height);
				} else {
					context.drawImage(bitmap1.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderer.__allowSmoothing || !bitmap1.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskObject(bitmap1,false);
			}
		}
	} else {
		if(!(bitmap.opaqueBackground == null && bitmap.__graphics == null)) {
			if(bitmap.__renderable) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(!(alpha <= 0)) {
					if(bitmap.opaqueBackground != null && !bitmap.__isCacheBitmapRender && bitmap.get_width() > 0 && bitmap.get_height() > 0) {
						renderer.__setBlendMode(bitmap.__worldBlendMode);
						renderer.__pushMaskObject(bitmap);
						var context = renderer.context;
						renderer.setTransform(bitmap.__renderTransform,context);
						var color = bitmap.opaqueBackground;
						context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context.fillRect(0,0,bitmap.get_width(),bitmap.get_height());
						renderer.__popMaskObject(bitmap);
					}
					if(bitmap.__graphics != null) {
						if(bitmap.__renderable) {
							var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
							if(!(alpha <= 0)) {
								var graphics = bitmap.__graphics;
								if(graphics != null) {
									openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
									var width = graphics.__width;
									var height = graphics.__height;
									var canvas = graphics.__canvas;
									if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
										var transform = graphics.__worldTransform;
										var context = renderer.context;
										var scrollRect = bitmap.__scrollRect;
										var scale9Grid = bitmap.__worldScale9Grid;
										if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
											renderer.__setBlendMode(bitmap.__worldBlendMode);
											renderer.__pushMaskObject(bitmap);
											context.globalAlpha = alpha;
											if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
												context.setTransform(1,0,0,1,transform.tx,transform.ty);
												var bounds = graphics.__bounds;
												var scaleX = graphics.__renderTransform.a;
												var scaleY = graphics.__renderTransform.d;
												var renderScaleX = transform.a;
												var renderScaleY = transform.d;
												var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
												var top = Math.round(scale9Grid.y * scaleY);
												var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
												var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
												var centerWidth = Math.round(scale9Grid.width * scaleX);
												var centerHeight = Math.round(scale9Grid.height * scaleY);
												var renderLeft = Math.round(scale9Grid.x * renderScaleX);
												var renderTop = Math.round(scale9Grid.y * renderScaleY);
												var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
												var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
												var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
												var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
												renderer.applySmoothing(context,false);
												if(centerWidth != 0 && centerHeight != 0) {
													context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
													context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
													context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
													context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
													context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
													context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
													context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
													context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
												} else if(centerWidth == 0 && centerHeight != 0) {
													var renderWidth = renderLeft + renderCenterWidth + renderRight;
													context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
													context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
												} else if(centerHeight == 0 && centerWidth != 0) {
													var renderHeight = renderTop + renderCenterHeight + renderBottom;
													context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
													context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
													context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
												}
											} else {
												renderer.setTransform(transform,context);
												if(renderer.__isDOM) {
													var reverseScale = 1 / renderer.pixelRatio;
													context.scale(reverseScale,reverseScale);
												}
												context.drawImage(canvas,0,0,width,height);
											}
											renderer.__popMaskObject(bitmap);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if(bitmap.__renderable) {
			var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
			if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				var context = renderer.context;
				renderer.__setBlendMode(bitmap.__worldBlendMode);
				renderer.__pushMaskObject(bitmap,false);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
				context.globalAlpha = alpha;
				var scrollRect = bitmap.__scrollRect;
				renderer.setTransform(bitmap.__renderTransform,context);
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
				} else {
					context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskObject(bitmap,false);
			}
		}
	}
	renderer.__renderEvent(bitmap);
};
openfl_display__$internal_CanvasBitmap.renderDrawableMask = function(bitmap,renderer) {
	renderer.context.rect(0,0,bitmap.get_width(),bitmap.get_height());
};
var openfl_display__$internal_CanvasBitmapData = function() { };
$hxClasses["openfl.display._internal.CanvasBitmapData"] = openfl_display__$internal_CanvasBitmapData;
openfl_display__$internal_CanvasBitmapData.__name__ = "openfl.display._internal.CanvasBitmapData";
openfl_display__$internal_CanvasBitmapData.renderDrawable = function(bitmapData,renderer) {
	if(!bitmapData.readable) {
		return;
	}
	var image = bitmapData.image;
	if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	var context = renderer.context;
	context.globalAlpha = 1;
	renderer.setTransform(bitmapData.__renderTransform,context);
	context.drawImage(image.get_src(),0,0,image.width,image.height);
};
openfl_display__$internal_CanvasBitmapData.renderDrawableMask = function(bitmapData,renderer) {
};
var openfl_display__$internal_CanvasDisplayObject = function() { };
$hxClasses["openfl.display._internal.CanvasDisplayObject"] = openfl_display__$internal_CanvasDisplayObject;
openfl_display__$internal_CanvasDisplayObject.__name__ = "openfl.display._internal.CanvasDisplayObject";
openfl_display__$internal_CanvasDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.context;
		renderer.setTransform(displayObject.__renderTransform,context);
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__popMaskObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(displayObject.__renderable) {
			var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
			if(!(alpha <= 0)) {
				var graphics = displayObject.__graphics;
				if(graphics != null) {
					openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
					var width = graphics.__width;
					var height = graphics.__height;
					var canvas = graphics.__canvas;
					if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
						var transform = graphics.__worldTransform;
						var context = renderer.context;
						var scrollRect = displayObject.__scrollRect;
						var scale9Grid = displayObject.__worldScale9Grid;
						if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
							renderer.__setBlendMode(displayObject.__worldBlendMode);
							renderer.__pushMaskObject(displayObject);
							context.globalAlpha = alpha;
							if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
								context.setTransform(1,0,0,1,transform.tx,transform.ty);
								var bounds = graphics.__bounds;
								var scaleX = graphics.__renderTransform.a;
								var scaleY = graphics.__renderTransform.d;
								var renderScaleX = transform.a;
								var renderScaleY = transform.d;
								var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
								var top = Math.round(scale9Grid.y * scaleY);
								var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
								var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
								var centerWidth = Math.round(scale9Grid.width * scaleX);
								var centerHeight = Math.round(scale9Grid.height * scaleY);
								var renderLeft = Math.round(scale9Grid.x * renderScaleX);
								var renderTop = Math.round(scale9Grid.y * renderScaleY);
								var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
								var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
								var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
								var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
								renderer.applySmoothing(context,false);
								if(centerWidth != 0 && centerHeight != 0) {
									context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
									context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
									context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
									context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
									context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
									context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
									context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
									context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
									context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
								} else if(centerWidth == 0 && centerHeight != 0) {
									var renderWidth = renderLeft + renderCenterWidth + renderRight;
									context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
									context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
									context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
								} else if(centerHeight == 0 && centerWidth != 0) {
									var renderHeight = renderTop + renderCenterHeight + renderBottom;
									context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
									context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
									context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
								}
							} else {
								renderer.setTransform(transform,context);
								if(renderer.__isDOM) {
									var reverseScale = 1 / renderer.pixelRatio;
									context.scale(reverseScale,reverseScale);
								}
								context.drawImage(canvas,0,0,width,height);
							}
							renderer.__popMaskObject(displayObject);
						}
					}
				}
			}
		}
	}
};
openfl_display__$internal_CanvasDisplayObject.renderDrawable = function(displayObject,renderer) {
	if(displayObject.get_mask() == null || displayObject.get_mask().get_width() > 0 && displayObject.get_mask().get_height() > 0) {
		renderer.__updateCacheBitmap(displayObject,false);
		if(displayObject.__cacheBitmap != null && !displayObject.__isCacheBitmapRender) {
			var bitmap = displayObject.__cacheBitmap;
			if(bitmap.__renderable) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					var context = renderer.context;
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = alpha;
					var scrollRect = bitmap.__scrollRect;
					renderer.setTransform(bitmap.__renderTransform,context);
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(bitmap,false);
				}
			}
		} else if(!(displayObject.opaqueBackground == null && displayObject.__graphics == null)) {
			if(displayObject.__renderable) {
				var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
				if(!(alpha <= 0)) {
					if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
						renderer.__setBlendMode(displayObject.__worldBlendMode);
						renderer.__pushMaskObject(displayObject);
						var context = renderer.context;
						renderer.setTransform(displayObject.__renderTransform,context);
						var color = displayObject.opaqueBackground;
						context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
						renderer.__popMaskObject(displayObject);
					}
					if(displayObject.__graphics != null) {
						if(displayObject.__renderable) {
							var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
							if(!(alpha <= 0)) {
								var graphics = displayObject.__graphics;
								if(graphics != null) {
									openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
									var width = graphics.__width;
									var height = graphics.__height;
									var canvas = graphics.__canvas;
									if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
										var transform = graphics.__worldTransform;
										var context = renderer.context;
										var scrollRect = displayObject.__scrollRect;
										var scale9Grid = displayObject.__worldScale9Grid;
										if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
											renderer.__setBlendMode(displayObject.__worldBlendMode);
											renderer.__pushMaskObject(displayObject);
											context.globalAlpha = alpha;
											if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
												context.setTransform(1,0,0,1,transform.tx,transform.ty);
												var bounds = graphics.__bounds;
												var scaleX = graphics.__renderTransform.a;
												var scaleY = graphics.__renderTransform.d;
												var renderScaleX = transform.a;
												var renderScaleY = transform.d;
												var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
												var top = Math.round(scale9Grid.y * scaleY);
												var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
												var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
												var centerWidth = Math.round(scale9Grid.width * scaleX);
												var centerHeight = Math.round(scale9Grid.height * scaleY);
												var renderLeft = Math.round(scale9Grid.x * renderScaleX);
												var renderTop = Math.round(scale9Grid.y * renderScaleY);
												var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
												var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
												var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
												var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
												renderer.applySmoothing(context,false);
												if(centerWidth != 0 && centerHeight != 0) {
													context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
													context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
													context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
													context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
													context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
													context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
													context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
													context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
												} else if(centerWidth == 0 && centerHeight != 0) {
													var renderWidth = renderLeft + renderCenterWidth + renderRight;
													context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
													context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
												} else if(centerHeight == 0 && centerWidth != 0) {
													var renderHeight = renderTop + renderCenterHeight + renderBottom;
													context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
													context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
													context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
												}
											} else {
												renderer.setTransform(transform,context);
												if(renderer.__isDOM) {
													var reverseScale = 1 / renderer.pixelRatio;
													context.scale(reverseScale,reverseScale);
												}
												context.drawImage(canvas,0,0,width,height);
											}
											renderer.__popMaskObject(displayObject);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	renderer.__renderEvent(displayObject);
};
openfl_display__$internal_CanvasDisplayObject.renderDrawableMask = function(displayObject,renderer) {
	if(displayObject.__graphics != null) {
		openfl_display__$internal_CanvasGraphics.renderMask(displayObject.__graphics,renderer);
	}
};
var openfl_display__$internal_CanvasDisplayObjectContainer = function() { };
$hxClasses["openfl.display._internal.CanvasDisplayObjectContainer"] = openfl_display__$internal_CanvasDisplayObjectContainer;
openfl_display__$internal_CanvasDisplayObjectContainer.__name__ = "openfl.display._internal.CanvasDisplayObjectContainer";
openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawable = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(!displayObjectContainer.__renderable || displayObjectContainer.__worldAlpha <= 0 || displayObjectContainer.get_mask() != null && (displayObjectContainer.get_mask().get_width() <= 0 || displayObjectContainer.get_mask().get_height() <= 0)) {
		return;
	}
	openfl_display__$internal_CanvasDisplayObject.renderDrawable(displayObjectContainer,renderer);
	if(displayObjectContainer.__cacheBitmap != null && !displayObjectContainer.__isCacheBitmapRender) {
		return;
	}
	renderer.__pushMaskObject(displayObjectContainer);
	if(renderer.__stage != null) {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
			child.__renderDirty = false;
		}
		displayObjectContainer.__renderDirty = false;
	} else {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
		}
	}
	renderer.__popMaskObject(displayObjectContainer);
};
openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawableMask = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(displayObjectContainer.__graphics != null) {
		openfl_display__$internal_CanvasGraphics.renderMask(displayObjectContainer.__graphics,renderer);
	}
	var _g = 0;
	var _g1 = displayObjectContainer.__children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		renderer.__renderDrawableMask(child);
	}
};
var openfl_display__$internal_DrawCommandBuffer = function() {
	if(openfl_display__$internal_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl.display._internal.DrawCommandBuffer"] = openfl_display__$internal_DrawCommandBuffer;
openfl_display__$internal_DrawCommandBuffer.__name__ = "openfl.display._internal.DrawCommandBuffer";
openfl_display__$internal_DrawCommandBuffer.prototype = {
	append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl_display__$internal_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 0:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				break;
			case 3:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
				var this4 = data;
				var c3 = this4;
				this.beginShaderFill(c3.buffer.o[c3.oPos]);
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
				var this5 = data;
				var c4 = this5;
				this.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
				var this6 = data;
				var c5 = this6;
				this.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
				var this7 = data;
				var c6 = this7;
				this.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
				var this8 = data;
				var c7 = this8;
				this.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
				var this9 = data;
				var c8 = this9;
				this.drawQuads(c8.buffer.o[c8.oPos],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
				var this10 = data;
				var c9 = this10;
				this.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
				var this11 = data;
				var c10 = this11;
				this.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
				break;
			case 12:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
				var this12 = data;
				var c11 = this12;
				this.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.END_FILL;
				var this13 = data;
				var c12 = this13;
				this.endFill();
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
				var this14 = data;
				var c13 = this14;
				this.lineBitmapStyle(c13.buffer.o[c13.oPos],c13.buffer.o[c13.oPos + 1],c13.buffer.b[c13.bPos],c13.buffer.b[c13.bPos + 1]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
				var this15 = data;
				var c14 = this15;
				this.lineGradientStyle(c14.buffer.o[c14.oPos],c14.buffer.ii[c14.iiPos],c14.buffer.ff[c14.ffPos],c14.buffer.ii[c14.iiPos + 1],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
				var this16 = data;
				var c15 = this16;
				this.lineStyle(c15.buffer.o[c15.oPos],c15.buffer.i[c15.iPos],c15.buffer.f[c15.fPos],c15.buffer.b[c15.bPos],c15.buffer.o[c15.oPos + 1],c15.buffer.o[c15.oPos + 2],c15.buffer.o[c15.oPos + 3],c15.buffer.f[c15.fPos + 1]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
				var this17 = data;
				var c16 = this17;
				this.lineTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
				var this18 = data;
				var c17 = this18;
				this.moveTo(c17.buffer.f[c17.fPos],c17.buffer.f[c17.fPos + 1]);
				break;
			case 20:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_MATRIX;
				var this19 = data;
				var c18 = this19;
				this.overrideMatrix(c18.buffer.o[c18.oPos]);
				break;
			case 21:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD;
				var this20 = data;
				var c19 = this20;
				this.windingEvenOdd();
				break;
			case 22:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO;
				var this21 = data;
				var c20 = this21;
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,beginShaderFill: function(shaderBuffer) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL);
		this.o.push(shaderBuffer);
	}
	,clear: function() {
		this.types = openfl_display__$internal_DrawCommandBuffer.empty.types;
		this.b = openfl_display__$internal_DrawCommandBuffer.empty.b;
		this.i = openfl_display__$internal_DrawCommandBuffer.empty.i;
		this.f = openfl_display__$internal_DrawCommandBuffer.empty.f;
		this.o = openfl_display__$internal_DrawCommandBuffer.empty.o;
		this.ff = openfl_display__$internal_DrawCommandBuffer.empty.ff;
		this.ii = openfl_display__$internal_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl_display__$internal_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawQuads: function(rects,indices,transforms) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_QUADS);
		this.o.push(rects);
		this.o.push(indices);
		this.o.push(transforms);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideBlendMode: function(blendMode) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE);
		this.o.push(blendMode);
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl_display__$internal_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl_display__$internal_CanvasGraphics = function() { };
$hxClasses["openfl.display._internal.CanvasGraphics"] = openfl_display__$internal_CanvasGraphics;
openfl_display__$internal_CanvasGraphics.__name__ = "openfl.display._internal.CanvasGraphics";
openfl_display__$internal_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl_display__$internal_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl_display__$internal_CanvasGraphics.context.closePath();
	}
	openfl_display__$internal_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl_display__$internal_CanvasGraphics.context.closePath();
	}
	openfl_display__$internal_CanvasGraphics.context.beginPath();
};
openfl_display__$internal_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl_display__$internal_CanvasGraphics.setSmoothing(smooth);
	return openfl_display__$internal_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl_display__$internal_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		gradientFill = openfl_display__$internal_CanvasGraphics.context.createLinearGradient(-819.2,0,819.2,0);
		openfl_display__$internal_CanvasGraphics.pendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix.invert();
		break;
	case 1:
		var radius = 819.2;
		if(focalPointRatio > 1.0) {
			focalPointRatio = 1.0;
		} else if(focalPointRatio < -1.0) {
			focalPointRatio = -1.0;
		}
		gradientFill = openfl_display__$internal_CanvasGraphics.context.createRadialGradient(radius * focalPointRatio,0,0,0,0,radius);
		openfl_display__$internal_CanvasGraphics.pendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix.invert();
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g = 0;
	var _g1 = colors.length;
	while(_g < _g1) {
		var i = _g++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl_display__$internal_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
		context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl_display__$internal_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * 0.70710678118654752440084436210485;
	var cx2 = -ellipseWidth + ellipseWidth * 0.4142135623730950488016887242097;
	var cy1 = -ellipseHeight + ellipseHeight * 0.70710678118654752440084436210485;
	var cy2 = -ellipseHeight + ellipseHeight * 0.4142135623730950488016887242097;
	openfl_display__$internal_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl_display__$internal_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl_display__$internal_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl_display__$internal_CanvasGraphics.endFill = function() {
	openfl_display__$internal_CanvasGraphics.context.beginPath();
	openfl_display__$internal_CanvasGraphics.playCommands(openfl_display__$internal_CanvasGraphics.fillCommands,false);
	openfl_display__$internal_CanvasGraphics.fillCommands.clear();
};
openfl_display__$internal_CanvasGraphics.endStroke = function() {
	openfl_display__$internal_CanvasGraphics.context.beginPath();
	openfl_display__$internal_CanvasGraphics.playCommands(openfl_display__$internal_CanvasGraphics.strokeCommands,true);
	openfl_display__$internal_CanvasGraphics.context.closePath();
	openfl_display__$internal_CanvasGraphics.strokeCommands.clear();
};
openfl_display__$internal_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl_display__$internal_CanvasGraphics.bounds = graphics.__bounds;
	openfl_display__$internal_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl_display__$internal_CanvasGraphics.bounds == null || openfl_display__$internal_CanvasGraphics.bounds.width <= 0 || openfl_display__$internal_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl_display__$internal_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl_display__$internal_CanvasGraphics.bounds.x * transform.a + openfl_display__$internal_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl_display__$internal_CanvasGraphics.bounds.x * transform.b + openfl_display__$internal_CanvasGraphics.bounds.y * transform.d + transform.ty;
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl_display__$internal_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl_display__$internal_CanvasGraphics.hitTestContext;
		openfl_display__$internal_CanvasGraphics.context = graphics.__context;
		openfl_display__$internal_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl_display__$internal_CanvasGraphics.fillCommands.clear();
		openfl_display__$internal_CanvasGraphics.strokeCommands.clear();
		openfl_display__$internal_CanvasGraphics.hasFill = false;
		openfl_display__$internal_CanvasGraphics.hasStroke = false;
		openfl_display__$internal_CanvasGraphics.bitmapFill = null;
		openfl_display__$internal_CanvasGraphics.bitmapRepeat = false;
		openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 0:case 1:case 2:case 3:
				openfl_display__$internal_CanvasGraphics.endFill();
				if(openfl_display__$internal_CanvasGraphics.hasFill && openfl_display__$internal_CanvasGraphics.context.isPointInPath(x,y,openfl_display__$internal_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl_display__$internal_CanvasGraphics.endStroke();
				if(openfl_display__$internal_CanvasGraphics.hasStroke && openfl_display__$internal_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
					var this2 = data;
					var c1 = this2;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
				} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
					var this3 = data;
					var c2 = this3;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
				} else {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
					var this4 = data;
					var c3 = this4;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],1);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],1);
				}
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
				var this5 = data;
				var c4 = this5;
				openfl_display__$internal_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
				var this6 = data;
				var c5 = this6;
				openfl_display__$internal_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
				var this7 = data;
				var c6 = this7;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
				var this8 = data;
				var c7 = this8;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
				var this9 = data;
				var c8 = this9;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
				var this10 = data;
				var c9 = this10;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.END_FILL;
				var this11 = data;
				openfl_display__$internal_CanvasGraphics.endFill();
				if(openfl_display__$internal_CanvasGraphics.hasFill && openfl_display__$internal_CanvasGraphics.context.isPointInPath(x,y,openfl_display__$internal_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl_display__$internal_CanvasGraphics.endStroke();
				if(openfl_display__$internal_CanvasGraphics.hasStroke && openfl_display__$internal_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl_display__$internal_CanvasGraphics.hasFill = false;
				openfl_display__$internal_CanvasGraphics.bitmapFill = null;
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
				var this12 = data;
				var c10 = this12;
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
				var this13 = data;
				var c11 = this13;
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineGradientStyle(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
				var this14 = data;
				var c12 = this14;
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineStyle(c12.buffer.o[c12.oPos],c12.buffer.i[c12.iPos],1,c12.buffer.b[c12.bPos],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos + 1]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
				var this15 = data;
				var c13 = this15;
				openfl_display__$internal_CanvasGraphics.fillCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
				var this16 = data;
				var c14 = this16;
				openfl_display__$internal_CanvasGraphics.fillCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				break;
			case 21:
				openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
				break;
			case 22:
				openfl_display__$internal_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		var hitTest = false;
		if(openfl_display__$internal_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl_display__$internal_CanvasGraphics.endFill();
		}
		if(openfl_display__$internal_CanvasGraphics.hasFill && openfl_display__$internal_CanvasGraphics.context.isPointInPath(x,y,openfl_display__$internal_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl_display__$internal_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl_display__$internal_CanvasGraphics.endStroke();
		}
		if(openfl_display__$internal_CanvasGraphics.hasStroke && openfl_display__$internal_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl_display__$internal_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl_display__$internal_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g = 1;
	var _g1 = len + 1;
	while(_g < _g1) {
		var t = _g++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl_Vector.toFloatVector(null);
	var _g = 1;
	var _g1 = len + 1;
	while(_g < _g1) {
		var t = _g++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t - 1));
	}
	return { max : max, uvt : result};
};
openfl_display__$internal_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl_display__$internal_CanvasGraphics.bounds = openfl_display__$internal_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl_display__$internal_CanvasGraphics.bounds.x;
	var offsetY = openfl_display__$internal_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
	openfl_display__$internal_CanvasGraphics.setSmoothing(true);
	var hasPath = false;
	var data = new openfl_display__$internal_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	_hx_loop1: while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
			var this1 = data;
			var c = this1;
			openfl_display__$internal_CanvasGraphics.bitmapFill = c.buffer.o[c.oPos];
			openfl_display__$internal_CanvasGraphics.context.fillStyle = openfl_display__$internal_CanvasGraphics.createBitmapFill(c.buffer.o[c.oPos],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
			openfl_display__$internal_CanvasGraphics.hasFill = true;
			if(c.buffer.o[c.oPos + 1] != null) {
				openfl_display__$internal_CanvasGraphics.pendingMatrix = c.buffer.o[c.oPos + 1];
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix = c.buffer.o[c.oPos + 1].clone();
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl_display__$internal_CanvasGraphics.pendingMatrix = null;
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
			var this2 = data;
			var c1 = this2;
			if(c1.buffer.f[c1.fPos] < 0.005) {
				openfl_display__$internal_CanvasGraphics.hasFill = false;
			} else {
				if(c1.buffer.f[c1.fPos] == 1) {
					var tmp = StringTools.hex(c1.buffer.i[c1.iPos] & 16777215,6);
					openfl_display__$internal_CanvasGraphics.context.fillStyle = "#" + tmp;
				} else {
					r = (c1.buffer.i[c1.iPos] & 16711680) >>> 16;
					g = (c1.buffer.i[c1.iPos] & 65280) >>> 8;
					b = c1.buffer.i[c1.iPos] & 255;
					openfl_display__$internal_CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c1.buffer.f[c1.fPos] + ")";
				}
				openfl_display__$internal_CanvasGraphics.bitmapFill = null;
				openfl_display__$internal_CanvasGraphics.setSmoothing(true);
				openfl_display__$internal_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
			var this3 = data;
			var c2 = this3;
			openfl_display__$internal_CanvasGraphics.context.fillStyle = openfl_display__$internal_CanvasGraphics.createGradientPattern(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
			openfl_display__$internal_CanvasGraphics.bitmapFill = null;
			openfl_display__$internal_CanvasGraphics.setSmoothing(true);
			openfl_display__$internal_CanvasGraphics.hasFill = true;
			break;
		case 3:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
			var this4 = data;
			var c3 = this4;
			var shaderBuffer = c3.buffer.o[c3.oPos];
			if(shaderBuffer.inputCount > 0) {
				openfl_display__$internal_CanvasGraphics.bitmapFill = shaderBuffer.inputs[0];
				openfl_display__$internal_CanvasGraphics.context.fillStyle = openfl_display__$internal_CanvasGraphics.createBitmapFill(openfl_display__$internal_CanvasGraphics.bitmapFill,shaderBuffer.inputWrap[0] != 0,shaderBuffer.inputFilter[0] != 5);
				openfl_display__$internal_CanvasGraphics.hasFill = true;
				openfl_display__$internal_CanvasGraphics.pendingMatrix = null;
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 4:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
			var this5 = data;
			var c4 = this5;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2] - offsetX,c4.buffer.f[c4.fPos + 3] - offsetY,c4.buffer.f[c4.fPos + 4] - offsetX,c4.buffer.f[c4.fPos + 5] - offsetY);
			break;
		case 5:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
			var this6 = data;
			var c5 = this6;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2] - offsetX,c5.buffer.f[c5.fPos + 3] - offsetY);
			break;
		case 6:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
			var this7 = data;
			var c6 = this7;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX + c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 1] - offsetY);
			openfl_display__$internal_CanvasGraphics.context.arc(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY,c6.buffer.f[c6.fPos + 2],0,Math.PI * 2,true);
			break;
		case 7:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
			var this8 = data;
			var c7 = this8;
			hasPath = true;
			x = c7.buffer.f[c7.fPos];
			y = c7.buffer.f[c7.fPos + 1];
			width = c7.buffer.f[c7.fPos + 2];
			height = c7.buffer.f[c7.fPos + 3];
			x -= offsetX;
			y -= offsetY;
			ox = width / 2 * kappa;
			oy = height / 2 * kappa;
			xe = x + width;
			ye = y + height;
			xm = x + width / 2;
			ym = y + height / 2;
			openfl_display__$internal_CanvasGraphics.context.moveTo(x,ym);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 8:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
			var this9 = data;
			var c8 = this9;
			var rects = c8.buffer.o[c8.oPos];
			var indices = c8.buffer.o[c8.oPos + 1];
			var transforms = c8.buffer.o[c8.oPos + 2];
			var hasIndices = indices != null;
			var transformABCD = false;
			var transformXY = false;
			var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
			if(length == 0) {
				return;
			}
			if(transforms != null) {
				if(transforms.get_length() >= length * 6) {
					transformABCD = true;
					transformXY = true;
				} else if(transforms.get_length() >= length * 4) {
					transformABCD = true;
				} else if(transforms.get_length() >= length * 2) {
					transformXY = true;
				}
			}
			var tileRect = openfl_geom_Rectangle.__pool.get();
			var tileTransform = openfl_geom_Matrix.__pool.get();
			var transform = openfl_display__$internal_CanvasGraphics.graphics.__renderTransform;
			var alpha = openfl_display__$internal_CanvasGraphics.worldAlpha;
			var ri;
			var ti;
			openfl_display__$internal_CanvasGraphics.context.save();
			var _g2 = 0;
			var _g3 = length;
			while(_g2 < _g3) {
				var i = _g2++;
				ri = hasIndices ? indices.get(i) * 4 : i * 4;
				if(ri < 0) {
					continue;
				}
				tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
				if(tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
				if(transformABCD && transformXY) {
					ti = i * 6;
					tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
				} else if(transformABCD) {
					ti = i * 4;
					tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
				} else if(transformXY) {
					ti = i * 2;
					tileTransform.tx = transforms.get(ti);
					tileTransform.ty = transforms.get(ti + 1);
				} else {
					tileTransform.tx = tileRect.x;
					tileTransform.ty = tileRect.y;
				}
				tileTransform.tx += positionX - offsetX;
				tileTransform.ty += positionY - offsetY;
				tileTransform.concat(transform);
				openfl_display__$internal_CanvasGraphics.context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
				if(openfl_display__$internal_CanvasGraphics.bitmapFill != null) {
					openfl_display__$internal_CanvasGraphics.context.drawImage(openfl_display__$internal_CanvasGraphics.bitmapFill.image.get_src(),tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
				} else {
					openfl_display__$internal_CanvasGraphics.context.fillRect(0,0,tileRect.width,tileRect.height);
				}
			}
			openfl_geom_Rectangle.__pool.release(tileRect);
			openfl_geom_Matrix.__pool.release(tileTransform);
			openfl_display__$internal_CanvasGraphics.context.restore();
			break;
		case 9:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
			var this10 = data;
			var c9 = this10;
			optimizationUsed = false;
			if(openfl_display__$internal_CanvasGraphics.bitmapFill != null && !openfl_display__$internal_CanvasGraphics.hitTesting) {
				st = 0;
				sr = 0;
				sb = 0;
				sl = 0;
				canOptimizeMatrix = true;
				if(openfl_display__$internal_CanvasGraphics.pendingMatrix != null) {
					if(openfl_display__$internal_CanvasGraphics.pendingMatrix.b != 0 || openfl_display__$internal_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						if(stl == null) {
							stl = openfl_geom_Point.__pool.get();
						}
						if(sbr == null) {
							sbr = openfl_geom_Point.__pool.get();
						}
						stl.setTo(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1]);
						var _this = openfl_display__$internal_CanvasGraphics.inversePendingMatrix;
						var px = stl.x;
						var py = stl.y;
						stl.x = px * _this.a + py * _this.c + _this.tx;
						stl.y = px * _this.b + py * _this.d + _this.ty;
						sbr.setTo(c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3]);
						var _this1 = openfl_display__$internal_CanvasGraphics.inversePendingMatrix;
						var px1 = sbr.x;
						var py1 = sbr.y;
						sbr.x = px1 * _this1.a + py1 * _this1.c + _this1.tx;
						sbr.y = px1 * _this1.b + py1 * _this1.d + _this1.ty;
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c9.buffer.f[c9.fPos + 1];
					sl = c9.buffer.f[c9.fPos];
					sb = c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3];
					sr = c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2];
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl_display__$internal_CanvasGraphics.bitmapFill.width && sb <= openfl_display__$internal_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
						openfl_display__$internal_CanvasGraphics.context.drawImage(openfl_display__$internal_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					}
				}
			}
			if(!optimizationUsed) {
				hasPath = true;
				openfl_display__$internal_CanvasGraphics.context.rect(c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
			}
			break;
		case 10:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
			var this11 = data;
			var c10 = this11;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.drawRoundRect(c10.buffer.f[c10.fPos] - offsetX,c10.buffer.f[c10.fPos + 1] - offsetY,c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
			break;
		case 12:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
			var this12 = data;
			var c11 = this12;
			var v = c11.buffer.o[c11.oPos];
			var ind = c11.buffer.o[c11.oPos + 1];
			var uvt = c11.buffer.o[c11.oPos + 2];
			var pattern = null;
			var colorFill = openfl_display__$internal_CanvasGraphics.bitmapFill == null;
			if(colorFill && uvt != null) {
				break _hx_loop1;
			}
			if(!colorFill) {
				if(uvt == null) {
					uvt = openfl_Vector.toFloatVector(null);
					var _g4 = 0;
					var _g5 = v.get_length() / 2 | 0;
					while(_g4 < _g5) {
						var i1 = _g4++;
						uvt.push(v.get(i1 * 2) - offsetX / openfl_display__$internal_CanvasGraphics.bitmapFill.width);
						uvt.push(v.get(i1 * 2 + 1) - offsetY / openfl_display__$internal_CanvasGraphics.bitmapFill.height);
					}
				}
				var skipT = uvt.get_length() != v.get_length();
				var normalizedUVT = openfl_display__$internal_CanvasGraphics.normalizeUVT(uvt,skipT);
				var maxUVT = normalizedUVT.max;
				uvt = normalizedUVT.uvt;
				if(maxUVT > 1) {
					pattern = openfl_display__$internal_CanvasGraphics.createTempPatternCanvas(openfl_display__$internal_CanvasGraphics.bitmapFill,openfl_display__$internal_CanvasGraphics.bitmapRepeat,openfl_display__$internal_CanvasGraphics.bounds.width | 0,openfl_display__$internal_CanvasGraphics.bounds.height | 0);
				} else {
					pattern = openfl_display__$internal_CanvasGraphics.createTempPatternCanvas(openfl_display__$internal_CanvasGraphics.bitmapFill,openfl_display__$internal_CanvasGraphics.bitmapRepeat,openfl_display__$internal_CanvasGraphics.bitmapFill.width,openfl_display__$internal_CanvasGraphics.bitmapFill.height);
				}
			}
			var i2 = 0;
			var l = ind.get_length();
			var a_;
			var b_;
			var c_;
			var iax;
			var iay;
			var ibx;
			var iby;
			var icx;
			var icy;
			var x1;
			var y1;
			var x2;
			var y2;
			var x3;
			var y3;
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			var uvx3;
			var uvy3;
			var denom;
			var t1;
			var t2;
			var t3;
			var t4;
			var dx;
			var dy;
			while(i2 < l) {
				a_ = i2;
				b_ = i2 + 1;
				c_ = i2 + 2;
				iax = ind.get(a_) * 2;
				iay = ind.get(a_) * 2 + 1;
				ibx = ind.get(b_) * 2;
				iby = ind.get(b_) * 2 + 1;
				icx = ind.get(c_) * 2;
				icy = ind.get(c_) * 2 + 1;
				x1 = v.get(iax) - offsetX;
				y1 = v.get(iay) - offsetY;
				x2 = v.get(ibx) - offsetX;
				y2 = v.get(iby) - offsetY;
				x3 = v.get(icx) - offsetX;
				y3 = v.get(icy) - offsetY;
				switch(c11.buffer.o[c11.oPos + 3]) {
				case 0:
					if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
						i2 += 3;
						continue;
					}
					break;
				case 2:
					if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
						i2 += 3;
						continue;
					}
					break;
				default:
				}
				if(colorFill) {
					openfl_display__$internal_CanvasGraphics.context.beginPath();
					openfl_display__$internal_CanvasGraphics.context.moveTo(x1,y1);
					openfl_display__$internal_CanvasGraphics.context.lineTo(x2,y2);
					openfl_display__$internal_CanvasGraphics.context.lineTo(x3,y3);
					openfl_display__$internal_CanvasGraphics.context.closePath();
					if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
						openfl_display__$internal_CanvasGraphics.context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
					}
					i2 += 3;
					continue;
				}
				uvx1 = uvt.get(iax) * pattern.width;
				uvx2 = uvt.get(ibx) * pattern.width;
				uvx3 = uvt.get(icx) * pattern.width;
				uvy1 = uvt.get(iay) * pattern.height;
				uvy2 = uvt.get(iby) * pattern.height;
				uvy3 = uvt.get(icy) * pattern.height;
				denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
				if(denom == 0) {
					i2 += 3;
					openfl_display__$internal_CanvasGraphics.context.restore();
					continue;
				}
				openfl_display__$internal_CanvasGraphics.context.save();
				openfl_display__$internal_CanvasGraphics.context.beginPath();
				openfl_display__$internal_CanvasGraphics.context.moveTo(x1,y1);
				openfl_display__$internal_CanvasGraphics.context.lineTo(x2,y2);
				openfl_display__$internal_CanvasGraphics.context.lineTo(x3,y3);
				openfl_display__$internal_CanvasGraphics.context.closePath();
				openfl_display__$internal_CanvasGraphics.context.clip();
				t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
				t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
				t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
				t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
				dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
				dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
				openfl_display__$internal_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
				openfl_display__$internal_CanvasGraphics.context.drawImage(pattern,0,0,pattern.width,pattern.height);
				openfl_display__$internal_CanvasGraphics.context.restore();
				i2 += 3;
			}
			break;
		case 14:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
			var this13 = data;
			var c12 = this13;
			if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
				openfl_display__$internal_CanvasGraphics.closePath();
			}
			openfl_display__$internal_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl_display__$internal_CanvasGraphics.context.strokeStyle = openfl_display__$internal_CanvasGraphics.createBitmapFill(c12.buffer.o[c12.oPos],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
			openfl_display__$internal_CanvasGraphics.hasStroke = true;
			break;
		case 15:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
			var this14 = data;
			var c13 = this14;
			if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
				openfl_display__$internal_CanvasGraphics.closePath();
			}
			openfl_display__$internal_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl_display__$internal_CanvasGraphics.context.strokeStyle = openfl_display__$internal_CanvasGraphics.createGradientPattern(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
			openfl_display__$internal_CanvasGraphics.setSmoothing(true);
			openfl_display__$internal_CanvasGraphics.hasStroke = true;
			break;
		case 16:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
			var this15 = data;
			var c14 = this15;
			if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
				openfl_display__$internal_CanvasGraphics.closePath(true);
			}
			openfl_display__$internal_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c14.buffer.o[c14.oPos] == null) {
				openfl_display__$internal_CanvasGraphics.hasStroke = false;
			} else {
				openfl_display__$internal_CanvasGraphics.context.lineWidth = c14.buffer.o[c14.oPos] > 0 ? c14.buffer.o[c14.oPos] : 1;
				var tmp1 = c14.buffer.o[c14.oPos + 3] == null ? "round" : openfl_display_JointStyle.toString(c14.buffer.o[c14.oPos + 3]).toLowerCase();
				openfl_display__$internal_CanvasGraphics.context.lineJoin = tmp1;
				var tmp2 = c14.buffer.o[c14.oPos + 2] == null ? "round" : c14.buffer.o[c14.oPos + 2] == 0 ? "butt" : openfl_display_CapsStyle.toString(c14.buffer.o[c14.oPos + 2]).toLowerCase();
				openfl_display__$internal_CanvasGraphics.context.lineCap = tmp2;
				openfl_display__$internal_CanvasGraphics.context.miterLimit = c14.buffer.f[c14.fPos + 1];
				if(c14.buffer.f[c14.fPos] == 1) {
					var tmp3 = StringTools.hex(c14.buffer.i[c14.iPos] & 16777215,6);
					openfl_display__$internal_CanvasGraphics.context.strokeStyle = "#" + tmp3;
				} else {
					r = (c14.buffer.i[c14.iPos] & 16711680) >>> 16;
					g = (c14.buffer.i[c14.iPos] & 65280) >>> 8;
					b = c14.buffer.i[c14.iPos] & 255;
					openfl_display__$internal_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c14.buffer.f[c14.fPos] + ")";
				}
				openfl_display__$internal_CanvasGraphics.setSmoothing(true);
				openfl_display__$internal_CanvasGraphics.hasStroke = true;
			}
			break;
		case 17:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
			var this16 = data;
			var c15 = this16;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.lineTo(c15.buffer.f[c15.fPos] - offsetX,c15.buffer.f[c15.fPos + 1] - offsetY);
			positionX = c15.buffer.f[c15.fPos];
			positionY = c15.buffer.f[c15.fPos + 1];
			if(positionX == startX && positionY == startY) {
				closeGap = true;
			}
			break;
		case 18:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
			var this17 = data;
			var c16 = this17;
			openfl_display__$internal_CanvasGraphics.context.moveTo(c16.buffer.f[c16.fPos] - offsetX,c16.buffer.f[c16.fPos + 1] - offsetY);
			positionX = c16.buffer.f[c16.fPos];
			positionY = c16.buffer.f[c16.fPos + 1];
			if(setStart && c16.buffer.f[c16.fPos] != startX && c16.buffer.f[c16.fPos + 1] != startY) {
				closeGap = true;
			}
			startX = c16.buffer.f[c16.fPos];
			startY = c16.buffer.f[c16.fPos + 1];
			setStart = true;
			break;
		case 21:
			openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
			break;
		case 22:
			openfl_display__$internal_CanvasGraphics.windingRule = "nonzero";
			break;
		default:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(hasPath) {
		if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
			if(openfl_display__$internal_CanvasGraphics.hasFill) {
				if(positionX != startX || positionY != startY) {
					openfl_display__$internal_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
					closeGap = true;
				}
				if(closeGap) {
					openfl_display__$internal_CanvasGraphics.closePath(true);
				}
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl_display__$internal_CanvasGraphics.closePath(true);
			}
			if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
				openfl_display__$internal_CanvasGraphics.context.stroke();
			}
		}
		if(!stroke) {
			if(openfl_display__$internal_CanvasGraphics.hasFill || openfl_display__$internal_CanvasGraphics.bitmapFill != null) {
				openfl_display__$internal_CanvasGraphics.context.translate(-openfl_display__$internal_CanvasGraphics.bounds.x,-openfl_display__$internal_CanvasGraphics.bounds.y);
				if(openfl_display__$internal_CanvasGraphics.pendingMatrix != null) {
					openfl_display__$internal_CanvasGraphics.context.transform(openfl_display__$internal_CanvasGraphics.pendingMatrix.a,openfl_display__$internal_CanvasGraphics.pendingMatrix.b,openfl_display__$internal_CanvasGraphics.pendingMatrix.c,openfl_display__$internal_CanvasGraphics.pendingMatrix.d,openfl_display__$internal_CanvasGraphics.pendingMatrix.tx,openfl_display__$internal_CanvasGraphics.pendingMatrix.ty);
					if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
						openfl_display__$internal_CanvasGraphics.context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
					}
					openfl_display__$internal_CanvasGraphics.context.transform(openfl_display__$internal_CanvasGraphics.inversePendingMatrix.a,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.b,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.c,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.d,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.tx,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.ty);
				} else if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
					openfl_display__$internal_CanvasGraphics.context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
				}
				openfl_display__$internal_CanvasGraphics.context.translate(openfl_display__$internal_CanvasGraphics.bounds.x,openfl_display__$internal_CanvasGraphics.bounds.y);
				openfl_display__$internal_CanvasGraphics.context.closePath();
			}
		}
	}
};
openfl_display__$internal_CanvasGraphics.render = function(graphics,renderer) {
	graphics.__update(renderer.__worldTransform);
	if(graphics.__softwareDirty) {
		openfl_display__$internal_CanvasGraphics.hitTesting = false;
		openfl_display__$internal_CanvasGraphics.graphics = graphics;
		openfl_display__$internal_CanvasGraphics.allowSmoothing = renderer.__allowSmoothing;
		openfl_display__$internal_CanvasGraphics.worldAlpha = renderer.__getAlpha(graphics.__owner.__worldAlpha);
		openfl_display__$internal_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl_display__$internal_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl_display__$internal_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = renderer.pixelRatio;
			var scaledWidth = width * scale | 0;
			var scaledHeight = height * scale | 0;
			renderer.__setBlendModeContext(openfl_display__$internal_CanvasGraphics.context,10);
			if(renderer.__isDOM) {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl_display__$internal_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = scaledWidth;
					canvas.height = scaledHeight;
					canvas.style.width = width + "px";
					canvas.style.height = height + "px";
				}
				var transform1 = graphics.__renderTransform;
				openfl_display__$internal_CanvasGraphics.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
			} else {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl_display__$internal_CanvasGraphics.context.closePath();
					openfl_display__$internal_CanvasGraphics.context.setTransform(1,0,0,1,0,0);
					openfl_display__$internal_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = width;
					canvas.height = height;
				}
				openfl_display__$internal_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			openfl_display__$internal_CanvasGraphics.fillCommands.clear();
			openfl_display__$internal_CanvasGraphics.strokeCommands.clear();
			openfl_display__$internal_CanvasGraphics.hasFill = false;
			openfl_display__$internal_CanvasGraphics.hasStroke = false;
			openfl_display__$internal_CanvasGraphics.bitmapFill = null;
			openfl_display__$internal_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type._hx_index) {
				case 0:case 1:case 2:case 3:
					openfl_display__$internal_CanvasGraphics.endFill();
					openfl_display__$internal_CanvasGraphics.endStroke();
					if(type == openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
						var this1 = data;
						var c = this1;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
						var this2 = data;
						var c1 = this2;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
						var this3 = data;
						var c2 = this3;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					} else {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
						var this4 = data;
						var c3 = this4;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
					}
					break;
				case 4:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
					var this5 = data;
					var c4 = this5;
					openfl_display__$internal_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					} else {
						initStrokeX = c4.buffer.f[c4.fPos + 4];
						initStrokeY = c4.buffer.f[c4.fPos + 5];
					}
					break;
				case 5:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
					var this6 = data;
					var c5 = this6;
					openfl_display__$internal_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					} else {
						initStrokeX = c5.buffer.f[c5.fPos + 2];
						initStrokeY = c5.buffer.f[c5.fPos + 3];
					}
					break;
				case 6:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
					var this7 = data;
					var c6 = this7;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					}
					break;
				case 7:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
					var this8 = data;
					var c7 = this8;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					}
					break;
				case 8:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
					var this9 = data;
					var c8 = this9;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawQuads(c8.buffer.o[c8.oPos],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2]);
					break;
				case 9:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
					var this10 = data;
					var c9 = this10;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					}
					break;
				case 10:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
					var this11 = data;
					var c10 = this11;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					}
					break;
				case 12:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
					var this12 = data;
					var c11 = this12;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
					break;
				case 13:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.END_FILL;
					var this13 = data;
					openfl_display__$internal_CanvasGraphics.endFill();
					openfl_display__$internal_CanvasGraphics.endStroke();
					openfl_display__$internal_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl_display__$internal_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 14:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
					var this14 = data;
					var c12 = this14;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl_display__$internal_CanvasGraphics.strokeCommands.lineBitmapStyle(c12.buffer.o[c12.oPos],c12.buffer.o[c12.oPos + 1],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
					break;
				case 15:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
					var this15 = data;
					var c13 = this15;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl_display__$internal_CanvasGraphics.strokeCommands.lineGradientStyle(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
					break;
				case 16:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
					var this16 = data;
					var c14 = this16;
					if(!hasLineStyle && c14.buffer.o[c14.oPos] != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c14.buffer.o[c14.oPos] != null;
					openfl_display__$internal_CanvasGraphics.strokeCommands.lineStyle(c14.buffer.o[c14.oPos],c14.buffer.i[c14.iPos],c14.buffer.f[c14.fPos],c14.buffer.b[c14.bPos],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos + 1]);
					break;
				case 17:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
					var this17 = data;
					var c15 = this17;
					openfl_display__$internal_CanvasGraphics.fillCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					} else {
						initStrokeX = c15.buffer.f[c15.fPos];
						initStrokeY = c15.buffer.f[c15.fPos + 1];
					}
					break;
				case 18:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
					var this18 = data;
					var c16 = this18;
					openfl_display__$internal_CanvasGraphics.fillCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					} else {
						initStrokeX = c16.buffer.f[c16.fPos];
						initStrokeY = c16.buffer.f[c16.fPos + 1];
					}
					break;
				case 19:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE;
					var this19 = data;
					var c17 = this19;
					renderer.__setBlendModeContext(openfl_display__$internal_CanvasGraphics.context,c17.buffer.o[c17.oPos]);
					break;
				case 21:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD;
					var this20 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
					break;
				case 22:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO;
					var this21 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.windingNonZero();
					openfl_display__$internal_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
				}
			}
			if(openfl_display__$internal_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl_display__$internal_CanvasGraphics.endFill();
			}
			if(openfl_display__$internal_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl_display__$internal_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.__softwareDirty = false;
		graphics.set___dirty(false);
	}
};
openfl_display__$internal_CanvasGraphics.renderMask = function(graphics,renderer) {
	if(graphics.__commands.get_length() != 0) {
		openfl_display__$internal_CanvasGraphics.context = renderer.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
				var this1 = data;
				var c = this1;
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
				var this2 = data;
				var c1 = this2;
				openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
				var this3 = data;
				var c2 = this3;
				openfl_display__$internal_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
				var this4 = data;
				var c3 = this4;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl_display__$internal_CanvasGraphics.context.moveTo(x,ym);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
				var this5 = data;
				var c4 = this5;
				openfl_display__$internal_CanvasGraphics.context.beginPath();
				openfl_display__$internal_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.context.closePath();
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
				var this6 = data;
				var c5 = this6;
				openfl_display__$internal_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
				var this7 = data;
				var c6 = this7;
				openfl_display__$internal_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
				var this8 = data;
				var c7 = this8;
				openfl_display__$internal_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		data.destroy();
	}
};
openfl_display__$internal_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl_display__$internal_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl_display__$internal_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl_display__$internal_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl_display__$internal_CanvasShape = function() { };
$hxClasses["openfl.display._internal.CanvasShape"] = openfl_display__$internal_CanvasShape;
openfl_display__$internal_CanvasShape.__name__ = "openfl.display._internal.CanvasShape";
openfl_display__$internal_CanvasShape.render = function(shape,renderer) {
	if(!shape.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(shape.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
		var width = graphics.__width;
		var height = graphics.__height;
		var canvas = graphics.__canvas;
		if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
			var transform = graphics.__worldTransform;
			var context = renderer.context;
			var scrollRect = shape.__scrollRect;
			var scale9Grid = shape.__worldScale9Grid;
			if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
				renderer.__setBlendMode(shape.__worldBlendMode);
				renderer.__pushMaskObject(shape);
				context.globalAlpha = alpha;
				if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
					context.setTransform(1,0,0,1,transform.tx,transform.ty);
					var bounds = graphics.__bounds;
					var scaleX = graphics.__renderTransform.a;
					var scaleY = graphics.__renderTransform.d;
					var renderScaleX = transform.a;
					var renderScaleY = transform.d;
					var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
					var top = Math.round(scale9Grid.y * scaleY);
					var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
					var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
					var centerWidth = Math.round(scale9Grid.width * scaleX);
					var centerHeight = Math.round(scale9Grid.height * scaleY);
					var renderLeft = Math.round(scale9Grid.x * renderScaleX);
					var renderTop = Math.round(scale9Grid.y * renderScaleY);
					var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
					var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
					var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
					var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
					renderer.applySmoothing(context,false);
					if(centerWidth != 0 && centerHeight != 0) {
						context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
						context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
						context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
						context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
						context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
						context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
						context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
						context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
						context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
					} else if(centerWidth == 0 && centerHeight != 0) {
						var renderWidth = renderLeft + renderCenterWidth + renderRight;
						context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
						context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
						context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
					} else if(centerHeight == 0 && centerWidth != 0) {
						var renderHeight = renderTop + renderCenterHeight + renderBottom;
						context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
						context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
						context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
					}
				} else {
					renderer.setTransform(transform,context);
					if(renderer.__isDOM) {
						var reverseScale = 1 / renderer.pixelRatio;
						context.scale(reverseScale,reverseScale);
					}
					context.drawImage(canvas,0,0,width,height);
				}
				renderer.__popMaskObject(shape);
			}
		}
	}
};
var openfl_display__$internal_CanvasSimpleButton = function() { };
$hxClasses["openfl.display._internal.CanvasSimpleButton"] = openfl_display__$internal_CanvasSimpleButton;
openfl_display__$internal_CanvasSimpleButton.__name__ = "openfl.display._internal.CanvasSimpleButton";
openfl_display__$internal_CanvasSimpleButton.renderDrawable = function(simpleButton,renderer) {
	if(!simpleButton.__renderable || simpleButton.__worldAlpha <= 0 || simpleButton.__currentState == null) {
		return;
	}
	renderer.__pushMaskObject(simpleButton);
	renderer.__renderDrawable(simpleButton.__currentState);
	renderer.__popMaskObject(simpleButton);
	renderer.__renderEvent(simpleButton);
};
openfl_display__$internal_CanvasSimpleButton.renderDrawableMask = function(simpleButton,renderer) {
	renderer.__renderDrawableMask(simpleButton.__currentState);
};
var openfl_display__$internal_CanvasTextField = function() { };
$hxClasses["openfl.display._internal.CanvasTextField"] = openfl_display__$internal_CanvasTextField;
openfl_display__$internal_CanvasTextField.__name__ = "openfl.display._internal.CanvasTextField";
openfl_display__$internal_CanvasTextField.render = function(textField,renderer,transform) {
	var textEngine = textField.__textEngine;
	var useTextBounds = !(textEngine.background || textEngine.border);
	var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
	var graphics = textField.__graphics;
	var cursorOffsetX = 0.0;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		if(textField.get_text().length == 0) {
			var boundsWidth = textEngine.bounds.width - 4;
			var align = textField.get_defaultTextFormat().align;
			cursorOffsetX = align == 3 ? 0 : align == 4 ? boundsWidth : boundsWidth / 2;
			switch(align) {
			case 0:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin / 2;
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin / 2;
				cursorOffsetX += textField.get_defaultTextFormat().indent / 2;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent / 2;
				break;
			case 1:
				break;
			case 2:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 3:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 4:
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin;
				break;
			case 5:
				break;
			}
			if(useTextBounds) {
				bounds.y = textEngine.bounds.y;
				bounds.x = cursorOffsetX;
			}
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer.__worldTransform);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl_display__$internal_CanvasTextField.context = graphics.__context;
			var transform = graphics.__renderTransform;
			if(renderer.__isDOM) {
				var scale = renderer.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform);
				matrix.scale(scale,scale);
				renderer.setTransform(matrix,openfl_display__$internal_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl_display__$internal_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			if(openfl_display__$internal_CanvasTextField.clearRect == null) {
				openfl_display__$internal_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl_display__$internal_CanvasTextField.clearRect) {
				openfl_display__$internal_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				openfl_display__$internal_CanvasTextField.context.textBaseline = "alphabetic";
				openfl_display__$internal_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.font = openfl_text__$internal_TextEngine.getFont(group1.format);
					openfl_display__$internal_CanvasTextField.context.fillStyle = color;
					openfl_display__$internal_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g = 0;
								var _g1 = textField.__caretIndex - group1.startIndex;
								while(_g < _g1) {
									var i = _g++;
									if(group1.positions.length <= i) {
										break;
									}
									advance += group1.positions[i];
								}
								var scrollY1 = 0.0;
								var _g2 = textField.get_scrollV();
								var _g3 = group1.lineIndex + 1;
								while(_g2 < _g3) {
									var i1 = _g2++;
									scrollY1 += textEngine.lineHeights.get(i1 - 1);
								}
								openfl_display__$internal_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(group1.format.color & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								openfl_display__$internal_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.stroke();
								openfl_display__$internal_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#000000";
								openfl_display__$internal_CanvasTextField.context.fillRect(start.x + scrollX - bounds.x,start.y + scrollY,end.x - start.x,group1.height);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl_display__$internal_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x - bounds.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl_display__$internal_CanvasTextField.context.beginPath();
						openfl_display__$internal_CanvasTextField.context.strokeStyle = color;
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
						openfl_display__$internal_CanvasTextField.context.moveTo(x,y);
						openfl_display__$internal_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl_display__$internal_CanvasTextField.context.stroke();
						openfl_display__$internal_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl_display__$internal_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						openfl_display__$internal_CanvasTextField.context.lineCap = "square";
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX = -textField.get_scrollH() + (useTextBounds ? 0 : cursorOffsetX);
					var scrollY = 0.0;
					var _g = 0;
					var _g1 = textField.get_scrollV() - 1;
					while(_g < _g1) {
						var i = _g++;
						scrollY += textEngine.lineHeights.get(i);
					}
					openfl_display__$internal_CanvasTextField.context.beginPath();
					var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
					openfl_display__$internal_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
					openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
					openfl_display__$internal_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl_display__$internal_CanvasTextField.context.stroke();
					openfl_display__$internal_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
};
openfl_display__$internal_CanvasTextField.renderDrawable = function(textField,renderer) {
	if(renderer.__isDOM && !textField.__renderedOnCanvasWhileOnDOM) {
		textField.__renderedOnCanvasWhileOnDOM = true;
		if(textField.get_type() == 1) {
			textField.replaceText(0,textField.__text.length,textField.__text);
		}
		if(textField.__isHTML) {
			textField.__updateText(openfl_text__$internal_HTMLParser.parse(textField.__text,textField.__textFormat,textField.__textEngine.textFormatRanges));
		}
		textField.__dirty = true;
		textField.__layoutDirty = true;
		if(!textField.__renderDirty) {
			textField.__renderDirty = true;
			textField.__setParentRenderDirty();
		}
	}
	if(textField.get_mask() == null || textField.get_mask().get_width() > 0 && textField.get_mask().get_height() > 0) {
		renderer.__updateCacheBitmap(textField,textField.__dirty);
		if(textField.__cacheBitmap != null && !textField.__isCacheBitmapRender) {
			var bitmap = textField.__cacheBitmap;
			if(bitmap.__renderable) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					var context = renderer.context;
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = alpha;
					var scrollRect = bitmap.__scrollRect;
					renderer.setTransform(bitmap.__renderTransform,context);
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(bitmap,false);
				}
			}
		} else {
			var transform = textField.__worldTransform;
			var textEngine = textField.__textEngine;
			var useTextBounds = !(textEngine.background || textEngine.border);
			var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
			var graphics = textField.__graphics;
			var cursorOffsetX = 0.0;
			if(textField.__dirty) {
				textField.__updateLayout();
				if(graphics.__bounds == null) {
					graphics.__bounds = new openfl_geom_Rectangle();
				}
				if(textField.get_text().length == 0) {
					var boundsWidth = textEngine.bounds.width - 4;
					var align = textField.get_defaultTextFormat().align;
					cursorOffsetX = align == 3 ? 0 : align == 4 ? boundsWidth : boundsWidth / 2;
					switch(align) {
					case 0:
						cursorOffsetX += textField.get_defaultTextFormat().leftMargin / 2;
						cursorOffsetX -= textField.get_defaultTextFormat().rightMargin / 2;
						cursorOffsetX += textField.get_defaultTextFormat().indent / 2;
						cursorOffsetX += textField.get_defaultTextFormat().blockIndent / 2;
						break;
					case 1:
						break;
					case 2:
						cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
						cursorOffsetX += textField.get_defaultTextFormat().indent;
						cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
						break;
					case 3:
						cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
						cursorOffsetX += textField.get_defaultTextFormat().indent;
						cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
						break;
					case 4:
						cursorOffsetX -= textField.get_defaultTextFormat().rightMargin;
						break;
					case 5:
						break;
					}
					if(useTextBounds) {
						bounds.y = textEngine.bounds.y;
						bounds.x = cursorOffsetX;
					}
				}
				graphics.__bounds.copyFrom(bounds);
			}
			graphics.__update(renderer.__worldTransform);
			if(textField.__dirty || graphics.__softwareDirty) {
				var width = graphics.__width;
				var height = graphics.__height;
				if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
					textField.__graphics.__canvas = null;
					textField.__graphics.__context = null;
					textField.__graphics.__bitmap = null;
					textField.__graphics.__softwareDirty = false;
					textField.__graphics.set___dirty(false);
					textField.__dirty = false;
				} else {
					if(textField.__graphics.__canvas == null) {
						textField.__graphics.__canvas = window.document.createElement("canvas");
						textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
					}
					openfl_display__$internal_CanvasTextField.context = graphics.__context;
					var transform = graphics.__renderTransform;
					if(renderer.__isDOM) {
						var scale = renderer.pixelRatio;
						graphics.__canvas.width = width * scale | 0;
						graphics.__canvas.height = height * scale | 0;
						graphics.__canvas.style.width = width + "px";
						graphics.__canvas.style.height = height + "px";
						var matrix = openfl_geom_Matrix.__pool.get();
						matrix.copyFrom(transform);
						matrix.scale(scale,scale);
						renderer.setTransform(matrix,openfl_display__$internal_CanvasTextField.context);
						openfl_geom_Matrix.__pool.release(matrix);
					} else {
						graphics.__canvas.width = width;
						graphics.__canvas.height = height;
						openfl_display__$internal_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
					}
					if(openfl_display__$internal_CanvasTextField.clearRect == null) {
						openfl_display__$internal_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
					}
					if(openfl_display__$internal_CanvasTextField.clearRect) {
						openfl_display__$internal_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
					}
					if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
						var text = textEngine.text;
						if(!renderer.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
							graphics.__context.imageSmoothingEnabled = false;
						} else {
							graphics.__context.imageSmoothingEnabled = true;
						}
						if(textEngine.border || textEngine.background) {
							openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
							if(textEngine.background) {
								var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.fill();
							}
							if(textEngine.border) {
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.stroke();
							}
						}
						openfl_display__$internal_CanvasTextField.context.textBaseline = "alphabetic";
						openfl_display__$internal_CanvasTextField.context.textAlign = "start";
						var scrollX = -textField.get_scrollH();
						var scrollY = 0.0;
						var _g = 0;
						var _g1 = textField.get_scrollV() - 1;
						while(_g < _g1) {
							var i = _g++;
							scrollY -= textEngine.lineHeights.get(i);
						}
						var advance;
						var group = textEngine.layoutGroups.iterator();
						while(group.hasNext()) {
							var group1 = group.next();
							if(group1.lineIndex < textField.get_scrollV() - 1) {
								continue;
							}
							if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
								break;
							}
							var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
							openfl_display__$internal_CanvasTextField.context.font = openfl_text__$internal_TextEngine.getFont(group1.format);
							openfl_display__$internal_CanvasTextField.context.fillStyle = color;
							openfl_display__$internal_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
							if(textField.__caretIndex > -1 && textEngine.selectable) {
								if(textField.__selectionIndex == textField.__caretIndex) {
									if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
										advance = 0.0;
										var _g = 0;
										var _g1 = textField.__caretIndex - group1.startIndex;
										while(_g < _g1) {
											var i = _g++;
											if(group1.positions.length <= i) {
												break;
											}
											advance += group1.positions[i];
										}
										var scrollY1 = 0.0;
										var _g2 = textField.get_scrollV();
										var _g3 = group1.lineIndex + 1;
										while(_g2 < _g3) {
											var i1 = _g2++;
											scrollY1 += textEngine.lineHeights.get(i1 - 1);
										}
										openfl_display__$internal_CanvasTextField.context.beginPath();
										var tmp = StringTools.hex(group1.format.color & 16777215,6);
										openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
										openfl_display__$internal_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
										openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
										openfl_display__$internal_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
										openfl_display__$internal_CanvasTextField.context.stroke();
										openfl_display__$internal_CanvasTextField.context.closePath();
									}
								} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
									var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
									var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
									if(group1.startIndex > selectionStart) {
										selectionStart = group1.startIndex;
									}
									if(group1.endIndex < selectionEnd) {
										selectionEnd = group1.endIndex;
									}
									var end;
									var start = textField.getCharBoundaries(selectionStart);
									if(selectionEnd >= group1.endIndex) {
										end = textField.getCharBoundaries(group1.endIndex - 1);
										if(end != null) {
											end.x += end.width + 2;
										}
									} else {
										end = textField.getCharBoundaries(selectionEnd);
									}
									if(start != null && end != null) {
										openfl_display__$internal_CanvasTextField.context.fillStyle = "#000000";
										openfl_display__$internal_CanvasTextField.context.fillRect(start.x + scrollX - bounds.x,start.y + scrollY,end.x - start.x,group1.height);
										openfl_display__$internal_CanvasTextField.context.fillStyle = "#FFFFFF";
										openfl_display__$internal_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x - bounds.x,group1.offsetY + group1.ascent + scrollY);
									}
								}
							}
							if(group1.format.underline) {
								openfl_display__$internal_CanvasTextField.context.beginPath();
								openfl_display__$internal_CanvasTextField.context.strokeStyle = color;
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								var x = group1.offsetX + scrollX - bounds.x;
								var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
								openfl_display__$internal_CanvasTextField.context.moveTo(x,y);
								openfl_display__$internal_CanvasTextField.context.lineTo(x + group1.width,y);
								openfl_display__$internal_CanvasTextField.context.stroke();
								openfl_display__$internal_CanvasTextField.context.closePath();
							}
						}
					} else {
						if(textEngine.border || textEngine.background) {
							if(textEngine.border) {
								openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
							} else {
								openfl_display__$internal_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
							}
							if(textEngine.background) {
								var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.fill();
							}
							if(textEngine.border) {
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								openfl_display__$internal_CanvasTextField.context.lineCap = "square";
								var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.stroke();
							}
						}
						if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
							var scrollX = -textField.get_scrollH() + (useTextBounds ? 0 : cursorOffsetX);
							var scrollY = 0.0;
							var _g = 0;
							var _g1 = textField.get_scrollV() - 1;
							while(_g < _g1) {
								var i = _g++;
								scrollY += textEngine.lineHeights.get(i);
							}
							openfl_display__$internal_CanvasTextField.context.beginPath();
							var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
							openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
							openfl_display__$internal_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
							openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
							openfl_display__$internal_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
							openfl_display__$internal_CanvasTextField.context.stroke();
							openfl_display__$internal_CanvasTextField.context.closePath();
						}
					}
					graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
					graphics.__visible = true;
					textField.__dirty = false;
					graphics.__softwareDirty = false;
					graphics.set___dirty(false);
				}
			}
			var smoothingEnabled = false;
			if(textField.__textEngine.antiAliasType == 0 && textField.__textEngine.gridFitType == 1) {
				smoothingEnabled = renderer.context.imageSmoothingEnabled;
				if(smoothingEnabled) {
					renderer.context.imageSmoothingEnabled = false;
				}
			}
			if(!(textField.opaqueBackground == null && textField.__graphics == null)) {
				if(textField.__renderable) {
					var alpha = renderer.__getAlpha(textField.__worldAlpha);
					if(!(alpha <= 0)) {
						if(textField.opaqueBackground != null && !textField.__isCacheBitmapRender && textField.get_width() > 0 && textField.get_height() > 0) {
							renderer.__setBlendMode(textField.__worldBlendMode);
							renderer.__pushMaskObject(textField);
							var context = renderer.context;
							renderer.setTransform(textField.__renderTransform,context);
							var color = textField.opaqueBackground;
							context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
							context.fillRect(0,0,textField.get_width(),textField.get_height());
							renderer.__popMaskObject(textField);
						}
						if(textField.__graphics != null) {
							if(textField.__renderable) {
								var alpha = renderer.__getAlpha(textField.__worldAlpha);
								if(!(alpha <= 0)) {
									var graphics = textField.__graphics;
									if(graphics != null) {
										openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
										var width = graphics.__width;
										var height = graphics.__height;
										var canvas = graphics.__canvas;
										if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
											var transform = graphics.__worldTransform;
											var context = renderer.context;
											var scrollRect = textField.__scrollRect;
											var scale9Grid = textField.__worldScale9Grid;
											if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
												renderer.__setBlendMode(textField.__worldBlendMode);
												renderer.__pushMaskObject(textField);
												context.globalAlpha = alpha;
												if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
													context.setTransform(1,0,0,1,transform.tx,transform.ty);
													var bounds = graphics.__bounds;
													var scaleX = graphics.__renderTransform.a;
													var scaleY = graphics.__renderTransform.d;
													var renderScaleX = transform.a;
													var renderScaleY = transform.d;
													var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
													var top = Math.round(scale9Grid.y * scaleY);
													var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
													var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
													var centerWidth = Math.round(scale9Grid.width * scaleX);
													var centerHeight = Math.round(scale9Grid.height * scaleY);
													var renderLeft = Math.round(scale9Grid.x * renderScaleX);
													var renderTop = Math.round(scale9Grid.y * renderScaleY);
													var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
													var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
													var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
													var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
													renderer.applySmoothing(context,false);
													if(centerWidth != 0 && centerHeight != 0) {
														context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
														context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
														context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
														context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
														context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
														context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
														context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
														context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
													} else if(centerWidth == 0 && centerHeight != 0) {
														var renderWidth = renderLeft + renderCenterWidth + renderRight;
														context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
														context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
													} else if(centerHeight == 0 && centerWidth != 0) {
														var renderHeight = renderTop + renderCenterHeight + renderBottom;
														context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
														context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
														context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
													}
												} else {
													renderer.setTransform(transform,context);
													if(renderer.__isDOM) {
														var reverseScale = 1 / renderer.pixelRatio;
														context.scale(reverseScale,reverseScale);
													}
													context.drawImage(canvas,0,0,width,height);
												}
												renderer.__popMaskObject(textField);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if(smoothingEnabled) {
				renderer.context.imageSmoothingEnabled = true;
			}
		}
	}
};
openfl_display__$internal_CanvasTextField.renderDrawableMask = function(textField,renderer) {
	openfl_display__$internal_CanvasDisplayObject.renderDrawableMask(textField,renderer);
};
var openfl_display__$internal_CanvasTilemap = function() { };
$hxClasses["openfl.display._internal.CanvasTilemap"] = openfl_display__$internal_CanvasTilemap;
openfl_display__$internal_CanvasTilemap.__name__ = "openfl.display._internal.CanvasTilemap";
openfl_display__$internal_CanvasTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0) {
		return;
	}
	var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var context = renderer.context;
	renderer.__setBlendMode(tilemap.__worldBlendMode);
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	if(!renderer.__allowSmoothing || !tilemap.smoothing) {
		context.imageSmoothingEnabled = false;
	}
	openfl_display__$internal_CanvasTilemap.renderTileContainer(tilemap.__group,renderer,tilemap.__renderTransform,tilemap.__tileset,renderer.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
	if(!renderer.__allowSmoothing || !tilemap.smoothing) {
		context.imageSmoothingEnabled = true;
	}
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl_display__$internal_CanvasTilemap.renderTileContainer = function(group,renderer,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData,source,rect) {
	var context = renderer.context;
	var roundPixels = renderer.__roundPixels;
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var tiles = group.__tiles;
	var length = group.__length;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		tile = tiles[i];
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl_display__$internal_CanvasTilemap.renderTileContainer(tile,renderer,tileTransform,tileset,smooth,alphaEnabled,alpha,blendModeEnabled,blendMode,cacheBitmapData,source,rect);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
			}
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(bitmapData != cacheBitmapData) {
				if(bitmapData.image.buffer.__srcImage == null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmapData.image);
				}
				source = bitmapData.image.get_src();
				cacheBitmapData = bitmapData;
			}
			context.globalAlpha = alpha;
			if(blendModeEnabled) {
				renderer.__setBlendMode(blendMode);
			}
			renderer.setTransform(tileTransform,context);
			context.drawImage(source,tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
		}
	}
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl_display__$internal_CanvasTilemap.renderDrawable = function(tilemap,renderer) {
	renderer.__updateCacheBitmap(tilemap,false);
	if(tilemap.__cacheBitmap != null && !tilemap.__isCacheBitmapRender) {
		var bitmap = tilemap.__cacheBitmap;
		if(bitmap.__renderable) {
			var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
			if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				var context = renderer.context;
				renderer.__setBlendMode(bitmap.__worldBlendMode);
				renderer.__pushMaskObject(bitmap,false);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
				context.globalAlpha = alpha;
				var scrollRect = bitmap.__scrollRect;
				renderer.setTransform(bitmap.__renderTransform,context);
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
				} else {
					context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskObject(bitmap,false);
			}
		}
	} else {
		if(!(tilemap.opaqueBackground == null && tilemap.__graphics == null)) {
			if(tilemap.__renderable) {
				var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
				if(!(alpha <= 0)) {
					if(tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0) {
						renderer.__setBlendMode(tilemap.__worldBlendMode);
						renderer.__pushMaskObject(tilemap);
						var context = renderer.context;
						renderer.setTransform(tilemap.__renderTransform,context);
						var color = tilemap.opaqueBackground;
						context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context.fillRect(0,0,tilemap.get_width(),tilemap.get_height());
						renderer.__popMaskObject(tilemap);
					}
					if(tilemap.__graphics != null) {
						if(tilemap.__renderable) {
							var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
							if(!(alpha <= 0)) {
								var graphics = tilemap.__graphics;
								if(graphics != null) {
									openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
									var width = graphics.__width;
									var height = graphics.__height;
									var canvas = graphics.__canvas;
									if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
										var transform = graphics.__worldTransform;
										var context = renderer.context;
										var scrollRect = tilemap.__scrollRect;
										var scale9Grid = tilemap.__worldScale9Grid;
										if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
											renderer.__setBlendMode(tilemap.__worldBlendMode);
											renderer.__pushMaskObject(tilemap);
											context.globalAlpha = alpha;
											if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
												context.setTransform(1,0,0,1,transform.tx,transform.ty);
												var bounds = graphics.__bounds;
												var scaleX = graphics.__renderTransform.a;
												var scaleY = graphics.__renderTransform.d;
												var renderScaleX = transform.a;
												var renderScaleY = transform.d;
												var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
												var top = Math.round(scale9Grid.y * scaleY);
												var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
												var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
												var centerWidth = Math.round(scale9Grid.width * scaleX);
												var centerHeight = Math.round(scale9Grid.height * scaleY);
												var renderLeft = Math.round(scale9Grid.x * renderScaleX);
												var renderTop = Math.round(scale9Grid.y * renderScaleY);
												var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
												var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
												var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
												var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
												renderer.applySmoothing(context,false);
												if(centerWidth != 0 && centerHeight != 0) {
													context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
													context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
													context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
													context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
													context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
													context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
													context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
													context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
												} else if(centerWidth == 0 && centerHeight != 0) {
													var renderWidth = renderLeft + renderCenterWidth + renderRight;
													context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
													context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
												} else if(centerHeight == 0 && centerWidth != 0) {
													var renderHeight = renderTop + renderCenterHeight + renderBottom;
													context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
													context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
													context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
												}
											} else {
												renderer.setTransform(transform,context);
												if(renderer.__isDOM) {
													var reverseScale = 1 / renderer.pixelRatio;
													context.scale(reverseScale,reverseScale);
												}
												context.drawImage(canvas,0,0,width,height);
											}
											renderer.__popMaskObject(tilemap);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if(!(!tilemap.__renderable || tilemap.__group.__tiles.length == 0)) {
			var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
			if(!(alpha <= 0)) {
				var context = renderer.context;
				renderer.__setBlendMode(tilemap.__worldBlendMode);
				renderer.__pushMaskObject(tilemap);
				var rect = openfl_geom_Rectangle.__pool.get();
				rect.setTo(0,0,tilemap.__width,tilemap.__height);
				renderer.__pushMaskRect(rect,tilemap.__renderTransform);
				if(!renderer.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				openfl_display__$internal_CanvasTilemap.renderTileContainer(tilemap.__group,renderer,tilemap.__renderTransform,tilemap.__tileset,renderer.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
				if(!renderer.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskRect();
				renderer.__popMaskObject(tilemap);
				openfl_geom_Rectangle.__pool.release(rect);
			}
		}
	}
	renderer.__renderEvent(tilemap);
};
openfl_display__$internal_CanvasTilemap.renderDrawableMask = function(tilemap,renderer) {
};
var openfl_display__$internal_CanvasVideo = function() { };
$hxClasses["openfl.display._internal.CanvasVideo"] = openfl_display__$internal_CanvasVideo;
openfl_display__$internal_CanvasVideo.__name__ = "openfl.display._internal.CanvasVideo";
openfl_display__$internal_CanvasVideo.render = function(video,renderer) {
	if(!video.__renderable || video.__stream == null) {
		return;
	}
	var alpha = renderer.__getAlpha(video.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var context = renderer.context;
	if(video.__stream.__video != null) {
		renderer.__setBlendMode(video.__worldBlendMode);
		renderer.__pushMaskObject(video);
		context.globalAlpha = alpha;
		var scrollRect = video.__scrollRect;
		var smoothing = video.smoothing;
		renderer.setTransform(video.__worldTransform,context);
		if(!smoothing) {
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(video.__stream.__video,0,0,video.get_width(),video.get_height());
		} else {
			context.drawImage(video.__stream.__video,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!smoothing) {
			context.imageSmoothingEnabled = true;
		}
		renderer.__popMaskObject(video);
	}
};
openfl_display__$internal_CanvasVideo.renderDrawable = function(video,renderer) {
	openfl_display__$internal_CanvasVideo.render(video,renderer);
	renderer.__renderEvent(video);
};
openfl_display__$internal_CanvasVideo.renderDrawableMask = function(video,renderer) {
};
var openfl_display__$internal_Context3DBitmap = function() { };
$hxClasses["openfl.display._internal.Context3DBitmap"] = openfl_display__$internal_Context3DBitmap;
openfl_display__$internal_Context3DBitmap.__name__ = "openfl.display._internal.Context3DBitmap";
openfl_display__$internal_Context3DBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		var shader = renderer.__initDisplayShader(bitmap.__worldShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(bitmap.__bitmapData,renderer.__allowSmoothing && (bitmap.smoothing || renderer.__upscaled));
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.applyAlpha(bitmap.__worldAlpha);
		renderer.applyColorTransform(bitmap.__worldColorTransform);
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
		renderer.__popMaskObject(bitmap);
	}
};
openfl_display__$internal_Context3DBitmap.renderDrawable = function(bitmap,renderer) {
	renderer.__updateCacheBitmap(bitmap,false);
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.image != null) {
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	if(bitmap.__cacheBitmap != null && !bitmap.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(bitmap.__cacheBitmap,renderer);
	} else {
		if(!(bitmap.opaqueBackground == null && bitmap.__graphics == null)) {
			if(!(!bitmap.__renderable || bitmap.__worldAlpha <= 0)) {
				if(bitmap.opaqueBackground != null && !bitmap.__isCacheBitmapRender && bitmap.get_width() > 0 && bitmap.get_height() > 0) {
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,bitmap.get_width(),bitmap.get_height());
					renderer.__pushMaskRect(rect,bitmap.__renderTransform);
					var color = bitmap.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(bitmap);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(bitmap.__graphics != null) {
					openfl_display__$internal_Context3DShape.render(bitmap,renderer);
				}
			}
		}
		openfl_display__$internal_Context3DBitmap.render(bitmap,renderer);
	}
	renderer.__renderEvent(bitmap);
};
openfl_display__$internal_Context3DBitmap.renderDrawableMask = function(bitmap,renderer) {
	openfl_display__$internal_Context3DBitmap.renderMask(bitmap,renderer);
};
openfl_display__$internal_Context3DBitmap.renderMask = function(bitmap,renderer) {
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl_display__$internal_Context3DMaskShader.opaqueBitmapData,true);
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
};
var openfl_display__$internal_Context3DBitmapData = function() { };
$hxClasses["openfl.display._internal.Context3DBitmapData"] = openfl_display__$internal_Context3DBitmapData;
openfl_display__$internal_Context3DBitmapData.__name__ = "openfl.display._internal.Context3DBitmapData";
openfl_display__$internal_Context3DBitmapData.renderDrawable = function(bitmapData,renderer) {
	var context = renderer.__context3D;
	var gl = context.gl;
	renderer.__setBlendMode(10);
	var shader = renderer.__defaultDisplayShader;
	renderer.setShader(shader);
	renderer.applyBitmapData(bitmapData,renderer.__upscaled);
	renderer.applyMatrix(renderer.__getMatrix(bitmapData.__worldTransform,1));
	renderer.applyAlpha(bitmapData.__worldAlpha);
	renderer.applyColorTransform(bitmapData.__worldColorTransform);
	renderer.updateShader();
	var vertexBuffer = bitmapData.getVertexBuffer(context);
	if(shader.__position != null) {
		context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
	}
	if(shader.__textureCoord != null) {
		context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
	}
	var indexBuffer = bitmapData.getIndexBuffer(context);
	context.drawTriangles(indexBuffer);
	renderer.__clearShader();
};
openfl_display__$internal_Context3DBitmapData.renderDrawableMask = function(bitmapData,renderer) {
	var context = renderer.__context3D;
	var gl = context.gl;
	var shader = renderer.__maskShader;
	renderer.setShader(shader);
	renderer.applyBitmapData(bitmapData,renderer.__upscaled);
	renderer.applyMatrix(renderer.__getMatrix(bitmapData.__worldTransform,1));
	renderer.updateShader();
	var vertexBuffer = bitmapData.getVertexBuffer(context);
	if(shader.__position != null) {
		context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
	}
	if(shader.__textureCoord != null) {
		context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
	}
	var indexBuffer = bitmapData.getIndexBuffer(context);
	context.drawTriangles(indexBuffer);
	renderer.__clearShader();
};
var openfl_display__$internal_Context3DBuffer = function(context3D,elementType,elementCount,dataPerVertex) {
	this.context3D = context3D;
	this.elementType = elementType;
	this.dataPerVertex = dataPerVertex;
	this.indexCount = 0;
	this.vertexCount = 0;
	this.resize(elementCount);
};
$hxClasses["openfl.display._internal.Context3DBuffer"] = openfl_display__$internal_Context3DBuffer;
openfl_display__$internal_Context3DBuffer.__name__ = "openfl.display._internal.Context3DBuffer";
openfl_display__$internal_Context3DBuffer.prototype = {
	drawElements: function(start,length) {
		if(length == null) {
			length = -1;
		}
		if(this.indexCount == 0 || this.vertexCount == 0) {
			return;
		}
		if(this.elementType._hx_index == 0) {
			if(length == -1) {
				length = this.elementCount * 2;
			}
			if(start < 10922 && length - start < 10922) {
				this.context3D.drawTriangles(this.indexBuffers[0],start,length * 2);
			} else {
				var end = start + length;
				while(start < end) {
					var arrayBufferIndex = Math.floor(start / 10922);
					length = Math.min(end - start,10922) | 0;
					if(length <= 0) {
						break;
					}
					this.context3D.drawTriangles(this.indexBuffers[arrayBufferIndex],(start - arrayBufferIndex * 10922) * 3,length * 2);
					start += length;
				}
			}
		}
	}
	,flushVertexBufferData: function() {
		if(this.vertexBufferData.length > this.vertexCount) {
			this.vertexCount = this.vertexBufferData.length;
			this.vertexBuffer = this.context3D.createVertexBuffer(this.vertexCount,this.dataPerVertex,0);
		}
		this.vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.vertexBufferData));
	}
	,resize: function(elementCount,dataPerVertex) {
		if(dataPerVertex == null) {
			dataPerVertex = -1;
		}
		this.elementCount = elementCount;
		if(dataPerVertex == -1) {
			dataPerVertex = this.dataPerVertex;
		}
		if(dataPerVertex != this.dataPerVertex) {
			this.vertexBuffer = null;
			this.vertexCount = 0;
			this.dataPerVertex = dataPerVertex;
		}
		var numVertices = 0;
		switch(this.elementType._hx_index) {
		case 0:
			numVertices = elementCount * 4;
			break;
		case 1:
			numVertices = elementCount * 3;
			break;
		case 2:
			numVertices = elementCount * 3;
			break;
		}
		var vertexLength = numVertices * dataPerVertex;
		if(this.vertexBufferData == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(vertexLength != null) {
				this1 = new Float32Array(vertexLength);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.vertexBufferData = this1;
		} else if(vertexLength > this.vertexBufferData.length) {
			var cacheBufferData = this.vertexBufferData;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(vertexLength != null) {
				this1 = new Float32Array(vertexLength);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.vertexBufferData = this1;
			this.vertexBufferData.set(cacheBufferData);
		}
	}
	,__class__: openfl_display__$internal_Context3DBuffer
};
var openfl_display__$internal_Context3DElementType = $hxEnums["openfl.display._internal.Context3DElementType"] = { __ename__ : "openfl.display._internal.Context3DElementType", __constructs__ : ["QUADS","TRIANGLES","TRIANGLE_INDICES"]
	,QUADS: {_hx_index:0,__enum__:"openfl.display._internal.Context3DElementType",toString:$estr}
	,TRIANGLES: {_hx_index:1,__enum__:"openfl.display._internal.Context3DElementType",toString:$estr}
	,TRIANGLE_INDICES: {_hx_index:2,__enum__:"openfl.display._internal.Context3DElementType",toString:$estr}
};
var openfl_display__$internal_Context3DDisplayObject = function() { };
$hxClasses["openfl.display._internal.Context3DDisplayObject"] = openfl_display__$internal_Context3DDisplayObject;
openfl_display__$internal_Context3DDisplayObject.__name__ = "openfl.display._internal.Context3DDisplayObject";
openfl_display__$internal_Context3DDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.__context3D;
		var rect = openfl_geom_Rectangle.__pool.get();
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__pushMaskRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
		renderer.__popMaskRect();
		renderer.__popMaskObject(displayObject);
		openfl_geom_Rectangle.__pool.release(rect);
	}
	if(displayObject.__graphics != null) {
		openfl_display__$internal_Context3DShape.render(displayObject,renderer);
	}
};
openfl_display__$internal_Context3DDisplayObject.renderDrawable = function(displayObject,renderer) {
	renderer.__updateCacheBitmap(displayObject,false);
	if(displayObject.__cacheBitmap != null && !displayObject.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(displayObject.__cacheBitmap,renderer);
	} else if(!(displayObject.opaqueBackground == null && displayObject.__graphics == null)) {
		if(!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
			if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
				renderer.__setBlendMode(displayObject.__worldBlendMode);
				renderer.__pushMaskObject(displayObject);
				var context = renderer.__context3D;
				var rect = openfl_geom_Rectangle.__pool.get();
				rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
				renderer.__pushMaskRect(rect,displayObject.__renderTransform);
				var color = displayObject.opaqueBackground;
				context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
				renderer.__popMaskRect();
				renderer.__popMaskObject(displayObject);
				openfl_geom_Rectangle.__pool.release(rect);
			}
			if(displayObject.__graphics != null) {
				openfl_display__$internal_Context3DShape.render(displayObject,renderer);
			}
		}
	}
	renderer.__renderEvent(displayObject);
};
openfl_display__$internal_Context3DDisplayObject.renderDrawableMask = function(displayObject,renderer) {
	if(displayObject.__graphics != null) {
		openfl_display__$internal_Context3DShape.renderMask(displayObject,renderer);
	}
};
openfl_display__$internal_Context3DDisplayObject.renderMask = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	if(displayObject.__graphics != null) {
		openfl_display__$internal_Context3DShape.renderMask(displayObject,renderer);
	}
};
var openfl_display__$internal_Context3DDisplayObjectContainer = function() { };
$hxClasses["openfl.display._internal.Context3DDisplayObjectContainer"] = openfl_display__$internal_Context3DDisplayObjectContainer;
openfl_display__$internal_Context3DDisplayObjectContainer.__name__ = "openfl.display._internal.Context3DDisplayObjectContainer";
openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawable = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(!displayObjectContainer.__renderable || displayObjectContainer.__worldAlpha <= 0) {
		return;
	}
	openfl_display__$internal_Context3DDisplayObject.renderDrawable(displayObjectContainer,renderer);
	if(displayObjectContainer.__cacheBitmap != null && !displayObjectContainer.__isCacheBitmapRender) {
		return;
	}
	if(displayObjectContainer.__children.length > 0) {
		renderer.__pushMaskObject(displayObjectContainer);
		if(renderer.__stage != null) {
			var _g = 0;
			var _g1 = displayObjectContainer.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				renderer.__renderDrawable(child);
				child.__renderDirty = false;
			}
			displayObjectContainer.__renderDirty = false;
		} else {
			var _g = 0;
			var _g1 = displayObjectContainer.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				renderer.__renderDrawable(child);
			}
		}
	}
	if(displayObjectContainer.__children.length > 0) {
		renderer.__popMaskObject(displayObjectContainer);
	}
};
openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawableMask = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(displayObjectContainer.__graphics != null) {
		openfl_display__$internal_Context3DShape.renderMask(displayObjectContainer,renderer);
	}
	var _g = 0;
	var _g1 = displayObjectContainer.__children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		renderer.__renderDrawableMask(child);
	}
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = "openfl.geom.Matrix";
openfl_geom_Matrix.prototype = {
	clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.b = vector3D.y;
		} else if(column == 1) {
			this.c = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
			this.tx = vector3D.z;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
			this.ty = vector3D.z;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = "openfl.geom.ColorTransform";
openfl_geom_ColorTransform.prototype = {
	concat: function(second) {
		this.redOffset = second.redOffset * this.redMultiplier + this.redOffset;
		this.greenOffset = second.greenOffset * this.greenMultiplier + this.greenOffset;
		this.blueOffset = second.blueOffset * this.blueMultiplier + this.blueOffset;
		this.alphaOffset = second.alphaOffset * this.alphaMultiplier + this.alphaOffset;
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__invert: function() {
		this.redMultiplier = this.redMultiplier != 0 ? 1 / this.redMultiplier : 1;
		this.greenMultiplier = this.greenMultiplier != 0 ? 1 / this.greenMultiplier : 1;
		this.blueMultiplier = this.blueMultiplier != 0 ? 1 / this.blueMultiplier : 1;
		this.alphaMultiplier = this.alphaMultiplier != 0 ? 1 / this.alphaMultiplier : 1;
		this.redOffset = -this.redOffset;
		this.greenOffset = -this.greenOffset;
		this.blueOffset = -this.blueOffset;
		this.alphaOffset = -this.alphaOffset;
	}
	,__equals: function(ct,ignoreAlphaMultiplier) {
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (ignoreAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function(ignoreAlphaMultiplier) {
		if(ignoreAlphaMultiplier) {
			if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
				return this.alphaOffset == 0;
			} else {
				return false;
			}
		} else if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__setArrays: function(colorMultipliers,colorOffsets) {
		colorMultipliers[0] = this.redMultiplier;
		colorMultipliers[1] = this.greenMultiplier;
		colorMultipliers[2] = this.blueMultiplier;
		colorMultipliers[3] = this.alphaMultiplier;
		colorOffsets[0] = this.redOffset;
		colorOffsets[1] = this.greenOffset;
		colorOffsets[2] = this.blueOffset;
		colorOffsets[3] = this.alphaOffset;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_display__$internal_Context3DGraphics = function() { };
$hxClasses["openfl.display._internal.Context3DGraphics"] = openfl_display__$internal_Context3DGraphics;
openfl_display__$internal_Context3DGraphics.__name__ = "openfl.display._internal.Context3DGraphics";
openfl_display__$internal_Context3DGraphics.buildBuffer = function(graphics,renderer) {
	var quadBufferPosition = 0;
	var triangleIndexBufferPosition = 0;
	var vertexBufferPosition = 0;
	var vertexBufferPositionUVT = 0;
	var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
	var context = renderer.__context3D;
	var tileRect = openfl_geom_Rectangle.__pool.get();
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var bitmap = null;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
			var this1 = data;
			var c = this1;
			bitmap = c.buffer.o[c.oPos];
			break;
		case 1:
			bitmap = null;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
			var this2 = data;
			var c1 = this2;
			var shaderBuffer = c1.buffer.o[c1.oPos];
			bitmap = null;
			if(shaderBuffer != null) {
				var _g2 = 0;
				var _g3 = shaderBuffer.inputCount;
				while(_g2 < _g3) {
					var i = _g2++;
					if(shaderBuffer.inputRefs[i].name == "bitmap") {
						bitmap = shaderBuffer.inputs[i];
						break;
					}
				}
			}
			break;
		case 8:
			if(bitmap != null) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
				var this3 = data;
				var c2 = this3;
				var rects = c2.buffer.o[c2.oPos];
				var indices = c2.buffer.o[c2.oPos + 1];
				var transforms = c2.buffer.o[c2.oPos + 2];
				var hasIndices = indices != null;
				var transformABCD = false;
				var transformXY = false;
				var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
				if(length == 0) {
					return;
				}
				if(transforms != null) {
					if(transforms.get_length() >= length * 6) {
						transformABCD = true;
						transformXY = true;
					} else if(transforms.get_length() >= length * 4) {
						transformABCD = true;
					} else if(transforms.get_length() >= length * 2) {
						transformXY = true;
					}
				}
				var dataPerVertex = 4;
				var stride = dataPerVertex * 4;
				if(graphics.__quadBuffer == null) {
					graphics.__quadBuffer = new openfl_display__$internal_Context3DBuffer(context,openfl_display__$internal_Context3DElementType.QUADS,length,dataPerVertex);
				} else {
					graphics.__quadBuffer.resize(quadBufferPosition + length,dataPerVertex);
				}
				var vertexOffset;
				var alpha = 1.0;
				var tileData;
				var id;
				var tileWidth;
				var tileHeight;
				var uvX;
				var uvY;
				var uvWidth;
				var uvHeight;
				var x;
				var y;
				var x2;
				var y2;
				var x3;
				var y3;
				var x4;
				var y4;
				var ri;
				var ti;
				var vertexBufferData = graphics.__quadBuffer.vertexBufferData;
				var bitmapWidth = bitmap.width;
				var bitmapHeight = bitmap.height;
				var sourceRect = bitmap.rect;
				var _g4 = 0;
				var _g5 = length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					vertexOffset = (quadBufferPosition + i1) * stride;
					ri = hasIndices ? indices.get(i1) * 4 : i1 * 4;
					if(ri < 0) {
						continue;
					}
					tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
					tileWidth = tileRect.width;
					tileHeight = tileRect.height;
					if(tileWidth <= 0 || tileHeight <= 0) {
						continue;
					}
					if(transformABCD && transformXY) {
						ti = i1 * 6;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
					} else if(transformABCD) {
						ti = i1 * 4;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
					} else if(transformXY) {
						ti = i1 * 2;
						tileTransform.tx = transforms.get(ti);
						tileTransform.ty = transforms.get(ti + 1);
					} else {
						tileTransform.tx = tileRect.x;
						tileTransform.ty = tileRect.y;
					}
					uvX = tileRect.x / bitmapWidth;
					uvY = tileRect.y / bitmapHeight;
					uvWidth = tileRect.get_right() / bitmapWidth;
					uvHeight = tileRect.get_bottom() / bitmapHeight;
					x = 0 * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y = 0 * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x2 = tileWidth * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y2 = tileWidth * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x3 = 0 * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y3 = 0 * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					x4 = tileWidth * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y4 = tileWidth * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					vertexBufferData[vertexOffset] = x;
					vertexBufferData[vertexOffset + 1] = y;
					vertexBufferData[vertexOffset + 2] = uvX;
					vertexBufferData[vertexOffset + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex] = x2;
					vertexBufferData[vertexOffset + dataPerVertex + 1] = y2;
					vertexBufferData[vertexOffset + dataPerVertex + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex * 2] = x3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 1] = y3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 2] = uvX;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 3] = uvHeight;
					vertexBufferData[vertexOffset + dataPerVertex * 3] = x4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 1] = y4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 3] = uvHeight;
				}
				quadBufferPosition += length;
			}
			break;
		case 12:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
			var this4 = data;
			var c3 = this4;
			var vertices = c3.buffer.o[c3.oPos];
			var indices1 = c3.buffer.o[c3.oPos + 1];
			var uvtData = c3.buffer.o[c3.oPos + 2];
			var culling = c3.buffer.o[c3.oPos + 3];
			var hasIndices1 = indices1 != null;
			var numVertices = Math.floor(vertices.get_length() / 2);
			var length1 = hasIndices1 ? indices1.get_length() : numVertices;
			var hasUVData = uvtData != null;
			var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
			var vertLength = hasUVTData ? 4 : 2;
			var uvStride = hasUVTData ? 3 : 2;
			var dataPerVertex1 = vertLength + 2;
			var vertexOffset1 = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
			openfl_display__$internal_Context3DGraphics.resizeVertexBuffer(graphics,hasUVTData,vertexOffset1 + length1 * dataPerVertex1);
			var vertexBufferData1 = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
			var offset;
			var vertOffset;
			var uvOffset;
			var t;
			var _g6 = 0;
			var _g7 = length1;
			while(_g6 < _g7) {
				var i2 = _g6++;
				offset = vertexOffset1 + i2 * dataPerVertex1;
				vertOffset = hasIndices1 ? indices1.get(i2) * 2 : i2 * 2;
				uvOffset = hasIndices1 ? indices1.get(i2) * uvStride : i2 * uvStride;
				if(hasUVTData) {
					t = uvtData.get(uvOffset + 2);
					vertexBufferData1[offset] = vertices.get(vertOffset) / t;
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1) / t;
					vertexBufferData1[offset + 2] = 0;
					vertexBufferData1[offset + 3] = 1 / t;
				} else {
					vertexBufferData1[offset] = vertices.get(vertOffset);
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1);
				}
				vertexBufferData1[offset + vertLength] = hasUVData ? uvtData.get(uvOffset) : 0;
				vertexBufferData1[offset + vertLength + 1] = hasUVData ? uvtData.get(uvOffset + 1) : 0;
			}
			if(hasUVTData) {
				vertexBufferPositionUVT += length1 * dataPerVertex1;
			} else {
				vertexBufferPosition += length1 * dataPerVertex1;
			}
			break;
		case 13:
			bitmap = null;
			break;
		default:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(quadBufferPosition > 0) {
		graphics.__quadBuffer.flushVertexBufferData();
	}
	if(triangleIndexBufferPosition > 0) {
		var buffer = graphics.__triangleIndexBuffer;
		if(buffer == null || triangleIndexBufferPosition > graphics.__triangleIndexBufferCount) {
			buffer = context.createIndexBuffer(triangleIndexBufferPosition,0);
			graphics.__triangleIndexBuffer = buffer;
			graphics.__triangleIndexBufferCount = triangleIndexBufferPosition;
		}
		buffer.uploadFromTypedArray(graphics.__triangleIndexBufferData);
	}
	if(vertexBufferPosition > 0) {
		var buffer = graphics.__vertexBuffer;
		if(buffer == null || vertexBufferPosition > graphics.__vertexBufferCount) {
			buffer = context.createVertexBuffer(vertexBufferPosition,4,0);
			graphics.__vertexBuffer = buffer;
			graphics.__vertexBufferCount = vertexBufferPosition;
		}
		buffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(graphics.__vertexBufferData));
	}
	if(vertexBufferPositionUVT > 0) {
		var buffer = graphics.__vertexBufferUVT;
		if(buffer == null || vertexBufferPositionUVT > graphics.__vertexBufferCountUVT) {
			buffer = context.createVertexBuffer(vertexBufferPositionUVT,6,0);
			graphics.__vertexBufferUVT = buffer;
			graphics.__vertexBufferCountUVT = vertexBufferPositionUVT;
		}
		buffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(graphics.__vertexBufferDataUVT));
	}
	openfl_geom_Rectangle.__pool.release(tileRect);
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl_display__$internal_Context3DGraphics.isCompatible = function(graphics) {
	if(graphics.__owner.__worldScale9Grid != null) {
		return false;
	}
	var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
	var hasColorFill = false;
	var hasBitmapFill = false;
	var hasShaderFill = false;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			hasBitmapFill = true;
			hasColorFill = false;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 1:
			hasBitmapFill = false;
			hasColorFill = true;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = true;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 8:
			if(hasBitmapFill || hasShaderFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 9:
			if(hasColorFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 12:
			if(hasBitmapFill || hasShaderFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 13:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 18:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 19:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		default:
			data.destroy();
			return false;
		}
	}
	data.destroy();
	return true;
};
openfl_display__$internal_Context3DGraphics.render = function(graphics,renderer) {
	if(!graphics.__visible || graphics.__commands.get_length() == 0) {
		return;
	}
	if(graphics.__bitmap != null && !graphics.__dirty || !openfl_display__$internal_Context3DGraphics.isCompatible(graphics)) {
		var cacheTransform = renderer.__softwareRenderer.__worldTransform;
		renderer.__softwareRenderer.__worldTransform = renderer.__worldTransform;
		openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__softwareRenderer);
		renderer.__softwareRenderer.__worldTransform = cacheTransform;
	} else {
		graphics.__bitmap = null;
		graphics.__update(renderer.__worldTransform);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(bounds != null && width >= 1 && height >= 1) {
			if(graphics.__hardwareDirty || graphics.__quadBuffer == null && graphics.__vertexBuffer == null && graphics.__vertexBufferUVT == null) {
				openfl_display__$internal_Context3DGraphics.buildBuffer(graphics,renderer);
			}
			var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
			var context = renderer.__context3D;
			var gl = context.gl;
			var matrix = openfl_geom_Matrix.__pool.get();
			var shaderBuffer = null;
			var bitmap = null;
			var repeat = false;
			var smooth = false;
			var fill = null;
			var positionX = 0.0;
			var positionY = 0.0;
			var quadBufferPosition = 0;
			var shaderBufferOffset = 0;
			var triangleIndexBufferPosition = 0;
			var vertexBufferPosition = 0;
			var vertexBufferPositionUVT = 0;
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type._hx_index) {
				case 0:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					bitmap = c.buffer.o[c.oPos];
					repeat = c.buffer.b[c.bPos];
					smooth = c.buffer.b[c.bPos + 1];
					shaderBuffer = null;
					fill = null;
					break;
				case 1:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
					var this2 = data;
					var c1 = this2;
					var color = c1.buffer.i[c1.iPos] | 0;
					var alpha = c1.buffer.f[c1.fPos] * 255 | 0;
					fill = color & 16777215 | alpha << 24;
					shaderBuffer = null;
					bitmap = null;
					break;
				case 3:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
					var this3 = data;
					var c2 = this3;
					shaderBuffer = c2.buffer.o[c2.oPos];
					shaderBufferOffset = 0;
					if(shaderBuffer == null || shaderBuffer.shader == null || shaderBuffer.shader.__bitmap == null) {
						bitmap = null;
					} else {
						bitmap = shaderBuffer.shader.__bitmap.input;
					}
					fill = null;
					break;
				case 8:
					if(bitmap != null) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
						var this4 = data;
						var c3 = this4;
						var rects = c3.buffer.o[c3.oPos];
						var indices = c3.buffer.o[c3.oPos + 1];
						var transforms = c3.buffer.o[c3.oPos + 2];
						var hasIndices = indices != null;
						var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
						var uMatrix = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
						var shader;
						if(shaderBuffer != null && !openfl_display__$internal_Context3DGraphics.maskRender) {
							shader = renderer.__initShaderBuffer(shaderBuffer);
							renderer.__setShaderBuffer(shaderBuffer);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,false,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						} else {
							shader = openfl_display__$internal_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
							renderer.setShader(shader);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,smooth,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
							renderer.updateShader();
						}
						var end = quadBufferPosition + length;
						while(quadBufferPosition < end) {
							length = Math.min(end - quadBufferPosition,context.__quadIndexBufferElements) | 0;
							if(length <= 0) {
								break;
							}
							if(shaderBuffer != null && !openfl_display__$internal_Context3DGraphics.maskRender) {
								renderer.__updateShaderBuffer(shaderBufferOffset);
							}
							if(shader.__position != null) {
								context.setVertexBufferAt(shader.__position.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16,2);
							}
							if(shader.__textureCoord != null) {
								context.setVertexBufferAt(shader.__textureCoord.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16 + 2,2);
							}
							context.drawTriangles(context.__quadIndexBuffer,0,length * 2);
							shaderBufferOffset += length * 4;
							quadBufferPosition += length;
						}
						renderer.__clearShader();
					}
					break;
				case 9:
					if(fill != null) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
						var this5 = data;
						var c4 = this5;
						var x = c4.buffer.f[c4.fPos];
						var y = c4.buffer.f[c4.fPos + 1];
						var width = c4.buffer.f[c4.fPos + 2];
						var height = c4.buffer.f[c4.fPos + 3];
						var color1 = fill;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.redOffset = color1 >>> 16 & 255;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.greenOffset = color1 >>> 8 & 255;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.blueOffset = color1 & 255;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.__combine(graphics.__owner.__worldColorTransform);
						matrix.identity();
						matrix.scale(width,height);
						matrix.tx = x;
						matrix.ty = y;
						matrix.concat(graphics.__owner.__renderTransform);
						var shader1 = openfl_display__$internal_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader1);
						renderer.applyMatrix(renderer.__getMatrix(matrix,1));
						renderer.applyBitmapData(openfl_display__$internal_Context3DGraphics.blankBitmapData,true,repeat);
						renderer.applyAlpha((color1 >>> 24 & 255) / 255 * graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(openfl_display__$internal_Context3DGraphics.tempColorTransform);
						renderer.updateShader();
						var vertexBuffer = openfl_display__$internal_Context3DGraphics.blankBitmapData.getVertexBuffer(context);
						if(shader1.__position != null) {
							context.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
						}
						if(shader1.__textureCoord != null) {
							context.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
						}
						var indexBuffer = openfl_display__$internal_Context3DGraphics.blankBitmapData.getIndexBuffer(context);
						context.drawTriangles(indexBuffer);
						shaderBufferOffset += 4;
						renderer.__clearShader();
					}
					break;
				case 12:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
					var this6 = data;
					var c5 = this6;
					var vertices = c5.buffer.o[c5.oPos];
					var indices1 = c5.buffer.o[c5.oPos + 1];
					var uvtData = c5.buffer.o[c5.oPos + 2];
					var culling = c5.buffer.o[c5.oPos + 3];
					var hasIndices1 = indices1 != null;
					var numVertices = Math.floor(vertices.get_length() / 2);
					var length1 = hasIndices1 ? indices1.get_length() : numVertices;
					var hasUVData = uvtData != null;
					var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
					var vertLength = hasUVTData ? 4 : 2;
					var uvStride = hasUVTData ? 3 : 2;
					var dataPerVertex = vertLength + 2;
					var vertexBuffer1 = hasUVTData ? graphics.__vertexBufferUVT : graphics.__vertexBuffer;
					var bufferPosition = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
					var uMatrix1 = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
					var shader2;
					if(shaderBuffer != null && !openfl_display__$internal_Context3DGraphics.maskRender) {
						shader2 = renderer.__initShaderBuffer(shaderBuffer);
						renderer.__setShaderBuffer(shaderBuffer);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,false,repeat);
						renderer.applyAlpha(1);
						renderer.applyColorTransform(null);
						renderer.__updateShaderBuffer(shaderBufferOffset);
					} else {
						shader2 = openfl_display__$internal_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader2);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,smooth,repeat);
						renderer.applyAlpha(graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						renderer.updateShader();
					}
					if(shader2.__position != null) {
						context.setVertexBufferAt(shader2.__position.index,vertexBuffer1,bufferPosition,hasUVTData ? 4 : 2);
					}
					if(shader2.__textureCoord != null) {
						context.setVertexBufferAt(shader2.__textureCoord.index,vertexBuffer1,bufferPosition + vertLength,2);
					}
					switch(culling) {
					case 0:
						context.setCulling(0);
						break;
					case 1:
						context.setCulling(3);
						break;
					case 2:
						context.setCulling(1);
						break;
					default:
					}
					context.__drawTriangles(0,length1);
					shaderBufferOffset += length1;
					if(hasUVTData) {
						vertexBufferPositionUVT += dataPerVertex * length1;
					} else {
						vertexBufferPosition += dataPerVertex * length1;
					}
					switch(culling) {
					case 1:case 2:
						context.setCulling(0);
						break;
					default:
					}
					renderer.__clearShader();
					break;
				case 13:
					bitmap = null;
					fill = null;
					shaderBuffer = null;
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
					context.setCulling(3);
					break;
				case 18:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
					var this7 = data;
					var c6 = this7;
					positionX = c6.buffer.f[c6.fPos];
					positionY = c6.buffer.f[c6.fPos + 1];
					break;
				case 19:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE;
					var this8 = data;
					var c7 = this8;
					renderer.__setBlendMode(c7.buffer.o[c7.oPos]);
					break;
				default:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
				}
			}
			openfl_geom_Matrix.__pool.release(matrix);
		}
		graphics.__hardwareDirty = false;
		graphics.set___dirty(false);
	}
};
openfl_display__$internal_Context3DGraphics.renderMask = function(graphics,renderer) {
	openfl_display__$internal_Context3DGraphics.maskRender = true;
	openfl_display__$internal_Context3DGraphics.render(graphics,renderer);
	openfl_display__$internal_Context3DGraphics.maskRender = false;
};
openfl_display__$internal_Context3DGraphics.resizeIndexBuffer = function(graphics,isQuad,length) {
	if(isQuad) {
		return;
	}
	var buffer = isQuad ? null : graphics.__triangleIndexBufferData;
	var position = 0;
	var newBuffer = null;
	if(buffer == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Uint16Array(length);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint16Array(buffer1,0);
			} else {
				this1 = new Uint16Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Uint16Array(length);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint16Array(buffer1,0);
			} else {
				this1 = new Uint16Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
		newBuffer.set(buffer);
		position = buffer.length;
	}
	if(newBuffer != null) {
		if(!isQuad) {
			graphics.__triangleIndexBufferData = newBuffer;
		}
	}
};
openfl_display__$internal_Context3DGraphics.resizeVertexBuffer = function(graphics,hasUVTData,length) {
	var buffer = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
	var newBuffer = null;
	if(buffer == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Float32Array(length);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Float32Array(buffer1,0);
			} else {
				this1 = new Float32Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Float32Array(length);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Float32Array(buffer1,0);
			} else {
				this1 = new Float32Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
		newBuffer.set(buffer);
	}
	if(newBuffer != null) {
		if(hasUVTData) {
			graphics.__vertexBufferDataUVT = newBuffer;
		} else {
			graphics.__vertexBufferData = newBuffer;
		}
	}
};
var openfl_display__$internal_Context3DMaskShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\n\t\tuniform sampler2D openfl_Texture;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\t\tif (color.a == 0.0) {\n\n\t\t\t\tdiscard;\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = color;\n\n\t\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display._internal.Context3DMaskShader"] = openfl_display__$internal_Context3DMaskShader;
openfl_display__$internal_Context3DMaskShader.__name__ = "openfl.display._internal.Context3DMaskShader";
openfl_display__$internal_Context3DMaskShader.__super__ = openfl_display_Shader;
openfl_display__$internal_Context3DMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl_display__$internal_Context3DMaskShader
});
var openfl_display__$internal_Context3DShape = function() { };
$hxClasses["openfl.display._internal.Context3DShape"] = openfl_display__$internal_Context3DShape;
openfl_display__$internal_Context3DShape.__name__ = "openfl.display._internal.Context3DShape";
openfl_display__$internal_Context3DShape.render = function(shape,renderer) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		renderer.__setBlendMode(shape.__worldBlendMode);
		renderer.__pushMaskObject(shape);
		openfl_display__$internal_Context3DGraphics.render(graphics,renderer);
		if(graphics.__bitmap != null && graphics.__visible) {
			var context = renderer.__context3D;
			var scale9Grid = shape.__worldScale9Grid;
			var shader = renderer.__initDisplayShader(shape.__worldShader);
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,true);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.applyAlpha(shape.__worldAlpha);
			renderer.applyColorTransform(shape.__worldColorTransform);
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			renderer.__clearShader();
		}
		renderer.__popMaskObject(shape);
	}
};
openfl_display__$internal_Context3DShape.renderMask = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl_display__$internal_Context3DGraphics.renderMask(graphics,renderer);
		if(graphics.__bitmap != null) {
			var context = renderer.__context3D;
			var shader = renderer.__maskShader;
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,true);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			renderer.__clearShader();
		}
	}
};
var openfl_display__$internal_Context3DSimpleButton = function() { };
$hxClasses["openfl.display._internal.Context3DSimpleButton"] = openfl_display__$internal_Context3DSimpleButton;
openfl_display__$internal_Context3DSimpleButton.__name__ = "openfl.display._internal.Context3DSimpleButton";
openfl_display__$internal_Context3DSimpleButton.renderDrawable = function(simpleButton,renderer) {
	if(!simpleButton.__renderable || simpleButton.__worldAlpha <= 0 || simpleButton.__currentState == null) {
		return;
	}
	renderer.__pushMaskObject(simpleButton);
	renderer.__renderDrawable(simpleButton.__currentState);
	renderer.__popMaskObject(simpleButton);
	renderer.__renderEvent(simpleButton);
};
openfl_display__$internal_Context3DSimpleButton.renderDrawableMask = function(simpleButton,renderer) {
	if(simpleButton.__currentState == null) {
		return;
	}
	renderer.__renderDrawableMask(simpleButton.__currentState);
};
var openfl_display__$internal_Context3DTextField = function() { };
$hxClasses["openfl.display._internal.Context3DTextField"] = openfl_display__$internal_Context3DTextField;
openfl_display__$internal_Context3DTextField.__name__ = "openfl.display._internal.Context3DTextField";
openfl_display__$internal_Context3DTextField.render = function(textField,renderer) {
	var renderer1 = renderer.__softwareRenderer;
	var transform = textField.__worldTransform;
	var textEngine = textField.__textEngine;
	var useTextBounds = !(textEngine.background || textEngine.border);
	var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
	var graphics = textField.__graphics;
	var cursorOffsetX = 0.0;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		if(textField.get_text().length == 0) {
			var boundsWidth = textEngine.bounds.width - 4;
			var align = textField.get_defaultTextFormat().align;
			cursorOffsetX = align == 3 ? 0 : align == 4 ? boundsWidth : boundsWidth / 2;
			switch(align) {
			case 0:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin / 2;
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin / 2;
				cursorOffsetX += textField.get_defaultTextFormat().indent / 2;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent / 2;
				break;
			case 1:
				break;
			case 2:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 3:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 4:
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin;
				break;
			case 5:
				break;
			}
			if(useTextBounds) {
				bounds.y = textEngine.bounds.y;
				bounds.x = cursorOffsetX;
			}
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer1.__worldTransform);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl_display__$internal_CanvasTextField.context = graphics.__context;
			var transform = graphics.__renderTransform;
			if(renderer1.__isDOM) {
				var scale = renderer1.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform);
				matrix.scale(scale,scale);
				renderer1.setTransform(matrix,openfl_display__$internal_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl_display__$internal_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			if(openfl_display__$internal_CanvasTextField.clearRect == null) {
				openfl_display__$internal_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl_display__$internal_CanvasTextField.clearRect) {
				openfl_display__$internal_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				openfl_display__$internal_CanvasTextField.context.textBaseline = "alphabetic";
				openfl_display__$internal_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.font = openfl_text__$internal_TextEngine.getFont(group1.format);
					openfl_display__$internal_CanvasTextField.context.fillStyle = color;
					openfl_display__$internal_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g = 0;
								var _g1 = textField.__caretIndex - group1.startIndex;
								while(_g < _g1) {
									var i = _g++;
									if(group1.positions.length <= i) {
										break;
									}
									advance += group1.positions[i];
								}
								var scrollY1 = 0.0;
								var _g2 = textField.get_scrollV();
								var _g3 = group1.lineIndex + 1;
								while(_g2 < _g3) {
									var i1 = _g2++;
									scrollY1 += textEngine.lineHeights.get(i1 - 1);
								}
								openfl_display__$internal_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(group1.format.color & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								openfl_display__$internal_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.stroke();
								openfl_display__$internal_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#000000";
								openfl_display__$internal_CanvasTextField.context.fillRect(start.x + scrollX - bounds.x,start.y + scrollY,end.x - start.x,group1.height);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl_display__$internal_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x - bounds.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl_display__$internal_CanvasTextField.context.beginPath();
						openfl_display__$internal_CanvasTextField.context.strokeStyle = color;
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
						openfl_display__$internal_CanvasTextField.context.moveTo(x,y);
						openfl_display__$internal_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl_display__$internal_CanvasTextField.context.stroke();
						openfl_display__$internal_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl_display__$internal_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						openfl_display__$internal_CanvasTextField.context.lineCap = "square";
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX = -textField.get_scrollH() + (useTextBounds ? 0 : cursorOffsetX);
					var scrollY = 0.0;
					var _g = 0;
					var _g1 = textField.get_scrollV() - 1;
					while(_g < _g1) {
						var i = _g++;
						scrollY += textEngine.lineHeights.get(i);
					}
					openfl_display__$internal_CanvasTextField.context.beginPath();
					var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
					openfl_display__$internal_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
					openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
					openfl_display__$internal_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl_display__$internal_CanvasTextField.context.stroke();
					openfl_display__$internal_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
	textField.__graphics.__hardwareDirty = false;
};
openfl_display__$internal_Context3DTextField.renderDrawable = function(textField,renderer) {
	renderer.__updateCacheBitmap(textField,false);
	if(textField.__cacheBitmap != null && !textField.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(textField.__cacheBitmap,renderer);
	} else {
		openfl_display__$internal_Context3DTextField.render(textField,renderer);
		if(!(textField.opaqueBackground == null && textField.__graphics == null)) {
			if(!(!textField.__renderable || textField.__worldAlpha <= 0)) {
				if(textField.opaqueBackground != null && !textField.__isCacheBitmapRender && textField.get_width() > 0 && textField.get_height() > 0) {
					renderer.__setBlendMode(textField.__worldBlendMode);
					renderer.__pushMaskObject(textField);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,textField.get_width(),textField.get_height());
					renderer.__pushMaskRect(rect,textField.__renderTransform);
					var color = textField.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(textField);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(textField.__graphics != null) {
					openfl_display__$internal_Context3DShape.render(textField,renderer);
				}
			}
		}
	}
	renderer.__renderEvent(textField);
};
openfl_display__$internal_Context3DTextField.renderDrawableMask = function(textField,renderer) {
	openfl_display__$internal_Context3DTextField.renderMask(textField,renderer);
	openfl_display__$internal_Context3DDisplayObject.renderDrawableMask(textField,renderer);
};
openfl_display__$internal_Context3DTextField.renderMask = function(textField,renderer) {
	var renderer1 = renderer.__softwareRenderer;
	var transform = textField.__worldTransform;
	var textEngine = textField.__textEngine;
	var useTextBounds = !(textEngine.background || textEngine.border);
	var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
	var graphics = textField.__graphics;
	var cursorOffsetX = 0.0;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		if(textField.get_text().length == 0) {
			var boundsWidth = textEngine.bounds.width - 4;
			var align = textField.get_defaultTextFormat().align;
			cursorOffsetX = align == 3 ? 0 : align == 4 ? boundsWidth : boundsWidth / 2;
			switch(align) {
			case 0:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin / 2;
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin / 2;
				cursorOffsetX += textField.get_defaultTextFormat().indent / 2;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent / 2;
				break;
			case 1:
				break;
			case 2:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 3:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 4:
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin;
				break;
			case 5:
				break;
			}
			if(useTextBounds) {
				bounds.y = textEngine.bounds.y;
				bounds.x = cursorOffsetX;
			}
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer1.__worldTransform);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl_display__$internal_CanvasTextField.context = graphics.__context;
			var transform = graphics.__renderTransform;
			if(renderer1.__isDOM) {
				var scale = renderer1.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform);
				matrix.scale(scale,scale);
				renderer1.setTransform(matrix,openfl_display__$internal_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl_display__$internal_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			if(openfl_display__$internal_CanvasTextField.clearRect == null) {
				openfl_display__$internal_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl_display__$internal_CanvasTextField.clearRect) {
				openfl_display__$internal_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				openfl_display__$internal_CanvasTextField.context.textBaseline = "alphabetic";
				openfl_display__$internal_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.font = openfl_text__$internal_TextEngine.getFont(group1.format);
					openfl_display__$internal_CanvasTextField.context.fillStyle = color;
					openfl_display__$internal_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g = 0;
								var _g1 = textField.__caretIndex - group1.startIndex;
								while(_g < _g1) {
									var i = _g++;
									if(group1.positions.length <= i) {
										break;
									}
									advance += group1.positions[i];
								}
								var scrollY1 = 0.0;
								var _g2 = textField.get_scrollV();
								var _g3 = group1.lineIndex + 1;
								while(_g2 < _g3) {
									var i1 = _g2++;
									scrollY1 += textEngine.lineHeights.get(i1 - 1);
								}
								openfl_display__$internal_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(group1.format.color & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								openfl_display__$internal_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.stroke();
								openfl_display__$internal_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#000000";
								openfl_display__$internal_CanvasTextField.context.fillRect(start.x + scrollX - bounds.x,start.y + scrollY,end.x - start.x,group1.height);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl_display__$internal_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x - bounds.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl_display__$internal_CanvasTextField.context.beginPath();
						openfl_display__$internal_CanvasTextField.context.strokeStyle = color;
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
						openfl_display__$internal_CanvasTextField.context.moveTo(x,y);
						openfl_display__$internal_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl_display__$internal_CanvasTextField.context.stroke();
						openfl_display__$internal_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl_display__$internal_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						openfl_display__$internal_CanvasTextField.context.lineCap = "square";
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX = -textField.get_scrollH() + (useTextBounds ? 0 : cursorOffsetX);
					var scrollY = 0.0;
					var _g = 0;
					var _g1 = textField.get_scrollV() - 1;
					while(_g < _g1) {
						var i = _g++;
						scrollY += textEngine.lineHeights.get(i);
					}
					openfl_display__$internal_CanvasTextField.context.beginPath();
					var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
					openfl_display__$internal_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
					openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
					openfl_display__$internal_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl_display__$internal_CanvasTextField.context.stroke();
					openfl_display__$internal_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
	textField.__graphics.__hardwareDirty = false;
};
var openfl_display__$internal_Context3DTilemap = function() { };
$hxClasses["openfl.display._internal.Context3DTilemap"] = openfl_display__$internal_Context3DTilemap;
openfl_display__$internal_Context3DTilemap.__name__ = "openfl.display._internal.Context3DTilemap";
openfl_display__$internal_Context3DTilemap.buildBuffer = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0 || tilemap.__worldAlpha <= 0) {
		tilemap.__group.__dirty = false;
		return;
	}
	openfl_display__$internal_Context3DTilemap.numTiles = 0;
	openfl_display__$internal_Context3DTilemap.vertexBufferData = tilemap.__buffer != null ? tilemap.__buffer.vertexBufferData : null;
	openfl_display__$internal_Context3DTilemap.vertexDataPosition = 0;
	var rect = openfl_geom_Rectangle.__pool.get();
	var matrix = openfl_geom_Matrix.__pool.get();
	var parentTransform = openfl_geom_Matrix.__pool.get();
	openfl_display__$internal_Context3DTilemap.dataPerVertex = 4;
	if(tilemap.tileAlphaEnabled) {
		openfl_display__$internal_Context3DTilemap.dataPerVertex++;
	}
	if(tilemap.tileColorTransformEnabled) {
		openfl_display__$internal_Context3DTilemap.dataPerVertex += 8;
	}
	openfl_display__$internal_Context3DTilemap.buildBufferTileContainer(tilemap,tilemap.__group,renderer,parentTransform,tilemap.__tileset,tilemap.tileAlphaEnabled,tilemap.__worldAlpha,tilemap.tileColorTransformEnabled,tilemap.__worldColorTransform,null,rect,matrix);
	tilemap.__buffer.flushVertexBufferData();
	openfl_geom_Rectangle.__pool.release(rect);
	openfl_geom_Matrix.__pool.release(matrix);
	openfl_geom_Matrix.__pool.release(parentTransform);
};
openfl_display__$internal_Context3DTilemap.buildBufferTileContainer = function(tilemap,group,renderer,parentTransform,defaultTileset,alphaEnabled,worldAlpha,colorTransformEnabled,defaultColorTransform,cacheBitmapData,rect,matrix,isTopLevel) {
	if(isTopLevel == null) {
		isTopLevel = true;
	}
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var roundPixels = renderer.__roundPixels;
	var tiles = group.__tiles;
	var length = group.__length;
	var getLength = null;
	getLength = function(_group) {
		var _tiles = _group.__tiles;
		var totalLength = 0;
		var _g = 0;
		while(_g < _tiles.length) {
			var tile = _tiles[_g];
			++_g;
			if(tile.__length > 0) {
				totalLength += getLength(tile);
			} else {
				++totalLength;
			}
		}
		return totalLength;
	};
	if(isTopLevel) {
		openfl_display__$internal_Context3DTilemap.resizeBuffer(tilemap,openfl_display__$internal_Context3DTilemap.numTiles + getLength(group));
	}
	var tile;
	var tileset;
	var alpha;
	var visible;
	var colorTransform = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var tileWidth;
	var tileHeight;
	var uvX;
	var uvY;
	var uvHeight;
	var uvWidth;
	var vertexOffset;
	var x;
	var y;
	var x2;
	var y2;
	var x3;
	var y3;
	var x4;
	var y4;
	var alphaPosition = 4;
	var ctPosition = alphaEnabled ? 5 : 4;
	var _g = 0;
	while(_g < tiles.length) {
		var tile = tiles[_g];
		++_g;
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		tile.__dirty = false;
		if(!visible || alpha <= 0) {
			continue;
		}
		if(colorTransformEnabled) {
			if(tile.get_colorTransform() != null) {
				if(defaultColorTransform == null) {
					colorTransform = tile.get_colorTransform();
				} else {
					if(openfl_display__$internal_Context3DTilemap.cacheColorTransform == null) {
						openfl_display__$internal_Context3DTilemap.cacheColorTransform = new openfl_geom_ColorTransform();
					}
					colorTransform = openfl_display__$internal_Context3DTilemap.cacheColorTransform;
					colorTransform.redMultiplier = defaultColorTransform.redMultiplier * tile.get_colorTransform().redMultiplier;
					colorTransform.greenMultiplier = defaultColorTransform.greenMultiplier * tile.get_colorTransform().greenMultiplier;
					colorTransform.blueMultiplier = defaultColorTransform.blueMultiplier * tile.get_colorTransform().blueMultiplier;
					colorTransform.alphaMultiplier = defaultColorTransform.alphaMultiplier * tile.get_colorTransform().alphaMultiplier;
					colorTransform.redOffset = defaultColorTransform.redOffset + tile.get_colorTransform().redOffset;
					colorTransform.greenOffset = defaultColorTransform.greenOffset + tile.get_colorTransform().greenOffset;
					colorTransform.blueOffset = defaultColorTransform.blueOffset + tile.get_colorTransform().blueOffset;
					colorTransform.alphaOffset = defaultColorTransform.alphaOffset + tile.get_colorTransform().alphaOffset;
				}
			} else {
				colorTransform = defaultColorTransform;
			}
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(tile.__length > 0) {
			openfl_display__$internal_Context3DTilemap.buildBufferTileContainer(tilemap,tile,renderer,tileTransform,tileset,alphaEnabled,alpha,colorTransformEnabled,colorTransform,cacheBitmapData,rect,matrix,false);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
				uvX = tileRect.x / bitmapData.width;
				uvY = tileRect.y / bitmapData.height;
				uvWidth = tileRect.get_right() / bitmapData.width;
				uvHeight = tileRect.get_bottom() / bitmapData.height;
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
				uvX = tileData.__uvX;
				uvY = tileData.__uvY;
				uvWidth = tileData.__uvWidth;
				uvHeight = tileData.__uvHeight;
			}
			tileWidth = tileRect.width;
			tileHeight = tileRect.height;
			x = 0 * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
			y = 0 * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
			x2 = tileWidth * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
			y2 = tileWidth * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
			x3 = 0 * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
			y3 = 0 * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
			x4 = tileWidth * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
			y4 = tileWidth * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
			vertexOffset = openfl_display__$internal_Context3DTilemap.vertexDataPosition;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset] = x;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + 1] = y;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + 2] = uvX;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + 3] = uvY;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex] = x2;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + 1] = y2;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + 2] = uvWidth;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + 3] = uvY;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2] = x3;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + 1] = y3;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + 2] = uvX;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + 3] = uvHeight;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3] = x4;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + 1] = y4;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + 2] = uvWidth;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + 3] = uvHeight;
			if(alphaEnabled) {
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 0 + alphaPosition] = alpha;
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + alphaPosition] = alpha;
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + alphaPosition] = alpha;
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + alphaPosition] = alpha;
			}
			if(colorTransformEnabled) {
				if(colorTransform != null) {
					var _g1 = 0;
					while(_g1 < 4) {
						var i = _g1++;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition] = colorTransform.redMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 1] = colorTransform.greenMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 2] = colorTransform.blueMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 3] = colorTransform.alphaMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 4] = colorTransform.redOffset;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 5] = colorTransform.greenOffset;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 6] = colorTransform.blueOffset;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 7] = colorTransform.alphaOffset;
					}
				} else {
					var _g2 = 0;
					while(_g2 < 4) {
						var i1 = _g2++;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 1] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 2] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 3] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 4] = 0;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 5] = 0;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 6] = 0;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 7] = 0;
					}
				}
			}
			openfl_display__$internal_Context3DTilemap.vertexDataPosition += openfl_display__$internal_Context3DTilemap.dataPerVertex * 4;
		}
	}
	group.__dirty = false;
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl_display__$internal_Context3DTilemap.flush = function(tilemap,renderer,blendMode) {
	if(openfl_display__$internal_Context3DTilemap.currentShader == null) {
		openfl_display__$internal_Context3DTilemap.currentShader = renderer.__defaultDisplayShader;
	}
	if(openfl_display__$internal_Context3DTilemap.bufferPosition > openfl_display__$internal_Context3DTilemap.lastFlushedPosition && openfl_display__$internal_Context3DTilemap.currentBitmapData != null && openfl_display__$internal_Context3DTilemap.currentShader != null) {
		var shader = renderer.__initDisplayShader(openfl_display__$internal_Context3DTilemap.currentShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl_display__$internal_Context3DTilemap.currentBitmapData,tilemap.smoothing);
		renderer.applyMatrix(renderer.__getMatrix(tilemap.__renderTransform,1));
		if(tilemap.tileAlphaEnabled) {
			renderer.useAlphaArray();
		} else {
			renderer.applyAlpha(tilemap.__worldAlpha);
		}
		if(tilemap.tileBlendModeEnabled) {
			renderer.__setBlendMode(blendMode);
		}
		if(tilemap.tileColorTransformEnabled) {
			renderer.applyHasColorTransform(true);
			renderer.useColorTransformArray();
		} else {
			renderer.applyColorTransform(tilemap.__worldColorTransform);
		}
		renderer.updateShader();
		var vertexBuffer = tilemap.__buffer.vertexBuffer;
		var vertexBufferPosition = openfl_display__$internal_Context3DTilemap.lastFlushedPosition * openfl_display__$internal_Context3DTilemap.dataPerVertex * 4;
		var length = openfl_display__$internal_Context3DTilemap.bufferPosition - openfl_display__$internal_Context3DTilemap.lastFlushedPosition;
		while(openfl_display__$internal_Context3DTilemap.lastFlushedPosition < openfl_display__$internal_Context3DTilemap.bufferPosition) {
			length = Math.min(openfl_display__$internal_Context3DTilemap.bufferPosition - openfl_display__$internal_Context3DTilemap.lastFlushedPosition,openfl_display__$internal_Context3DTilemap.context.__quadIndexBufferElements) | 0;
			if(length <= 0) {
				break;
			}
			if(shader.__position != null) {
				openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__position.index,vertexBuffer,vertexBufferPosition,2);
			}
			if(shader.__textureCoord != null) {
				openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,vertexBufferPosition + 2,2);
			}
			if(tilemap.tileAlphaEnabled) {
				if(shader.__alpha != null) {
					openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__alpha.index,vertexBuffer,vertexBufferPosition + 4,1);
				}
			}
			if(tilemap.tileColorTransformEnabled) {
				var position = tilemap.tileAlphaEnabled ? 5 : 4;
				if(shader.__colorMultiplier != null) {
					openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__colorMultiplier.index,vertexBuffer,vertexBufferPosition + position,4);
				}
				if(shader.__colorOffset != null) {
					openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__colorOffset.index,vertexBuffer,vertexBufferPosition + position + 4,4);
				}
			}
			openfl_display__$internal_Context3DTilemap.context.drawTriangles(openfl_display__$internal_Context3DTilemap.context.__quadIndexBuffer,0,length * 2);
			openfl_display__$internal_Context3DTilemap.lastFlushedPosition += length;
		}
		renderer.__clearShader();
	}
	openfl_display__$internal_Context3DTilemap.lastUsedBitmapData = openfl_display__$internal_Context3DTilemap.currentBitmapData;
	openfl_display__$internal_Context3DTilemap.lastUsedShader = openfl_display__$internal_Context3DTilemap.currentShader;
};
openfl_display__$internal_Context3DTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__worldAlpha <= 0) {
		return;
	}
	openfl_display__$internal_Context3DTilemap.context = renderer.__context3D;
	openfl_display__$internal_Context3DTilemap.buildBuffer(tilemap,renderer);
	if(openfl_display__$internal_Context3DTilemap.numTiles == 0) {
		return;
	}
	openfl_display__$internal_Context3DTilemap.bufferPosition = 0;
	openfl_display__$internal_Context3DTilemap.lastFlushedPosition = 0;
	openfl_display__$internal_Context3DTilemap.lastUsedBitmapData = null;
	openfl_display__$internal_Context3DTilemap.lastUsedShader = null;
	openfl_display__$internal_Context3DTilemap.currentBitmapData = null;
	openfl_display__$internal_Context3DTilemap.currentShader = null;
	openfl_display__$internal_Context3DTilemap.currentBlendMode = tilemap.__worldBlendMode;
	if(!tilemap.tileBlendModeEnabled) {
		renderer.__setBlendMode(openfl_display__$internal_Context3DTilemap.currentBlendMode);
	}
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	openfl_display__$internal_Context3DTilemap.renderTileContainer(tilemap,renderer,tilemap.__group,tilemap.__worldShader,tilemap.__tileset,tilemap.__worldAlpha,tilemap.tileBlendModeEnabled,openfl_display__$internal_Context3DTilemap.currentBlendMode,null);
	openfl_display__$internal_Context3DTilemap.flush(tilemap,renderer,openfl_display__$internal_Context3DTilemap.currentBlendMode);
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl_display__$internal_Context3DTilemap.renderDrawable = function(tilemap,renderer) {
	renderer.__updateCacheBitmap(tilemap,false);
	if(tilemap.__cacheBitmap != null && !tilemap.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(tilemap.__cacheBitmap,renderer);
	} else {
		if(!(tilemap.opaqueBackground == null && tilemap.__graphics == null)) {
			if(!(!tilemap.__renderable || tilemap.__worldAlpha <= 0)) {
				if(tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0) {
					renderer.__setBlendMode(tilemap.__worldBlendMode);
					renderer.__pushMaskObject(tilemap);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,tilemap.get_width(),tilemap.get_height());
					renderer.__pushMaskRect(rect,tilemap.__renderTransform);
					var color = tilemap.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(tilemap);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(tilemap.__graphics != null) {
					openfl_display__$internal_Context3DShape.render(tilemap,renderer);
				}
			}
		}
		openfl_display__$internal_Context3DTilemap.render(tilemap,renderer);
	}
	renderer.__renderEvent(tilemap);
};
openfl_display__$internal_Context3DTilemap.renderDrawableMask = function(tilemap,renderer) {
	if(!(tilemap.opaqueBackground == null && tilemap.__graphics == null)) {
		var tmp = tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0;
		if(tilemap.__graphics != null) {
			openfl_display__$internal_Context3DShape.renderMask(tilemap,renderer);
		}
	}
	openfl_display__$internal_Context3DTilemap.renderMask(tilemap,renderer);
};
openfl_display__$internal_Context3DTilemap.renderTileContainer = function(tilemap,renderer,group,defaultShader,defaultTileset,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData) {
	var tiles = group.__tiles;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var shader;
	var bitmapData;
	var _g = 0;
	while(_g < tiles.length) {
		var tile = tiles[_g];
		++_g;
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		shader = tile.get_shader() != null ? tile.get_shader() : defaultShader;
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl_display__$internal_Context3DTilemap.renderTileContainer(tilemap,renderer,tile,shader,tileset,alpha,blendModeEnabled,blendMode,cacheBitmapData);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
			}
			if(shader != openfl_display__$internal_Context3DTilemap.currentShader || bitmapData != openfl_display__$internal_Context3DTilemap.currentBitmapData && openfl_display__$internal_Context3DTilemap.currentBitmapData != null || openfl_display__$internal_Context3DTilemap.currentBlendMode != blendMode) {
				openfl_display__$internal_Context3DTilemap.flush(tilemap,renderer,openfl_display__$internal_Context3DTilemap.currentBlendMode);
			}
			openfl_display__$internal_Context3DTilemap.currentBitmapData = bitmapData;
			openfl_display__$internal_Context3DTilemap.currentShader = shader;
			openfl_display__$internal_Context3DTilemap.currentBlendMode = blendMode;
			openfl_display__$internal_Context3DTilemap.bufferPosition++;
		}
	}
};
openfl_display__$internal_Context3DTilemap.renderMask = function(tilemap,renderer) {
};
openfl_display__$internal_Context3DTilemap.resizeBuffer = function(tilemap,count) {
	openfl_display__$internal_Context3DTilemap.numTiles = count;
	if(tilemap.__buffer == null) {
		tilemap.__buffer = new openfl_display__$internal_Context3DBuffer(openfl_display__$internal_Context3DTilemap.context,openfl_display__$internal_Context3DElementType.QUADS,openfl_display__$internal_Context3DTilemap.numTiles,openfl_display__$internal_Context3DTilemap.dataPerVertex);
	} else {
		tilemap.__buffer.resize(openfl_display__$internal_Context3DTilemap.numTiles,openfl_display__$internal_Context3DTilemap.dataPerVertex);
	}
	openfl_display__$internal_Context3DTilemap.vertexBufferData = tilemap.__buffer.vertexBufferData;
};
var openfl_display__$internal_Context3DVideo = function() { };
$hxClasses["openfl.display._internal.Context3DVideo"] = openfl_display__$internal_Context3DVideo;
openfl_display__$internal_Context3DVideo.__name__ = "openfl.display._internal.Context3DVideo";
openfl_display__$internal_Context3DVideo.render = function(video,renderer) {
	if(!video.__renderable || video.__worldAlpha <= 0 || video.__stream == null) {
		return;
	}
	if(video.__stream.__video != null) {
		var context = renderer.__context3D;
		var gl = context.gl;
		var texture = video.__getTexture(context);
		if(texture == null) {
			return;
		}
		renderer.__setBlendMode(video.__worldBlendMode);
		renderer.__pushMaskObject(video);
		var shader = renderer.__initDisplayShader(video.__worldShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(null,true,false);
		renderer.applyMatrix(renderer.__getMatrix(video.__renderTransform,1));
		renderer.applyAlpha(video.__worldAlpha);
		renderer.applyColorTransform(video.__worldColorTransform);
		if(shader.__textureSize != null) {
			openfl_display__$internal_Context3DVideo.__textureSizeValue[0] = video.__stream != null ? video.__stream.__video.videoWidth : 0;
			openfl_display__$internal_Context3DVideo.__textureSizeValue[1] = video.__stream != null ? video.__stream.__video.videoHeight : 0;
			shader.__textureSize.value = openfl_display__$internal_Context3DVideo.__textureSizeValue;
		}
		renderer.updateShader();
		context.setTextureAt(0,video.__getTexture(context));
		context.__flushGLTextures();
		gl.uniform1i(shader.__texture.index,0);
		if(video.smoothing) {
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
		} else {
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
		}
		var vertexBuffer = video.__getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = video.__getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
		renderer.__popMaskObject(video);
	}
};
openfl_display__$internal_Context3DVideo.renderDrawable = function(video,renderer) {
	openfl_display__$internal_Context3DVideo.render(video,renderer);
	renderer.__renderEvent(video);
};
openfl_display__$internal_Context3DVideo.renderDrawableMask = function(video,renderer) {
	openfl_display__$internal_Context3DVideo.renderMask(video,renderer);
};
openfl_display__$internal_Context3DVideo.renderMask = function(video,renderer) {
	if(video.__stream == null) {
		return;
	}
	if(video.__stream.__video != null) {
		var context = renderer.__context3D;
		var gl = context.gl;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl_display__$internal_Context3DMaskShader.opaqueBitmapData,true);
		renderer.applyMatrix(renderer.__getMatrix(video.__renderTransform,1));
		renderer.updateShader();
		var vertexBuffer = video.__getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = video.__getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
};
var openfl_display__$internal_DOMBitmap = function() { };
$hxClasses["openfl.display._internal.DOMBitmap"] = openfl_display__$internal_DOMBitmap;
openfl_display__$internal_DOMBitmap.__name__ = "openfl.display._internal.DOMBitmap";
openfl_display__$internal_DOMBitmap.clear = function(bitmap,renderer) {
	if(bitmap.__cacheBitmap != null) {
		openfl_display__$internal_DOMBitmap.clear(bitmap.__cacheBitmap,renderer);
	}
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl_display__$internal_DOMBitmap.render = function(bitmap,renderer) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		renderer.__pushMaskObject(bitmap);
		if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
			openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
		} else {
			openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
		}
		renderer.__popMaskObject(bitmap);
	} else {
		openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
	}
};
openfl_display__$internal_DOMBitmap.renderCanvas = function(bitmap,renderer) {
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.imageSmoothingEnabled = false;
		}
		renderer.__initializeElement(bitmap,bitmap.__canvas);
	}
	if(bitmap.__imageVersion != bitmap.__bitmapData.image.version) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		bitmap.__canvas.width = bitmap.__bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.__bitmapData.width;
		bitmap.__canvas.height = bitmap.__bitmapData.height;
		bitmap.__context.drawImage(bitmap.__bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
openfl_display__$internal_DOMBitmap.renderDrawable = function(bitmap,renderer) {
	renderer.__updateCacheBitmap(bitmap,false);
	if(bitmap.__cacheBitmap != null && !bitmap.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(bitmap);
		bitmap.__cacheBitmap.stage = bitmap.stage;
		var bitmap1 = bitmap.__cacheBitmap;
		if(bitmap1.stage != null && bitmap1.__worldVisible && bitmap1.__renderable && bitmap1.__bitmapData != null && bitmap1.__bitmapData.__isValid && bitmap1.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap1);
			if(bitmap1.__bitmapData.image.buffer.__srcImage != null) {
				openfl_display__$internal_DOMBitmap.renderImage(bitmap1,renderer);
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap1,renderer);
			}
			renderer.__popMaskObject(bitmap1);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap1,renderer);
		}
	} else {
		var tmp = bitmap.opaqueBackground != null && !bitmap.__isCacheBitmapRender && bitmap.get_width() > 0 && bitmap.get_height() > 0;
		var graphics = bitmap.__graphics;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && graphics != null) {
			openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
			if(graphics.__softwareDirty || bitmap.__worldAlphaChanged || bitmap.__canvas != graphics.__canvas) {
				if(graphics.__canvas != null) {
					if(bitmap.__canvas != graphics.__canvas) {
						if(bitmap.__canvas != null) {
							renderer.element.removeChild(bitmap.__canvas);
						}
						bitmap.__canvas = graphics.__canvas;
						bitmap.__context = graphics.__context;
						renderer.__initializeElement(bitmap,bitmap.__canvas);
					}
				} else {
					openfl_display__$internal_DOMShape.clear(bitmap,renderer);
				}
			}
			if(bitmap.__canvas != null) {
				renderer.__pushMaskObject(bitmap);
				var cacheTransform = bitmap.__renderTransform;
				bitmap.__renderTransform = graphics.__worldTransform;
				if(graphics.__transformDirty) {
					graphics.__transformDirty = false;
					bitmap.__renderTransformChanged = true;
				}
				renderer.__updateClip(bitmap);
				renderer.__applyStyle(bitmap,true,true,true);
				bitmap.__renderTransform = cacheTransform;
				renderer.__popMaskObject(bitmap);
			}
		} else {
			openfl_display__$internal_DOMShape.clear(bitmap,renderer);
		}
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	}
	renderer.__renderEvent(bitmap);
};
openfl_display__$internal_DOMBitmap.renderDrawableClear = function(bitmap,renderer) {
	openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
};
openfl_display__$internal_DOMBitmap.renderImage = function(bitmap,renderer) {
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.__bitmapData.image.buffer.__srcImage.src;
		renderer.__initializeElement(bitmap,bitmap.__image);
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
var openfl_display__$internal_DOMDisplayObject = function() { };
$hxClasses["openfl.display._internal.DOMDisplayObject"] = openfl_display__$internal_DOMDisplayObject;
openfl_display__$internal_DOMDisplayObject.__name__ = "openfl.display._internal.DOMDisplayObject";
openfl_display__$internal_DOMDisplayObject.clear = function(displayObject,renderer) {
	if(displayObject.__cacheBitmap != null) {
		openfl_display__$internal_DOMBitmap.clear(displayObject.__cacheBitmap,renderer);
	}
	openfl_display__$internal_DOMShape.clear(displayObject,renderer);
};
openfl_display__$internal_DOMDisplayObject.render = function(displayObject,renderer) {
	var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	var graphics = displayObject.__graphics;
	if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
		openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
		if(graphics.__softwareDirty || displayObject.__worldAlphaChanged || displayObject.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(displayObject.__canvas != graphics.__canvas) {
					if(displayObject.__canvas != null) {
						renderer.element.removeChild(displayObject.__canvas);
					}
					displayObject.__canvas = graphics.__canvas;
					displayObject.__context = graphics.__context;
					renderer.__initializeElement(displayObject,displayObject.__canvas);
				}
			} else {
				openfl_display__$internal_DOMShape.clear(displayObject,renderer);
			}
		}
		if(displayObject.__canvas != null) {
			renderer.__pushMaskObject(displayObject);
			var cacheTransform = displayObject.__renderTransform;
			displayObject.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				displayObject.__renderTransformChanged = true;
			}
			renderer.__updateClip(displayObject);
			renderer.__applyStyle(displayObject,true,true,true);
			displayObject.__renderTransform = cacheTransform;
			renderer.__popMaskObject(displayObject);
		}
	} else {
		openfl_display__$internal_DOMShape.clear(displayObject,renderer);
	}
};
openfl_display__$internal_DOMDisplayObject.renderDrawable = function(displayObject,renderer) {
	renderer.__updateCacheBitmap(displayObject,false);
	if(displayObject.__cacheBitmap != null && !displayObject.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(displayObject);
		displayObject.__cacheBitmap.stage = displayObject.stage;
		var bitmap = displayObject.__cacheBitmap;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	} else {
		var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
		var graphics = displayObject.__graphics;
		if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
			openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
			if(graphics.__softwareDirty || displayObject.__worldAlphaChanged || displayObject.__canvas != graphics.__canvas) {
				if(graphics.__canvas != null) {
					if(displayObject.__canvas != graphics.__canvas) {
						if(displayObject.__canvas != null) {
							renderer.element.removeChild(displayObject.__canvas);
						}
						displayObject.__canvas = graphics.__canvas;
						displayObject.__context = graphics.__context;
						renderer.__initializeElement(displayObject,displayObject.__canvas);
					}
				} else {
					openfl_display__$internal_DOMShape.clear(displayObject,renderer);
				}
			}
			if(displayObject.__canvas != null) {
				renderer.__pushMaskObject(displayObject);
				var cacheTransform = displayObject.__renderTransform;
				displayObject.__renderTransform = graphics.__worldTransform;
				if(graphics.__transformDirty) {
					graphics.__transformDirty = false;
					displayObject.__renderTransformChanged = true;
				}
				renderer.__updateClip(displayObject);
				renderer.__applyStyle(displayObject,true,true,true);
				displayObject.__renderTransform = cacheTransform;
				renderer.__popMaskObject(displayObject);
			}
		} else {
			openfl_display__$internal_DOMShape.clear(displayObject,renderer);
		}
	}
	renderer.__renderEvent(displayObject);
};
openfl_display__$internal_DOMDisplayObject.renderDrawableClear = function(displayObject,renderer) {
	openfl_display__$internal_DOMDisplayObject.clear(displayObject,renderer);
};
var openfl_display__$internal_DOMDisplayObjectContainer = function() { };
$hxClasses["openfl.display._internal.DOMDisplayObjectContainer"] = openfl_display__$internal_DOMDisplayObjectContainer;
openfl_display__$internal_DOMDisplayObjectContainer.__name__ = "openfl.display._internal.DOMDisplayObjectContainer";
openfl_display__$internal_DOMDisplayObjectContainer.renderDrawable = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			renderer.__renderDrawable(orphan1);
		}
	}
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	openfl_display__$internal_DOMDisplayObject.renderDrawable(displayObjectContainer,renderer);
	if(displayObjectContainer.__cacheBitmap != null && !displayObjectContainer.__isCacheBitmapRender) {
		return;
	}
	renderer.__pushMaskObject(displayObjectContainer);
	if(renderer.__stage != null) {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
			child.__renderDirty = false;
		}
		displayObjectContainer.__renderDirty = false;
	} else {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
		}
	}
	renderer.__popMaskObject(displayObjectContainer);
};
openfl_display__$internal_DOMDisplayObjectContainer.renderDrawableClear = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			renderer.__renderDrawableClear(orphan1);
		}
	}
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	var _g = 0;
	var _g1 = displayObjectContainer.__children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		renderer.__renderDrawableClear(child);
	}
};
var openfl_display__$internal_DOMShape = function() { };
$hxClasses["openfl.display._internal.DOMShape"] = openfl_display__$internal_DOMShape;
openfl_display__$internal_DOMShape.__name__ = "openfl.display._internal.DOMShape";
openfl_display__$internal_DOMShape.clear = function(shape,renderer) {
	if(shape.__canvas != null) {
		renderer.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl_display__$internal_DOMShape.render = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
		if(graphics.__softwareDirty || shape.__worldAlphaChanged || shape.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) {
						renderer.element.removeChild(shape.__canvas);
					}
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					renderer.__initializeElement(shape,shape.__canvas);
				}
			} else {
				openfl_display__$internal_DOMShape.clear(shape,renderer);
			}
		}
		if(shape.__canvas != null) {
			renderer.__pushMaskObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			renderer.__updateClip(shape);
			renderer.__applyStyle(shape,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderer.__popMaskObject(shape);
		}
	} else {
		openfl_display__$internal_DOMShape.clear(shape,renderer);
	}
};
var openfl_display__$internal_DOMSimpleButton = function() { };
$hxClasses["openfl.display._internal.DOMSimpleButton"] = openfl_display__$internal_DOMSimpleButton;
openfl_display__$internal_DOMSimpleButton.__name__ = "openfl.display._internal.DOMSimpleButton";
openfl_display__$internal_DOMSimpleButton.renderDrawable = function(simpleButton,renderer) {
	renderer.__pushMaskObject(simpleButton);
	var previousState = simpleButton.__previousStates.iterator();
	while(previousState.hasNext()) {
		var previousState1 = previousState.next();
		renderer.__renderDrawable(previousState1);
	}
	simpleButton.__previousStates.set_length(0);
	if(simpleButton.__currentState != null) {
		if(simpleButton.__currentState.stage != simpleButton.stage) {
			simpleButton.__currentState.__setStageReference(simpleButton.stage);
		}
		renderer.__renderDrawable(simpleButton.__currentState);
	}
	renderer.__popMaskObject(simpleButton);
	renderer.__renderEvent(simpleButton);
};
openfl_display__$internal_DOMSimpleButton.renderDrawableClear = function(simpleButton,renderer) {
	openfl_display__$internal_DOMDisplayObject.renderDrawableClear(simpleButton,renderer);
};
var openfl_display__$internal_DOMTextField = function() { };
$hxClasses["openfl.display._internal.DOMTextField"] = openfl_display__$internal_DOMTextField;
openfl_display__$internal_DOMTextField.__name__ = "openfl.display._internal.DOMTextField";
openfl_display__$internal_DOMTextField.clear = function(textField,renderer) {
	if(textField.__cacheBitmap != null) {
		openfl_display__$internal_DOMBitmap.clear(textField.__cacheBitmap,renderer);
	}
	if(textField.__div != null) {
		renderer.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl_display__$internal_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		var _this_r = new RegExp("\n","g".split("u").join(""));
		div.innerHTML = textEngine.text.replace(_this_r,"<br>");
		div.style.setProperty("font",openfl_text__$internal_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) {
		div.style.width = Std.string(textEngine.width - 4) + "px";
	}
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) {
		window.document.body.removeChild(div);
	}
};
openfl_display__$internal_DOMTextField.render = function(textField,renderer) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					renderer.__initializeElement(textField,textField.__div);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							var textField1 = textField.__displayAsPassword;
							textField.__dirty = false;
							textField.dispatchEvent(new openfl_events_TextEvent("textInput",false,false,textField.get_htmlText()));
						}
					},true);
				}
				if(!textEngine.wordWrap) {
					textField.__style.setProperty("white-space","nowrap",null);
				} else {
					textField.__style.setProperty("word-wrap","break-word",null);
				}
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
					textField.__style.setProperty("-webkit-user-select","text",null);
					textField.__style.setProperty("-moz-user-select","text",null);
					textField.__style.setProperty("-ms-user-select","text",null);
					textField.__style.setProperty("-o-user-select","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				var div = textField.__div;
				div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				if(textEngine.background) {
					style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
				} else {
					style.removeProperty("background-color");
				}
				var w = textEngine.width;
				var h = textEngine.height;
				var scale = 1;
				var unscaledSize = textField.__textFormat.size;
				var scaledSize = unscaledSize;
				var t = textField.__renderTransform;
				if(t.a != 1.0 || t.d != 1.0) {
					if(t.a == t.d) {
						scale = t.a;
						t.a = t.d = 1.0;
					} else if(t.a > t.d) {
						scale = t.a;
						t.d /= t.a;
						t.a = 1.0;
					} else {
						scale = t.d;
						t.a /= t.d;
						t.d = 1.0;
					}
					scaledSize *= scale;
					w = Math.ceil(w * scale);
					h = Math.ceil(h * scale);
				}
				textField.__textFormat.size = scaledSize;
				var text = textEngine.text;
				var adjustment = 0;
				if(!textField.__isHTML) {
					text = StringTools.htmlEscape(text);
				} else {
					var matchText = text;
					while(openfl_display__$internal_DOMTextField.__regexFont.match(matchText)) {
						var fontText = openfl_display__$internal_DOMTextField.__regexFont.matched(0);
						var style1 = "";
						if(openfl_display__$internal_DOMTextField.__regexFace.match(fontText)) {
							style1 += "font-family:'" + openfl_display__$internal_DOMTextField.__getAttributeMatch(openfl_display__$internal_DOMTextField.__regexFace) + "';";
						}
						if(openfl_display__$internal_DOMTextField.__regexColor.match(fontText)) {
							style1 += "color:#" + openfl_display__$internal_DOMTextField.__getAttributeMatch(openfl_display__$internal_DOMTextField.__regexColor) + ";";
						}
						if(openfl_display__$internal_DOMTextField.__regexSize.match(fontText)) {
							var sizeAttr = openfl_display__$internal_DOMTextField.__getAttributeMatch(openfl_display__$internal_DOMTextField.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							var size;
							adjustment = parseFloat(sizeAttr) * scale;
							if(firstChar == 43 || firstChar == 45) {
								size = scaledSize + adjustment;
							} else {
								size = adjustment;
							}
							style1 += "font-size:" + size + "px;";
						}
						text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
						matchText = openfl_display__$internal_DOMTextField.__regexFont.matchedRight();
					}
					text = text.replace(openfl_display__$internal_DOMTextField.__regexCloseFont.r,"</span>");
				}
				text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
				var unscaledLeading = textField.__textFormat.leading;
				textField.__textFormat.leading += adjustment | 0;
				var _this_r = new RegExp("\r\n","g".split("u").join(""));
				var tmp = text.replace(_this_r,"<br>");
				textField.__div.innerHTML = tmp;
				var _this_r = new RegExp("\n","g".split("u").join(""));
				var tmp = textField.__div.innerHTML.replace(_this_r,"<br>");
				textField.__div.innerHTML = tmp;
				var _this_r = new RegExp("\r","g".split("u").join(""));
				var tmp = textField.__div.innerHTML.replace(_this_r,"<br>");
				textField.__div.innerHTML = tmp;
				style.setProperty("font",openfl_text__$internal_TextEngine.getFont(textField.__textFormat),null);
				textField.__textFormat.size = unscaledSize;
				textField.__textFormat.leading = unscaledLeading;
				style.setProperty("top","3px",null);
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
					textField.__renderTransform.translate(-1,-1);
					textField.__renderTransformChanged = true;
					textField.__transformDirty = true;
				} else if(style.border != "") {
					style.removeProperty("border");
					textField.__renderTransformChanged = true;
				}
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color & 16777215,6),null);
				style.setProperty("width",w + "px",null);
				style.setProperty("height",h + "px",null);
				switch(textField.__textFormat.align) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderer.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			var old = renderer.__roundPixels;
			renderer.__roundPixels = true;
			renderer.__updateClip(textField);
			renderer.__applyStyle(textField,true,true,true);
			renderer.__roundPixels = old;
		}
	} else {
		openfl_display__$internal_DOMTextField.clear(textField,renderer);
	}
};
openfl_display__$internal_DOMTextField.renderDrawable = function(textField,renderer) {
	textField.__domRender = true;
	renderer.__updateCacheBitmap(textField,textField.__forceCachedBitmapUpdate);
	textField.__forceCachedBitmapUpdate = false;
	textField.__domRender = false;
	if(textField.__cacheBitmap != null && !textField.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(textField);
		textField.__cacheBitmap.stage = textField.stage;
		var bitmap = textField.__cacheBitmap;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	} else {
		if(textField.__renderedOnCanvasWhileOnDOM) {
			textField.__renderedOnCanvasWhileOnDOM = false;
			if(textField.__isHTML && textField.__rawHtmlText != null) {
				textField.__updateText(textField.__rawHtmlText);
				textField.__dirty = true;
				textField.__layoutDirty = true;
				if(!textField.__renderDirty) {
					textField.__renderDirty = true;
					textField.__setParentRenderDirty();
				}
			}
		}
		var textField1 = textField;
		var textEngine = textField1.__textEngine;
		if(textField1.stage != null && textField1.__worldVisible && textField1.__renderable) {
			if(textField1.__dirty || textField1.__renderTransformChanged || textField1.__div == null) {
				if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
					if(textField1.__div == null) {
						textField1.__div = window.document.createElement("div");
						renderer.__initializeElement(textField1,textField1.__div);
						textField1.__style.setProperty("outline","none",null);
						textField1.__div.addEventListener("input",function(event) {
							event.preventDefault();
							if(textField1.get_htmlText() != textField1.__div.innerHTML) {
								textField1.set_htmlText(textField1.__div.innerHTML);
								var textField = textField1.__displayAsPassword;
								textField1.__dirty = false;
								textField1.dispatchEvent(new openfl_events_TextEvent("textInput",false,false,textField1.get_htmlText()));
							}
						},true);
					}
					if(!textEngine.wordWrap) {
						textField1.__style.setProperty("white-space","nowrap",null);
					} else {
						textField1.__style.setProperty("word-wrap","break-word",null);
					}
					textField1.__style.setProperty("overflow","hidden",null);
					if(textEngine.selectable) {
						textField1.__style.setProperty("cursor","text",null);
						textField1.__style.setProperty("-webkit-user-select","text",null);
						textField1.__style.setProperty("-moz-user-select","text",null);
						textField1.__style.setProperty("-ms-user-select","text",null);
						textField1.__style.setProperty("-o-user-select","text",null);
					} else {
						textField1.__style.setProperty("cursor","inherit",null);
					}
					var div = textField1.__div;
					div.contentEditable = textEngine.type == 1;
					var style = textField1.__style;
					if(textEngine.background) {
						style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
					} else {
						style.removeProperty("background-color");
					}
					var w = textEngine.width;
					var h = textEngine.height;
					var scale = 1;
					var unscaledSize = textField1.__textFormat.size;
					var scaledSize = unscaledSize;
					var t = textField1.__renderTransform;
					if(t.a != 1.0 || t.d != 1.0) {
						if(t.a == t.d) {
							scale = t.a;
							t.a = t.d = 1.0;
						} else if(t.a > t.d) {
							scale = t.a;
							t.d /= t.a;
							t.a = 1.0;
						} else {
							scale = t.d;
							t.a /= t.d;
							t.d = 1.0;
						}
						scaledSize *= scale;
						w = Math.ceil(w * scale);
						h = Math.ceil(h * scale);
					}
					textField1.__textFormat.size = scaledSize;
					var text = textEngine.text;
					var adjustment = 0;
					if(!textField1.__isHTML) {
						text = StringTools.htmlEscape(text);
					} else {
						var matchText = text;
						while(openfl_display__$internal_DOMTextField.__regexFont.match(matchText)) {
							var fontText = openfl_display__$internal_DOMTextField.__regexFont.matched(0);
							var style1 = "";
							if(openfl_display__$internal_DOMTextField.__regexFace.match(fontText)) {
								style1 += "font-family:'" + openfl_display__$internal_DOMTextField.__getAttributeMatch(openfl_display__$internal_DOMTextField.__regexFace) + "';";
							}
							if(openfl_display__$internal_DOMTextField.__regexColor.match(fontText)) {
								style1 += "color:#" + openfl_display__$internal_DOMTextField.__getAttributeMatch(openfl_display__$internal_DOMTextField.__regexColor) + ";";
							}
							if(openfl_display__$internal_DOMTextField.__regexSize.match(fontText)) {
								var sizeAttr = openfl_display__$internal_DOMTextField.__getAttributeMatch(openfl_display__$internal_DOMTextField.__regexSize);
								var firstChar = HxOverrides.cca(sizeAttr,0);
								var size;
								adjustment = parseFloat(sizeAttr) * scale;
								if(firstChar == 43 || firstChar == 45) {
									size = scaledSize + adjustment;
								} else {
									size = adjustment;
								}
								style1 += "font-size:" + size + "px;";
							}
							text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
							matchText = openfl_display__$internal_DOMTextField.__regexFont.matchedRight();
						}
						text = text.replace(openfl_display__$internal_DOMTextField.__regexCloseFont.r,"</span>");
					}
					text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
					var unscaledLeading = textField1.__textFormat.leading;
					textField1.__textFormat.leading += adjustment | 0;
					var _this_r = new RegExp("\r\n","g".split("u").join(""));
					var tmp = text.replace(_this_r,"<br>");
					textField1.__div.innerHTML = tmp;
					var _this_r = new RegExp("\n","g".split("u").join(""));
					var tmp = textField1.__div.innerHTML.replace(_this_r,"<br>");
					textField1.__div.innerHTML = tmp;
					var _this_r = new RegExp("\r","g".split("u").join(""));
					var tmp = textField1.__div.innerHTML.replace(_this_r,"<br>");
					textField1.__div.innerHTML = tmp;
					style.setProperty("font",openfl_text__$internal_TextEngine.getFont(textField1.__textFormat),null);
					textField1.__textFormat.size = unscaledSize;
					textField1.__textFormat.leading = unscaledLeading;
					style.setProperty("top","3px",null);
					if(textEngine.border) {
						style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
						textField1.__renderTransform.translate(-1,-1);
						textField1.__renderTransformChanged = true;
						textField1.__transformDirty = true;
					} else if(style.border != "") {
						style.removeProperty("border");
						textField1.__renderTransformChanged = true;
					}
					style.setProperty("color","#" + StringTools.hex(textField1.__textFormat.color & 16777215,6),null);
					style.setProperty("width",w + "px",null);
					style.setProperty("height",h + "px",null);
					switch(textField1.__textFormat.align) {
					case 0:
						style.setProperty("text-align","center",null);
						break;
					case 4:
						style.setProperty("text-align","right",null);
						break;
					default:
						style.setProperty("text-align","left",null);
					}
					textField1.__dirty = false;
				} else if(textField1.__div != null) {
					renderer.element.removeChild(textField1.__div);
					textField1.__div = null;
				}
			}
			if(textField1.__div != null) {
				var old = renderer.__roundPixels;
				renderer.__roundPixels = true;
				renderer.__updateClip(textField1);
				renderer.__applyStyle(textField1,true,true,true);
				renderer.__roundPixels = old;
			}
		} else {
			openfl_display__$internal_DOMTextField.clear(textField1,renderer);
		}
	}
	renderer.__renderEvent(textField);
};
openfl_display__$internal_DOMTextField.renderDrawableClear = function(textField,renderer) {
	openfl_display__$internal_DOMTextField.clear(textField,renderer);
};
openfl_display__$internal_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl_display__$internal_DOMTilemap = function() { };
$hxClasses["openfl.display._internal.DOMTilemap"] = openfl_display__$internal_DOMTilemap;
openfl_display__$internal_DOMTilemap.__name__ = "openfl.display._internal.DOMTilemap";
openfl_display__$internal_DOMTilemap.clear = function(tilemap,renderer) {
	if(tilemap.__cacheBitmap != null) {
		openfl_display__$internal_DOMBitmap.clear(tilemap.__cacheBitmap,renderer);
	}
	if(tilemap.__canvas != null) {
		renderer.element.removeChild(tilemap.__canvas);
		tilemap.__canvas = null;
		tilemap.__style = null;
	}
};
openfl_display__$internal_DOMTilemap.render = function(tilemap,renderer) {
	if(tilemap.stage != null && tilemap.__worldVisible && tilemap.__renderable && tilemap.__group.__tiles.length > 0) {
		if(tilemap.__canvas == null) {
			tilemap.__canvas = window.document.createElement("canvas");
			tilemap.__context = tilemap.__canvas.getContext("2d");
			renderer.__initializeElement(tilemap,tilemap.__canvas);
		}
		tilemap.__canvas.width = tilemap.__width;
		tilemap.__canvas.height = tilemap.__height;
		renderer.__canvasRenderer.context = tilemap.__context;
		var renderer1 = renderer.__canvasRenderer;
		if(!(!tilemap.__renderable || tilemap.__group.__tiles.length == 0)) {
			var alpha = renderer1.__getAlpha(tilemap.__worldAlpha);
			if(!(alpha <= 0)) {
				var context = renderer1.context;
				renderer1.__setBlendMode(tilemap.__worldBlendMode);
				renderer1.__pushMaskObject(tilemap);
				var rect = openfl_geom_Rectangle.__pool.get();
				rect.setTo(0,0,tilemap.__width,tilemap.__height);
				renderer1.__pushMaskRect(rect,tilemap.__renderTransform);
				if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				openfl_display__$internal_CanvasTilemap.renderTileContainer(tilemap.__group,renderer1,tilemap.__renderTransform,tilemap.__tileset,renderer1.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
				if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer1.__popMaskRect();
				renderer1.__popMaskObject(tilemap);
				openfl_geom_Rectangle.__pool.release(rect);
			}
		}
		renderer.__canvasRenderer.context = null;
		renderer.__updateClip(tilemap);
		renderer.__applyStyle(tilemap,true,false,true);
	} else {
		openfl_display__$internal_DOMTilemap.clear(tilemap,renderer);
	}
};
openfl_display__$internal_DOMTilemap.renderDrawable = function(tilemap,renderer) {
	renderer.__updateCacheBitmap(tilemap,false);
	if(tilemap.__cacheBitmap != null && !tilemap.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(tilemap);
		tilemap.__cacheBitmap.stage = tilemap.stage;
		var bitmap = tilemap.__cacheBitmap;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	} else {
		var tmp = tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0;
		var graphics = tilemap.__graphics;
		if(tilemap.stage != null && tilemap.__worldVisible && tilemap.__renderable && graphics != null) {
			openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
			if(graphics.__softwareDirty || tilemap.__worldAlphaChanged || tilemap.__canvas != graphics.__canvas) {
				if(graphics.__canvas != null) {
					if(tilemap.__canvas != graphics.__canvas) {
						if(tilemap.__canvas != null) {
							renderer.element.removeChild(tilemap.__canvas);
						}
						tilemap.__canvas = graphics.__canvas;
						tilemap.__context = graphics.__context;
						renderer.__initializeElement(tilemap,tilemap.__canvas);
					}
				} else {
					openfl_display__$internal_DOMShape.clear(tilemap,renderer);
				}
			}
			if(tilemap.__canvas != null) {
				renderer.__pushMaskObject(tilemap);
				var cacheTransform = tilemap.__renderTransform;
				tilemap.__renderTransform = graphics.__worldTransform;
				if(graphics.__transformDirty) {
					graphics.__transformDirty = false;
					tilemap.__renderTransformChanged = true;
				}
				renderer.__updateClip(tilemap);
				renderer.__applyStyle(tilemap,true,true,true);
				tilemap.__renderTransform = cacheTransform;
				renderer.__popMaskObject(tilemap);
			}
		} else {
			openfl_display__$internal_DOMShape.clear(tilemap,renderer);
		}
		if(tilemap.stage != null && tilemap.__worldVisible && tilemap.__renderable && tilemap.__group.__tiles.length > 0) {
			if(tilemap.__canvas == null) {
				tilemap.__canvas = window.document.createElement("canvas");
				tilemap.__context = tilemap.__canvas.getContext("2d");
				renderer.__initializeElement(tilemap,tilemap.__canvas);
			}
			tilemap.__canvas.width = tilemap.__width;
			tilemap.__canvas.height = tilemap.__height;
			renderer.__canvasRenderer.context = tilemap.__context;
			var renderer1 = renderer.__canvasRenderer;
			if(!(!tilemap.__renderable || tilemap.__group.__tiles.length == 0)) {
				var alpha = renderer1.__getAlpha(tilemap.__worldAlpha);
				if(!(alpha <= 0)) {
					var context = renderer1.context;
					renderer1.__setBlendMode(tilemap.__worldBlendMode);
					renderer1.__pushMaskObject(tilemap);
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,tilemap.__width,tilemap.__height);
					renderer1.__pushMaskRect(rect,tilemap.__renderTransform);
					if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					openfl_display__$internal_CanvasTilemap.renderTileContainer(tilemap.__group,renderer1,tilemap.__renderTransform,tilemap.__tileset,renderer1.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
					if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer1.__popMaskRect();
					renderer1.__popMaskObject(tilemap);
					openfl_geom_Rectangle.__pool.release(rect);
				}
			}
			renderer.__canvasRenderer.context = null;
			renderer.__updateClip(tilemap);
			renderer.__applyStyle(tilemap,true,false,true);
		} else {
			openfl_display__$internal_DOMTilemap.clear(tilemap,renderer);
		}
	}
	renderer.__renderEvent(tilemap);
};
openfl_display__$internal_DOMTilemap.renderDrawableClear = function(tilemap,renderer) {
	openfl_display__$internal_DOMTilemap.clear(tilemap,renderer);
};
var openfl_display__$internal_DOMVideo = function() { };
$hxClasses["openfl.display._internal.DOMVideo"] = openfl_display__$internal_DOMVideo;
openfl_display__$internal_DOMVideo.__name__ = "openfl.display._internal.DOMVideo";
openfl_display__$internal_DOMVideo.clear = function(video,renderer) {
	if(video.__active) {
		renderer.element.removeChild(video.__stream.__video);
		video.__active = false;
	}
};
openfl_display__$internal_DOMVideo.render = function(video,renderer) {
	if(video.stage != null && video.__stream != null && video.__worldVisible && video.__renderable) {
		if(!video.__active) {
			renderer.__initializeElement(video,video.__stream.__video);
			video.__active = true;
			video.__dirty = true;
		}
		if(video.__dirty) {
			video.__stream.__video.width = video.__width | 0;
			video.__stream.__video.height = video.__height | 0;
			video.__dirty = false;
		}
		renderer.__updateClip(video);
		renderer.__applyStyle(video,true,true,true);
	} else {
		openfl_display__$internal_DOMVideo.clear(video,renderer);
	}
};
openfl_display__$internal_DOMVideo.renderDrawable = function(video,renderer) {
	openfl_display__$internal_DOMVideo.render(video,renderer);
	renderer.__renderEvent(video);
};
openfl_display__$internal_DOMVideo.renderDrawableClear = function(video,renderer) {
	openfl_display__$internal_DOMDisplayObject.renderDrawableClear(video,renderer);
};
var openfl_display__$internal_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl_display__$internal_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl.display._internal.DrawCommandReader"] = openfl_display__$internal_DrawCommandReader;
openfl_display__$internal_DrawCommandReader.__name__ = "openfl.display._internal.DrawCommandReader";
openfl_display__$internal_DrawCommandReader.prototype = {
	advance: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,float: function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,int: function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginGradientFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginShaderFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
		var this1 = this;
		return this1;
	}
	,readCubicCurveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readCurveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readDrawCircle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
		var this1 = this;
		return this1;
	}
	,readDrawEllipse: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
		var this1 = this;
		return this1;
	}
	,readDrawQuads: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
		var this1 = this;
		return this1;
	}
	,readDrawRect: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawRoundRect: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawTriangles: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
		var this1 = this;
		return this1;
	}
	,readEndFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.END_FILL;
		var this1 = this;
		return this1;
	}
	,readLineBitmapStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineGradientStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
		var this1 = this;
		return this1;
	}
	,readMoveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
		var this1 = this;
		return this1;
	}
	,readOverrideBlendMode: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE;
		var this1 = this;
		return this1;
	}
	,readOverrideMatrix: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_MATRIX;
		var this1 = this;
		return this1;
	}
	,readWindingEvenOdd: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD;
		var this1 = this;
		return this1;
	}
	,readWindingNonZero: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO;
		var this1 = this;
		return this1;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = type;
	}
	,__class__: openfl_display__$internal_DrawCommandReader
};
var openfl_display__$internal_BeginBitmapFillView = {};
openfl_display__$internal_BeginBitmapFillView.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl_display__$internal_BeginBitmapFillView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_BeginBitmapFillView.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_BeginBitmapFillView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_BeginBitmapFillView.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl_display__$internal_BeginBitmapFillView.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl_display__$internal_BeginFillView = {};
openfl_display__$internal_BeginFillView.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"};
openfl_display__$internal_BeginFillView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_BeginFillView.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl_display__$internal_BeginFillView.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl_display__$internal_BeginGradientFillView = {};
openfl_display__$internal_BeginGradientFillView.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl_display__$internal_BeginGradientFillView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_BeginGradientFillView.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_BeginGradientFillView.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl_display__$internal_BeginGradientFillView.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl_display__$internal_BeginGradientFillView.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl_display__$internal_BeginGradientFillView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_BeginGradientFillView.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl_display__$internal_BeginGradientFillView.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl_display__$internal_BeginGradientFillView.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl_display__$internal_BeginShaderFillView = {};
openfl_display__$internal_BeginShaderFillView.__properties__ = {get_shaderBuffer:"get_shaderBuffer"};
openfl_display__$internal_BeginShaderFillView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_BeginShaderFillView.get_shaderBuffer = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl_display__$internal_CubicCurveToView = {};
openfl_display__$internal_CubicCurveToView.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"};
openfl_display__$internal_CubicCurveToView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_CubicCurveToView.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_CubicCurveToView.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_CubicCurveToView.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl_display__$internal_CubicCurveToView.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl_display__$internal_CubicCurveToView.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl_display__$internal_CubicCurveToView.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl_display__$internal_CurveToView = {};
openfl_display__$internal_CurveToView.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"};
openfl_display__$internal_CurveToView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_CurveToView.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_CurveToView.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_CurveToView.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl_display__$internal_CurveToView.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl_display__$internal_DrawCircleView = {};
openfl_display__$internal_DrawCircleView.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_DrawCircleView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_DrawCircleView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_DrawCircleView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_DrawCircleView.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl_display__$internal_DrawEllipseView = {};
openfl_display__$internal_DrawEllipseView.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_DrawEllipseView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_DrawEllipseView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_DrawEllipseView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_DrawEllipseView.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl_display__$internal_DrawEllipseView.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl_display__$internal_DrawQuadsView = {};
openfl_display__$internal_DrawQuadsView.__properties__ = {get_transforms:"get_transforms",get_indices:"get_indices",get_rects:"get_rects"};
openfl_display__$internal_DrawQuadsView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_DrawQuadsView.get_rects = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_DrawQuadsView.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_DrawQuadsView.get_transforms = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
var openfl_display__$internal_DrawRectView = {};
openfl_display__$internal_DrawRectView.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_DrawRectView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_DrawRectView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_DrawRectView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_DrawRectView.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl_display__$internal_DrawRectView.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl_display__$internal_DrawRoundRectView = {};
openfl_display__$internal_DrawRoundRectView.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_DrawRoundRectView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_DrawRoundRectView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_DrawRoundRectView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl_display__$internal_DrawRoundRectView.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl_display__$internal_DrawRoundRectView.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl_display__$internal_DrawRoundRectView.get_ellipseWidth = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl_display__$internal_DrawRoundRectView.get_ellipseHeight = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl_display__$internal_DrawTrianglesView = {};
openfl_display__$internal_DrawTrianglesView.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"};
openfl_display__$internal_DrawTrianglesView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_DrawTrianglesView.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_DrawTrianglesView.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_DrawTrianglesView.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl_display__$internal_DrawTrianglesView.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
var openfl_display__$internal_EndFillView = {};
openfl_display__$internal_EndFillView._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl_display__$internal_LineBitmapStyleView = {};
openfl_display__$internal_LineBitmapStyleView.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl_display__$internal_LineBitmapStyleView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_LineBitmapStyleView.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_LineBitmapStyleView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_LineBitmapStyleView.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl_display__$internal_LineBitmapStyleView.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl_display__$internal_LineGradientStyleView = {};
openfl_display__$internal_LineGradientStyleView.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl_display__$internal_LineGradientStyleView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_LineGradientStyleView.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_LineGradientStyleView.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl_display__$internal_LineGradientStyleView.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl_display__$internal_LineGradientStyleView.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl_display__$internal_LineGradientStyleView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_LineGradientStyleView.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl_display__$internal_LineGradientStyleView.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl_display__$internal_LineGradientStyleView.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl_display__$internal_LineStyleView = {};
openfl_display__$internal_LineStyleView.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"};
openfl_display__$internal_LineStyleView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_LineStyleView.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl_display__$internal_LineStyleView.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl_display__$internal_LineStyleView.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_LineStyleView.get_pixelHinting = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl_display__$internal_LineStyleView.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl_display__$internal_LineStyleView.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl_display__$internal_LineStyleView.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl_display__$internal_LineStyleView.get_miterLimit = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl_display__$internal_LineToView = {};
openfl_display__$internal_LineToView.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_LineToView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_LineToView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_LineToView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl_display__$internal_MoveToView = {};
openfl_display__$internal_MoveToView.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl_display__$internal_MoveToView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_MoveToView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl_display__$internal_MoveToView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl_display__$internal_OverrideBlendModeView = {};
openfl_display__$internal_OverrideBlendModeView.__properties__ = {get_blendMode:"get_blendMode"};
openfl_display__$internal_OverrideBlendModeView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_OverrideBlendModeView.get_blendMode = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl_display__$internal_OverrideMatrixView = {};
openfl_display__$internal_OverrideMatrixView.__properties__ = {get_matrix:"get_matrix"};
openfl_display__$internal_OverrideMatrixView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl_display__$internal_OverrideMatrixView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl_display__$internal_WindingEvenOddView = {};
openfl_display__$internal_WindingEvenOddView._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl_display__$internal_WindingNonZeroView = {};
openfl_display__$internal_WindingNonZeroView._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl_display__$internal_DrawCommandType = $hxEnums["openfl.display._internal.DrawCommandType"] = { __ename__ : "openfl.display._internal.DrawCommandType", __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","BEGIN_SHADER_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_QUADS","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_BLEND_MODE","OVERRIDE_MATRIX","WINDING_EVEN_ODD","WINDING_NON_ZERO","UNKNOWN"]
	,BEGIN_BITMAP_FILL: {_hx_index:0,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,BEGIN_FILL: {_hx_index:1,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,BEGIN_GRADIENT_FILL: {_hx_index:2,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,BEGIN_SHADER_FILL: {_hx_index:3,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,CUBIC_CURVE_TO: {_hx_index:4,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,CURVE_TO: {_hx_index:5,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_CIRCLE: {_hx_index:6,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_ELLIPSE: {_hx_index:7,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_QUADS: {_hx_index:8,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_RECT: {_hx_index:9,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_ROUND_RECT: {_hx_index:10,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_TILES: {_hx_index:11,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_TRIANGLES: {_hx_index:12,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,END_FILL: {_hx_index:13,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_BITMAP_STYLE: {_hx_index:14,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_GRADIENT_STYLE: {_hx_index:15,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_STYLE: {_hx_index:16,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_TO: {_hx_index:17,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,MOVE_TO: {_hx_index:18,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,OVERRIDE_BLEND_MODE: {_hx_index:19,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,OVERRIDE_MATRIX: {_hx_index:20,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,WINDING_EVEN_ODD: {_hx_index:21,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,WINDING_NON_ZERO: {_hx_index:22,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,UNKNOWN: {_hx_index:23,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
};
var openfl_display__$internal_FlashRenderer = function() { };
$hxClasses["openfl.display._internal.FlashRenderer"] = openfl_display__$internal_FlashRenderer;
openfl_display__$internal_FlashRenderer.__name__ = "openfl.display._internal.FlashRenderer";
openfl_display__$internal_FlashRenderer.register = function(renderObject) {
	if(openfl_display__$internal_FlashRenderer.instances == null) {
		openfl_display__$internal_FlashRenderer.instances = openfl_utils_Dictionary.toObjectMap(null,true);
		openfl_Lib.get_current().stage.addEventListener("enterFrame",openfl_display__$internal_FlashRenderer.render,false,-2147483648);
	}
	openfl_display__$internal_FlashRenderer.instances.set(renderObject,true);
};
openfl_display__$internal_FlashRenderer.render = function(_) {
	var instance = openfl_display__$internal_FlashRenderer.instances.keys();
	while(instance.hasNext()) {
		var instance1 = instance.next();
		instance1.__renderFlash();
	}
};
var openfl_display__$internal_IDisplayObject = function() { };
$hxClasses["openfl.display._internal.IDisplayObject"] = openfl_display__$internal_IDisplayObject;
openfl_display__$internal_IDisplayObject.__name__ = "openfl.display._internal.IDisplayObject";
openfl_display__$internal_IDisplayObject.__isInterface__ = true;
openfl_display__$internal_IDisplayObject.prototype = {
	__class__: openfl_display__$internal_IDisplayObject
};
var openfl_display__$internal_FlashTilemap = function() { };
$hxClasses["openfl.display._internal.FlashTilemap"] = openfl_display__$internal_FlashTilemap;
openfl_display__$internal_FlashTilemap.__name__ = "openfl.display._internal.FlashTilemap";
openfl_display__$internal_FlashTilemap.render = function(tilemap) {
};
openfl_display__$internal_FlashTilemap.renderTileContainer = function(group,bitmapData,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,colorTransformEnabled,defaultColorTransform,blendModeEnabled,defaultBlendMode,cacheBitmapData) {
};
var openfl_display__$internal_PerlinNoise = function(seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold) {
	if(stitch_threshold == null) {
		stitch_threshold = 0.05;
	}
	if(stitch == null) {
		stitch = false;
	}
	openfl_display__$internal_AbstractNoise.call(this,seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold);
	this.p_perm = [];
	var _g = 0;
	while(_g < 512) {
		var i = _g++;
		this.p_perm[i] = openfl_display__$internal_PerlinNoise.P[i & 255];
	}
	this.base_factor = 0.03125;
	this.setSeed(seed);
};
$hxClasses["openfl.display._internal.PerlinNoise"] = openfl_display__$internal_PerlinNoise;
openfl_display__$internal_PerlinNoise.__name__ = "openfl.display._internal.PerlinNoise";
openfl_display__$internal_PerlinNoise.__super__ = openfl_display__$internal_AbstractNoise;
openfl_display__$internal_PerlinNoise.prototype = $extend(openfl_display__$internal_AbstractNoise.prototype,{
	fill: function(bitmap,_scale_x,_scale_y,_scale_z) {
		var width = bitmap.width;
		var height = bitmap.height;
		var octaves = this.octaves;
		var octaves_frequencies = this.octaves_frequencies;
		var octaves_persistences = this.octaves_persistences;
		var isRed = (1 & this.channels) == 1;
		var isGreen = (2 & this.channels) == 2;
		var isBlue = (4 & this.channels) == 4;
		var channels = 0;
		if(isRed) {
			++channels;
		}
		if(isGreen) {
			++channels;
		}
		if(isBlue) {
			++channels;
		}
		var grayscale = this.grayscale;
		var stitch_w = this.stitch_threshold * width | 0;
		var stitch_h = this.stitch_threshold * height | 0;
		var base_x = _scale_x * this.base_factor + this.x_offset;
		_scale_y = _scale_y * this.base_factor + this.y_offset;
		_scale_z = _scale_z * this.base_factor + this.z_offset;
		var g_offset = 1.0;
		var b_offset = 2.0;
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var py = _g++;
			_scale_x = base_x;
			var _g2 = 0;
			var _g3 = width;
			while(_g2 < _g3) {
				var px = _g2++;
				var color1 = 0.0;
				var color2 = 0.0;
				var color3 = 0.0;
				var _g4 = 0;
				var _g5 = octaves;
				while(_g4 < _g5) {
					var i = _g4++;
					var frequency = octaves_frequencies[i];
					var persistence = octaves_persistences[i];
					color1 += this.noise(_scale_x * frequency,_scale_y * frequency,_scale_z * frequency) * persistence;
					if(!grayscale) {
						if(1 < channels) {
							color2 += this.noise((_scale_x + g_offset) * frequency,(_scale_y + g_offset) * frequency,_scale_z * frequency) * persistence;
						}
						if(2 < channels) {
							color3 += this.noise((_scale_x + b_offset) * frequency,(_scale_y + b_offset) * frequency,_scale_z * frequency) * persistence;
						}
					}
				}
				var color = 0;
				if(grayscale) {
					color = this.color(color1,color1,color1);
				} else if(isRed && isGreen && isBlue) {
					color = this.color(color1,color2,color3);
				} else if(isRed && isGreen) {
					color = this.color(color1,color2,null);
				} else if(isRed && isBlue) {
					color = this.color(color1,null,color2);
				} else if(isGreen && isBlue) {
					color = this.color(null,color1,color2);
				} else if(isRed) {
					color = this.color(color1,null,null);
				} else if(isGreen) {
					color = this.color(null,color1,null);
				} else if(isBlue) {
					color = this.color(null,null,color1);
				}
				if(this.stitch) {
					color = this.stitching(bitmap,color,px,py,stitch_w,stitch_h,width,height);
				}
				bitmap.setPixel32(px,py,color);
				_scale_x += this.base_factor;
			}
			_scale_y += this.base_factor;
		}
	}
	,noise: function(x,y,z) {
		var xf = x - x % 1;
		var yf = y - y % 1;
		var zf = z - z % 1;
		x -= xf;
		y -= yf;
		z -= zf;
		var X = (xf | 0) & 255;
		var Y = (yf | 0) & 255;
		var Z = (zf | 0) & 255;
		var u = this.fade(x);
		var v = this.fade(y);
		var w = this.fade(z);
		var A = this.p_perm[X] + Y;
		var AA = this.p_perm[A] + Z;
		var AB = this.p_perm[A + 1] + Z;
		var B = this.p_perm[X + 1] + Y;
		var BA = this.p_perm[B] + Z;
		var BB = this.p_perm[B + 1] + Z;
		var x1 = x - 1;
		var y1 = y - 1;
		var z1 = z - 1;
		var hash = this.p_perm[BB + 1] & 15;
		var g1 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z1 : hash < 4 ? -y1 : hash == 14 ? -x1 : -z1);
		hash = this.p_perm[AB + 1] & 15;
		var g2 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z1 : hash < 4 ? -y1 : hash == 14 ? -x : -z1);
		hash = this.p_perm[BA + 1] & 15;
		var g3 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z1 : hash < 4 ? -y : hash == 14 ? -x1 : -z1);
		hash = this.p_perm[AA + 1] & 15;
		var g4 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z1 : hash < 4 ? -y : hash == 14 ? -x : -z1);
		hash = this.p_perm[BB] & 15;
		var g5 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z : hash < 4 ? -y1 : hash == 14 ? -x1 : -z);
		hash = this.p_perm[AB] & 15;
		var g6 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z : hash < 4 ? -y1 : hash == 14 ? -x : -z);
		hash = this.p_perm[BA] & 15;
		var g7 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z : hash < 4 ? -y : hash == 14 ? -x1 : -z);
		hash = this.p_perm[AA] & 15;
		var g8 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z : hash < 4 ? -y : hash == 14 ? -x : -z);
		g2 += u * (g1 - g2);
		g4 += u * (g3 - g4);
		g6 += u * (g5 - g6);
		g8 += u * (g7 - g8);
		g4 += v * (g2 - g4);
		g8 += v * (g6 - g8);
		return g8 + w * (g4 - g8);
	}
	,setSeed: function(seed) {
		seed = seed * 16807.0 % 2147483647 | 0;
		this.x_offset = seed;
		seed = seed * 16807.0 % 2147483647 | 0;
		this.y_offset = seed;
		seed = seed * 16807.0 % 2147483647 | 0;
		this.z_offset = seed;
	}
	,__class__: openfl_display__$internal_PerlinNoise
});
var openfl_display__$internal_SamplerState = function(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha) {
	if(textureAlpha == null) {
		textureAlpha = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	if(mipfilter == null) {
		mipfilter = 2;
	}
	if(filter == null) {
		filter = 5;
	}
	if(wrap == null) {
		wrap = 0;
	}
	this.wrap = wrap;
	this.filter = filter;
	this.mipfilter = mipfilter;
	this.lodBias = lodBias;
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.textureAlpha = textureAlpha;
};
$hxClasses["openfl.display._internal.SamplerState"] = openfl_display__$internal_SamplerState;
openfl_display__$internal_SamplerState.__name__ = "openfl.display._internal.SamplerState";
openfl_display__$internal_SamplerState.prototype = {
	clone: function() {
		var copy = new openfl_display__$internal_SamplerState(this.wrap,this.filter,this.mipfilter,this.lodBias,this.ignoreSampler,this.centroid,this.textureAlpha);
		copy.mipmapGenerated = this.mipmapGenerated;
		return copy;
	}
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.wrap = other.wrap;
		this.filter = other.filter;
		this.mipfilter = other.mipfilter;
		this.lodBias = other.lodBias;
		this.centroid = other.centroid;
		this.textureAlpha = other.textureAlpha;
	}
	,equals: function(other) {
		if(other == null) {
			return false;
		}
		if(this.wrap == other.wrap && this.filter == other.filter && this.mipfilter == other.mipfilter && this.lodBias == other.lodBias) {
			return this.textureAlpha == other.textureAlpha;
		} else {
			return false;
		}
	}
	,__class__: openfl_display__$internal_SamplerState
};
var openfl_display__$internal_ShaderBuffer = function() {
	this.inputRefs = [];
	this.inputFilter = [];
	this.inputMipFilter = [];
	this.inputs = [];
	this.inputWrap = [];
	this.overrideIntNames = [];
	this.overrideIntValues = [];
	this.overrideFloatNames = [];
	this.overrideFloatValues = [];
	this.overrideBoolNames = [];
	this.overrideBoolValues = [];
	this.paramLengths = [];
	this.paramPositions = [];
	this.paramRefs_Bool = [];
	this.paramRefs_Float = [];
	this.paramRefs_Int = [];
	this.paramTypes = [];
};
$hxClasses["openfl.display._internal.ShaderBuffer"] = openfl_display__$internal_ShaderBuffer;
openfl_display__$internal_ShaderBuffer.__name__ = "openfl.display._internal.ShaderBuffer";
openfl_display__$internal_ShaderBuffer.prototype = {
	addBoolOverride: function(name,values) {
		this.overrideBoolNames[this.overrideBoolCount] = name;
		this.overrideBoolValues[this.overrideBoolCount] = values;
		this.overrideBoolCount++;
	}
	,addFloatOverride: function(name,values) {
		this.overrideFloatNames[this.overrideFloatCount] = name;
		this.overrideFloatValues[this.overrideFloatCount] = values;
		this.overrideFloatCount++;
	}
	,addIntOverride: function(name,values) {
		this.overrideIntNames[this.overrideIntCount] = name;
		this.overrideIntValues[this.overrideIntCount] = values;
		this.overrideIntCount++;
	}
	,clearOverride: function() {
		this.overrideIntCount = 0;
		this.overrideFloatCount = 0;
		this.overrideBoolCount = 0;
	}
	,update: function(shader) {
		this.inputCount = 0;
		this.overrideIntCount = 0;
		this.overrideFloatCount = 0;
		this.overrideBoolCount = 0;
		this.paramBoolCount = 0;
		this.paramCount = 0;
		this.paramDataLength = 0;
		this.paramFloatCount = 0;
		this.paramIntCount = 0;
		this.shader = null;
		if(shader == null) {
			return;
		}
		shader.__init();
		this.inputCount = shader.__inputBitmapData.length;
		var input;
		var _g = 0;
		var _g1 = this.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shader.__inputBitmapData[i];
			this.inputs[i] = input.input;
			this.inputFilter[i] = input.filter;
			this.inputMipFilter[i] = input.mipFilter;
			this.inputRefs[i] = input;
			this.inputWrap[i] = input.wrap;
		}
		var boolCount = shader.__paramBool.length;
		var floatCount = shader.__paramFloat.length;
		var intCount = shader.__paramInt.length;
		this.paramCount = boolCount + floatCount + intCount;
		this.paramBoolCount = boolCount;
		this.paramFloatCount = floatCount;
		this.paramIntCount = intCount;
		var length = 0;
		var p = 0;
		var param;
		var _g = 0;
		var _g1 = boolCount;
		while(_g < _g1) {
			var i = _g++;
			param = shader.__paramBool[i];
			this.paramPositions[p] = this.paramDataLength;
			length = param.value != null ? param.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 0;
			this.paramRefs_Bool[i] = param;
			++p;
		}
		var param;
		var _g = 0;
		var _g1 = floatCount;
		while(_g < _g1) {
			var i = _g++;
			param = shader.__paramFloat[i];
			this.paramPositions[p] = this.paramDataLength;
			length = param.value != null ? param.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 1;
			this.paramRefs_Float[i] = param;
			++p;
		}
		var param;
		var _g = 0;
		var _g1 = intCount;
		while(_g < _g1) {
			var i = _g++;
			param = shader.__paramInt[i];
			this.paramPositions[p] = this.paramDataLength;
			length = param.value != null ? param.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 2;
			this.paramRefs_Int[i] = param;
			++p;
		}
		if(this.paramDataLength > 0) {
			if(this.paramData == null) {
				var elements = this.paramDataLength;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(vector != null) {
					this1 = new Float32Array(vector.__array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				this.paramData = this1;
			} else if(this.paramDataLength > this.paramData.length) {
				var elements = this.paramDataLength;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(vector != null) {
					this1 = new Float32Array(vector.__array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				var data = this1;
				data.set(this.paramData);
				this.paramData = data;
			}
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var paramPosition = 0;
		var boolParam;
		var floatParam;
		var intParam;
		var length;
		var _g = 0;
		var _g1 = this.paramCount;
		while(_g < _g1) {
			var i = _g++;
			length = this.paramLengths[i];
			if(i < boolCount) {
				boolParam = this.paramRefs_Bool[boolIndex];
				++boolIndex;
				var _g2 = 0;
				var _g3 = length;
				while(_g2 < _g3) {
					var j = _g2++;
					this.paramData[paramPosition] = boolParam.value[j] ? 1 : 0;
					++paramPosition;
				}
			} else if(i < boolCount + floatCount) {
				floatParam = this.paramRefs_Float[floatIndex];
				++floatIndex;
				var _g4 = 0;
				var _g5 = length;
				while(_g4 < _g5) {
					var j1 = _g4++;
					this.paramData[paramPosition] = floatParam.value[j1];
					++paramPosition;
				}
			} else {
				intParam = this.paramRefs_Int[intIndex];
				++intIndex;
				var _g6 = 0;
				var _g7 = length;
				while(_g6 < _g7) {
					var j2 = _g6++;
					this.paramData[paramPosition] = intParam.value[j2];
					++paramPosition;
				}
			}
		}
		this.shader = shader;
	}
	,__class__: openfl_display__$internal_ShaderBuffer
};
var openfl_display3D_Context3D = function(stage,contextState,stage3D) {
	this.profile = 3;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__contextState = contextState;
	this.__stage3D = stage3D;
	this.__context = stage.window.context;
	this.gl = this.__context.webgl;
	if(this.__contextState == null) {
		this.__contextState = new openfl_display3D__$internal_Context3DState();
	}
	this.__state = new openfl_display3D__$internal_Context3DState();
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1 = new Float32Array(512);
	this.__vertexConstants = this1;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1 = new Float32Array(512);
	this.__fragmentConstants = this1;
	var elements = null;
	var array = [1.0,1.0,1.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	this.__positionScale = this1;
	this.__programs = new haxe_ds_StringMap();
	if(openfl_display3D_Context3D.__glMaxViewportDims == -1) {
		openfl_display3D_Context3D.__glMaxViewportDims = this.gl.getParameter(this.gl.MAX_VIEWPORT_DIMS);
	}
	this.maxBackBufferWidth = openfl_display3D_Context3D.__glMaxViewportDims;
	this.maxBackBufferHeight = openfl_display3D_Context3D.__glMaxViewportDims;
	if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy == -1) {
		var extension = this.gl.getExtension("EXT_texture_filter_anisotropic");
		if(extension == null || !Object.prototype.hasOwnProperty.call(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic");
		}
		if(extension == null || !Object.prototype.hasOwnProperty.call(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		if(extension != null) {
			openfl_display3D_Context3D.__glTextureMaxAnisotropy = extension.TEXTURE_MAX_ANISOTROPY_EXT;
			openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = this.gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		} else {
			openfl_display3D_Context3D.__glTextureMaxAnisotropy = 0;
			openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = 0;
		}
	}
	if(openfl_display3D_Context3D.__glDepthStencil == -1) {
		openfl_display3D_Context3D.__glDepthStencil = this.gl.DEPTH_STENCIL;
	}
	if(openfl_display3D_Context3D.__glMemoryTotalAvailable == -1) {
		var extension = this.gl.getExtension("NVX_gpu_memory_info");
		if(extension != null) {
			openfl_display3D_Context3D.__glMemoryTotalAvailable = extension.GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX;
			openfl_display3D_Context3D.__glMemoryCurrentAvailable = extension.GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX;
		}
	}
	if(openfl_display3D_Context3D.__driverInfo == null) {
		var vendor = this.gl.getParameter(this.gl.VENDOR);
		var version = this.gl.getParameter(this.gl.VERSION);
		var renderer = this.gl.getParameter(this.gl.RENDERER);
		var glslVersion = this.gl.getParameter(this.gl.SHADING_LANGUAGE_VERSION);
		openfl_display3D_Context3D.__driverInfo = "OpenGL Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
	}
	this.driverInfo = openfl_display3D_Context3D.__driverInfo;
	this.__quadIndexBufferElements = 16383;
	this.__quadIndexBufferCount = this.__quadIndexBufferElements * 6;
	var elements = this.__quadIndexBufferCount;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint16Array(elements);
	} else if(array != null) {
		this1 = new Uint16Array(array);
	} else if(vector != null) {
		this1 = new Uint16Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint16Array(buffer,0);
		} else {
			this1 = new Uint16Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	var data = this1;
	var index = 0;
	var vertex = 0;
	var _g = 0;
	var _g1 = this.__quadIndexBufferElements;
	while(_g < _g1) {
		var i = _g++;
		data[index] = vertex;
		data[index + 1] = vertex + 1;
		data[index + 2] = vertex + 2;
		data[index + 3] = vertex + 2;
		data[index + 4] = vertex + 1;
		data[index + 5] = vertex + 3;
		index = index + 6;
		vertex = vertex + 4;
	}
	this.__quadIndexBuffer = this.createIndexBuffer(this.__quadIndexBufferCount);
	this.__quadIndexBuffer.uploadFromTypedArray(data);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = "openfl.display3D.Context3D";
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		var clearMask = 0;
		if((mask & 1) != 0) {
			if(this.__state.renderToTexture == null) {
				if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
					this.__stage.__renderer.__cleared = true;
				}
				this.__cleared = true;
			}
			clearMask |= this.gl.COLOR_BUFFER_BIT;
			if(this.__contextState.colorMaskRed != true || this.__contextState.colorMaskGreen != true || this.__contextState.colorMaskBlue != true || this.__contextState.colorMaskAlpha != true) {
				this.gl.colorMask(true,true,true,true);
				this.__contextState.colorMaskRed = true;
				this.__contextState.colorMaskGreen = true;
				this.__contextState.colorMaskBlue = true;
				this.__contextState.colorMaskAlpha = true;
			}
			this.gl.clearColor(red,green,blue,alpha);
		}
		if((mask & 2) != 0) {
			clearMask |= this.gl.DEPTH_BUFFER_BIT;
			if(this.__contextState.depthMask != true) {
				this.gl.depthMask(true);
				this.__contextState.depthMask = true;
			}
			this.gl.clearDepth(depth);
		}
		if((mask & 4) != 0) {
			clearMask |= this.gl.STENCIL_BUFFER_BIT;
			if(this.__contextState.stencilWriteMask != 255) {
				this.gl.stencilMask(255);
				this.__contextState.stencilWriteMask = 255;
			}
			this.gl.clearStencil(stencil);
			this.__contextState.stencilWriteMask = 255;
		}
		if(clearMask == 0) {
			return;
		}
		this.__setGLScissorTest(false);
		this.gl.clear(clearMask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		if(this.__stage3D == null) {
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
		} else {
			if(this.__backBufferTexture == null || this.backBufferWidth != width || this.backBufferHeight != height) {
				if(this.__backBufferTexture != null) {
					this.__backBufferTexture.dispose();
				}
				if(this.__frontBufferTexture != null) {
					this.__frontBufferTexture.dispose();
				}
				this.__backBufferTexture = this.createRectangleTexture(width,height,1,true);
				this.__frontBufferTexture = this.createRectangleTexture(width,height,1,true);
				if(this.__stage3D.__vertexBuffer == null) {
					this.__stage3D.__vertexBuffer = this.createVertexBuffer(4,5);
				}
				var vertexData = openfl_Vector.toFloatVector(null,null,null,[width,height,0,1,1,0,height,0,0,1,width,0,0,1,0,0,0,0,0,0.0]);
				this.__stage3D.__vertexBuffer.uploadFromVector(vertexData,0,20);
				if(this.__stage3D.__indexBuffer == null) {
					this.__stage3D.__indexBuffer = this.createIndexBuffer(6);
					var indexData = openfl_Vector.toIntVector(null,null,null,[0,1,2,2,1,3]);
					this.__stage3D.__indexBuffer.uploadFromVector(indexData,0,6);
				}
			}
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
			this.__frontBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
		}
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,bufferUsage);
	}
	,createProgram: function(format) {
		if(format == null) {
			format = 0;
		}
		return new openfl_display3D_Program3D(this,format);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D_Context3DTextureFormat.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D_Context3DBufferUsage.toString(bufferUsage));
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function(recreate) {
		if(recreate == null) {
			recreate = true;
		}
		this.gl = null;
		this.__dispose();
	}
	,drawToBitmapData: function(destination,srcRect,destPoint) {
		if(destination == null) {
			return;
		}
		var sourceRect = srcRect != null ? srcRect.__toLimeRectangle() : new lime_math_Rectangle(0,0,this.backBufferWidth,this.backBufferHeight);
		var destVector = destPoint != null ? destPoint.__toLimeVector2() : new lime_math_Vector2();
		if(this.__stage.context3D == this) {
			if(this.__stage.window != null) {
				if(this.__stage3D != null) {
					var xa = -this.__stage3D.get_x() | 0;
					var ya = -this.__stage3D.get_y() | 0;
					destVector.x = xa;
					destVector.y = ya;
				}
				var image = this.__stage.window.readPixels();
				destination.image.copyPixels(image,sourceRect,destVector);
			}
		} else if(this.__backBufferTexture != null) {
			var cacheRenderToTexture = this.__state.renderToTexture;
			this.setRenderToBackBuffer();
			this.__flushGLFramebuffer();
			this.__flushGLViewport();
			var elements = this.backBufferWidth * this.backBufferHeight * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			var this1 = this.gl;
			var width = this.backBufferWidth;
			var height = this.backBufferHeight;
			var format = this.__backBufferTexture.__format;
			var type = this.gl.UNSIGNED_BYTE;
			var pixels = data;
			var dstOffset = null;
			if(dstOffset != null) {
				this1.readPixels(0,0,width,height,format,type,pixels,dstOffset);
			} else {
				this1.readPixels(0,0,width,height,format,type,pixels);
			}
			var image = new lime_graphics_Image(new lime_graphics_ImageBuffer(data,this.backBufferWidth,this.backBufferHeight,32,2));
			destination.image.copyPixels(image,sourceRect,destVector);
			if(cacheRenderToTexture != null) {
				this.setRenderToTexture(cacheRenderToTexture,this.__state.renderToTextureDepthStencil,this.__state.renderToTextureAntiAlias,this.__state.renderToTextureSurfaceSelector);
			}
		}
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			} else if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		var count = numTriangles == -1 ? indexBuffer.__numIndices : numTriangles * 3;
		this.__bindGLElementArrayBuffer(indexBuffer.__id);
		this.gl.drawElements(this.gl.TRIANGLES,count,this.gl.UNSIGNED_SHORT,firstIndex * 2);
	}
	,present: function() {
		this.setRenderToBackBuffer();
		if(this.__stage3D != null && this.__backBufferTexture != null) {
			if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
			var cacheBuffer = this.__backBufferTexture;
			this.__backBufferTexture = this.__frontBufferTexture;
			this.__frontBufferTexture = cacheBuffer;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(this.__state.backBufferEnableDepthAndStencil,this.__backBufferAntiAlias,0);
			this.__cleared = false;
		}
		this.__present = true;
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.setBlendFactorsSeparate(sourceFactor,destinationFactor,sourceFactor,destinationFactor);
	}
	,setBlendFactorsSeparate: function(sourceRGBFactor,destinationRGBFactor,sourceAlphaFactor,destinationAlphaFactor) {
		this.__state.blendSourceRGBFactor = sourceRGBFactor;
		this.__state.blendDestinationRGBFactor = destinationRGBFactor;
		this.__state.blendSourceAlphaFactor = sourceAlphaFactor;
		this.__state.blendDestinationAlphaFactor = destinationAlphaFactor;
		this.__setGLBlendEquation(this.gl.FUNC_ADD);
	}
	,setColorMask: function(red,green,blue,alpha) {
		this.__state.colorMaskRed = red;
		this.__state.colorMaskGreen = green;
		this.__state.colorMaskBlue = blue;
		this.__state.colorMaskAlpha = alpha;
	}
	,setCulling: function(triangleFaceToCull) {
		this.__state.culling = triangleFaceToCull;
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		this.__state.depthMask = depthMask;
		this.__state.depthCompareMode = passCompareMode;
	}
	,setProgram: function(program) {
		this.__state.program = program;
		this.__state.shader = null;
		if(program != null) {
			var _g = 0;
			var _g1 = program.__samplerStates.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.__state.samplerStates[i] == null) {
					this.__state.samplerStates[i] = program.__samplerStates[i].clone();
				} else {
					this.__state.samplerStates[i].copyFrom(program.__samplerStates[i]);
				}
			}
		}
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0 || this.__state.program == null) {
			return;
		}
		if(!(this.__state.program != null && this.__state.program.__format == 1)) {
			if(numRegisters == -1) {
				numRegisters = (openfl_utils_ByteArray.get_length(data) >>> 2) - byteArrayOffset;
			}
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var bytes = openfl_utils_ByteArray.toBytes(data);
			var byteOffset = 0;
			var len = openfl_utils_ByteArray.get_length(data);
			if(byteOffset == null) {
				byteOffset = 0;
			}
			var floatData = byteOffset == null ? new Float32Array(bytes.b.bufferValue) : len == null ? new Float32Array(bytes.b.bufferValue,byteOffset) : new Float32Array(bytes.b.bufferValue,byteOffset,len);
			var outOffset = firstRegister * 4;
			var inOffset = UInt.toFloat(byteArrayOffset) / UInt.toFloat(4) | 0;
			var _g = 0;
			var _g1 = numRegisters * 4;
			while(_g < _g1) {
				var i = _g++;
				dest[outOffset + i] = floatData[inOffset + i];
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,numRegisters);
			}
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		if(this.__state.program != null && this.__state.program.__format == 1) {
			this.__flushGLProgram();
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(16);
			var data = this1;
			data[0] = matrix.rawData.get(0);
			data[1] = matrix.rawData.get(1);
			data[2] = matrix.rawData.get(2);
			data[3] = matrix.rawData.get(3);
			data[4] = matrix.rawData.get(4);
			data[5] = matrix.rawData.get(5);
			data[6] = matrix.rawData.get(6);
			data[7] = matrix.rawData.get(7);
			data[8] = matrix.rawData.get(8);
			data[9] = matrix.rawData.get(9);
			data[10] = matrix.rawData.get(10);
			data[11] = matrix.rawData.get(11);
			data[12] = matrix.rawData.get(12);
			data[13] = matrix.rawData.get(13);
			data[14] = matrix.rawData.get(14);
			data[15] = matrix.rawData.get(15);
			lime_graphics_WebGLRenderContext.uniformMatrix4fv(this.gl,firstRegister,transposedMatrix,data);
		} else {
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var source = matrix.rawData;
			var i = firstRegister * 4;
			if(transposedMatrix) {
				dest[i++] = source.get(0);
				dest[i++] = source.get(4);
				dest[i++] = source.get(8);
				dest[i++] = source.get(12);
				dest[i++] = source.get(1);
				dest[i++] = source.get(5);
				dest[i++] = source.get(9);
				dest[i++] = source.get(13);
				dest[i++] = source.get(2);
				dest[i++] = source.get(6);
				dest[i++] = source.get(10);
				dest[i++] = source.get(14);
				dest[i++] = source.get(3);
				dest[i++] = source.get(7);
				dest[i++] = source.get(11);
				dest[i++] = source.get(15);
			} else {
				dest[i++] = source.get(0);
				dest[i++] = source.get(1);
				dest[i++] = source.get(2);
				dest[i++] = source.get(3);
				dest[i++] = source.get(4);
				dest[i++] = source.get(5);
				dest[i++] = source.get(6);
				dest[i++] = source.get(7);
				dest[i++] = source.get(8);
				dest[i++] = source.get(9);
				dest[i++] = source.get(10);
				dest[i++] = source.get(11);
				dest[i++] = source.get(12);
				dest[i++] = source.get(13);
				dest[i++] = source.get(14);
				dest[i++] = source.get(15);
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,4);
			}
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) {
			numRegisters = -1;
		}
		if(numRegisters == 0) {
			return;
		}
		if(!(this.__state.program != null && this.__state.program.__format == 1)) {
			if(numRegisters == -1) {
				numRegisters = data.get_length() >> 2;
			}
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var source = data;
			var sourceIndex = 0;
			var destIndex = firstRegister * 4;
			var _g = 0;
			var _g1 = numRegisters;
			while(_g < _g1) {
				var i = _g++;
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,numRegisters);
			}
		}
	}
	,setRenderToBackBuffer: function() {
		this.__state.renderToTexture = null;
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		this.__state.renderToTexture = texture;
		this.__state.renderToTextureDepthStencil = enableDepthAndStencil;
		this.__state.renderToTextureAntiAlias = antiAlias;
		this.__state.renderToTextureSurfaceSelector = surfaceSelector;
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(this.__state.samplerStates[sampler] == null) {
			this.__state.samplerStates[sampler] = new openfl_display__$internal_SamplerState();
		}
		var state = this.__state.samplerStates[sampler];
		state.wrap = wrap;
		state.filter = filter;
		state.mipfilter = mipfilter;
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle != null) {
			this.__state.scissorEnabled = true;
			this.__state.scissorRectangle.copyFrom(rectangle);
		} else {
			this.__state.scissorEnabled = false;
		}
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		this.__state.stencilTriangleFace = triangleFace;
		this.__state.stencilCompareMode = compareMode;
		this.__state.stencilPass = actionOnBothPass;
		this.__state.stencilDepthFail = actionOnDepthFail;
		this.__state.stencilFail = actionOnDepthPassStencilFail;
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		this.__state.stencilReferenceValue = referenceValue;
		this.__state.stencilReadMask = readMask;
		this.__state.stencilWriteMask = writeMask;
	}
	,setTextureAt: function(sampler,texture) {
		this.__state.textures[sampler] = texture;
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		if(buffer == null) {
			this.gl.disableVertexAttribArray(index);
			this.__bindGLArrayBuffer(null);
			return;
		}
		this.__bindGLArrayBuffer(buffer.__id);
		this.gl.enableVertexAttribArray(index);
		var byteOffset = bufferOffset * 4;
		switch(format) {
		case 0:
			this.gl.vertexAttribPointer(index,4,this.gl.UNSIGNED_BYTE,true,buffer.__stride,byteOffset);
			break;
		case 1:
			this.gl.vertexAttribPointer(index,1,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 2:
			this.gl.vertexAttribPointer(index,2,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 3:
			this.gl.vertexAttribPointer(index,3,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 4:
			this.gl.vertexAttribPointer(index,4,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
	}
	,__bindGLArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLArrayBuffer = buffer;
		}
	}
	,__bindGLElementArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLElementArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLElementArrayBuffer = buffer;
		}
	}
	,__bindGLFramebuffer: function(framebuffer) {
		if(this.__contextState.__currentGLFramebuffer != framebuffer) {
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,framebuffer);
			this.__contextState.__currentGLFramebuffer = framebuffer;
		}
	}
	,__bindGLTexture2D: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_2D,texture);
		this.__contextState.__currentGLTexture2D = texture;
	}
	,__bindGLTextureCubeMap: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,texture);
		this.__contextState.__currentGLTextureCubeMap = texture;
	}
	,__dispose: function() {
		this.driverInfo += " (Disposed)";
		if(this.__stage3D != null) {
			this.__stage3D.__indexBuffer = null;
			this.__stage3D.__vertexBuffer = null;
			this.__stage3D.context3D = null;
			this.__stage3D = null;
		}
		this.__backBufferTexture = null;
		this.__context = null;
		this.__renderStage3DProgram = null;
		this.__fragmentConstants = null;
		this.__frontBufferTexture = null;
		this.__positionScale = null;
		this.__present = false;
		this.__quadIndexBuffer = null;
		this.__stage = null;
		this.__vertexConstants = null;
	}
	,__drawTriangles: function(firstIndex,count) {
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			} else if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		this.gl.drawArrays(this.gl.TRIANGLES,firstIndex,count);
	}
	,__flushGL: function() {
		this.__flushGLProgram();
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		this.__flushGLBlend();
		if(this.__contextState.colorMaskRed != this.__state.colorMaskRed || this.__contextState.colorMaskGreen != this.__state.colorMaskGreen || this.__contextState.colorMaskBlue != this.__state.colorMaskBlue || this.__contextState.colorMaskAlpha != this.__state.colorMaskAlpha) {
			this.gl.colorMask(this.__state.colorMaskRed,this.__state.colorMaskGreen,this.__state.colorMaskBlue,this.__state.colorMaskAlpha);
			this.__contextState.colorMaskRed = this.__state.colorMaskRed;
			this.__contextState.colorMaskGreen = this.__state.colorMaskGreen;
			this.__contextState.colorMaskBlue = this.__state.colorMaskBlue;
			this.__contextState.colorMaskAlpha = this.__state.colorMaskAlpha;
		}
		this.__flushGLCulling();
		this.__flushGLDepth();
		this.__flushGLScissor();
		this.__flushGLStencil();
		this.__flushGLTextures();
	}
	,__flushGLBlend: function() {
		if(this.__contextState.blendDestinationRGBFactor != this.__state.blendDestinationRGBFactor || this.__contextState.blendSourceRGBFactor != this.__state.blendSourceRGBFactor || this.__contextState.blendDestinationAlphaFactor != this.__state.blendDestinationAlphaFactor || this.__contextState.blendSourceAlphaFactor != this.__state.blendSourceAlphaFactor) {
			this.__setGLBlend(true);
			if(this.__state.blendDestinationRGBFactor == this.__state.blendDestinationAlphaFactor && this.__state.blendSourceRGBFactor == this.__state.blendSourceAlphaFactor) {
				this.gl.blendFunc(this.__getGLBlend(this.__state.blendSourceRGBFactor),this.__getGLBlend(this.__state.blendDestinationRGBFactor));
			} else {
				this.gl.blendFuncSeparate(this.__getGLBlend(this.__state.blendSourceRGBFactor),this.__getGLBlend(this.__state.blendDestinationRGBFactor),this.__getGLBlend(this.__state.blendSourceAlphaFactor),this.__getGLBlend(this.__state.blendDestinationAlphaFactor));
			}
			this.__contextState.blendDestinationRGBFactor = this.__state.blendDestinationRGBFactor;
			this.__contextState.blendSourceRGBFactor = this.__state.blendSourceRGBFactor;
			this.__contextState.blendDestinationAlphaFactor = this.__state.blendDestinationAlphaFactor;
			this.__contextState.blendSourceAlphaFactor = this.__state.blendSourceAlphaFactor;
		}
	}
	,__flushGLColor: function() {
		if(this.__contextState.colorMaskRed != this.__state.colorMaskRed || this.__contextState.colorMaskGreen != this.__state.colorMaskGreen || this.__contextState.colorMaskBlue != this.__state.colorMaskBlue || this.__contextState.colorMaskAlpha != this.__state.colorMaskAlpha) {
			this.gl.colorMask(this.__state.colorMaskRed,this.__state.colorMaskGreen,this.__state.colorMaskBlue,this.__state.colorMaskAlpha);
			this.__contextState.colorMaskRed = this.__state.colorMaskRed;
			this.__contextState.colorMaskGreen = this.__state.colorMaskGreen;
			this.__contextState.colorMaskBlue = this.__state.colorMaskBlue;
			this.__contextState.colorMaskAlpha = this.__state.colorMaskAlpha;
		}
	}
	,__flushGLCulling: function() {
		if(this.__contextState.culling != this.__state.culling) {
			if(this.__state.culling == 3) {
				this.__setGLCullFace(false);
			} else {
				this.__setGLCullFace(true);
				switch(this.__state.culling) {
				case 0:
					this.gl.cullFace(this.gl.BACK);
					break;
				case 1:
					this.gl.cullFace(this.gl.FRONT);
					break;
				case 2:
					this.gl.cullFace(this.gl.FRONT_AND_BACK);
					break;
				case 3:
					break;
				default:
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
				}
			}
			this.__contextState.culling = this.__state.culling;
		}
	}
	,__flushGLDepth: function() {
		var depthMask = this.__state.depthMask && (this.__state.renderToTexture != null ? this.__state.renderToTextureDepthStencil : this.__state.backBufferEnableDepthAndStencil);
		if(this.__contextState.depthMask != depthMask) {
			this.gl.depthMask(depthMask);
			this.__contextState.depthMask = depthMask;
		}
		if(this.__contextState.depthCompareMode != this.__state.depthCompareMode) {
			switch(this.__state.depthCompareMode) {
			case 0:
				this.gl.depthFunc(this.gl.ALWAYS);
				break;
			case 1:
				this.gl.depthFunc(this.gl.EQUAL);
				break;
			case 2:
				this.gl.depthFunc(this.gl.GREATER);
				break;
			case 3:
				this.gl.depthFunc(this.gl.GEQUAL);
				break;
			case 4:
				this.gl.depthFunc(this.gl.LESS);
				break;
			case 5:
				this.gl.depthFunc(this.gl.LEQUAL);
				break;
			case 6:
				this.gl.depthFunc(this.gl.NEVER);
				break;
			case 7:
				this.gl.depthFunc(this.gl.NOTEQUAL);
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
			}
			this.__contextState.depthCompareMode = this.__state.depthCompareMode;
		}
	}
	,__flushGLFramebuffer: function() {
		if(this.__state.renderToTexture != null) {
			if(this.__contextState.renderToTexture != this.__state.renderToTexture || this.__contextState.renderToTextureSurfaceSelector != this.__state.renderToTextureSurfaceSelector) {
				var framebuffer = this.__state.renderToTexture.__getGLFramebuffer(this.__state.renderToTextureDepthStencil,this.__state.renderToTextureAntiAlias,this.__state.renderToTextureSurfaceSelector);
				this.__bindGLFramebuffer(framebuffer);
				this.__contextState.renderToTexture = this.__state.renderToTexture;
				this.__contextState.renderToTextureAntiAlias = this.__state.renderToTextureAntiAlias;
				this.__contextState.renderToTextureDepthStencil = this.__state.renderToTextureDepthStencil;
				this.__contextState.renderToTextureSurfaceSelector = this.__state.renderToTextureSurfaceSelector;
			}
			this.__setGLDepthTest(this.__state.renderToTextureDepthStencil);
			this.__setGLStencilTest(this.__state.renderToTextureDepthStencil);
			this.__setGLFrontFace(true);
		} else {
			if(this.__stage == null && this.backBufferWidth == 0 && this.backBufferHeight == 0) {
				throw haxe_Exception.thrown(new openfl_errors_Error("Context3D backbuffer has not been configured"));
			}
			if(this.__contextState.renderToTexture != null || this.__contextState.__currentGLFramebuffer != this.__state.__primaryGLFramebuffer || this.__contextState.backBufferEnableDepthAndStencil != this.__state.backBufferEnableDepthAndStencil) {
				this.__bindGLFramebuffer(this.__state.__primaryGLFramebuffer);
				this.__contextState.renderToTexture = null;
				this.__contextState.backBufferEnableDepthAndStencil = this.__state.backBufferEnableDepthAndStencil;
			}
			this.__setGLDepthTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLStencilTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLFrontFace(this.__stage.context3D != this);
		}
	}
	,__flushGLProgram: function() {
		var shader = this.__state.shader;
		var program = this.__state.program;
		if(this.__contextState.shader != shader) {
			if(this.__contextState.shader != null) {
				this.__contextState.shader.__disable();
			}
			if(shader != null) {
				shader.__enable();
			}
			this.__contextState.shader = shader;
		}
		if(this.__contextState.program != program) {
			if(this.__contextState.program != null) {
				this.__contextState.program.__disable();
			}
			if(program != null) {
				program.__enable();
			}
			this.__contextState.program = program;
		}
		if(program != null && program.__format == 0) {
			this.__positionScale[1] = this.__stage.context3D == this && this.__state.renderToTexture == null ? 1.0 : -1.0;
			program.__setPositionScale(this.__positionScale);
		}
	}
	,__flushGLScissor: function() {
		if(!this.__state.scissorEnabled) {
			if(this.__contextState.scissorEnabled != this.__state.scissorEnabled) {
				this.__setGLScissorTest(false);
				this.__contextState.scissorEnabled = false;
			}
		} else {
			this.__setGLScissorTest(true);
			this.__contextState.scissorEnabled = true;
			var scissorX = this.__state.scissorRectangle.x | 0;
			var scissorY = this.__state.scissorRectangle.y | 0;
			var scissorWidth = this.__state.scissorRectangle.width | 0;
			var scissorHeight = this.__state.scissorRectangle.height | 0;
			if(this.__state.renderToTexture == null && this.__stage3D == null) {
				var contextHeight = this.__stage.window.__height * this.__stage.window.__scale | 0;
				scissorY = contextHeight - (this.__state.scissorRectangle.height | 0) - scissorY;
			}
			if(this.__contextState.scissorRectangle.x != scissorX || this.__contextState.scissorRectangle.y != scissorY || this.__contextState.scissorRectangle.width != scissorWidth || this.__contextState.scissorRectangle.height != scissorHeight) {
				this.gl.scissor(scissorX,scissorY,scissorWidth,scissorHeight);
				this.__contextState.scissorRectangle.setTo(scissorX,scissorY,scissorWidth,scissorHeight);
			}
		}
	}
	,__flushGLStencil: function() {
		if(this.__contextState.stencilTriangleFace != this.__state.stencilTriangleFace || this.__contextState.stencilPass != this.__state.stencilPass || this.__contextState.stencilDepthFail != this.__state.stencilDepthFail || this.__contextState.stencilFail != this.__state.stencilFail) {
			this.gl.stencilOpSeparate(this.__getGLTriangleFace(this.__state.stencilTriangleFace),this.__getGLStencilAction(this.__state.stencilFail),this.__getGLStencilAction(this.__state.stencilDepthFail),this.__getGLStencilAction(this.__state.stencilPass));
			this.__contextState.stencilTriangleFace = this.__state.stencilTriangleFace;
			this.__contextState.stencilPass = this.__state.stencilPass;
			this.__contextState.stencilDepthFail = this.__state.stencilDepthFail;
			this.__contextState.stencilFail = this.__state.stencilFail;
		}
		if(this.__contextState.stencilWriteMask != this.__state.stencilWriteMask) {
			this.gl.stencilMask(this.__state.stencilWriteMask);
			this.__contextState.stencilWriteMask = this.__state.stencilWriteMask;
		}
		if(this.__contextState.stencilCompareMode != this.__state.stencilCompareMode || this.__contextState.stencilReferenceValue != this.__state.stencilReferenceValue || this.__contextState.stencilReadMask != this.__state.stencilReadMask) {
			this.gl.stencilFunc(this.__getGLCompareMode(this.__state.stencilCompareMode),this.__state.stencilReferenceValue,this.__state.stencilReadMask);
			this.__contextState.stencilCompareMode = this.__state.stencilCompareMode;
			this.__contextState.stencilReferenceValue = this.__state.stencilReferenceValue;
			this.__contextState.stencilReadMask = this.__state.stencilReadMask;
		}
	}
	,__flushGLTextures: function() {
		var sampler = 0;
		var texture;
		var samplerState;
		var _g = 0;
		var _g1 = this.__state.textures.length;
		while(_g < _g1) {
			var i = _g++;
			texture = this.__state.textures[i];
			samplerState = this.__state.samplerStates[i];
			if(samplerState == null) {
				this.__state.samplerStates[i] = new openfl_display__$internal_SamplerState();
				samplerState = this.__state.samplerStates[i];
			}
			this.gl.activeTexture(this.gl.TEXTURE0 + sampler);
			if(texture != null) {
				if(texture.__textureTarget == this.gl.TEXTURE_2D) {
					this.__bindGLTexture2D(texture.__getTexture());
				} else {
					this.__bindGLTextureCubeMap(texture.__getTexture());
				}
				this.__contextState.textures[i] = texture;
				texture.__setSamplerState(samplerState);
			} else {
				this.__bindGLTexture2D(null);
			}
			if(this.__state.program != null && this.__state.program.__format == 0 && samplerState.textureAlpha) {
				this.gl.activeTexture(this.gl.TEXTURE0 + sampler + 4);
				if(texture != null && texture.__alphaTexture != null) {
					if(texture.__alphaTexture.__textureTarget == this.gl.TEXTURE_2D) {
						this.__bindGLTexture2D(texture.__alphaTexture.__getTexture());
					} else {
						this.__bindGLTextureCubeMap(texture.__alphaTexture.__getTexture());
					}
					texture.__alphaTexture.__setSamplerState(samplerState);
					this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,1);
				} else {
					this.__bindGLTexture2D(null);
					if(this.__state.program.__agalAlphaSamplerEnabled[sampler] != null) {
						this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,0);
					}
				}
			}
			++sampler;
		}
	}
	,__flushGLViewport: function() {
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this) {
				var x = this.__stage3D == null ? 0 : this.__stage3D.get_x() | 0;
				var y = this.__stage.window.__height * this.__stage.window.__scale - this.backBufferHeight - (this.__stage3D == null ? 0 : this.__stage3D.get_y()) | 0;
				this.gl.viewport(x,y,this.backBufferWidth,this.backBufferHeight);
			} else {
				this.gl.viewport(0,0,this.backBufferWidth,this.backBufferHeight);
			}
		} else {
			var width = 0;
			var height = 0;
			if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_Texture)) {
				var texture2D = this.__state.renderToTexture;
				width = texture2D.__width;
				height = texture2D.__height;
			} else if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_RectangleTexture)) {
				var rectTexture = this.__state.renderToTexture;
				width = rectTexture.__width;
				height = rectTexture.__height;
			} else if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_CubeTexture)) {
				var cubeTexture = this.__state.renderToTexture;
				width = cubeTexture.__size;
				height = cubeTexture.__size;
			}
			this.gl.viewport(0,0,width,height);
		}
	}
	,__getGLBlend: function(blendFactor) {
		switch(blendFactor) {
		case 0:
			return this.gl.DST_ALPHA;
		case 1:
			return this.gl.DST_COLOR;
		case 2:
			return this.gl.ONE;
		case 3:
			return this.gl.ONE_MINUS_DST_ALPHA;
		case 4:
			return this.gl.ONE_MINUS_DST_COLOR;
		case 5:
			return this.gl.ONE_MINUS_SRC_ALPHA;
		case 6:
			return this.gl.ONE_MINUS_SRC_COLOR;
		case 7:
			return this.gl.SRC_ALPHA;
		case 8:
			return this.gl.SRC_COLOR;
		case 9:
			return this.gl.ZERO;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
	}
	,__getGLCompareMode: function(mode) {
		switch(mode) {
		case 0:
			return this.gl.ALWAYS;
		case 1:
			return this.gl.EQUAL;
		case 2:
			return this.gl.GREATER;
		case 3:
			return this.gl.GEQUAL;
		case 4:
			return this.gl.LESS;
		case 5:
			return this.gl.LEQUAL;
		case 6:
			return this.gl.NEVER;
		case 7:
			return this.gl.NOTEQUAL;
		default:
			return this.gl.EQUAL;
		}
	}
	,__getGLStencilAction: function(action) {
		switch(action) {
		case 0:
			return this.gl.DECR;
		case 1:
			return this.gl.DECR_WRAP;
		case 2:
			return this.gl.INCR;
		case 3:
			return this.gl.INCR_WRAP;
		case 4:
			return this.gl.INVERT;
		case 5:
			return this.gl.KEEP;
		case 6:
			return this.gl.REPLACE;
		case 7:
			return this.gl.ZERO;
		default:
			return this.gl.KEEP;
		}
	}
	,__getGLTriangleFace: function(face) {
		switch(face) {
		case 0:
			return this.gl.BACK;
		case 1:
			return this.gl.FRONT;
		case 2:
			return this.gl.FRONT_AND_BACK;
		case 3:
			return this.gl.NONE;
		default:
			return this.gl.FRONT_AND_BACK;
		}
	}
	,__renderStage3D: function(stage3D) {
		var context = stage3D.context3D;
		if(context != null && context != this && context.__frontBufferTexture != null && stage3D.visible && this.backBufferHeight > 0 && this.backBufferWidth > 0) {
			if(this.__renderStage3DProgram == null) {
				var vertexAssembler = new openfl_utils_AGALMiniAssembler();
				vertexAssembler.assemble(openfl_display3D_Context3DProgramType.toString(1),"m44 op, va0, vc0\n" + "mov v0, va1");
				var fragmentAssembler = new openfl_utils_AGALMiniAssembler();
				fragmentAssembler.assemble(openfl_display3D_Context3DProgramType.toString(0),"tex ft1, v0, fs0 <2d,nearest,nomip>\n" + "mov oc, ft1");
				this.__renderStage3DProgram = this.createProgram();
				this.__renderStage3DProgram.upload(vertexAssembler.agalcode,fragmentAssembler.agalcode);
			}
			this.setProgram(this.__renderStage3DProgram);
			this.setBlendFactors(2,9);
			this.setColorMask(true,true,true,true);
			this.setCulling(3);
			this.setDepthTest(false,0);
			this.setStencilActions();
			this.setStencilReferenceValue(0,0,0);
			this.setScissorRectangle(null);
			this.setTextureAt(0,context.__frontBufferTexture);
			this.setVertexBufferAt(0,stage3D.__vertexBuffer,0,3);
			this.setVertexBufferAt(1,stage3D.__vertexBuffer,3,2);
			this.setProgramConstantsFromMatrix(1,0,stage3D.__renderTransform,true);
			this.drawTriangles(stage3D.__indexBuffer);
			this.__present = true;
		}
	}
	,__setGLBlend: function(enable) {
		if(this.__contextState.__enableGLBlend != enable) {
			if(enable) {
				this.gl.enable(this.gl.BLEND);
			} else {
				this.gl.disable(this.gl.BLEND);
			}
			this.__contextState.__enableGLBlend = enable;
		}
	}
	,__setGLBlendEquation: function(value) {
		if(this.__contextState.__glBlendEquation != value) {
			this.gl.blendEquation(value);
			this.__contextState.__glBlendEquation = value;
		}
	}
	,__setGLCullFace: function(enable) {
		if(this.__contextState.__enableGLCullFace != enable) {
			if(enable) {
				this.gl.enable(this.gl.CULL_FACE);
			} else {
				this.gl.disable(this.gl.CULL_FACE);
			}
			this.__contextState.__enableGLCullFace = enable;
		}
	}
	,__setGLDepthTest: function(enable) {
		if(this.__contextState.__enableGLDepthTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.DEPTH_TEST);
			} else {
				this.gl.disable(this.gl.DEPTH_TEST);
			}
			this.__contextState.__enableGLDepthTest = enable;
		}
	}
	,__setGLFrontFace: function(counterClockWise) {
		if(this.__contextState.__frontFaceGLCCW != counterClockWise) {
			this.gl.frontFace(counterClockWise ? this.gl.CCW : this.gl.CW);
			this.__contextState.__frontFaceGLCCW = counterClockWise;
		}
	}
	,__setGLScissorTest: function(enable) {
		if(this.__contextState.__enableGLScissorTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.SCISSOR_TEST);
			} else {
				this.gl.disable(this.gl.SCISSOR_TEST);
			}
			this.__contextState.__enableGLScissorTest = enable;
		}
	}
	,__setGLStencilTest: function(enable) {
		if(this.__contextState.__enableGLStencilTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.STENCIL_TEST);
			} else {
				this.gl.disable(this.gl.STENCIL_TEST);
			}
			this.__contextState.__enableGLStencilTest = enable;
		}
	}
	,get_enableErrorChecking: function() {
		return this.__enableErrorChecking;
	}
	,set_enableErrorChecking: function(value) {
		return this.__enableErrorChecking = value;
	}
	,get_totalGPUMemory: function() {
		if(openfl_display3D_Context3D.__glMemoryCurrentAvailable != -1) {
			var current = this.gl.getParameter(openfl_display3D_Context3D.__glMemoryCurrentAvailable);
			var total = this.gl.getParameter(openfl_display3D_Context3D.__glMemoryTotalAvailable);
			if(total > 0) {
				return (total - current) * 1024;
			}
		}
		return 0;
	}
	,__class__: openfl_display3D_Context3D
	,__properties__: {get_totalGPUMemory:"get_totalGPUMemory",set_enableErrorChecking:"set_enableErrorChecking",get_enableErrorChecking:"get_enableErrorChecking"}
});
var openfl_display3D_Context3DBlendFactor = {};
openfl_display3D_Context3DBlendFactor.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D_Context3DBlendFactor.toString = function(this1) {
	switch(this1) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D_Context3DBufferUsage = {};
openfl_display3D_Context3DBufferUsage.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DBufferUsage.toString = function(this1) {
	switch(this1) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D_Context3DCompareMode = {};
openfl_display3D_Context3DCompareMode.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D_Context3DCompareMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D_Context3DMipFilter = {};
openfl_display3D_Context3DMipFilter.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D_Context3DMipFilter.toString = function(this1) {
	switch(this1) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D_Context3DProfile = {};
openfl_display3D_Context3DProfile.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	case "standardExtended":
		return 5;
	default:
		return null;
	}
};
openfl_display3D_Context3DProfile.toString = function(this1) {
	switch(this1) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	case 5:
		return "standardExtended";
	default:
		return null;
	}
};
var openfl_display3D_Context3DProgramFormat = {};
openfl_display3D_Context3DProgramFormat.fromString = function(value) {
	switch(value) {
	case "agal":
		return 0;
	case "glsl":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DProgramFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "agal";
	case 1:
		return "glsl";
	default:
		return null;
	}
};
var openfl_display3D_Context3DProgramType = {};
openfl_display3D_Context3DProgramType.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DProgramType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D_Context3DRenderMode = {};
openfl_display3D_Context3DRenderMode.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DRenderMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D_Context3DStencilAction = {};
openfl_display3D_Context3DStencilAction.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D_Context3DStencilAction.toString = function(this1) {
	switch(this1) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D_Context3DTextureFilter = {};
openfl_display3D_Context3DTextureFilter.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D_Context3DTextureFilter.toString = function(this1) {
	switch(this1) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D_Context3DTextureFormat = {};
openfl_display3D_Context3DTextureFormat.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D_Context3DTextureFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D_Context3DTriangleFace = {};
openfl_display3D_Context3DTriangleFace.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D_Context3DTriangleFace.toString = function(this1) {
	switch(this1) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D_Context3DVertexBufferFormat = {};
openfl_display3D_Context3DVertexBufferFormat.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D_Context3DVertexBufferFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D_Context3DWrapMode = {};
openfl_display3D_Context3DWrapMode.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_v":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_v":
		return 3;
	default:
		return null;
	}
};
openfl_display3D_Context3DWrapMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_v";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_v";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	var gl = this.__context.gl;
	this.__id = gl.createBuffer();
	this.__usage = bufferUsage == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = "openfl.display3D.IndexBuffer3D";
openfl_display3D_IndexBuffer3D.prototype = {
	dispose: function() {
		var gl = this.__context.gl;
		gl.deleteBuffer(this.__id);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		var offset = byteArrayOffset + startOffset * 2;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = offset;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint16Array(elements);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(buffer != null) {
			if(count == null) {
				this1 = new Uint16Array(buffer,byteoffset);
			} else {
				this1 = new Uint16Array(buffer,byteoffset,count);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLElementArrayBuffer(this.__id);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startOffset,count) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var length = startOffset + count;
		var existingUInt16Array = this.__tempUInt16Array;
		if(this.__tempUInt16Array == null || this.__tempUInt16Array.length < count) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(count != null) {
				this1 = new Uint16Array(count);
			} else if(array != null) {
				this1 = new Uint16Array(array);
			} else if(vector != null) {
				this1 = new Uint16Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint16Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint16Array(buffer,0);
				} else {
					this1 = new Uint16Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.__tempUInt16Array = this1;
			if(existingUInt16Array != null) {
				this.__tempUInt16Array.set(existingUInt16Array);
			}
		}
		var _g = startOffset;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.__tempUInt16Array[i - startOffset] = data.get(i);
		}
		this.uploadFromTypedArray(this.__tempUInt16Array);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D,format) {
	this.__context = context3D;
	this.__format = format;
	if(this.__format == 0) {
		this.__agalSamplerUsageMask = 0;
		this.__agalUniforms = new haxe_ds_List();
		this.__agalSamplerUniforms = new haxe_ds_List();
		this.__agalAlphaSamplerUniforms = new haxe_ds_List();
		this.__agalAlphaSamplerEnabled = [];
	} else {
		this.__glslAttribNames = [];
		this.__glslAttribTypes = [];
		this.__glslSamplerNames = [];
		this.__glslUniformLocations = [];
		this.__glslUniformNames = [];
		this.__glslUniformTypes = [];
	}
	this.__samplerStates = [];
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = "openfl.display3D.Program3D";
openfl_display3D_Program3D.prototype = {
	dispose: function() {
		this.__deleteShaders();
	}
	,getAttributeIndex: function(name) {
		if(this.__format == 0) {
			if(StringTools.startsWith(name,"va")) {
				return Std.parseInt(name.substring(2));
			} else {
				return -1;
			}
		} else {
			var _g = 0;
			var _g1 = this.__glslAttribNames.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.__glslAttribNames[i] == name) {
					return i;
				}
			}
			return -1;
		}
	}
	,getConstantIndex: function(name) {
		if(this.__format == 0) {
			if(StringTools.startsWith(name,"vc")) {
				return Std.parseInt(name.substring(2));
			} else if(StringTools.startsWith(name,"fc")) {
				return Std.parseInt(name.substring(2));
			} else {
				return -1;
			}
		} else {
			var _g = 0;
			var _g1 = this.__glslUniformNames.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.__glslUniformNames[i] == name) {
					return this.__glslUniformLocations[i];
				}
			}
			return -1;
		}
	}
	,upload: function(vertexProgram,fragmentProgram) {
		if(this.__format != 0) {
			return;
		}
		var samplerStates = [];
		var glslVertex = openfl_display3D__$internal_AGALConverter.convertToGLSL(vertexProgram,null);
		var glslFragment = openfl_display3D__$internal_AGALConverter.convertToGLSL(fragmentProgram,samplerStates);
		if(lime_utils_Log.level == 5) {
			lime_utils_Log.info(glslVertex,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 399, className : "openfl.display3D.Program3D", methodName : "upload"});
			lime_utils_Log.info(glslFragment,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 400, className : "openfl.display3D.Program3D", methodName : "upload"});
		}
		this.__deleteShaders();
		this.__uploadFromGLSL(glslVertex,glslFragment);
		this.__buildAGALUniformList();
		var _g = 0;
		var _g1 = samplerStates.length;
		while(_g < _g1) {
			var i = _g++;
			this.__samplerStates[i] = samplerStates[i];
		}
	}
	,uploadSources: function(vertexSource,fragmentSource) {
		if(this.__format != 1) {
			return;
		}
		var prefix = "#ifdef GL_ES\n\t\t\t#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\t\tprecision highp float;\n\t\t\t#else\n\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t#endif\n\t\t\t";
		var vertex = prefix + vertexSource;
		var fragment = prefix + fragmentSource;
		if(vertex == this.__glVertexSource && fragment == this.__glFragmentSource) {
			return;
		}
		this.__processGLSLData(vertexSource,"attribute");
		this.__processGLSLData(vertexSource,"uniform");
		this.__processGLSLData(fragmentSource,"uniform");
		this.__deleteShaders();
		this.__uploadFromGLSL(vertex,fragment);
		var samplerNames = this.__glslSamplerNames;
		var attribNames = this.__glslAttribNames;
		var attribTypes = this.__glslAttribTypes;
		var uniformNames = this.__glslUniformNames;
		this.__glslSamplerNames = [];
		this.__glslAttribNames = [];
		this.__glslAttribTypes = [];
		this.__glslUniformLocations = [];
		var gl = this.__context.gl;
		var index;
		var location;
		var _g = 0;
		while(_g < samplerNames.length) {
			var name = samplerNames[_g];
			++_g;
			index = gl.getUniformLocation(this.__glProgram,name);
			this.__glslSamplerNames[index] = name;
		}
		var _g = 0;
		var _g1 = attribNames.length;
		while(_g < _g1) {
			var i = _g++;
			index = gl.getAttribLocation(this.__glProgram,attribNames[i]);
			this.__glslAttribNames[index] = attribNames[i];
			this.__glslAttribTypes[index] = attribTypes[i];
		}
		var _g = 0;
		var _g1 = uniformNames.length;
		while(_g < _g1) {
			var i = _g++;
			location = gl.getUniformLocation(this.__glProgram,uniformNames[i]);
			this.__glslUniformLocations[i] = location;
		}
	}
	,__buildAGALUniformList: function() {
		if(this.__format == 1) {
			return;
		}
		var gl = this.__context.gl;
		this.__agalUniforms.clear();
		this.__agalSamplerUniforms.clear();
		this.__agalAlphaSamplerUniforms.clear();
		this.__agalAlphaSamplerEnabled = [];
		this.__agalSamplerUsageMask = 0;
		var numActive = 0;
		numActive = gl.getProgramParameter(this.__glProgram,gl.ACTIVE_UNIFORMS);
		var vertexUniforms = new haxe_ds_List();
		var fragmentUniforms = new haxe_ds_List();
		var _g = 0;
		var _g1 = numActive;
		while(_g < _g1) {
			var i = _g++;
			var info = gl.getActiveUniform(this.__glProgram,i);
			var name = info.name;
			var size = info.size;
			var uniformType = info.type;
			var uniform = new openfl_display3D_Uniform(this.__context);
			uniform.name = name;
			uniform.size = size;
			uniform.type = uniformType;
			uniform.location = gl.getUniformLocation(this.__glProgram,uniform.name);
			var indexBracket = uniform.name.indexOf("[");
			if(indexBracket >= 0) {
				uniform.name = uniform.name.substring(0,indexBracket);
			}
			switch(uniform.type) {
			case 35674:
				uniform.regCount = 2;
				break;
			case 35675:
				uniform.regCount = 3;
				break;
			case 35676:
				uniform.regCount = 4;
				break;
			default:
				uniform.regCount = 1;
			}
			uniform.regCount *= uniform.size;
			this.__agalUniforms.add(uniform);
			if(uniform.name == "vcPositionScale") {
				this.__agalPositionScale = uniform;
			} else if(StringTools.startsWith(uniform.name,"vc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__vertexConstants;
				vertexUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"fc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__fragmentConstants;
				fragmentUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && uniform.name.indexOf("alpha") == -1) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalSamplerUniforms.add(uniform);
				var _g2 = 0;
				var _g3 = uniform.regCount;
				while(_g2 < _g3) {
					var reg = _g2++;
					this.__agalSamplerUsageMask |= 1 << uniform.regIndex + reg;
				}
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
				var len = uniform.name.indexOf("_") - 7;
				uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
				this.__agalAlphaSamplerUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alphaEnabled")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalAlphaSamplerEnabled[uniform.regIndex] = uniform;
			}
			if(lime_utils_Log.level == 5) {
				lime_utils_Log.verbose("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 577, className : "openfl.display3D.Program3D", methodName : "__buildAGALUniformList"});
			}
		}
		this.__agalVertexUniformMap = new openfl_display3D_UniformMap(Lambda.array(vertexUniforms));
		this.__agalFragmentUniformMap = new openfl_display3D_UniformMap(Lambda.array(fragmentUniforms));
	}
	,__deleteShaders: function() {
		var gl = this.__context.gl;
		if(this.__glProgram != null) {
			this.__glProgram = null;
		}
		if(this.__glVertexShader != null) {
			gl.deleteShader(this.__glVertexShader);
			this.__glVertexShader = null;
		}
		if(this.__glFragmentShader != null) {
			gl.deleteShader(this.__glFragmentShader);
			this.__glFragmentShader = null;
		}
	}
	,__disable: function() {
		var tmp = this.__format == 1;
	}
	,__enable: function() {
		var gl = this.__context.gl;
		gl.useProgram(this.__glProgram);
		if(this.__format == 0) {
			this.__agalVertexUniformMap.markAllDirty();
			this.__agalFragmentUniformMap.markAllDirty();
			var _g_head = this.__agalSamplerUniforms.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var sampler = val;
				if(sampler.regCount == 1) {
					gl.uniform1i(sampler.location,sampler.regIndex);
				} else {
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
				}
			}
			var _g1_head = this.__agalAlphaSamplerUniforms.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var sampler = val;
				if(sampler.regCount == 1) {
					gl.uniform1i(sampler.location,sampler.regIndex);
				} else {
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
				}
			}
		}
	}
	,__flush: function() {
		if(this.__format == 0) {
			this.__agalVertexUniformMap.flush();
			this.__agalFragmentUniformMap.flush();
		} else {
			return;
		}
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates[sampler];
	}
	,__markDirty: function(isVertex,index,count) {
		if(this.__format == 1) {
			return;
		}
		if(isVertex) {
			this.__agalVertexUniformMap.markDirty(index,count);
		} else {
			this.__agalFragmentUniformMap.markDirty(index,count);
		}
	}
	,__processGLSLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			if(StringTools.startsWith(type,"sampler")) {
				this.__glslSamplerNames.push(name);
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				if(storageType == "uniform") {
					this.__glslUniformNames.push(name);
					this.__glslUniformTypes.push(parameterType);
				} else {
					this.__glslAttribNames.push(name);
					this.__glslAttribTypes.push(parameterType);
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__format == 1) {
			return;
		}
		if(this.__agalPositionScale != null) {
			var gl = this.__context.gl;
			var location = this.__agalPositionScale.location;
			var data = positionScale;
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
		}
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates[sampler] = state;
	}
	,__uploadFromGLSL: function(vertexShaderSource,fragmentShaderSource) {
		var gl = this.__context.gl;
		this.__glVertexSource = vertexShaderSource;
		this.__glFragmentSource = fragmentShaderSource;
		this.__glVertexShader = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(this.__glVertexShader,vertexShaderSource);
		gl.compileShader(this.__glVertexShader);
		if(gl.getShaderParameter(this.__glVertexShader,gl.COMPILE_STATUS) == 0) {
			var message = "Error compiling vertex shader";
			message += "\n" + gl.getShaderInfoLog(this.__glVertexShader);
			message += "\n" + vertexShaderSource;
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 869, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glFragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(this.__glFragmentShader,fragmentShaderSource);
		gl.compileShader(this.__glFragmentShader);
		if(gl.getShaderParameter(this.__glFragmentShader,gl.COMPILE_STATUS) == 0) {
			var message = "Error compiling fragment shader";
			message += "\n" + gl.getShaderInfoLog(this.__glFragmentShader);
			message += "\n" + fragmentShaderSource;
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 881, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glProgram = gl.createProgram();
		if(this.__format == 0) {
			var _g = 0;
			while(_g < 16) {
				var i = _g++;
				var name = "va" + i;
				if(vertexShaderSource.indexOf(" " + name) != -1) {
					gl.bindAttribLocation(this.__glProgram,i,name);
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.__glslAttribNames;
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				if(name.indexOf("Position") > -1 && StringTools.startsWith(name,"openfl_")) {
					gl.bindAttribLocation(this.__glProgram,0,name);
					break;
				}
			}
		}
		gl.attachShader(this.__glProgram,this.__glVertexShader);
		gl.attachShader(this.__glProgram,this.__glFragmentShader);
		gl.linkProgram(this.__glProgram);
		if(gl.getProgramParameter(this.__glProgram,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(this.__glProgram);
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 922, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function(context) {
	this.context = context;
	this.isDirty = true;
	var this1 = new lime_utils_BytePointerData(null,0);
	this.regDataPointer = this1;
};
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = "openfl.display3D.Uniform";
openfl_display3D_Uniform.prototype = {
	flush: function() {
		var gl = this.context.gl;
		var index = this.regIndex * 4;
		switch(this.type) {
		case 35664:
			lime_graphics_WebGL2RenderContext.uniform2fv(gl,this.location,this.regData.subarray(index,index + this.regCount * 2));
			break;
		case 35665:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 3);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform3fv(location,data,srcOffset,null);
			} else {
				gl.uniform3fv(location,data);
			}
			break;
		case 35666:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 4);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
			break;
		case 35674:
			lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 2 * 2));
			break;
		case 35675:
			lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 3 * 3));
			break;
		case 35676:
			lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 4 * 4));
			break;
		default:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 4);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
		}
	}
	,__getUniformRegisters: function(index,size) {
		return this.regData.subarray(index,index + size);
	}
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl_Vector.toObjectVector(null,total);
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = uniform.regCount;
		while(_g2 < _g3) {
			var i = _g2++;
			this.__registerLookup.set(uniform.regIndex + i,uniform);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = "openfl.display3D.UniformMap";
openfl_display3D_UniformMap.prototype = {
	flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.get_length()) {
			end = this.__registerLookup.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	var gl = this.__context.gl;
	this.__id = gl.createBuffer();
	this.__stride = this.__vertexSize * 4;
	this.__usage = openfl_display3D_Context3DBufferUsage.fromString(bufferUsage) == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = "openfl.display3D.VertexBuffer3D";
openfl_display3D_VertexBuffer3D.prototype = {
	dispose: function() {
		var gl = this.__context.gl;
		gl.deleteBuffer(this.__id);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		var offset = byteArrayOffset + startVertex * this.__stride;
		var length = numVertices * this.__vertexSize;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = offset;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(length == null) {
				this1 = new Float32Array(buffer,byteoffset);
			} else {
				this1 = new Float32Array(buffer,byteoffset,length);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this1));
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLArrayBuffer(this.__id);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var start = startVertex * this.__vertexSize;
		var count = numVertices * this.__vertexSize;
		var length = start + count;
		var existingFloat32Array = this.__tempFloat32Array;
		if(this.__tempFloat32Array == null || this.__tempFloat32Array.length < count) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(count != null) {
				this1 = new Float32Array(count);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.__tempFloat32Array = this1;
			if(existingFloat32Array != null) {
				this.__tempFloat32Array.set(existingFloat32Array);
			}
		}
		var _g = start;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.__tempFloat32Array[i - start] = data.get(i);
		}
		this.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__tempFloat32Array));
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D__$internal_AGALConverter = function() { };
$hxClasses["openfl.display3D._internal.AGALConverter"] = openfl_display3D__$internal_AGALConverter;
openfl_display3D__$internal_AGALConverter.__name__ = "openfl.display3D._internal.AGALConverter";
openfl_display3D__$internal_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl_display3D__$internal_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
openfl_display3D__$internal_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	var version = agal.readInt();
	if(version != 1) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0 ? openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX : openfl_display3D__$internal__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl_display3D__$internal_RegisterMap();
	var sb_b = "";
	while(true) {
		var a = agal.position;
		if(!UInt.gt(openfl_utils_ByteArray.get_length(agal),a)) {
			break;
		}
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl_display3D__$internal_AGALConverter.readUInt64(agal);
		var source2 = openfl_display3D__$internal_AGALConverter.readUInt64(agal);
		var dr = openfl_display3D__$internal__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl_display3D__$internal__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl_display3D__$internal__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb_b += "\t";
		switch(opcode) {
		case 0:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			var sr = sr1.toGLSL();
			if(sr.indexOf(".") > -1) {
				sb_b += Std.string(dr.toGLSL() + " = 1.0 / " + sr1.toGLSL() + "; // rcp");
			} else {
				sb_b += Std.string(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + "; // rcp");
			}
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb_b += Std.string(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb_b += Std.string(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb_b += Std.string(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb_b += Std.string(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb_b += Std.string(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb_b += Std.string(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb_b += Std.string(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb_b += Std.string(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb_b += Std.string(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb_b += Std.string(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb_b += Std.string(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb_b += Std.string(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb_b += Std.string(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb_b += Std.string("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl_display3D__$internal__$AGALConverter_SamplerRegister.parse(source2,programType);
			switch(sampler.d) {
			case 0:
				if(sampler.t == 2) {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, texture2D(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex\n");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D);
					sb_b += Std.string(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				}
				break;
			case 1:
				if(sampler.t == 2) {
					sr1.sourceMask = 7;
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, textureCube(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 7;
					sb_b += Std.string(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				}
				break;
			}
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb_b += "\n";
	}
	if(openfl_display3D__$internal_AGALConverter.limitedProfile == null) {
		var version = lime_graphics_opengl_GL.context.getParameter(7938);
		openfl_display3D__$internal_AGALConverter.limitedProfile = version.indexOf("OpenGL ES") > -1 || version.indexOf("WebGL") > -1;
	}
	var glsl_b = "";
	glsl_b += Std.string("// AGAL " + (programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX ? "vertex" : "fragment") + " shader\n");
	if(openfl_display3D__$internal_AGALConverter.limitedProfile) {
		glsl_b += "#version 100\n";
		glsl_b += "#ifdef GL_FRAGMENT_PRECISION_HIGH\n";
		glsl_b += "precision highp float;\n";
		glsl_b += "#else\n";
		glsl_b += "precision mediump float;\n";
		glsl_b += "#endif\n";
	} else {
		glsl_b += "#version 120\n";
	}
	glsl_b += Std.string(map.toGLSL(false));
	if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "uniform vec4 vcPositionScale;\n";
	}
	glsl_b += "void main() {\n";
	glsl_b += Std.string(map.toGLSL(true));
	glsl_b += Std.string(sb_b);
	if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "\tgl_Position *= vcPositionScale;\n";
	}
	glsl_b += "}\n";
	return glsl_b;
};
var openfl_display3D__$internal__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.DestRegister"] = openfl_display3D__$internal__$AGALConverter_DestRegister;
openfl_display3D__$internal__$AGALConverter_DestRegister.__name__ = "openfl.display3D._internal._AGALConverter.DestRegister";
openfl_display3D__$internal__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl_display3D__$internal__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl_display3D__$internal__$AGALConverter_DestRegister.prototype = {
	getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str += "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str;
		if(this.type == 3) {
			str = this.programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX ? "gl_Position" : "gl_FragColor";
		} else {
			str = openfl_display3D__$internal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		}
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl_display3D__$internal__$AGALConverter_DestRegister
};
var openfl_display3D__$internal__$AGALConverter_ProgramType = $hxEnums["openfl.display3D._internal._AGALConverter.ProgramType"] = { __ename__ : "openfl.display3D._internal._AGALConverter.ProgramType", __constructs__ : ["VERTEX","FRAGMENT"]
	,VERTEX: {_hx_index:0,__enum__:"openfl.display3D._internal._AGALConverter.ProgramType",toString:$estr}
	,FRAGMENT: {_hx_index:1,__enum__:"openfl.display3D._internal._AGALConverter.ProgramType",toString:$estr}
};
var openfl_display3D__$internal_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl.display3D._internal.RegisterMap"] = openfl_display3D__$internal_RegisterMap;
openfl_display3D__$internal_RegisterMap.__name__ = "openfl.display3D._internal.RegisterMap";
openfl_display3D__$internal_RegisterMap.prototype = {
	add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry = new openfl_display3D__$internal__$AGALConverter_RegisterMapEntry();
		entry.type = type;
		entry.name = name;
		entry.number = number;
		entry.usage = usage;
		this.mEntries.push(entry);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl_display3D__$internal_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl_display3D__$internal_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl_display3D__$internal__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			return a.number - b.number;
		});
		var entry;
		this.mEntries.sort(function(a,b) {
			return js_Boot.__cast(a.type , Int) - js_Boot.__cast(b.type , Int);
		});
		var sb_b = "";
		var _g = 0;
		var _g1 = this.mEntries.length;
		while(_g < _g1) {
			var i = _g++;
			entry = this.mEntries[i];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			switch(entry.type) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
			}
			switch(entry.usage._hx_index) {
			case 0:
				lime_utils_Log.info("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "openfl/display3D/_internal/AGALConverter.hx", lineNumber : 750, className : "openfl.display3D._internal.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 4:
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 6:
				break;
			case 7:
				sb_b += "vec4 ";
				break;
			}
			if(entry.usage == openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA) {
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(entry.name + "[128]");
				sb_b += ";\n";
			} else {
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl_display3D__$internal_RegisterMap
};
var openfl_display3D__$internal__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.RegisterMapEntry"] = openfl_display3D__$internal__$AGALConverter_RegisterMapEntry;
openfl_display3D__$internal__$AGALConverter_RegisterMapEntry.__name__ = "openfl.display3D._internal._AGALConverter.RegisterMapEntry";
openfl_display3D__$internal__$AGALConverter_RegisterMapEntry.prototype = {
	__class__: openfl_display3D__$internal__$AGALConverter_RegisterMapEntry
};
var openfl_display3D__$internal__$AGALConverter_RegisterUsage = $hxEnums["openfl.display3D._internal._AGALConverter.RegisterUsage"] = { __ename__ : "openfl.display3D._internal._AGALConverter.RegisterUsage", __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","SAMPLER_CUBE_ALPHA","VECTOR_4_ARRAY"]
	,UNUSED: {_hx_index:0,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4: {_hx_index:1,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,MATRIX_4_4: {_hx_index:2,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D: {_hx_index:3,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D_ALPHA: {_hx_index:4,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_CUBE: {_hx_index:5,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_CUBE_ALPHA: {_hx_index:6,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4_ARRAY: {_hx_index:7,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
};
var openfl_display3D__$internal__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.SamplerRegister"] = openfl_display3D__$internal__$AGALConverter_SamplerRegister;
openfl_display3D__$internal__$AGALConverter_SamplerRegister.__name__ = "openfl.display3D._internal._AGALConverter.SamplerRegister";
openfl_display3D__$internal__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl_display3D__$internal__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var b = 60;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.f = this_low;
	var b = 56;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.m = this_low;
	var b = 52;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.w = this_low;
	var b = 48;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.s = this_low;
	var b = 44;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.d = this_low;
	var b = 40;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.t = this_low;
	var b = 32;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.type = this_low;
	var b = 16;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.b = this_low;
	var b_high = 0;
	var b_low = 65535;
	var this_high = v.high & b_high;
	var this_low = v.low & b_low;
	sr.n = this_low;
	return sr;
};
openfl_display3D__$internal__$AGALConverter_SamplerRegister.prototype = {
	toGLSL: function() {
		var str = openfl_display3D__$internal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var wrap;
		var filter;
		var mipfilter;
		switch(this.f) {
		case 0:
			filter = 5;
			break;
		case 1:
			filter = 4;
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
		switch(this.m) {
		case 0:
			mipfilter = 2;
			break;
		case 1:
			mipfilter = 1;
			break;
		case 2:
			mipfilter = 0;
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
		switch(this.w) {
		case 0:
			wrap = 0;
			break;
		case 1:
			wrap = 2;
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var textureAlpha = this.t == 2;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		return new openfl_display__$internal_SamplerState(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha);
	}
	,__class__: openfl_display3D__$internal__$AGALConverter_SamplerRegister
};
var openfl_display3D__$internal__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.SourceRegister"] = openfl_display3D__$internal__$AGALConverter_SourceRegister;
openfl_display3D__$internal__$AGALConverter_SourceRegister.__name__ = "openfl.display3D._internal._AGALConverter.SourceRegister";
openfl_display3D__$internal__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl_display3D__$internal__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var b = 63;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 1;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.d = this_low;
	var b = 48;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 3;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.q = this_low;
	var b = 40;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.itype = this_low;
	var b = 32;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.type = this_low;
	var b = 24;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.s = this_low;
	var b = 16;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.o = this_low;
	var b_high = 0;
	var b_low = 65535;
	var this_high = v.high & b_high;
	var this_low = v.low & b_low;
	sr.n = this_low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl_display3D__$internal__$AGALConverter_SourceRegister.prototype = {
	toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			if((this.sourceMask & 1) != 0) {
				switch(this.s & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 2) != 0) {
				switch(this.s >> 2 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 4) != 0) {
				switch(this.s >> 4 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 8) != 0) {
				switch(this.s >> 6 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
		}
		var str = openfl_display3D__$internal_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = "";
			switch(this.q) {
			case 0:
				indexComponent = "x";
				break;
			case 1:
				indexComponent = "y";
				break;
			case 2:
				indexComponent = "z";
				break;
			case 3:
				indexComponent = "w";
				break;
			}
			var indexRegister = openfl_display3D__$internal_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl_display3D__$internal__$AGALConverter_SourceRegister
};
var openfl_display3D__$internal_ATFReader = function(data,byteArrayOffset) {
	this.version = 0;
	data.position = byteArrayOffset;
	var signature = data.readUTFBytes(3);
	data.position = byteArrayOffset;
	if(signature != "ATF") {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("ATF signature not found"));
	}
	var length = 0;
	if(data.b[byteArrayOffset + 6] == 255) {
		this.version = data.b[byteArrayOffset + 7];
		data.position = byteArrayOffset + 8;
		length = this.__readUInt32(data);
	} else {
		this.version = 0;
		data.position = byteArrayOffset + 3;
		length = this.__readUInt24(data);
	}
	if(UInt.gt(js_Boot.__cast(byteArrayOffset + length , Int),openfl_utils_ByteArray.get_length(data))) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
	}
	this.data = data;
};
$hxClasses["openfl.display3D._internal.ATFReader"] = openfl_display3D__$internal_ATFReader;
openfl_display3D__$internal_ATFReader.__name__ = "openfl.display3D._internal.ATFReader";
openfl_display3D__$internal_ATFReader.prototype = {
	readHeader: function(__width,__height,cubeMap) {
		var tdata = this.data.readUnsignedByte();
		var type = tdata >>> 7;
		if(!cubeMap && type != 0) {
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("ATF Cube map not expected"));
		}
		if(cubeMap && type != 1) {
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("ATF Cube map expected"));
		}
		this.cubeMap = cubeMap;
		this.atfFormat = tdata & 127;
		if(this.atfFormat != 3 && this.atfFormat != 5) {
			lime_utils_Log.warn("Only ATF block compressed textures without JPEG-XR+LZMA are supported",{ fileName : "openfl/display3D/_internal/ATFReader.hx", lineNumber : 96, className : "openfl.display3D._internal.ATFReader", methodName : "readHeader"});
		}
		this.width = 1 << this.data.readUnsignedByte();
		this.height = 1 << this.data.readUnsignedByte();
		if(this.width != __width || this.height != __height) {
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		}
		this.mipCount = this.data.readUnsignedByte();
		return this.atfFormat == 5;
	}
	,readTextures: function(uploadCallback) {
		var gpuFormats = this.version < 3 ? 3 : 4;
		var sideCount = this.cubeMap ? 6 : 1;
		var _g = 0;
		var _g1 = sideCount;
		while(_g < _g1) {
			var side = _g++;
			var _g2 = 0;
			var _g3 = this.mipCount;
			while(_g2 < _g3) {
				var level = _g2++;
				var _g4 = 0;
				var _g5 = gpuFormats;
				while(_g4 < _g5) {
					var gpuFormat = _g4++;
					var blockLength = this.version == 0 ? this.__readUInt24(this.data) : this.__readUInt32(this.data);
					if(UInt.gt(this.data.position + blockLength,openfl_utils_ByteArray.get_length(this.data))) {
						throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Block length exceeds ATF file length"));
					}
					if(UInt.gt(blockLength,0)) {
						var bytes = new haxe_io_Bytes(new ArrayBuffer(blockLength));
						var this1 = this.data;
						var bytes1 = openfl_utils_ByteArray.fromBytes(bytes);
						var offset = 0;
						var length = blockLength;
						if(length == null) {
							length = 0;
						}
						if(offset == null) {
							offset = 0;
						}
						this1.readBytes(bytes1,offset,length);
						uploadCallback(side,level,gpuFormat,this.width >> level,this.height >> level,blockLength,bytes);
					}
				}
			}
		}
	}
	,__readUInt24: function(data) {
		var value = data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__readUInt32: function(data) {
		var value = data.readUnsignedByte() << 24;
		value = value | data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__class__: openfl_display3D__$internal_ATFReader
};
var openfl_display3D__$internal_Context3DState = function() {
	this.backBufferEnableDepthAndStencil = false;
	this.blendDestinationAlphaFactor = 9;
	this.blendSourceAlphaFactor = 2;
	this.blendDestinationRGBFactor = 9;
	this.blendSourceRGBFactor = 2;
	this.colorMaskRed = true;
	this.colorMaskGreen = true;
	this.colorMaskBlue = true;
	this.colorMaskAlpha = true;
	this.culling = 3;
	this.depthCompareMode = 4;
	this.depthMask = true;
	this.samplerStates = [];
	this.scissorRectangle = new openfl_geom_Rectangle();
	this.stencilCompareMode = 0;
	this.stencilDepthFail = 5;
	this.stencilFail = 5;
	this.stencilPass = 5;
	this.stencilReadMask = 255;
	this.stencilReferenceValue = 0;
	this.stencilTriangleFace = 2;
	this.stencilWriteMask = 255;
	this.textures = [];
	this.__frontFaceGLCCW = true;
	this.__glBlendEquation = 32774;
};
$hxClasses["openfl.display3D._internal.Context3DState"] = openfl_display3D__$internal_Context3DState;
openfl_display3D__$internal_Context3DState.__name__ = "openfl.display3D._internal.Context3DState";
openfl_display3D__$internal_Context3DState.prototype = {
	__class__: openfl_display3D__$internal_Context3DState
};
var openfl_display3D_textures_TextureBase = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	var gl = this.__context.gl;
	this.__textureID = gl.createTexture();
	this.__textureContext = this.__context.__context;
	if(openfl_display3D_textures_TextureBase.__supportsBGRA == null) {
		openfl_display3D_textures_TextureBase.__textureInternalFormat = gl.RGBA;
		var bgraExtension = null;
		if(bgraExtension != null) {
			openfl_display3D_textures_TextureBase.__supportsBGRA = true;
			openfl_display3D_textures_TextureBase.__textureFormat = bgraExtension.BGRA_EXT;
			if(context.__context.type == "opengles") {
				openfl_display3D_textures_TextureBase.__textureInternalFormat = bgraExtension.BGRA_EXT;
			}
		} else {
			openfl_display3D_textures_TextureBase.__supportsBGRA = false;
			openfl_display3D_textures_TextureBase.__textureFormat = gl.RGBA;
		}
		openfl_display3D_textures_TextureBase.__compressedFormats = new haxe_ds_IntMap();
		openfl_display3D_textures_TextureBase.__compressedFormatsAlpha = new haxe_ds_IntMap();
		var dxtExtension = gl.getExtension("WEBGL_compressed_texture_s3tc");
		var etc1Extension = gl.getExtension("WEBGL_compressed_texture_etc1");
		var pvrtcExtension = gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(dxtExtension != null) {
			var v = dxtExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[0] = v;
			var v = dxtExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[0] = v;
		}
		if(etc1Extension != null) {
			var v = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[2] = v;
			var v = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[2] = v;
		}
		if(pvrtcExtension != null) {
			var v = pvrtcExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[1] = v;
			var v = pvrtcExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[1] = v;
		}
	}
	this.__internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
	this.__format = openfl_display3D_textures_TextureBase.__textureFormat;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = "openfl.display3D.textures.TextureBase";
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	dispose: function() {
		var gl = this.__context.gl;
		if(this.__alphaTexture != null) {
			this.__alphaTexture.dispose();
			this.__alphaTexture = null;
		}
		if(this.__textureID != null) {
			gl.deleteTexture(this.__textureID);
			this.__textureID = null;
		}
		if(this.__glFramebuffer != null) {
			gl.deleteFramebuffer(this.__glFramebuffer);
			this.__glFramebuffer = null;
		}
		if(this.__glDepthRenderbuffer != null) {
			gl.deleteRenderbuffer(this.__glDepthRenderbuffer);
			this.__glDepthRenderbuffer = null;
		}
		if(this.__glStencilRenderbuffer != null) {
			gl.deleteRenderbuffer(this.__glStencilRenderbuffer);
			this.__glStencilRenderbuffer = null;
		}
	}
	,__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.warn("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/TextureBase.hx", lineNumber : 201, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
		}
		if(enableDepthAndStencil && this.__glDepthRenderbuffer == null) {
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			if(openfl_display3D_Context3D.__glDepthStencil != 0) {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = this.__glDepthRenderbuffer;
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,openfl_display3D_Context3D.__glDepthStencil,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
			} else {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = gl.createRenderbuffer();
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,this.__width,this.__height);
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glStencilRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.STENCIL_INDEX8,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glStencilRenderbuffer);
			}
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.warn("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/TextureBase.hx", lineNumber : 239, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
			gl.bindRenderbuffer(gl.RENDERBUFFER,null);
		}
		return this.__glFramebuffer;
	}
	,__getImage: function(bitmapData) {
		var image = bitmapData.image;
		if(!bitmapData.__isValid || image == null) {
			return null;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(image,false);
		var gl = this.__context.gl;
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,0);
			image = image.clone();
			image.set_premultiplied(true);
		}
		if(image.get_format() != 0) {
			image = image.clone();
			image.set_format(0);
			image.buffer.premultiplied = true;
		}
		return image;
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		if(!state.equals(this.__samplerState)) {
			var gl = this.__context.gl;
			if(this.__textureTarget == this.__context.gl.TEXTURE_CUBE_MAP) {
				this.__context.__bindGLTextureCubeMap(this.__textureID);
			} else {
				this.__context.__bindGLTexture2D(this.__textureID);
			}
			var wrapModeS = 0;
			var wrapModeT = 0;
			switch(state.wrap) {
			case 0:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			case 1:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.REPEAT;
				break;
			case 2:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.REPEAT;
				break;
			case 3:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_Error("wrap bad enum"));
			}
			var magFilter = 0;
			var minFilter = 0;
			if(state.filter == 5) {
				magFilter = gl.NEAREST;
			} else {
				magFilter = gl.LINEAR;
			}
			switch(state.mipfilter) {
			case 0:
				minFilter = state.filter == 5 ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR_MIPMAP_LINEAR;
				break;
			case 1:
				minFilter = state.filter == 5 ? gl.NEAREST_MIPMAP_NEAREST : gl.LINEAR_MIPMAP_NEAREST;
				break;
			case 2:
				minFilter = state.filter == 5 ? gl.NEAREST : gl.LINEAR;
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_Error("mipfiter bad enum"));
			}
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MIN_FILTER,minFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MAG_FILTER,magFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_S,wrapModeS);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_T,wrapModeT);
			var tmp = state.lodBias != 0.0;
			if(this.__samplerState == null) {
				this.__samplerState = state.clone();
			}
			this.__samplerState.copyFrom(state);
			return true;
		}
		return false;
	}
	,__uploadFromImage: function(image) {
		var gl = this.__context.gl;
		var internalFormat;
		var format;
		if(this.__textureTarget != gl.TEXTURE_2D) {
			return;
		}
		if(image.buffer.bitsPerPixel == 1) {
			internalFormat = gl.ALPHA;
			format = gl.ALPHA;
		} else {
			internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
			format = openfl_display3D_textures_TextureBase.__textureFormat;
		}
		this.__context.__bindGLTexture2D(this.__textureID);
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		}
		if(image.type == lime_graphics_ImageType.DATA) {
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,image.buffer.width,image.buffer.height,0,format,gl.UNSIGNED_BYTE,image.get_data());
		} else {
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,image.get_src());
		}
		this.__context.__bindGLTexture2D(null);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__size = size;
	this.__width = this.__height = this.__size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__textureTarget = this.__context.gl.TEXTURE_CUBE_MAP;
	this.__uploadedSides = 0;
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = "openfl.display3D.textures.CubeTexture";
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			this.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				_gthis.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
				var event = null;
				event = new openfl_events_Event("textureReady");
				_gthis.dispatchEvent(event);
			},1);
		}
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var size = this.__size >> miplevel;
		if(size == 0) {
			return;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(miplevel == 0 && image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			var size = this.__size >> miplevel;
			if(size == 0) {
				return;
			}
			var target = this.__sideToTarget(side);
			this.__context.__bindGLTextureCubeMap(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,target,miplevel,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTextureCubeMap(null);
			this.__uploadedSides |= 1 << side;
			return;
		}
		this.uploadFromTypedArray(image.get_data(),side,miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b,side,miplevel);
			return;
		}
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = byteArrayOffset;
		var len = null;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,byteoffset);
			} else {
				this1 = new Uint8Array(buffer,byteoffset,len);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1,side,miplevel);
	}
	,uploadFromTypedArray: function(data,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var size = this.__size >> miplevel;
		if(size == 0) {
			return;
		}
		var target = this.__sideToTarget(side);
		this.__context.__bindGLTextureCubeMap(this.__textureID);
		lime_graphics_WebGLRenderContext.texImage2D(gl,target,miplevel,this.__internalFormat,size,size,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTextureCubeMap(null);
		this.__uploadedSides |= 1 << side;
	}
	,__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__framebufferSurface = -1;
		}
		if(this.__framebufferSurface != surfaceSelector) {
			this.__framebufferSurface = surfaceSelector;
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_CUBE_MAP_POSITIVE_X + surfaceSelector,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.error("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/CubeTexture.hx", lineNumber : 278, className : "openfl.display3D.textures.CubeTexture", methodName : "__getGLFramebuffer"});
				}
			}
		}
		return openfl_display3D_textures_TextureBase.prototype.__getGLFramebuffer.call(this,enableDepthAndStencil,antiAlias,surfaceSelector);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_CUBE_MAP,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__sideToTarget: function(side) {
		var gl = this.__context.gl;
		switch(side) {
		case 0:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
		case 1:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
		case 2:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
		case 3:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
		case 4:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
		case 5:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
	}
	,__uploadCompressedTextureFromByteArray: function(data,byteArrayOffset) {
		var _gthis = this;
		var reader = new openfl_display3D__$internal_ATFReader(data,byteArrayOffset);
		var alpha = reader.readHeader(this.__size,this.__size,true);
		var gl = this.__context.gl;
		this.__context.__bindGLTextureCubeMap(this.__textureID);
		var hasTexture = false;
		reader.readTextures(function(side,level,gpuFormat,width,height,blockLength,bytes) {
			var format = alpha ? openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[gpuFormat] : openfl_display3D_textures_TextureBase.__compressedFormats.h[gpuFormat];
			if(format == 0) {
				return;
			}
			hasTexture = true;
			var target = _gthis.__sideToTarget(side);
			_gthis.__format = format;
			_gthis.__internalFormat = format;
			if(alpha && gpuFormat == 2) {
				var size = blockLength / 2 | 0;
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,target,level,_gthis.__internalFormat,width,height,0,this1);
				var alphaTexture = new openfl_display3D_textures_CubeTexture(_gthis.__context,_gthis.__size,3,_gthis.__optimizeForRenderToTexture,_gthis.__streamingLevels);
				alphaTexture.__format = format;
				alphaTexture.__internalFormat = format;
				_gthis.__context.__bindGLTextureCubeMap(alphaTexture.__textureID);
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = size;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,target,level,alphaTexture.__internalFormat,width,height,0,this1);
				_gthis.__alphaTexture = alphaTexture;
			} else {
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(blockLength == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,blockLength);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,target,level,_gthis.__internalFormat,width,height,0,this1);
			}
		});
		if(!hasTexture) {
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(0),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(1),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(2),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(3),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(4),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(5),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
		}
		this.__context.__bindGLTextureCubeMap(null);
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
	this.uploadFromTypedArray(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = "openfl.display3D.textures.RectangleTexture";
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(source) {
		if(source == null) {
			return;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTexture2D(null);
			return;
		}
		this.uploadFromTypedArray(image.get_data());
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = byteArrayOffset;
		var len = null;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,byteoffset);
			} else {
				this1 = new Uint8Array(buffer,byteoffset,len);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data) {
		var gl = this.__context.gl;
		this.__context.__bindGLTexture2D(this.__textureID);
		lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTexture2D(null);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	var gl = this.__context.gl;
	this.__textureTarget = gl.TEXTURE_2D;
	this.__context.__bindGLTexture2D(this.__textureID);
	lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,null);
	this.__context.__bindGLTexture2D(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = "openfl.display3D.textures.Texture";
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			this.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				_gthis.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
				var event = null;
				event = new openfl_events_Event("textureReady");
				_gthis.dispatchEvent(event);
			},1);
		}
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(width == 0 && height == 0) {
			return;
		}
		if(width == 0) {
			width = 1;
		}
		if(height == 0) {
			height = 1;
		}
		if(source.width != width || source.height != height) {
			var copy = new openfl_display_BitmapData(width,height,true,0);
			copy.draw(source);
			source = copy;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(miplevel == 0 && image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			var width = this.__width >> miplevel;
			var height = this.__height >> miplevel;
			if(width == 0 && height == 0) {
				return;
			}
			if(width == 0) {
				width = 1;
			}
			if(height == 0) {
				height = 1;
			}
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,miplevel,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTexture2D(null);
			return;
		}
		this.uploadFromTypedArray(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b,miplevel);
			return;
		}
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = byteArrayOffset;
		var len = null;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,byteoffset);
			} else {
				this1 = new Uint8Array(buffer,byteoffset,len);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1,miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(width == 0 && height == 0) {
			return;
		}
		if(width == 0) {
			width = 1;
		}
		if(height == 0) {
			height = 1;
		}
		this.__context.__bindGLTexture2D(this.__textureID);
		lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,miplevel,this.__internalFormat,width,height,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTexture2D(null);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_2D);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__uploadCompressedTextureFromByteArray: function(data,byteArrayOffset) {
		var _gthis = this;
		var reader = new openfl_display3D__$internal_ATFReader(data,byteArrayOffset);
		var alpha = reader.readHeader(this.__width,this.__height,false);
		var context = this.__context;
		var gl = context.gl;
		this.__context.__bindGLTexture2D(this.__textureID);
		var hasTexture = false;
		reader.readTextures(function(target,level,gpuFormat,width,height,blockLength,bytes) {
			var format = alpha ? openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[gpuFormat] : openfl_display3D_textures_TextureBase.__compressedFormats.h[gpuFormat];
			if(format == 0) {
				return;
			}
			hasTexture = true;
			_gthis.__format = format;
			_gthis.__internalFormat = format;
			if(alpha && gpuFormat == 2) {
				var size = blockLength / 2 | 0;
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,_gthis.__textureTarget,level,_gthis.__internalFormat,width,height,0,this1);
				var alphaTexture = new openfl_display3D_textures_Texture(_gthis.__context,_gthis.__width,_gthis.__height,3,_gthis.__optimizeForRenderToTexture,_gthis.__streamingLevels);
				alphaTexture.__format = format;
				alphaTexture.__internalFormat = format;
				_gthis.__context.__bindGLTexture2D(alphaTexture.__textureID);
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = size;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,alphaTexture.__textureTarget,level,alphaTexture.__internalFormat,width,height,0,this1);
				_gthis.__alphaTexture = alphaTexture;
			} else {
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(blockLength == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,blockLength);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,_gthis.__textureTarget,level,_gthis.__internalFormat,width,height,0,this1);
			}
		});
		if(!hasTexture) {
			var elements = this.__width * this.__height * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,data);
		}
		this.__context.__bindGLTexture2D(null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = "openfl.display3D.textures.VideoTexture";
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	attachNetStream: function(netStream) {
		var _gthis = this;
		if(this.__netStream != null) {
			this.__netStream.__video.removeEventListener("canplay",$bind(this,this.__onCanPlay),false);
		}
		this.__cacheTime = -1;
		this.__netStream = netStream;
		if(this.__netStream != null) {
			if(this.__netStream.__video.readyState >= 2) {
				haxe_Timer.delay(function() {
					_gthis.__textureReady();
				},0);
			} else {
				this.__netStream.__video.addEventListener("canplay",$bind(this,this.__onCanPlay),false);
			}
		}
	}
	,dispose: function() {
		if(this.__netStream != null && this.__netStream.__video != null) {
			this.__netStream.__video.removeEventListener("timeupdate",$bind(this,this.__onTimeUpdate));
		}
		openfl_display3D_textures_TextureBase.prototype.dispose.call(this);
	}
	,__onCanPlay: function(_) {
		this.__netStream.__video.addEventListener("timeupdate",$bind(this,this.__onTimeUpdate));
		this.__textureReady();
	}
	,__onTimeUpdate: function(_) {
		if(this.__netStream != null && this.__netStream.__video.currentTime != this.__cacheTime && this.__netStream.__video.readyState >= 2) {
			this.__textureReady();
		}
	}
	,__getTexture: function() {
		if(this.__netStream.__video.currentTime != this.__cacheTime && this.__netStream.__video.readyState >= 2) {
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,this.__netStream.__video);
			this.__cacheTime = this.__netStream.__video.currentTime;
		}
		return this.__textureID;
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		var event = null;
		event = new openfl_events_Event("textureReady");
		this.dispatchEvent(event);
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = "openfl.errors.Error";
openfl_errors_Error.prototype = {
	getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = "openfl.errors.ArgumentError";
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = "openfl.errors.IOError";
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = "openfl.errors.EOFError";
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = "openfl.errors.IllegalOperationError";
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = "openfl.errors.RangeError";
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = "openfl.errors.TypeError";
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = "openfl.events.Event";
openfl_events_Event.prototype = {
	clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__init: function() {
		this.target = null;
		this.currentTarget = null;
		this.bubbles = false;
		this.cancelable = false;
		this.eventPhase = 2;
		this.__isCanceled = false;
		this.__isCanceledNow = false;
		this.__preventDefault = false;
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = "openfl.events.ActivityEvent";
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.activating = false;
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = "openfl.events.TextEvent";
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.text = "";
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = "openfl.events.ErrorEvent";
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__init: function() {
		openfl_events_TextEvent.prototype.__init.call(this);
		this.errorID = 0;
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.active = false;
	this.reset(list);
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = "openfl.events._EventDispatcher.DispatchIterator";
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		return this.index < this.list.length;
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g = this.index;
				var _g1 = this.list.length;
				while(_g < _g1) {
					var i = _g++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.isCopy = false;
		this.index = 0;
	}
	,start: function() {
		this.active = true;
	}
	,stop: function() {
		this.active = false;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = "openfl.events._EventDispatcher.Listener";
openfl_events__$EventDispatcher_Listener.prototype = {
	match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_EventType = {};
openfl_events_EventType.equals = function(a,b) {
	return a == b;
};
openfl_events_EventType.notEquals = function(a,b) {
	return a != b;
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = "openfl.events.FocusEvent";
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.keyCode = 0;
		this.shiftKey = false;
		this.relatedObject = null;
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = "openfl.events.FullScreenEvent";
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__init: function() {
		openfl_events_ActivityEvent.prototype.__init.call(this);
		this.fullScreen = false;
		this.interactive = false;
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = "openfl.events.GameInputEvent";
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.device = null;
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = "openfl.events.HTTPStatusEvent";
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,this.cancelable,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.status = 0;
		this.redirected = false;
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = "openfl.events.IOErrorEvent";
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = "openfl.events.KeyboardEvent";
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.charCode = 0;
		this.keyCode = 0;
		this.keyLocation = 0;
		this.ctrlKey = false;
		this.altKey = false;
		this.shiftKey = false;
		this.controlKey = false;
		this.commandKey = false;
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = "openfl.events.MouseEvent";
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.shiftKey = false;
		this.altKey = false;
		this.ctrlKey = false;
		this.bubbles = false;
		this.relatedObject = null;
		this.delta = 0;
		this.localX = 0;
		this.localY = 0;
		this.buttonDown = false;
		this.commandKey = false;
		this.clickCount = 0;
		this.isRelatedObjectInaccessible = false;
		this.stageX = NaN;
		this.stageY = NaN;
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = "openfl.events.NetStatusEvent";
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.info = null;
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = "openfl.events.ProgressEvent";
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_RenderEvent = function(type,bubbles,cancelable,objectMatrix,objectColorTransform,allowSmoothing) {
	if(allowSmoothing == null) {
		allowSmoothing = true;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.objectMatrix = objectMatrix;
	this.objectColorTransform = objectColorTransform;
	this.allowSmoothing = allowSmoothing;
};
$hxClasses["openfl.events.RenderEvent"] = openfl_events_RenderEvent;
openfl_events_RenderEvent.__name__ = "openfl.events.RenderEvent";
openfl_events_RenderEvent.__super__ = openfl_events_Event;
openfl_events_RenderEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_RenderEvent(this.type,this.bubbles,this.cancelable,this.objectMatrix.clone(),this.objectColorTransform.__clone(),this.allowSmoothing);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("RenderEvent",["type","bubbles","cancelable"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.objectMatrix = null;
		this.objectColorTransform = null;
		this.allowSmoothing = false;
		this.renderer = null;
	}
	,__class__: openfl_events_RenderEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = "openfl.events.SecurityErrorEvent";
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = "openfl.events.TouchEvent";
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.touchPointID = 0;
		this.isPrimaryTouchPoint = false;
		this.localX = 0;
		this.localY = 0;
		this.sizeX = 0;
		this.sizeY = 0;
		this.pressure = 0;
		this.relatedObject = null;
		this.ctrlKey = false;
		this.altKey = false;
		this.shiftKey = false;
		this.commandKey = false;
		this.controlKey = false;
		this.stageX = NaN;
		this.stageY = NaN;
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = "openfl.events.UncaughtErrorEvent";
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_UncaughtErrorEvent(this.type,this.bubbles,this.cancelable,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("UncaughtErrorEvent",["type","bubbles","cancelable","error"]);
	}
	,__init: function() {
		openfl_events_ErrorEvent.prototype.__init.call(this);
		this.error = null;
	}
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = "openfl.events.UncaughtErrorEvents";
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__shaderBlendMode = 10;
	this.__topExtension = 0;
	this.__smooth = true;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = "openfl.filters.BitmapFilter";
openfl_filters_BitmapFilter.prototype = {
	clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass,sourceBitmapData) {
		return null;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.get_length() == 16) {
		this.rawData = v.concat(null);
	} else {
		this.rawData = openfl_Vector.toFloatVector(null,null,null,[1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = "openfl.geom.Matrix3D";
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1]));
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1]));
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1]));
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		m.rawData.set(i,thisMat.rawData.get(i) + (toMat.rawData.get(i) - thisMat.rawData.get(i)) * percent);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.set(0,c + a1.x * a1.x * t);
	m.rawData.set(5,c + a1.y * a1.y * t);
	m.rawData.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.set(4,tmp1 + tmp2);
	m.rawData.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.set(8,tmp1 - tmp2);
	m.rawData.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.set(9,tmp1 + tmp2);
	m.rawData.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	append: function(lhs) {
		var m111 = this.rawData.get(0);
		var m121 = this.rawData.get(4);
		var m131 = this.rawData.get(8);
		var m141 = this.rawData.get(12);
		var m112 = this.rawData.get(1);
		var m122 = this.rawData.get(5);
		var m132 = this.rawData.get(9);
		var m142 = this.rawData.get(13);
		var m113 = this.rawData.get(2);
		var m123 = this.rawData.get(6);
		var m133 = this.rawData.get(10);
		var m143 = this.rawData.get(14);
		var m114 = this.rawData.get(3);
		var m124 = this.rawData.get(7);
		var m134 = this.rawData.get(11);
		var m144 = this.rawData.get(15);
		var m211 = lhs.rawData.get(0);
		var m221 = lhs.rawData.get(4);
		var m231 = lhs.rawData.get(8);
		var m241 = lhs.rawData.get(12);
		var m212 = lhs.rawData.get(1);
		var m222 = lhs.rawData.get(5);
		var m232 = lhs.rawData.get(9);
		var m242 = lhs.rawData.get(13);
		var m213 = lhs.rawData.get(2);
		var m223 = lhs.rawData.get(6);
		var m233 = lhs.rawData.get(10);
		var m243 = lhs.rawData.get(14);
		var m214 = lhs.rawData.get(3);
		var m224 = lhs.rawData.get(7);
		var m234 = lhs.rawData.get(11);
		var m244 = lhs.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tz = 0;
		var ty = tz;
		var tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
	}
	,appendTranslation: function(x,y,z) {
		var _g = this.rawData;
		_g.set(12,_g.get(12) + x);
		var _g = this.rawData;
		_g.set(13,_g.get(13) + y);
		var _g = this.rawData;
		_g.set(14,_g.get(14) + z);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(this.rawData.copy());
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(1,vector3D.y);
			this.rawData.set(2,vector3D.z);
			this.rawData.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.set(4,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(6,vector3D.z);
			this.rawData.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.set(8,vector3D.x);
			this.rawData.set(9,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.set(12,vector3D.x);
			this.rawData.set(13,vector3D.y);
			this.rawData.set(14,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(1);
			vector3D.z = this.rawData.get(2);
			vector3D.w = this.rawData.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.get(4);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(6);
			vector3D.w = this.rawData.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.get(8);
			vector3D.y = this.rawData.get(9);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.get(12);
			vector3D.y = this.rawData.get(13);
			vector3D.z = this.rawData.get(14);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = other.rawData.copy();
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.get_length() - index;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.rawData.set(i,vector.get(i + index));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g = 0;
		var _g1 = this.rawData.get_length();
		while(_g < _g1) {
			var i = _g++;
			vector.set(i + index,this.rawData.get(i));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(4,vector3D.y);
			this.rawData.set(8,vector3D.z);
			this.rawData.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.set(1,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(9,vector3D.z);
			this.rawData.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.set(2,vector3D.x);
			this.rawData.set(6,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.set(3,vector3D.x);
			this.rawData.set(7,vector3D.y);
			this.rawData.set(11,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(4);
			vector3D.z = this.rawData.get(8);
			vector3D.w = this.rawData.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.get(1);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(9);
			vector3D.w = this.rawData.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.get(2);
			vector3D.y = this.rawData.get(6);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.get(3);
			vector3D.y = this.rawData.get(7);
			vector3D.z = this.rawData.get(11);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = this.rawData.copy();
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		var vec = openfl_Vector.toObjectVector(null);
		var m = this.clone();
		var mr = m.rawData.copy();
		var pos = new openfl_geom_Vector3D(mr.get(12),mr.get(13),mr.get(14));
		mr.set(12,0);
		mr.set(13,0);
		mr.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.get(0) * mr.get(0) + mr.get(1) * mr.get(1) + mr.get(2) * mr.get(2));
		scale.y = Math.sqrt(mr.get(4) * mr.get(4) + mr.get(5) * mr.get(5) + mr.get(6) * mr.get(6));
		scale.z = Math.sqrt(mr.get(8) * mr.get(8) + mr.get(9) * mr.get(9) + mr.get(10) * mr.get(10));
		if(mr.get(0) * (mr.get(5) * mr.get(10) - mr.get(6) * mr.get(9)) - mr.get(1) * (mr.get(4) * mr.get(10) - mr.get(6) * mr.get(8)) + mr.get(2) * (mr.get(4) * mr.get(9) - mr.get(5) * mr.get(8)) < 0) {
			scale.z = -scale.z;
		}
		var _g = mr;
		_g.set(0,_g.get(0) / scale.x);
		var _g = mr;
		_g.set(1,_g.get(1) / scale.x);
		var _g = mr;
		_g.set(2,_g.get(2) / scale.x);
		var _g = mr;
		_g.set(4,_g.get(4) / scale.y);
		var _g = mr;
		_g.set(5,_g.get(5) / scale.y);
		var _g = mr;
		_g.set(6,_g.get(6) / scale.y);
		var _g = mr;
		_g.set(8,_g.get(8) / scale.z);
		var _g = mr;
		_g.set(9,_g.get(9) / scale.z);
		var _g = mr;
		_g.set(10,_g.get(10) / scale.z);
		var rot = new openfl_geom_Vector3D();
		switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.get(0) + mr.get(5) + mr.get(10) - 1) / 2);
			var len = Math.sqrt((mr.get(6) - mr.get(9)) * (mr.get(6) - mr.get(9)) + (mr.get(8) - mr.get(2)) * (mr.get(8) - mr.get(2)) + (mr.get(1) - mr.get(4)) * (mr.get(1) - mr.get(4)));
			if(len != 0) {
				rot.x = (mr.get(6) - mr.get(9)) / len;
				rot.y = (mr.get(8) - mr.get(2)) / len;
				rot.z = (mr.get(1) - mr.get(4)) / len;
			} else {
				rot.x = rot.y = rot.z = 0;
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.get(2));
			if(mr.get(2) != 1 && mr.get(2) != -1) {
				rot.x = Math.atan2(mr.get(6),mr.get(10));
				rot.z = Math.atan2(mr.get(1),mr.get(0));
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.get(4),mr.get(5));
			}
			break;
		case 2:
			var tr = mr.get(0) + mr.get(5) + mr.get(10);
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.get(6) - mr.get(9)) / (4 * rot.w);
				rot.y = (mr.get(8) - mr.get(2)) / (4 * rot.w);
				rot.z = (mr.get(1) - mr.get(4)) / (4 * rot.w);
			} else if(mr.get(0) > mr.get(5) && mr.get(0) > mr.get(10)) {
				rot.x = Math.sqrt(1 + mr.get(0) - mr.get(5) - mr.get(10)) / 2;
				rot.w = (mr.get(6) - mr.get(9)) / (4 * rot.x);
				rot.y = (mr.get(1) + mr.get(4)) / (4 * rot.x);
				rot.z = (mr.get(8) + mr.get(2)) / (4 * rot.x);
			} else if(mr.get(5) > mr.get(10)) {
				rot.y = Math.sqrt(1 + mr.get(5) - mr.get(0) - mr.get(10)) / 2;
				rot.x = (mr.get(1) + mr.get(4)) / (4 * rot.y);
				rot.w = (mr.get(8) - mr.get(2)) / (4 * rot.y);
				rot.z = (mr.get(6) + mr.get(9)) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.get(10) - mr.get(0) - mr.get(5)) / 2;
				rot.x = (mr.get(8) + mr.get(2)) / (4 * rot.z);
				rot.y = (mr.get(6) + mr.get(9)) / (4 * rot.z);
				rot.w = (mr.get(1) - mr.get(4)) / (4 * rot.z);
			}
			break;
		}
		vec.push(pos);
		vec.push(rot);
		vec.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10),x * this.rawData.get(3) + y * this.rawData.get(7) + z * this.rawData.get(11));
	}
	,identity: function() {
		this.rawData = openfl_Vector.toFloatVector(null,null,null,[1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.rawData.set(i,this.rawData.get(i) + (toMat.rawData.get(i) - this.rawData.get(i)) * percent);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.get(0);
			var m21 = this.rawData.get(4);
			var m31 = this.rawData.get(8);
			var m41 = this.rawData.get(12);
			var m12 = this.rawData.get(1);
			var m22 = this.rawData.get(5);
			var m32 = this.rawData.get(9);
			var m42 = this.rawData.get(13);
			var m13 = this.rawData.get(2);
			var m23 = this.rawData.get(6);
			var m33 = this.rawData.get(10);
			var m43 = this.rawData.get(14);
			var m14 = this.rawData.get(3);
			var m24 = this.rawData.get(7);
			var m34 = this.rawData.get(11);
			var m44 = this.rawData.get(15);
			this.rawData.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) {
			at = new openfl_geom_Vector3D(0,0,-1);
		}
		if(up == null) {
			up = new openfl_geom_Vector3D(0,-1,0);
		}
		var dir = at.subtract(pos);
		var vup = up.clone();
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) {
			vup.normalize();
		} else if(dir.x != 0) {
			vup = new openfl_geom_Vector3D(-dir.y,dir.x,0);
		} else {
			vup = new openfl_geom_Vector3D(1,0,0);
		}
		var right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.set(0,right.x);
		this.rawData.set(4,right.y);
		this.rawData.set(8,right.z);
		this.rawData.set(12,0.0);
		this.rawData.set(1,vup.x);
		this.rawData.set(5,vup.y);
		this.rawData.set(9,vup.z);
		this.rawData.set(13,0.0);
		this.rawData.set(2,dir.x);
		this.rawData.set(6,dir.y);
		this.rawData.set(10,dir.z);
		this.rawData.set(14,0.0);
		this.rawData.set(3,pos.x);
		this.rawData.set(7,pos.y);
		this.rawData.set(11,pos.z);
		this.rawData.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.get(0);
		var m121 = rhs.rawData.get(4);
		var m131 = rhs.rawData.get(8);
		var m141 = rhs.rawData.get(12);
		var m112 = rhs.rawData.get(1);
		var m122 = rhs.rawData.get(5);
		var m132 = rhs.rawData.get(9);
		var m142 = rhs.rawData.get(13);
		var m113 = rhs.rawData.get(2);
		var m123 = rhs.rawData.get(6);
		var m133 = rhs.rawData.get(10);
		var m143 = rhs.rawData.get(14);
		var m114 = rhs.rawData.get(3);
		var m124 = rhs.rawData.get(7);
		var m134 = rhs.rawData.get(11);
		var m144 = rhs.rawData.get(15);
		var m211 = this.rawData.get(0);
		var m221 = this.rawData.get(4);
		var m231 = this.rawData.get(8);
		var m241 = this.rawData.get(12);
		var m212 = this.rawData.get(1);
		var m222 = this.rawData.get(5);
		var m232 = this.rawData.get(9);
		var m242 = this.rawData.get(13);
		var m213 = this.rawData.get(2);
		var m223 = this.rawData.get(6);
		var m233 = this.rawData.get(10);
		var m243 = this.rawData.get(14);
		var m214 = this.rawData.get(3);
		var m224 = this.rawData.get(7);
		var m234 = this.rawData.get(11);
		var m244 = this.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tz = 0;
		var ty = tz;
		var tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		if(components.get_length() < 3 || components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).z == 0) {
			return false;
		}
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.get(2).x;
		scale[4] = scale[5] = scale[6] = components.get(2).y;
		scale[8] = scale[9] = scale[10] = components.get(2).z;
		if(orientationStyle == 1) {
			var cx = Math.cos(components.get(1).x);
			var cy = Math.cos(components.get(1).y);
			var cz = Math.cos(components.get(1).z);
			var sx = Math.sin(components.get(1).x);
			var sy = Math.sin(components.get(1).y);
			var sz = Math.sin(components.get(1).z);
			this.rawData.set(0,cy * cz * scale[0]);
			this.rawData.set(1,cy * sz * scale[1]);
			this.rawData.set(2,-sy * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.set(6,sx * cy * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.set(10,cx * cy * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		} else {
			var x = components.get(1).x;
			var y = components.get(1).y;
			var z = components.get(1).z;
			var w = components.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		}
		if(components.get(2).x == 0) {
			this.rawData.set(0,1e-15);
		}
		if(components.get(2).y == 0) {
			this.rawData.set(5,1e-15);
		}
		if(components.get(2).z == 0) {
			this.rawData.set(10,1e-15);
		}
		return !(components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14),x * this.rawData.get(3) + y * this.rawData.get(7) + z * this.rawData.get(11) + this.rawData.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.get_length()) {
			x = vin.get(i);
			y = vin.get(i + 1);
			z = vin.get(i + 2);
			vout.set(i,x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12));
			vout.set(i + 1,x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13));
			vout.set(i + 2,x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14));
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = this.rawData.copy();
		this.rawData.set(1,oRawData.get(4));
		this.rawData.set(2,oRawData.get(8));
		this.rawData.set(3,oRawData.get(12));
		this.rawData.set(4,oRawData.get(1));
		this.rawData.set(6,oRawData.get(9));
		this.rawData.set(7,oRawData.get(13));
		this.rawData.set(8,oRawData.get(2));
		this.rawData.set(9,oRawData.get(6));
		this.rawData.set(11,oRawData.get(14));
		this.rawData.set(12,oRawData.get(3));
		this.rawData.set(13,oRawData.get(7));
		this.rawData.set(14,oRawData.get(11));
	}
	,get_determinant: function() {
		return (this.rawData.get(0) * this.rawData.get(5) - this.rawData.get(4) * this.rawData.get(1)) * (this.rawData.get(10) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(11)) - (this.rawData.get(0) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(7)) + (this.rawData.get(0) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(7)) + (this.rawData.get(4) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(3)) - (this.rawData.get(4) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(3)) + (this.rawData.get(8) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(9)) * (this.rawData.get(2) * this.rawData.get(7) - this.rawData.get(6) * this.rawData.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.get(12),this.rawData.get(13),this.rawData.get(14));
	}
	,set_position: function(val) {
		this.rawData.set(12,val.x);
		this.rawData.set(13,val.y);
		this.rawData.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom_Orientation3D = {};
openfl_geom_Orientation3D.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom_Orientation3D.toString = function(this1) {
	switch(this1) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = "openfl.geom.Transform";
openfl_geom_Transform.prototype = {
	get_colorTransform: function() {
		return this.__colorTransform.__clone();
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value,false)) {
			this.__colorTransform.__copyFrom(value);
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__getWorldTransform().clone();
		}
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0]));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		this.__setTransform(value.rawData.get(0),value.rawData.get(1),value.rawData.get(5),value.rawData.get(6),value.rawData.get(12),value.rawData.get(13));
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var transform = this.__displayObject.__transform;
			if(transform.a == a && transform.b == b && transform.c == c && transform.d == d && transform.tx == tx && transform.ty == ty) {
				return;
			}
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) {
				scaleX = a;
			} else {
				scaleX = Math.sqrt(a * a + b * b);
			}
			if(c == 0) {
				scaleY = d;
			} else {
				scaleY = Math.sqrt(c * c + d * d);
			}
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / Math.PI * Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			transform.a = a;
			transform.b = b;
			transform.c = c;
			transform.d = d;
			transform.tx = tx;
			transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = "openfl.geom.Vector3D";
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) {
		dot /= la;
	}
	if(lb != 0) {
		dot /= lb;
	}
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(allFour) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = "openfl.media.ID3Info";
openfl_media_ID3Info.prototype = {
	__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = "openfl.media.Sound";
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_media_AudioBuffer.fromFile(path));
};
openfl_media_Sound.loadFromFile = function(path) {
	return lime_media_AudioBuffer.loadFromFile(path).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.loadFromFiles = function(paths) {
	return lime_media_AudioBuffer.loadFromFiles(paths).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
			this.__buffer = null;
		}
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		if(defaultLibrary != null && Object.prototype.hasOwnProperty.call(defaultLibrary.cachedAudioBuffers.h,this.url)) {
			this.AudioBuffer_onURLLoad(defaultLibrary.cachedAudioBuffers.h[this.url]);
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		if(bytes == null || bytesLength <= 0) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var this1 = new openfl_utils_ByteArrayData(length);
			var copy = this1;
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		this.__buffer = lime_media_AudioBuffer.fromBytes(openfl_utils_ByteArray.toBytes(bytes));
		if(this.__buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		if(format == null) {
			format = "float";
		}
		if(bytes == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		var bitsPerSample = format == "float" ? 32 : 16;
		var channels = stereo ? 2 : 1;
		var bytesLength = samples * channels * (bitsPerSample / 8) | 0;
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var this1 = new openfl_utils_ByteArrayData(length);
			var copy = this1;
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		var audioBuffer = new lime_media_AudioBuffer();
		audioBuffer.bitsPerSample = bitsPerSample;
		audioBuffer.channels = channels;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(bytes);
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,0);
			} else {
				this1 = new Uint8Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		audioBuffer.data = this1;
		audioBuffer.sampleRate = sampleRate | 0;
		this.__buffer = audioBuffer;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(this.__buffer == null || openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_media_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.get_src().duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = "openfl.media.SoundChannel";
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.onComplete.remove($bind(this,this.source_onComplete));
		this.__source.dispose();
		this.__source = null;
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	if(bufferTime == null) {
		bufferTime = 1000;
	}
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = "openfl.media.SoundLoaderContext";
openfl_media_SoundLoaderContext.prototype = {
	__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = "openfl.media.SoundTransform";
openfl_media_SoundTransform.prototype = {
	clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = "openfl.media.SoundMixer";
openfl_media_SoundMixer.__properties__ = {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"};
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_media_Video = function(width,height) {
	if(height == null) {
		height = 240;
	}
	if(width == null) {
		width = 320;
	}
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 8;
	this.__width = width;
	this.__height = height;
	this.__textureTime = -1;
	this.smoothing = false;
	this.deblocking = 0;
};
$hxClasses["openfl.media.Video"] = openfl_media_Video;
openfl_media_Video.__name__ = "openfl.media.Video";
openfl_media_Video.__super__ = openfl_display_DisplayObject;
openfl_media_Video.prototype = $extend(openfl_display_DisplayObject.prototype,{
	attachNetStream: function(netStream) {
		this.__stream = netStream;
		if(this.__stream != null && this.__stream.__video != null && !this.__stream.__closed) {
			this.__stream.__video.play();
		}
	}
	,clear: function() {
	}
	,__enterFrame: function(deltaTime) {
		if(this.__renderable && this.__stream != null) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getIndexBuffer: function(context) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Uint16Array(6);
			this.__indexBufferData = this1;
			this.__indexBufferData[0] = 0;
			this.__indexBufferData[1] = 1;
			this.__indexBufferData[2] = 2;
			this.__indexBufferData[3] = 2;
			this.__indexBufferData[4] = 1;
			this.__indexBufferData[5] = 3;
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = context.createIndexBuffer(6);
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,__getTexture: function(context) {
		if(this.__stream == null || this.__stream.__video == null) {
			return null;
		}
		var gl = context.__context.webgl;
		var internalFormat = gl.RGBA;
		var format = gl.RGBA;
		if(!this.__stream.__closed && this.__stream.__video.currentTime != this.__textureTime) {
			if(this.__texture == null) {
				this.__texture = context.createRectangleTexture(this.__stream.__video.videoWidth,this.__stream.__video.videoHeight,1,false);
			}
			context.__bindGLTexture2D(this.__texture.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,this.__stream.__video);
			this.__textureTime = this.__stream.__video.currentTime;
		}
		return this.__texture;
	}
	,__getVertexBuffer: function(context) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context) {
			var uvWidth = 1;
			var uvHeight = 1;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(20);
			this.__vertexBufferData = this1;
			this.__vertexBufferData[0] = this.get_width();
			this.__vertexBufferData[1] = this.get_height();
			this.__vertexBufferData[3] = uvWidth;
			this.__vertexBufferData[4] = uvHeight;
			this.__vertexBufferData[6] = this.get_height();
			this.__vertexBufferData[9] = uvHeight;
			this.__vertexBufferData[10] = this.get_width();
			this.__vertexBufferData[13] = uvWidth;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = context.createVertexBuffer(3,5);
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
		return this.__vertexBuffer;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var point = openfl_geom_Point.__pool.get();
		point.setTo(x,y);
		this.__globalToLocal(point,point);
		var hit = point.x > 0 && point.y > 0 && point.x <= this.__width && point.y <= this.__height;
		openfl_geom_Point.__pool.release(point);
		return hit;
	}
	,get_height: function() {
		return this.__height * this.get_scaleY();
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			this.__setTransformDirty();
			this.__dirty = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_videoHeight: function() {
		if(this.__stream != null && this.__stream.__video != null) {
			return this.__stream.__video.videoHeight | 0;
		}
		return 0;
	}
	,get_videoWidth: function() {
		if(this.__stream != null && this.__stream.__video != null) {
			return this.__stream.__video.videoWidth | 0;
		}
		return 0;
	}
	,get_width: function() {
		return this.__width * this.__scaleX;
	}
	,set_width: function(value) {
		if(this.__scaleX != 1 || this.__width != value) {
			this.__setTransformDirty();
			this.__dirty = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,__class__: openfl_media_Video
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_videoWidth:"get_videoWidth",get_videoHeight:"get_videoHeight"})
});
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = "openfl.net.NetConnection";
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,p1,p2,p3,p4,p5) {
		if(command != null) {
			throw haxe_Exception.thrown("Error: Can only connect in \"HTTP streaming\" mode");
		}
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "NetConnection.Connect.Success"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__soundTransform = new openfl_media_SoundTransform();
	this.__video = window.document.createElement("video");
	this.__video.setAttribute("playsinline","");
	this.__video.setAttribute("webkit-playsinline","");
	this.__video.setAttribute("crossorigin","anonymous");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = "openfl.net.NetStream";
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	close: function() {
		if(this.__video == null) {
			return;
		}
		this.__closed = true;
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,dispose: function() {
		this.close();
		this.__video = null;
	}
	,pause: function() {
		if(this.__video != null) {
			this.__video.pause();
		}
	}
	,play: function(url,p1,p2,p3,p4,p5) {
		if(this.__video == null) {
			return;
		}
		this.__video.volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
		if(typeof(url) == "string") {
			this.__video.src = url;
		} else {
			this.__video.srcObject = url;
		}
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _gthis = this;
		if(this.__video == null) {
			return;
		}
		if(this.__timer == null) {
			this.__timer = new haxe_Timer(1);
		}
		this.__timer.run = function() {
			if(_gthis.__video.paused) {
				_gthis.__playStatus("NetStream.Play.pause");
			} else {
				_gthis.__playStatus("NetStream.Play.playing");
			}
			_gthis.__timer.stop();
		};
	}
	,resume: function() {
		if(this.__video != null) {
			this.__video.play();
		}
	}
	,seek: function(time) {
		if(this.__video == null) {
			return;
		}
		if(time < 0) {
			time = 0;
		} else if(time > this.__video.duration) {
			time = this.__video.duration;
		}
		this.__dispatchStatus("NetStream.SeekStart.Notify");
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video == null) {
			return;
		}
		if(this.__video.paused) {
			this.__video.play();
		} else {
			this.__video.pause();
		}
	}
	,__dispatchStatus: function(code) {
		var event = new openfl_events_NetStatusEvent("netStatus",false,false,{ code : code});
		this.__connection.dispatchEvent(event);
		this.dispatchEvent(event);
	}
	,__playStatus: function(code) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__dispatchStatus("NetStream.Play.Stop");
		this.__dispatchStatus("NetStream.Play.Complete");
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__dispatchStatus("NetStream.Play.Stop");
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__dispatchStatus("NetStream.Play.Start");
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
		this.__dispatchStatus("NetStream.Seek.Complete");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		if(this.__video == null) {
			return;
		}
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			if(this.__video != null) {
				this.__video.volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			}
		}
		return value;
	}
	,get_speed: function() {
		if(this.__video != null) {
			return this.__video.playbackRate;
		} else {
			return 1;
		}
	}
	,set_speed: function(value) {
		if(this.__video != null) {
			return this.__video.playbackRate = value;
		} else {
			return value;
		}
	}
	,__class__: openfl_net_NetStream
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"}
});
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = openfl_net_SharedObject.defaultObjectEncoding;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = "openfl.net.SharedObject";
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) {
		secure = false;
	}
	var illegalValues = [" ","~","%","&","\\",";",":","\"","'",",","<",">","?","#"];
	var allowed = true;
	if(name == null || name == "") {
		allowed = false;
	} else {
		var _g = 0;
		while(_g < illegalValues.length) {
			var value = illegalValues[_g];
			++_g;
			if(name.indexOf(value) > -1) {
				allowed = false;
				break;
			}
		}
	}
	if(!allowed) {
		throw haxe_Exception.thrown(new openfl_errors_Error("Error #2134: Cannot create SharedObject."));
	}
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		if(lime_app_Application.current != null) {
			lime_app_Application.current.onExit.add(openfl_net_SharedObject.application_onExit);
		}
	}
	var id = localPath + "/" + name;
	if(!Object.prototype.hasOwnProperty.call(openfl_net_SharedObject.__sharedObjects.h,id)) {
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(localPath == null) {
				if(storage != null) {
					encodedData = storage.getItem(window.location.href + ":" + name);
					storage.removeItem(window.location.href + ":" + name);
				}
				localPath = window.location.pathname;
			}
			if(storage != null && encodedData == null) {
				encodedData = storage.getItem(localPath + ":" + name);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		if(encodedData != null && encodedData != "") {
			try {
				var unserializer = new haxe_Unserializer(encodedData);
				unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
				sharedObject.data = unserializer.unserialize();
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
		openfl_net_SharedObject.__sharedObjects.h[id] = sharedObject;
	}
	return openfl_net_SharedObject.__sharedObjects.h[id];
};
openfl_net_SharedObject.getRemote = function(name,remotePath,persistence,secure) {
	if(secure == null) {
		secure = false;
	}
	if(persistence == null) {
		persistence = false;
	}
	openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/net/SharedObject.hx", lineNumber : 808, className : "openfl.net.SharedObject", methodName : "getRemote"});
	return null;
};
openfl_net_SharedObject.__getPath = function(localPath,name) {
	var path = lime_system_System.get_applicationStorageDirectory() + "/" + localPath + "/";
	name = StringTools.replace(name,"//","/");
	name = StringTools.replace(name,"//","/");
	if(StringTools.startsWith(name,"/")) {
		name = HxOverrides.substr(name,1,null);
	}
	if(StringTools.endsWith(name,"/")) {
		name = name.substring(0,name.length - 1);
	}
	if(name.indexOf("/") > -1) {
		var split = name.split("/");
		name = "";
		var _g = 0;
		var _g1 = split.length - 1;
		while(_g < _g1) {
			var i = _g++;
			name += "#" + split[i] + "/";
		}
		name += split[split.length - 1];
	}
	return path + name + ".sol";
};
openfl_net_SharedObject.__mkdir = function(directory) {
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) {
			name = StringTools.replace(name,"neash.","openfl.");
		}
		if(StringTools.startsWith(name,"native.")) {
			name = StringTools.replace(name,"native.","openfl.");
		}
		if(StringTools.startsWith(name,"flash.")) {
			name = StringTools.replace(name,"flash.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._v2.")) {
			name = StringTools.replace(name,"openfl._v2.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._legacy.")) {
			name = StringTools.replace(name,"openfl._legacy.","openfl.");
		}
		return $hxClasses[name];
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var sharedObject = haxe_ds_StringMap.valueIterator(openfl_net_SharedObject.__sharedObjects.h);
	while(sharedObject.hasNext()) {
		var sharedObject1 = sharedObject.next();
		sharedObject1.flush();
	}
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
	}
	,close: function() {
	}
	,connect: function(myConnection,params) {
		openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/net/SharedObject.hx", lineNumber : 392, className : "openfl.net.SharedObject", methodName : "connect"});
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) {
			minDiskSpace = 0;
		}
		if(Reflect.fields(this.data).length == 0) {
			return 0;
		}
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return 1;
		}
		return 0;
	}
	,send: function(args) {
		openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/net/SharedObject.hx", lineNumber : 824, className : "openfl.net.SharedObject", methodName : "send"});
	}
	,setDirty: function(propertyName) {
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) {
			this.data[propertyName] = value;
		}
	}
	,get_size: function() {
		try {
			var d = haxe_Serializer.run(this.data);
			return haxe_io_Bytes.ofString(d).length;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return 0;
		}
	}
	,__class__: openfl_net_SharedObject
	,__properties__: {get_size:"get_size"}
});
var openfl_net_SharedObjectFlushStatus = {};
openfl_net_SharedObjectFlushStatus.fromString = function(value) {
	switch(value) {
	case "flushed":
		return 0;
	case "pending":
		return 1;
	default:
		return null;
	}
};
openfl_net_SharedObjectFlushStatus.toString = function(this1) {
	switch(this1) {
	case 0:
		return "flushed";
	case 1:
		return "pending";
	default:
		return null;
	}
};
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = "openfl.net.URLLoader";
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	close: function() {
		if(this.__httpRequest != null) {
			this.__httpRequest.cancel();
		}
	}
	,load: function(request) {
		var _gthis = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		} else {
			var httpRequest = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		}
	}
	,__dispatchStatus: function() {
		var event = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		event.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		event.responseHeaders = headers;
		this.dispatchEvent(event);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		this.__httpRequest.method = request.method;
		if(request.data != null) {
			if(Type.typeof(request.data) == ValueType.TObject) {
				var fields = Reflect.fields(request.data);
				var _g = 0;
				while(_g < fields.length) {
					var field = fields[_g];
					++_g;
					this.__httpRequest.formData.h[field] = Reflect.field(request.data,field);
				}
			} else if(((request.data) instanceof haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g = 0;
			var _g1 = request.requestHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = request.idleTimeout | 0;
		this.__httpRequest.withCredentials = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) {
			userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		}
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchStatus();
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event = new openfl_events_IOErrorEvent("ioError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net_URLLoaderDataFormat = {};
openfl_net_URLLoaderDataFormat.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net_URLLoaderDataFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	if(openfl_net_URLRequestDefaults.idleTimeout > 0) {
		this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout;
	} else {
		this.idleTimeout = 30000;
	}
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = "openfl.net.URLRequest";
openfl_net_URLRequest.prototype = {
	__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = "openfl.net.URLRequestDefaults";
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = "openfl.net.URLRequestHeader";
openfl_net_URLRequestHeader.prototype = {
	__class__: openfl_net_URLRequestHeader
};
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = "openfl.system.ApplicationDomain";
openfl_system_ApplicationDomain.prototype = {
	getDefinition: function(name) {
		return $hxClasses[name];
	}
	,hasDefinition: function(name) {
		return $hxClasses[name] != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = "openfl.system.LoaderContext";
openfl_system_LoaderContext.prototype = {
	__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = "openfl.system.SecurityDomain";
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = "openfl.system.System";
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"};
openfl_system_System.disposeXML = function(node) {
};
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/system/System.hx", lineNumber : 213, className : "openfl.system.System", methodName : "pause"});
};
openfl_system_System.resume = function() {
	openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/system/System.hx", lineNumber : 229, className : "openfl.system.System", methodName : "resume"});
};
openfl_system_System.setClipboard = function(string) {
	lime_system_Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_text_AntiAliasType = {};
openfl_text_AntiAliasType.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text_AntiAliasType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text_FontStyle = {};
openfl_text_FontStyle.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text_FontStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text_FontType = {};
openfl_text_FontType.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text_FontType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text_GridFitType = {};
openfl_text_GridFitType.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text_GridFitType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text_TextField = function() {
	this.__forceCachedBitmapUpdate = false;
	this.__renderedOnCanvasWhileOnDOM = false;
	this.__mouseScrollVCounter = 0;
	openfl_display_InteractiveObject.call(this);
	this.__drawableType = 7;
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl_text__$internal_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	this.doubleClickEnabled = true;
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl_text__$internal_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
	this.addEventListener("mouseWheel",$bind(this,this.this_onMouseWheel));
	this.addEventListener("doubleClick",$bind(this,this.this_onDoubleClick));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = "openfl.text.TextField";
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	appendText: function(text) {
		if(text == null || text == "") {
			return;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		this.__updateText(this.__text + text);
		this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end = this.__text.length;
		this.__selectionIndex = this.__caretIndex = this.__text.length;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return null;
		}
		var rect = new openfl_geom_Rectangle();
		if(this.__getCharBoundaries(charIndex,rect)) {
			return rect;
		} else {
			return null;
		}
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.get(i);
		}
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(y >= group1.offsetY && y <= group1.offsetY + group1.height) {
				if(x >= group1.offsetX && x <= group1.offsetX + group1.width) {
					var advance = 0.0;
					var _g = 0;
					var _g1 = group1.positions.length;
					while(_g < _g1) {
						var i = _g++;
						advance += group1.positions[i];
						if(x <= group1.offsetX + advance) {
							return group1.startIndex + i;
						}
					}
					return group1.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.get_text().length) {
			return -1;
		}
		if(this.__textEngine.lineBreaks.get_length() == 0) {
			return 0;
		}
		var _g = 0;
		var _g1 = this.__textEngine.lineBreaks.get_length();
		while(_g < _g1) {
			var i = _g++;
			if(charIndex <= this.__textEngine.lineBreaks.get(i)) {
				if(i == 0) {
					return 0;
				} else {
					return this.__textEngine.lineBreaks.get(i - 1) + 1;
				}
			}
		}
		return this.__textEngine.lineBreaks.get(this.__textEngine.lineBreaks.get_length() - 1) + 1;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.get(i);
		}
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(y >= group1.offsetY && y <= group1.offsetY + group1.height) {
				return group1.lineIndex;
			}
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length) {
			return -1;
		}
		this.__updateLayout();
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.startIndex <= charIndex && group1.endIndex >= charIndex) {
				return group1.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group1.startIndex;
				}
			} else if(group1.lineIndex == lineIndex + 1) {
				endIndex = group1.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.get(lineIndex);
		var descender = this.__textEngine.lineDescents.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.get(lineIndex);
		var margin;
		switch(this.__textFormat.align) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				return group1.startIndex;
			}
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return null;
		}
		var startIndex = -1;
		var endIndex = -1;
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group1.startIndex;
				}
			} else if(group1.lineIndex == lineIndex + 1) {
				endIndex = group1.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.get_text().length) {
			return -1;
		}
		var startIndex = this.getFirstCharInParagraph(charIndex);
		if(charIndex >= this.get_text().length) {
			return this.get_text().length - startIndex + 1;
		}
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = -1;
		}
		if(beginIndex == null) {
			beginIndex = -1;
		}
		var format = null;
		if(beginIndex >= this.get_text().length || beginIndex < -1 || endIndex > this.get_text().length || endIndex < -1) {
			throw haxe_Exception.thrown(new openfl_errors_RangeError("The supplied index is out of bounds"));
		}
		if(beginIndex == -1) {
			beginIndex = 0;
		}
		if(endIndex == -1) {
			endIndex = this.get_text().length;
		}
		if(beginIndex >= endIndex) {
			return new openfl_text_TextFormat();
		}
		var group = this.__textEngine.textFormatRanges.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.start <= beginIndex && group1.end > beginIndex || group1.start < endIndex && group1.end >= endIndex) {
				if(format == null) {
					format = group1.format.clone();
				} else {
					if(group1.format.font != format.font) {
						format.font = null;
					}
					if(group1.format.size != format.size) {
						format.size = null;
					}
					if(group1.format.color != format.color) {
						format.color = null;
					}
					if(group1.format.bold != format.bold) {
						format.bold = null;
					}
					if(group1.format.italic != format.italic) {
						format.italic = null;
					}
					if(group1.format.underline != format.underline) {
						format.underline = null;
					}
					if(group1.format.url != format.url) {
						format.url = null;
					}
					if(group1.format.target != format.target) {
						format.target = null;
					}
					if(group1.format.align != format.align) {
						format.align = null;
					}
					if(group1.format.leftMargin != format.leftMargin) {
						format.leftMargin = null;
					}
					if(group1.format.rightMargin != format.rightMargin) {
						format.rightMargin = null;
					}
					if(group1.format.indent != format.indent) {
						format.indent = null;
					}
					if(group1.format.leading != format.leading) {
						format.leading = null;
					}
					if(group1.format.blockIndent != format.blockIndent) {
						format.blockIndent = null;
					}
					if(group1.format.bullet != format.bullet) {
						format.bullet = null;
					}
					if(group1.format.kerning != format.kerning) {
						format.kerning = null;
					}
					if(group1.format.letterSpacing != format.letterSpacing) {
						format.letterSpacing = null;
					}
					if(group1.format.tabStops != format.tabStops) {
						format.tabStops = null;
					}
				}
			}
		}
		if(format == null) {
			format = new openfl_text_TextFormat();
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		this.__replaceSelectedText(value,false);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		this.__replaceText(beginIndex,endIndex,newText,false);
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__updateScrollV();
		this.__updateScrollH();
		if(this.stage != null && this.stage.get_focus() == this) {
			this.__stopCursorTimer();
			this.__startCursorTimer();
		}
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = -1;
		}
		if(beginIndex == null) {
			beginIndex = -1;
		}
		var max = this.get_text().length;
		var range;
		if(beginIndex == -1) {
			if(endIndex == -1) {
				endIndex = max;
			}
			beginIndex = 0;
		} else if(endIndex == -1) {
			endIndex = beginIndex + 1;
		}
		if(beginIndex == endIndex) {
			return;
		}
		if(beginIndex < 0 || endIndex <= 0 || endIndex < beginIndex || beginIndex >= max || endIndex > max) {
			throw haxe_Exception.thrown(new openfl_errors_RangeError());
		}
		if(beginIndex == 0 && endIndex == max) {
			this.__textEngine.textFormatRanges.set_length(1);
			range = this.__textEngine.textFormatRanges.get(0);
			range.start = 0;
			range.end = max;
			range.format.__merge(format);
		} else {
			var index = 0;
			var newRange;
			while(index < this.__textEngine.textFormatRanges.get_length()) {
				range = this.__textEngine.textFormatRanges.get(index);
				if(range.end <= beginIndex) {
					++index;
				} else if(range.start >= endIndex) {
					break;
				} else if(range.start <= beginIndex && range.end >= endIndex) {
					if(range.start == beginIndex && range.end == endIndex) {
						range.format = range.format.clone();
						range.format.__merge(format);
						break;
					} else if(range.start == beginIndex) {
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
						newRange.format.__merge(format);
						this.__textEngine.textFormatRanges.insertAt(index,newRange);
						range.start = endIndex;
						index += 2;
					} else if(range.end == endIndex) {
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
						newRange.format.__merge(format);
						this.__textEngine.textFormatRanges.insertAt(index + 1,newRange);
						range.end = beginIndex;
						break;
					} else {
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
						newRange.format.__merge(format);
						this.__textEngine.textFormatRanges.insertAt(index + 1,newRange);
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),endIndex,range.end);
						this.__textEngine.textFormatRanges.insertAt(index + 2,newRange);
						range.end = beginIndex;
						break;
					}
				} else if(range.start >= beginIndex && range.end <= endIndex) {
					if(range.start == beginIndex) {
						range.format = range.format.clone();
						range.format.__merge(format);
						range.end = endIndex;
					} else {
						this.__textEngine.textFormatRanges.removeAt(index);
					}
				} else if(range.start > beginIndex && range.end > beginIndex) {
					range.start = endIndex;
					break;
				} else if(range.start < beginIndex && range.end <= endIndex) {
					newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
					newRange.format.__merge(format);
					this.__textEngine.textFormatRanges.insertAt(index + 1,newRange);
					range.end = beginIndex;
					index += 2;
				} else {
					++index;
					lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/text/TextField.hx", lineNumber : 1562, className : "openfl.text.TextField", methodName : "setTextFormat"});
				}
			}
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__allowMouseFocus: function() {
		if(!(this.__textEngine.type == 1 || this.get_tabEnabled())) {
			return this.get_selectable();
		} else {
			return true;
		}
	}
	,__caretBeginningOfLine: function() {
		this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
	}
	,__caretBeginningOfNextLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1);
		} else {
			this.__caretIndex = this.__text.length;
		}
	}
	,__caretBeginningOfPreviousLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex > 0) {
			var index = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
			if(this.__caretIndex == index) {
				this.__caretIndex = this.getLineOffset(lineIndex - 1);
			} else {
				this.__caretIndex = index;
			}
		}
	}
	,__caretEndOfLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
		} else {
			this.__caretIndex = this.__text.length;
		}
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < this.__text.length) {
			this.__caretIndex++;
		}
	}
	,__caretNextLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.__getCharIndexOnDifferentLine(this.get_caretIndex(),lineIndex + 1);
		}
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) {
			this.__caretIndex--;
		}
	}
	,__caretPreviousLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex > 0) {
			this.__caretIndex = this.__getCharIndexOnDifferentLine(this.get_caretIndex(),lineIndex - 1);
		}
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.__backend.setTextInputEnabled(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var event1 = event;
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != null && url != "") {
					if(StringTools.startsWith(url,"event:")) {
						this.dispatchEvent(new openfl_events_TextEvent("link",false,false,HxOverrides.substr(url,6,null)));
					} else {
						openfl_Lib.getURL(new openfl_net_URLRequest(url));
					}
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			this.stage.window.__backend.setTextInputEnabled(true);
			if(!this.__inputEnabled) {
				this.stage.window.__backend.setTextInputEnabled(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__getAdvance: function(position) {
		return position;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		matrix.tx += this.__offsetX;
		matrix.ty += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharBoundaries: function(charIndex,rect) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return false;
		}
		this.__updateLayout();
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(charIndex >= group1.startIndex && charIndex < group1.endIndex) {
				try {
					var x = group1.offsetX;
					var _g = 0;
					var _g1 = charIndex - group1.startIndex;
					while(_g < _g1) {
						var i = _g++;
						x += group1.positions[i];
					}
					var lastPosition = group1.positions[charIndex - group1.startIndex];
					rect.setTo(x,group1.offsetY,lastPosition,group1.ascent + group1.descent);
					return true;
				} catch( _g2 ) {
					haxe_NativeStackTrace.lastError = _g2;
				}
			}
		}
		return false;
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > this.__text.length) {
			return -1;
		}
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var x = null;
		var y = null;
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(charIndex >= group1.startIndex && charIndex <= group1.endIndex) {
				x = group1.offsetX;
				var _g = 0;
				var _g1 = charIndex - group1.startIndex;
				while(_g < _g1) {
					var i = _g++;
					x += group1.positions[i];
				}
				if(y != null) {
					return this.__getPosition(x,y);
				}
			}
			if(group1.lineIndex == lineIndex) {
				y = group1.offsetY + group1.height / 2;
				var _g2 = 0;
				var _g3 = this.get_scrollV() - 1;
				while(_g2 < _g3) {
					var i1 = _g2++;
					y -= this.__textEngine.lineHeights.get(i1);
				}
				if(x != null) {
					return this.__getPosition(x,y);
				}
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") {
			return "button";
		} else if(this.__textEngine.selectable) {
			return "ibeam";
		}
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) {
			precise = false;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.get(i);
		}
		if(!precise && y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups.get_length();
		while(_g < _g1) {
			var i = _g++;
			group = this.__textEngine.layoutGroups.get(i);
			if(i < this.__textEngine.layoutGroups.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.get(i + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					return group;
				}
			}
		}
		return null;
	}
	,__getPosition: function(x,y) {
		var group = this.__getGroup(x,y);
		if(group == null) {
			return this.__text.length;
		}
		var advance = 0.0;
		var _g = 0;
		var _g1 = group.positions.length;
		while(_g < _g1) {
			var i = _g++;
			advance += group.positions[i];
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.positions[i]) + group.positions[i] / 2) {
					return group.startIndex + i;
				} else if(group.startIndex + i < group.endIndex) {
					return group.startIndex + i + 1;
				} else {
					return group.endIndex;
				}
			}
		}
		return group.endIndex;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			return true;
		}
		return false;
	}
	,__replaceSelectedText: function(value,restrict) {
		if(restrict == null) {
			restrict = true;
		}
		if(value == null) {
			value = "";
		}
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && this.__text.length == this.__textEngine.maxChars) {
			return;
		}
		if(startIndex > this.__text.length) {
			startIndex = this.__text.length;
		}
		if(endIndex > this.__text.length) {
			endIndex = this.__text.length;
		}
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		this.__replaceText(startIndex,endIndex,value,restrict);
	}
	,__replaceText: function(beginIndex,endIndex,newText,restrict) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__text.length || newText == null) {
			return;
		}
		if(restrict) {
			newText = this.__textEngine.restrictText(newText);
			if(this.__textEngine.maxChars > 0) {
				var removeLength = endIndex - beginIndex;
				var maxLength = this.__textEngine.maxChars - this.__text.length + removeLength;
				if(maxLength <= 0) {
					newText = "";
				} else if(maxLength < newText.length) {
					newText = HxOverrides.substr(newText,0,maxLength);
				}
			}
		}
		this.__updateText(this.__text.substring(0,beginIndex) + newText + this.__text.substring(endIndex));
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.get_length()) {
			range = this.__textEngine.textFormatRanges.get(i);
			if(beginIndex == endIndex) {
				if(range.start == range.end) {
					if(range.start != 0) {
						lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/text/TextField.hx", lineNumber : 2051, className : "openfl.text.TextField", methodName : "__replaceText"});
					} else {
						range.end += offset;
					}
				} else if(range.end >= beginIndex) {
					if(range.start >= beginIndex) {
						range.start += offset;
						range.end += offset;
					} else if(range.start < beginIndex && range.end >= endIndex) {
						range.end += offset;
					}
				}
			} else if(range.end > beginIndex) {
				if(range.start > endIndex) {
					range.start += offset;
					range.end += offset;
				} else if(range.start <= beginIndex && range.end > endIndex) {
					range.end += offset;
				} else if(range.start >= beginIndex && range.end <= endIndex) {
					this.__textEngine.textFormatRanges.splice(i--,1);
				} else if(range.end > endIndex && range.start > beginIndex && range.start <= endIndex) {
					range.start = beginIndex;
					range.end += offset;
				} else if(range.start < beginIndex && range.end > beginIndex && range.end <= endIndex) {
					range.end = beginIndex;
				}
			}
			++i;
		}
		if(this.__textEngine.textFormatRanges.get_length() == 0) {
			this.__textEngine.textFormatRanges.push(new openfl_text__$internal_TextFormatRange(this.get_defaultTextFormat().clone(),0,newText.length));
		} else if(beginIndex == endIndex && this.__textEngine.textFormatRanges.get(0).start > 0) {
			this.__textEngine.textFormatRanges.unshift(new openfl_text__$internal_TextFormatRange(this.get_defaultTextFormat().clone(),0,this.__textEngine.textFormatRanges.get(0).start));
		} else if(beginIndex != endIndex && this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end < this.__text.length) {
			this.__textEngine.textFormatRanges.push(new openfl_text__$internal_TextFormatRange(this.get_defaultTextFormat().clone(),this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end,this.__text.length));
		}
		this.__selectionIndex = this.__caretIndex = beginIndex + newText.length;
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__startCursorTimer: function() {
		if(this.get_type() == 1) {
			this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
			this.__showCursor = !this.__showCursor;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		var enableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(enableInput) {
			this.__enableInput();
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__stopTextInput: function() {
		var disableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(disableInput) {
			this.__disableInput();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					switch(this.__textEngine.autoSize) {
					case 0:
						var _g = this;
						_g.set_x(_g.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g = this;
						_g.set_x(_g.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
			this.setSelection(this.__selectionIndex,this.__caretIndex);
		}
	}
	,__updateScrollH: function() {
		this.__updateLayout();
		if(this.get_textWidth() <= this.get_width() - 4) {
			this.set_scrollH(0);
			return;
		}
		var tempScrollH = this.get_scrollH();
		if(this.__caretIndex == 0 || this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex)) == this.__caretIndex) {
			tempScrollH = 0;
		} else {
			var caret = openfl_geom_Rectangle.__pool.get();
			var written = false;
			if(this.__caretIndex < this.__text.length) {
				written = this.__getCharBoundaries(this.__caretIndex,caret);
			}
			if(!written) {
				this.__getCharBoundaries(this.__caretIndex - 1,caret);
				caret.x += caret.width;
			}
			while(caret.x < tempScrollH && tempScrollH > 0) tempScrollH -= 24;
			while(caret.x > tempScrollH + this.get_width() - 4) tempScrollH += 24;
			openfl_geom_Rectangle.__pool.release(caret);
		}
		if(tempScrollH > 0 && this.get_type() != 1) {
			var lineLength = this.getLineLength(this.getLineIndexOfChar(this.__caretIndex));
			if(this.get_scrollH() + this.get_width() - 4 > lineLength) {
				this.set_scrollH(Math.ceil(lineLength - this.get_width() + 4));
			}
		}
		if(tempScrollH < 0) {
			this.set_scrollH(0);
		} else if(tempScrollH > this.get_maxScrollH()) {
			this.set_scrollH(this.get_maxScrollH());
		} else {
			this.set_scrollH(tempScrollH);
		}
	}
	,__updateScrollV: function() {
		this.__updateLayout();
		if(this.get_textHeight() <= this.get_height() - 4) {
			this.set_scrollV(1);
			return;
		}
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex == -1 && this.__caretIndex > 0) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex - 1) + 1;
		}
		if(lineIndex + 1 < this.get_scrollV()) {
			this.set_scrollV(lineIndex + 1);
		} else if(lineIndex + 1 > this.get_bottomScrollV()) {
			var i = lineIndex;
			var tempHeight = 0.0;
			while(i >= 0) if(tempHeight + this.__textEngine.lineHeights.get(i) <= this.get_height() - 4) {
				tempHeight += this.__textEngine.lineHeights.get(i);
				--i;
			} else {
				break;
			}
			this.set_scrollV(i + 2);
		} else {
			this.set_scrollV(this.get_scrollV());
		}
	}
	,__updateMouseDrag: function() {
		if(this.get_mouseX() > this.get_width() - 1) {
			var _g = this;
			_g.set_scrollH(_g.get_scrollH() + (Math.max(Math.min((this.get_mouseX() - this.get_width()) * .1,10),1) | 0));
		} else if(this.get_mouseX() < 1) {
			var _g = this;
			_g.set_scrollH(_g.get_scrollH() - (Math.max(Math.min(this.get_mouseX() * -.1,10),1) | 0));
		}
		this.__mouseScrollVCounter++;
		if(this.__mouseScrollVCounter > this.stage.get_frameRate() / 10) {
			if(this.get_mouseY() > this.get_height() - 2) {
				var _g = this;
				_g.set_scrollV(_g.get_scrollV() + (Math.max(Math.min((this.get_mouseY() - this.get_height()) * .03,5),1) | 0));
			} else if(this.get_mouseY() < 2) {
				var _g = this;
				_g.set_scrollV(_g.get_scrollV() - (Math.max(Math.min(this.get_mouseY() * -.03,5),1) | 0));
			}
			this.__mouseScrollVCounter = 0;
		}
		this.stage_onMouseMove(null);
	}
	,__updateText: function(value) {
		if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
			this.__forceCachedBitmapUpdate = this.__text != value;
		}
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if(this.__text.length < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = this.__text.length;
		}
		if(!this.__displayAsPassword || openfl_display_DisplayObject.__supportDOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__textEngine.set_text(this.__text);
		} else {
			var length = this.get_text().length;
			var mask = "";
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		var tmp = value != this.__textEngine.antiAliasType;
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.get_bottomScrollV();
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		if(this.__isHTML) {
			return this.__rawHtmlText;
		} else {
			return this.__text;
		}
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__isHTML = true;
		this.__rawHtmlText = value;
		value = openfl_text__$internal_HTMLParser.parse(value,this.__textFormat,this.__textEngine.textFormatRanges);
		if(openfl_display_DisplayObject.__supportDOM) {
			if(this.__textEngine.textFormatRanges.get_length() > 1) {
				this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
			}
			var range = this.__textEngine.textFormatRanges.get(0);
			range.format = this.__textFormat;
			range.start = 0;
			if(this.__renderedOnCanvasWhileOnDOM) {
				range.end = value.length;
				this.__updateText(value);
			} else {
				range.end = this.__rawHtmlText.length;
				this.__updateText(this.__rawHtmlText);
			}
		} else {
			this.__updateText(value);
		}
		this.__selectionIndex = this.__caretIndex = this.get_length();
		return value;
	}
	,get_length: function() {
		if(this.__text != null) {
			return this.__text.length;
		}
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__textEngine.maxChars = value;
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.get_maxScrollV();
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__updateText(this.__text);
			this.__updateScrollH();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		if(this.__textEngine.restrict != value) {
			this.__textEngine.set_restrict(value);
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.scrollH = value;
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollH;
	}
	,get_scrollV: function() {
		return this.__textEngine.get_scrollV();
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > 0 && value != this.__textEngine.get_scrollV()) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.set_scrollV(value);
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.get_scrollV();
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Math.min(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_selectionEndIndex: function() {
		return Math.max(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.sharpness = value;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__textEngine.type == 1;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.get_length() > 1) {
			this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
		}
		var utfValue = value;
		var range = this.__textEngine.textFormatRanges.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = utfValue.length;
		this.__isHTML = false;
		this.__updateText(value);
		this.__selectionIndex = this.__caretIndex = 0;
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		var range = this.__textEngine.textFormatRanges.iterator();
		while(range.hasNext()) {
			var range1 = range.next();
			range1.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.wordWrap = value;
	}
	,get_x: function() {
		return this.__transform.tx + this.__offsetX;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx + this.__offsetX) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value - this.__offsetX;
	}
	,get_y: function() {
		return this.__transform.ty + this.__offsetY;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty + this.__offsetY) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value - this.__offsetY;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.get_selectable() && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				var setDirty = true;
				if(openfl_display_DisplayObject.__supportDOM) {
					if(this.__renderedOnCanvasWhileOnDOM) {
						this.__forceCachedBitmapUpdate = true;
					}
					setDirty = false;
				}
				if(setDirty) {
					this.__dirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
				}
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			var rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
				if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
					this.__forceCachedBitmapUpdate = true;
				}
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onEnterFrame: function(e) {
		this.__updateMouseDrag();
	}
	,this_onFocusIn: function(event) {
		if(this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		if(event.relatedObject == null || !((event.relatedObject) instanceof openfl_text_TextField)) {
			this.__stopTextInput();
		} else {
			if(this.stage != null) {
				this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
				this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			}
			this.__inputEnabled = false;
		}
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex) {
				lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
			}
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable() && this.get_type() != 1) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		if(!openfl_display_DisplayObject.__supportDOM) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.stage.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,this_onMouseWheel: function(event) {
		if(this.get_mouseWheelEnabled()) {
			var _g = this;
			_g.set_scrollV(_g.get_scrollV() - event.delta);
		}
	}
	,this_onDoubleClick: function(event) {
		if(this.get_selectable()) {
			this.__updateLayout();
			var delimiters = ["\n",".","!","?",","," ",";",":","(",")","-","_","/"];
			var txtStr = this.__text;
			var leftPos = -1;
			var rightPos = txtStr.length;
			var pos = 0;
			var startPos = Math.max(this.__caretIndex,1) | 0;
			if(txtStr.length > 0 && this.__caretIndex >= 0 && rightPos >= this.__caretIndex) {
				var _g = 0;
				while(_g < delimiters.length) {
					var c = delimiters[_g];
					++_g;
					pos = txtStr.lastIndexOf(c,startPos - 1);
					if(pos > leftPos) {
						leftPos = pos + 1;
					}
					pos = txtStr.indexOf(c,startPos);
					if(pos < rightPos && pos != -1) {
						rightPos = pos;
					}
				}
				if(leftPos != rightPos) {
					this.setSelection(leftPos,rightPos);
					var setDirty = true;
					if(openfl_display_DisplayObject.__supportDOM) {
						if(this.__renderedOnCanvasWhileOnDOM) {
							this.__forceCachedBitmapUpdate = true;
						}
						setDirty = false;
					}
					if(setDirty) {
						this.__dirty = true;
						if(!this.__renderDirty) {
							this.__renderDirty = true;
							this.__setParentRenderDirty();
						}
					}
				}
			}
		}
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			} else {
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 97:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.setSelection(0,this.__text.length);
				}
			}
			break;
		case 99:
			if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
				}
			}
			break;
		case 120:
			if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__text.length) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			} else {
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741898:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = 0;
				} else {
					this.__caretBeginningOfLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741901:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = this.__text.length;
				} else {
					this.__caretEndOfLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741903:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretBeginningOfNextLine();
				} else {
					this.__caretNextCharacter();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741904:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretBeginningOfPreviousLine();
				} else {
					this.__caretPreviousCharacter();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741905:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = this.__text.length;
				} else {
					this.__caretNextLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741906:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = 0;
				} else {
					this.__caretPreviousLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				var te = new openfl_events_TextEvent("textInput",true,true,"\n");
				this.dispatchEvent(te);
				if(!te.isDefaultPrevented()) {
					this.__replaceSelectedText("\n",true);
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			} else {
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.__replaceSelectedText(value,true);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_text_TextFieldAutoSize = {};
openfl_text_TextFieldAutoSize.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text_TextFieldAutoSize.toString = function(this1) {
	switch(this1) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text_TextFieldType = {};
openfl_text_TextFieldType.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text_TextFieldType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = "openfl.text.TextFormat";
openfl_text_TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		newFormat.__cacheKey = this.__toCacheKey();
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null) {
			this.url = format.url;
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
		if(format.__ascent != null) {
			this.__ascent = format.__ascent;
		}
		if(format.__descent != null) {
			this.__descent = format.__descent;
		}
		this.__toCacheKey();
	}
	,__toCacheKey: function() {
		return this.__cacheKey = "" + this.font + this.size + Std.string(this.bold) + Std.string(this.italic);
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text_TextFormatAlign = {};
openfl_text_TextFormatAlign.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text_TextFormatAlign.toString = function(this1) {
	switch(this1) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = "openfl.text.TextLineMetrics";
openfl_text_TextLineMetrics.prototype = {
	__class__: openfl_text_TextLineMetrics
};
var openfl_text__$internal_CacheMeasurement = function(wordKey,positions) {
	this.__collisions = [];
	this.__wordMap = new haxe_ds_IntMap();
	this.set(wordKey,positions);
};
$hxClasses["openfl.text._internal.CacheMeasurement"] = openfl_text__$internal_CacheMeasurement;
openfl_text__$internal_CacheMeasurement.__name__ = "openfl.text._internal.CacheMeasurement";
openfl_text__$internal_CacheMeasurement.prototype = {
	set: function(wordKey,positions) {
		this.__addCollision(wordKey,positions);
	}
	,get: function(wordKey) {
		if(this.__collisions.length > 1) {
			return this.__wordMap.h[this.__collisions.indexOf(wordKey)];
		}
		return this.__wordMap.h[0];
	}
	,__addCollision: function(wordKey,positions) {
		if(!this.exists(wordKey)) {
			var _this = this.__wordMap;
			var key = this.__collisions.push(wordKey) - 1;
			_this.h[key] = positions;
		}
	}
	,exists: function(wordKey) {
		if(this.__collisions.length == 0) {
			return false;
		}
		return this.__collisions.indexOf(wordKey) > -1;
	}
	,__class__: openfl_text__$internal_CacheMeasurement
};
var openfl_text__$internal_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) {
		this.offset = offset;
	} else {
		this.offset = new lime_math_Vector2();
	}
};
$hxClasses["openfl.text._internal.GlyphPosition"] = openfl_text__$internal_GlyphPosition;
openfl_text__$internal_GlyphPosition.__name__ = "openfl.text._internal.GlyphPosition";
openfl_text__$internal_GlyphPosition.prototype = {
	__class__: openfl_text__$internal_GlyphPosition
};
var openfl_text__$internal_HTMLParser = function() { };
$hxClasses["openfl.text._internal.HTMLParser"] = openfl_text__$internal_HTMLParser;
openfl_text__$internal_HTMLParser.__name__ = "openfl.text._internal.HTMLParser";
openfl_text__$internal_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = value.replace(openfl_text__$internal_HTMLParser.__regexBreakTag.r,"\n");
	value = value.replace(openfl_text__$internal_HTMLParser.__regexEntities[5].r," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = StringTools.htmlUnescape(value.replace(openfl_text__$internal_HTMLParser.__regexHTMLTag.r,""));
		if(textFormatRanges.get_length() > 1) {
			textFormatRanges.splice(1,textFormatRanges.get_length() - 1);
		}
		var range = textFormatRanges.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		textFormatRanges.splice(0,textFormatRanges.get_length());
		value = "";
		var segment;
		var formatStack = [textFormat.clone()];
		var tagStack = [];
		var sub;
		var noLineBreak = false;
		var _g = 0;
		while(_g < segments.length) {
			var segment = segments[_g];
			++_g;
			if(segment == "") {
				continue;
			}
			var isClosingTag = HxOverrides.substr(segment,0,1) == "/";
			var tagEndIndex = segment.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment.indexOf(" ");
			var tagName = segment.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
			var format;
			if(isClosingTag) {
				if(tagStack.length == 0 || tagName.toLowerCase() != tagStack[tagStack.length - 1].toLowerCase()) {
					lime_utils_Log.info("Invalid HTML, unexpected closing tag ignored: " + tagName,{ fileName : "openfl/text/_internal/HTMLParser.hx", lineNumber : 82, className : "openfl.text._internal.HTMLParser", methodName : "parse"});
					continue;
				}
				tagStack.pop();
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.get_length() > 0) {
					value += "\n";
					noLineBreak = true;
				}
				if(start < segment.length) {
					sub = StringTools.htmlUnescape(HxOverrides.substr(segment,start,null));
					textFormatRanges.push(new openfl_text__$internal_TextFormatRange(format,value.length,value.length + sub.length));
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					switch(tagName.toLowerCase()) {
					case "a":
						if(openfl_text__$internal_HTMLParser.__regexHref.match(segment)) {
							format.url = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl_text__$internal_HTMLParser.__regexFace.match(segment)) {
							format.font = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexFace);
						}
						if(openfl_text__$internal_HTMLParser.__regexColor.match(segment)) {
							format.color = Std.parseInt("0x" + openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexColor));
						}
						if(openfl_text__$internal_HTMLParser.__regexSize.match(segment)) {
							var sizeAttr = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat = formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "p":
						if(textFormatRanges.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl_text__$internal_HTMLParser.__regexAlign.match(segment)) {
							var align = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexAlign).toLowerCase();
							format.align = openfl_text_TextFormatAlign.fromString(align);
						}
						break;
					case "textformat":
						if(openfl_text__$internal_HTMLParser.__regexBlockIndent.match(segment)) {
							format.blockIndent = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexBlockIndent));
						}
						if(openfl_text__$internal_HTMLParser.__regexIndent.match(segment)) {
							format.indent = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexIndent));
						}
						if(openfl_text__$internal_HTMLParser.__regexLeading.match(segment)) {
							format.leading = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexLeading));
						}
						if(openfl_text__$internal_HTMLParser.__regexLeftMargin.match(segment)) {
							format.leftMargin = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexLeftMargin));
						}
						if(openfl_text__$internal_HTMLParser.__regexRightMargin.match(segment)) {
							format.rightMargin = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexRightMargin));
						}
						if(openfl_text__$internal_HTMLParser.__regexTabStops.match(segment)) {
							var values = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g1 = 0;
							while(_g1 < values.length) {
								var stop = values[_g1];
								++_g1;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					tagStack.push(tagName);
					if(start < segment.length) {
						sub = StringTools.htmlUnescape(segment.substring(start));
						textFormatRanges.push(new openfl_text__$internal_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						noLineBreak = false;
					}
				} else {
					sub = StringTools.htmlUnescape(segment);
					textFormatRanges.push(new openfl_text__$internal_TextFormatRange(format,value.length,value.length + sub.length));
					value += sub;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.get_length() == 0) {
			textFormatRanges.push(new openfl_text__$internal_TextFormatRange(formatStack[0],0,0));
		}
	}
	return value;
};
openfl_text__$internal_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl_text__$internal_ShapeCache = function() {
	this.__shortWordMap = new haxe_ds_StringMap();
	this.__longWordMap = new haxe_ds_StringMap();
};
$hxClasses["openfl.text._internal.ShapeCache"] = openfl_text__$internal_ShapeCache;
openfl_text__$internal_ShapeCache.__name__ = "openfl.text._internal.ShapeCache";
openfl_text__$internal_ShapeCache.hashFunction = function(key) {
	var hash = 0;
	var i;
	var chr;
	var _g = 0;
	var _g1 = key.length;
	while(_g < _g1) {
		var i = _g++;
		chr = HxOverrides.cca(key,i);
		hash = (hash << 5) - hash + chr;
		hash |= 0;
	}
	return hash;
};
openfl_text__$internal_ShapeCache.prototype = {
	cache: function(formatRange,getPositions,wordKey) {
		var formatKey = formatRange.format.__cacheKey;
		if(wordKey.length > 15) {
			return this.__cacheLongWord(wordKey,formatKey,getPositions);
		} else {
			return this.__cacheShortWord(wordKey,formatKey,getPositions);
		}
	}
	,__cacheShortWord: function(wordKey,formatKey,getPositions) {
		if(Object.prototype.hasOwnProperty.call(this.__shortWordMap.h,formatKey)) {
			var formatMap = this.__shortWordMap.h[formatKey];
			if(Object.prototype.hasOwnProperty.call(formatMap.h,wordKey)) {
				return formatMap.h[wordKey];
			} else {
				var value = getPositions();
				formatMap.h[wordKey] = value;
			}
		} else {
			var formatMap = new haxe_ds_StringMap();
			var value = getPositions();
			formatMap.h[wordKey] = value;
			this.__shortWordMap.h[formatKey] = formatMap;
		}
		return getPositions();
	}
	,__cacheLongWord: function(wordKey,formatKey,getPositions) {
		var hash = openfl_text__$internal_ShapeCache.hashFunction(wordKey);
		if(Object.prototype.hasOwnProperty.call(this.__longWordMap.h,formatKey)) {
			var formatMap = this.__longWordMap.h[formatKey];
			if(formatMap.h.hasOwnProperty(hash)) {
				var measurement = formatMap.h[hash];
				if(measurement.exists(wordKey)) {
					return measurement.get(wordKey);
				} else {
					measurement.set(wordKey,getPositions());
				}
			} else {
				var measurement = new openfl_text__$internal_CacheMeasurement(wordKey,getPositions());
				formatMap.h[hash] = measurement;
			}
		} else {
			var formatMap = new haxe_ds_IntMap();
			var measurement = new openfl_text__$internal_CacheMeasurement(wordKey,getPositions());
			measurement.hash = hash;
			formatMap.h[hash] = measurement;
			this.__longWordMap.h[formatKey] = formatMap;
		}
		return getPositions();
	}
	,__class__: openfl_text__$internal_ShapeCache
};
var openfl_text__$internal_TextEngine = function(textField) {
	this.__shapeCache = new openfl_text__$internal_ShapeCache();
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.textBounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.numLines = 1;
	this.sharpness = 0;
	this.scrollH = 0;
	this.set_scrollV(1);
	this.wordWrap = false;
	this.lineAscents = openfl_Vector.toFloatVector(null);
	this.lineBreaks = openfl_Vector.toIntVector(null);
	this.lineDescents = openfl_Vector.toFloatVector(null);
	this.lineLeadings = openfl_Vector.toFloatVector(null);
	this.lineHeights = openfl_Vector.toFloatVector(null);
	this.lineWidths = openfl_Vector.toFloatVector(null);
	this.layoutGroups = openfl_Vector.toObjectVector(null);
	this.textFormatRanges = openfl_Vector.toObjectVector(null);
	if(openfl_text__$internal_TextEngine.__context == null) {
		openfl_text__$internal_TextEngine.__context = window.document.createElement("canvas").getContext("2d");
	}
};
$hxClasses["openfl.text._internal.TextEngine"] = openfl_text__$internal_TextEngine;
openfl_text__$internal_TextEngine.__name__ = "openfl.text._internal.TextEngine";
openfl_text__$internal_TextEngine.findFont = function(name) {
	return openfl_text_Font.__fontByName.h[name];
};
openfl_text__$internal_TextEngine.findFontVariant = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold Italic")) {
		return openfl_text__$internal_TextEngine.findFont(fontNamePrefix + " Bold Italic");
	} else if(bold && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold")) {
		return openfl_text__$internal_TextEngine.findFont(fontNamePrefix + " Bold");
	} else if(italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Italic")) {
		return openfl_text__$internal_TextEngine.findFont(fontNamePrefix + " Italic");
	}
	return openfl_text__$internal_TextEngine.findFont(fontName);
};
openfl_text__$internal_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	openfl_text__$internal_TextEngine.__context.font = openfl_text__$internal_TextEngine.getFont(format);
	var font = openfl_text__$internal_TextEngine.getFontInstance(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else if(font != null && font.unitsPerEM != 0) {
		ascent = font.ascender / font.unitsPerEM * format.size;
		descent = Math.abs(font.descender / font.unitsPerEM * format.size);
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	var leading = format.leading;
	return ascent + descent + leading;
};
openfl_text__$internal_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold Italic")) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else if(bold && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold")) {
		fontName = fontNamePrefix + " Bold";
		bold = false;
	} else if(italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Italic")) {
		fontName = fontNamePrefix + " Italic";
		italic = false;
	} else {
		if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) {
			bold = false;
		}
		if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) {
			italic = false;
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		var _this_r = new RegExp("^[\\s'\"]+(.*)[\\s'\"]+$","".split("u").join(""));
		font1 = "'" + fontName.replace(_this_r,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl_text__$internal_TextEngine.getFontInstance = function(format) {
	return openfl_text__$internal_TextEngine.findFontVariant(format);
};
openfl_text__$internal_TextEngine.prototype = {
	createRestrictRegexp: function(restrict) {
		var declinedRange = new EReg("\\^(.-.|.)","gu");
		var declined = "";
		var accepted = declinedRange.map(restrict,function(ereg) {
			declined += ereg.matched(1);
			return "";
		});
		var testRegexpParts = [];
		if(accepted.length > 0) {
			testRegexpParts.push("[^" + restrict + "]");
		}
		if(declined.length > 0) {
			testRegexpParts.push("[" + declined + "]");
		}
		return new EReg("(" + testRegexpParts.join("|") + ")","g");
	}
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
		var x = this.width;
		var y = this.width;
		var group = this.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.offsetX < x) {
				x = group1.offsetX;
			}
			if(group1.offsetY < y) {
				y = group1.offsetY;
			}
		}
		if(x >= this.width) {
			x = 2;
		}
		if(y >= this.height) {
			y = 2;
		}
		var textHeight = this.textHeight * 1.185;
		this.textBounds.setTo(Math.max(x - 2,0),Math.max(y - 2,0),Math.min(this.textWidth + 4,this.bounds.width + 4),Math.min(textHeight + 4,this.bounds.height + 4));
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.get_length() + 1) {
			return null;
		}
		if(this.lineBreaks.get_length() == 0) {
			return this.text;
		} else {
			return this.text.substring(index > 0 ? this.lineBreaks.get(index - 1) : 0,this.lineBreaks.get(index));
		}
	}
	,getLineBreaks: function() {
		this.lineBreaks.set_length(0);
		var index = -1;
		var cr = -1;
		var lf = -1;
		while(index < this.text.length) {
			lf = this.text.indexOf("\n",index + 1);
			cr = this.text.indexOf("\r",index + 1);
			index = cr == -1 ? lf : lf == -1 ? cr : cr < lf ? cr : lf;
			if(index > -1) {
				this.lineBreaks.push(index);
			} else {
				break;
			}
		}
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var lineBreak = this.lineBreaks.iterator();
		while(lineBreak.hasNext()) {
			var lineBreak1 = lineBreak.next();
			if(lineBreak1 >= startIndex) {
				return lineBreak1;
			}
		}
		return -1;
	}
	,getLineMeasurements: function() {
		this.lineAscents.set_length(0);
		this.lineDescents.set_length(0);
		this.lineLeadings.set_length(0);
		this.lineHeights.set_length(0);
		this.lineWidths.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.maxScrollH = 0;
		var group = this.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			while(group1.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
			}
			currentLineAscent = Math.max(currentLineAscent,group1.ascent);
			currentLineDescent = Math.max(currentLineDescent,group1.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group1.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group1.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group1.height);
			currentLineWidth = group1.offsetX - 2 + group1.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = group1.offsetY - 2 + group1.ascent + group1.descent;
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		if(this.textHeight == 0 && this.textField != null && this.textField.get_type() == 1) {
			var currentFormat = this.textField.__textFormat;
			var ascent;
			var descent;
			var font = openfl_text__$internal_TextEngine.getFontInstance(currentFormat);
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else if(font != null && font.unitsPerEM != 0) {
				ascent = font.ascender / font.unitsPerEM * currentFormat.size;
				descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			var leading = currentFormat.leading;
			var heightValue = ascent + descent + leading;
			currentLineAscent = ascent;
			currentLineDescent = descent;
			currentLineLeading = leading;
			currentTextHeight = ascent + descent;
			this.textHeight = currentTextHeight;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		}
		if(this.layoutGroups.get_length() > 0) {
			var group = this.layoutGroups.get(this.layoutGroups.get_length() - 1);
			if(group != null && group.startIndex == group.endIndex) {
				this.textHeight -= currentLineHeight;
			}
		}
		if(this.autoSize != 2) {
			switch(this.autoSize) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		if(this.scrollH > this.maxScrollH) {
			this.scrollH = this.maxScrollH;
		}
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.set_length(0);
		if(this.text == null || this.text == "") {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var align = 3;
		var blockIndent = 0;
		var bullet = false;
		var indent = 0;
		var leftMargin = 0;
		var rightMargin = 0;
		var firstLineOfParagraph = true;
		var tabStops = null;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0;
		var maxHeightValue = 0;
		var previousSpaceIndex = -2;
		var previousBreakIndex = -1;
		var spaceIndex = this.text.indexOf(" ");
		var breakCount = 0;
		var breakIndex = breakCount < this.lineBreaks.get_length() ? this.lineBreaks.get(breakCount) : -1;
		var offsetX = 0.0;
		var offsetY = 0.0;
		var textIndex = 0;
		var lineIndex = 0;
		var getPositions = function(text,startIndex,endIndex) {
			var letterSpacing = 0.0;
			if(formatRange.format.letterSpacing != null) {
				letterSpacing = formatRange.format.letterSpacing;
			}
			var html5Positions = function() {
				var positions = [];
				if(_gthis.__useIntAdvances == null) {
					var html5Positions = new EReg("Trident/7.0","");
					_gthis.__useIntAdvances = html5Positions.match($global.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth = 0.0;
					var width;
					var _g = startIndex;
					var _g1 = endIndex;
					while(_g < _g1) {
						var i = _g++;
						width = openfl_text__$internal_TextEngine.__context.measureText(text.substring(startIndex,i + 1)).width;
						positions.push(width - previousWidth);
						previousWidth = width;
					}
				} else {
					var _g = startIndex;
					var _g1 = endIndex;
					while(_g < _g1) {
						var i = _g++;
						var advance;
						if(i < text.length - 1) {
							var nextWidth = openfl_text__$internal_TextEngine.__context.measureText(text.charAt(i + 1)).width;
							var twoWidths = openfl_text__$internal_TextEngine.__context.measureText(HxOverrides.substr(text,i,2)).width;
							advance = twoWidths - nextWidth;
						} else {
							advance = openfl_text__$internal_TextEngine.__context.measureText(text.charAt(i)).width;
						}
						positions.push(advance);
					}
				}
				return positions;
			};
			return _gthis.__shapeCache.cache(formatRange,html5Positions,text.substring(startIndex,endIndex));
		};
		var getPositionsWidth = function(positions) {
			var width = 0.0;
			var _g = 0;
			while(_g < positions.length) {
				var position = positions[_g];
				++_g;
				width += position;
			}
			return width;
		};
		var getTextWidth = function(text) {
			return openfl_text__$internal_TextEngine.__context.measureText(text).width;
		};
		var getBaseX = function() {
			return 2 + leftMargin + blockIndent + (firstLineOfParagraph ? indent : 0);
		};
		var getWrapWidth = function() {
			return _gthis.width - 2 - rightMargin - getBaseX();
		};
		var nextLayoutGroup = function(startIndex,endIndex) {
			if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = new openfl_text__$internal_TextLayoutGroup(formatRange.format,startIndex,endIndex);
				_gthis.layoutGroups.push(layoutGroup);
			} else {
				layoutGroup.format = formatRange.format;
				layoutGroup.startIndex = startIndex;
				layoutGroup.endIndex = endIndex;
			}
		};
		var setLineMetrics = function() {
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else if(font != null && font.unitsPerEM != 0) {
				ascent = font.ascender / font.unitsPerEM * currentFormat.size;
				descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = Math.ceil(ascent + descent + leading);
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
		};
		var setParagraphMetrics = function() {
			firstLineOfParagraph = true;
			align = currentFormat.align != null ? currentFormat.align : 3;
			blockIndent = currentFormat.blockIndent != null ? currentFormat.blockIndent : 0;
			indent = currentFormat.indent != null ? currentFormat.indent : 0;
			leftMargin = currentFormat.leftMargin != null ? currentFormat.leftMargin : 0;
			rightMargin = currentFormat.rightMargin != null ? currentFormat.rightMargin : 0;
			var setParagraphMetrics = currentFormat.bullet != null;
			var setParagraphMetrics = currentFormat.tabStops != null;
		};
		var nextFormatRange = function() {
			if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
				rangeIndex += 1;
				formatRange = _gthis.textFormatRanges.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl_text__$internal_TextEngine.__context.font = openfl_text__$internal_TextEngine.getFont(currentFormat);
				font = openfl_text__$internal_TextEngine.getFontInstance(currentFormat);
				return true;
			}
			return false;
		};
		var setFormattedPositions = function(startIndex,endIndex) {
			if(startIndex >= endIndex) {
				positions = [];
				widthValue = 0;
			} else if(endIndex <= formatRange.end) {
				positions = getPositions(_gthis.text,startIndex,endIndex);
				widthValue = getPositionsWidth(positions);
			} else {
				var tempIndex = startIndex;
				var tempRangeEnd = formatRange.end;
				var countRanges = 0;
				positions = [];
				widthValue = 0;
				while(true) {
					if(tempIndex != tempRangeEnd) {
						var tempPositions = getPositions(_gthis.text,tempIndex,tempRangeEnd);
						positions = positions.concat(tempPositions);
					}
					if(tempRangeEnd != endIndex) {
						if(!nextFormatRange()) {
							lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/text/_internal/TextEngine.hx", lineNumber : 1092, className : "openfl.text._internal.TextEngine", methodName : "getLayoutGroups"});
							break;
						}
						tempIndex = tempRangeEnd;
						tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
						++countRanges;
					} else {
						widthValue = getPositionsWidth(positions);
						break;
					}
				}
				rangeIndex -= countRanges + 1;
				nextFormatRange();
			}
		};
		var placeFormattedText = function(endIndex) {
			if(endIndex <= formatRange.end) {
				positions = getPositions(_gthis.text,textIndex,endIndex);
				widthValue = getPositionsWidth(positions);
				nextLayoutGroup(textIndex,endIndex);
				layoutGroup.positions = positions;
				var offsetX1 = offsetX;
				var placeFormattedText = getBaseX();
				layoutGroup.offsetX = offsetX1 + placeFormattedText;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY + 2;
				layoutGroup.width = widthValue;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				if(endIndex == formatRange.end) {
					layoutGroup = null;
					nextFormatRange();
					setLineMetrics();
				}
			} else {
				while(true) {
					var tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
					if(textIndex != tempRangeEnd) {
						positions = getPositions(_gthis.text,textIndex,tempRangeEnd);
						widthValue = getPositionsWidth(positions);
						nextLayoutGroup(textIndex,tempRangeEnd);
						layoutGroup.positions = positions;
						var offsetX1 = offsetX;
						var placeFormattedText = getBaseX();
						layoutGroup.offsetX = offsetX1 + placeFormattedText;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY + 2;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						offsetX += widthValue;
						textIndex = tempRangeEnd;
					}
					if(tempRangeEnd == formatRange.end) {
						layoutGroup = null;
					}
					if(tempRangeEnd == endIndex) {
						break;
					}
					if(!nextFormatRange()) {
						lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/text/_internal/TextEngine.hx", lineNumber : 1180, className : "openfl.text._internal.TextEngine", methodName : "getLayoutGroups"});
						break;
					}
					setLineMetrics();
				}
			}
			textIndex = endIndex;
		};
		var alignBaseline = function() {
			setLineMetrics();
			var i = _gthis.layoutGroups.get_length();
			while(--i > -1) {
				var lg = _gthis.layoutGroups.get(i);
				if(lg.lineIndex < lineIndex) {
					break;
				}
				if(lg.lineIndex > lineIndex) {
					continue;
				}
				lg.ascent = maxAscent;
				lg.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0;
			lineIndex += 1;
			offsetX = 0;
			firstLineOfParagraph = false;
		};
		var breakLongWords = function(endIndex) {
			var remainingPositions = positions;
			var i;
			var bufferCount;
			var placeIndex;
			var positionWidth;
			var currentPosition;
			var tempWidth = getPositionsWidth(remainingPositions);
			while(remainingPositions.length > 0 && offsetX + tempWidth > getWrapWidth()) {
				bufferCount = 0;
				i = bufferCount;
				positionWidth = 0.0;
				while(offsetX + positionWidth < getWrapWidth()) {
					currentPosition = remainingPositions[i];
					if(currentPosition == 0.0) {
						++i;
						++bufferCount;
					} else {
						positionWidth += currentPosition;
						++i;
					}
				}
				if(i == bufferCount) {
					i = bufferCount + 1;
				} else {
					while(i > 1 && offsetX + positionWidth > getWrapWidth()) {
						--i;
						if(i - bufferCount > 0) {
							setFormattedPositions(textIndex,textIndex + i - bufferCount);
							positionWidth = widthValue;
						} else {
							i = 1;
							bufferCount = 0;
							setFormattedPositions(textIndex,textIndex + 1);
							positionWidth = 0;
						}
					}
				}
				placeIndex = textIndex + i - bufferCount;
				placeFormattedText(placeIndex);
				alignBaseline();
				setFormattedPositions(placeIndex,endIndex);
				remainingPositions = positions;
				tempWidth = widthValue;
			}
		};
		var placeText = function(endIndex) {
			if(_gthis.width >= 4 && _gthis.wordWrap) {
				breakLongWords(endIndex);
			}
			placeFormattedText(endIndex);
		};
		nextFormatRange();
		setParagraphMetrics();
		setLineMetrics();
		var wrap;
		var maxLoops = this.text.length + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex)) {
			if(textIndex <= breakIndex) {
				setFormattedPositions(textIndex,breakIndex);
				placeText(breakIndex);
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.positions[layoutGroup.positions.length - 1];
				}
				layoutGroup = null;
			}
			alignBaseline();
			if(formatRange.end == breakIndex) {
				nextFormatRange();
				setLineMetrics();
			}
			textIndex = breakIndex + 1;
			previousBreakIndex = breakIndex;
			++breakCount;
			breakIndex = breakCount < this.lineBreaks.get_length() ? this.lineBreaks.get(breakCount) : -1;
			setParagraphMetrics();
		} else if(spaceIndex > -1) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(textIndex < this.text.length) {
				var endIndex = -1;
				if(spaceIndex == -1) {
					endIndex = breakIndex;
				} else {
					endIndex = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex) {
						endIndex = breakIndex;
					}
				}
				if(endIndex == -1) {
					endIndex = this.text.length;
				}
				setFormattedPositions(textIndex,endIndex);
				if(align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						textIndex += 1;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex == spaceIndex + 1) {
						--endIndex;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > getWrapWidth()) {
						wrap = true;
						if(positions.length > 0 && endIndex == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= getWrapWidth()) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(align != 2 && (layoutGroup != null || this.layoutGroups.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							previous = this.layoutGroups.get(this.layoutGroups.get_length() - 1);
						}
						previous.width -= previous.positions[previous.positions.length - 1];
						previous.endIndex--;
					}
					var i = this.layoutGroups.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.get(i);
						if(i > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i;
					}
					if(textIndex == previousSpaceIndex + 1) {
						alignBaseline();
					}
					offsetX = 0;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups.get(this.layoutGroups.get_length() - offsetCount).offsetX;
						var _g = this.layoutGroups.get_length() - offsetCount;
						var _g1 = this.layoutGroups.get_length();
						while(_g < _g1) {
							var i1 = _g++;
							layoutGroup = this.layoutGroups.get(i1);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY + 2;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					placeText(endIndex);
					wrap = false;
				} else if(layoutGroup != null && textIndex == spaceIndex) {
					if(align != 2) {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
					}
					offsetX += widthValue;
					textIndex = endIndex;
				} else if(layoutGroup == null || align == 2) {
					placeText(endIndex);
					if(endIndex == this.text.length) {
						alignBaseline();
					}
				} else {
					var tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
					if(tempRangeEnd < endIndex) {
						positions = getPositions(this.text,textIndex,tempRangeEnd);
						widthValue = getPositionsWidth(positions);
					}
					layoutGroup.endIndex = tempRangeEnd;
					layoutGroup.positions = layoutGroup.positions.concat(positions);
					layoutGroup.width += widthValue;
					offsetX += widthValue;
					if(tempRangeEnd == formatRange.end) {
						layoutGroup = null;
						nextFormatRange();
						setLineMetrics();
						textIndex = tempRangeEnd;
						if(tempRangeEnd != endIndex) {
							placeFormattedText(endIndex);
						}
					}
					if(breakIndex == endIndex) {
						++endIndex;
					}
					textIndex = endIndex;
					if(endIndex == this.text.length) {
						alignBaseline();
					}
				}
				var nextSpaceIndex = this.text.indexOf(" ",textIndex);
				if(breakIndex == previousSpaceIndex) {
					layoutGroup.endIndex = breakIndex;
					if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
						layoutGroup.positions.push(0.0);
					}
					textIndex = breakIndex + 1;
				}
				previousSpaceIndex = spaceIndex;
				spaceIndex = nextSpaceIndex;
				if(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1) || textIndex > this.text.length) {
					break;
				}
			}
		} else {
			if(textIndex < this.text.length) {
				setFormattedPositions(textIndex,this.text.length);
				placeText(this.text.length);
				alignBaseline();
			}
			textIndex += 1;
		}
		if(previousBreakIndex == textIndex - 2 && previousBreakIndex > -1) {
			nextLayoutGroup(textIndex - 1,textIndex - 1);
			layoutGroup.positions = [];
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetX = getBaseX();
			layoutGroup.offsetY = offsetY + 2;
			layoutGroup.width = 0;
			var tmp = openfl_text_TextFieldType.toString(this.type) == "input" ? heightValue : 0;
			layoutGroup.height = tmp;
		}
	}
	,restrictText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		return value;
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var lineMeasurementsDirty = false;
		var _g = 0;
		var _g1 = this.layoutGroups.get_length();
		while(_g < _g1) {
			var i = _g++;
			group = this.layoutGroups.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				totalWidth = this.width - 4 - group.format.rightMargin;
				switch(group.format.align) {
				case 0:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round((totalWidth - this.lineWidths.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g2 = i + 1;
						var _g3 = this.layoutGroups.get_length();
						while(_g2 < _g3) {
							var j = _g2++;
							if(this.layoutGroups.get(j).lineIndex == lineIndex) {
								if(j == 0 || HxOverrides.cca(this.text,this.layoutGroups.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.get(i + lineLength - 1);
							var endChar = HxOverrides.cca(this.text,group.endIndex);
							if(group.endIndex < this.text.length && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.get(lineIndex)) / (lineLength - 1);
								lineMeasurementsDirty = true;
								var j1 = 1;
								while(true) {
									this.layoutGroups.get(i + j1).offsetX += offsetX * j1;
									if(!(++j1 < lineLength)) {
										break;
									}
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round(totalWidth - this.lineWidths.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
		if(lineMeasurementsDirty) {
			this.getLineMeasurements();
		}
	}
	,trimText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.maxChars > 0 && value.length > this.maxChars) {
			value = HxOverrides.substr(value,0,this.maxChars);
		}
		return value;
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.get_length() == 0) {
			this.lineAscents.set_length(0);
			this.lineBreaks.set_length(0);
			this.lineDescents.set_length(0);
			this.lineLeadings.set_length(0);
			this.lineHeights.set_length(0);
			this.lineWidths.set_length(0);
			this.layoutGroups.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLineBreaks();
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,get_bottomScrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		} else {
			var ret = this.lineHeights.get_length();
			var tempHeight = this.lineLeadings.get_length() == ret ? -this.lineLeadings.get(ret - 1) : 0.0;
			var _g = this.get_scrollV() - 1;
			var _g1 = this.lineHeights.get_length();
			while(_g < _g1) {
				var i = _g++;
				if(tempHeight + this.lineHeights.get(i) <= this.height - 4) {
					tempHeight += this.lineHeights.get(i);
				} else {
					ret = i;
					break;
				}
			}
			if(ret < this.get_scrollV()) {
				return this.get_scrollV();
			}
			return ret;
		}
	}
	,get_maxScrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		} else {
			var i = this.numLines - 1;
			var tempHeight = 0.0;
			var j = i;
			while(i >= 0) if(tempHeight + this.lineHeights.get(i) <= this.height - 4) {
				tempHeight += this.lineHeights.get(i);
				--i;
			} else {
				break;
			}
			if(i == j) {
				i = this.numLines;
			} else {
				i += 2;
			}
			if(i < 1) {
				return 1;
			}
			return i;
		}
	}
	,set_restrict: function(value) {
		if(this.restrict == value) {
			return this.restrict;
		}
		this.restrict = value;
		if(this.restrict == null || this.restrict.length == 0) {
			this.__restrictRegexp = null;
		} else {
			this.__restrictRegexp = this.createRestrictRegexp(value);
		}
		return this.restrict;
	}
	,get_scrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		}
		var max = this.get_maxScrollV();
		if(this.scrollV > max) {
			return max;
		}
		return this.scrollV;
	}
	,set_scrollV: function(value) {
		if(value < 1) {
			value = 1;
		}
		return this.scrollV = value;
	}
	,set_text: function(value) {
		return this.text = value;
	}
	,__class__: openfl_text__$internal_TextEngine
	,__properties__: {set_text:"set_text",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_restrict:"set_restrict",get_maxScrollV:"get_maxScrollV",get_bottomScrollV:"get_bottomScrollV"}
};
var openfl_text__$internal_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl.text._internal.TextFormatRange"] = openfl_text__$internal_TextFormatRange;
openfl_text__$internal_TextFormatRange.__name__ = "openfl.text._internal.TextFormatRange";
openfl_text__$internal_TextFormatRange.prototype = {
	__class__: openfl_text__$internal_TextFormatRange
};
var openfl_text__$internal_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) {
		language = "en";
	}
	if(script == null) {
		script = "Zyyy";
	}
	if(direction == null) {
		direction = 4;
	}
	if(size == null) {
		size = 12;
	}
	if(text == null) {
		text = "";
	}
	this.letterSpacing = 0;
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
	this.__create(this.__direction,this.__script,this.__language);
};
$hxClasses["openfl.text._internal.TextLayout"] = openfl_text__$internal_TextLayout;
openfl_text__$internal_TextLayout.__name__ = "openfl.text._internal.TextLayout";
openfl_text__$internal_TextLayout.prototype = {
	__create: function(direction,script,language) {
		if(language.length != 4) {
			return;
		}
		this.__hbBuffer = lime_text_harfbuzz_HBBuffer._new();
		switch(direction) {
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		default:
		}
		var this1 = this.__hbBuffer;
		var value = lime_text_harfbuzz_HBLanguage._new(language);
	}
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) {
			return value;
		}
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) {
			return value;
		}
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) {
			return value;
		}
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) {
			return value;
		}
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) {
			return value;
		}
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: openfl_text__$internal_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var openfl_text__$internal_TextDirection = {};
openfl_text__$internal_TextDirection.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"};
openfl_text__$internal_TextDirection.reverse = function(this1) {
	this1 ^= 1;
};
openfl_text__$internal_TextDirection.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
openfl_text__$internal_TextDirection.toHBDirection = function(this1) {
	switch(this1) {
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 6;
	case 7:
		return 7;
	default:
		return 0;
	}
};
openfl_text__$internal_TextDirection.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
openfl_text__$internal_TextDirection.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
openfl_text__$internal_TextDirection.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
openfl_text__$internal_TextDirection.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var openfl_text__$internal_TextScript = {};
openfl_text__$internal_TextScript.__properties__ = {get_rightToLeft:"get_rightToLeft"};
openfl_text__$internal_TextScript.toHBScript = function(this1) {
	return 1517910393;
};
openfl_text__$internal_TextScript.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Arab":case "Armi":case "Avst":case "Cprt":case "Hebr":case "Khar":case "Lydi":case "Mand":case "Nkoo":case "Orkh":case "Phli":case "Phlp":case "Phnx":case "Samr":case "Sarb":case "Syrc":case "Thaa":
		return true;
	default:
		return false;
	}
};
var openfl_text__$internal_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl.text._internal.TextLayoutGroup"] = openfl_text__$internal_TextLayoutGroup;
openfl_text__$internal_TextLayoutGroup.__name__ = "openfl.text._internal.TextLayoutGroup";
openfl_text__$internal_TextLayoutGroup.prototype = {
	getAdvance: function(index) {
		return this.positions[index];
	}
	,__class__: openfl_text__$internal_TextLayoutGroup
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = "openfl.ui.GameInput";
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var devices = lime_ui_Joystick.__getDeviceData();
		var device = devices[gamepad.id].id;
		var devices = lime_ui_Joystick.__getDeviceData();
		var device1 = new openfl_ui_GameInputDevice(device,devices[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device1);
		openfl_ui_GameInput.__devices.set(gamepad,device1);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			if(axis == null) {
				control = "null";
			} else {
				switch(axis) {
				case 0:
					control = "LEFT_X";
					break;
				case 1:
					control = "LEFT_Y";
					break;
				case 2:
					control = "RIGHT_X";
					break;
				case 3:
					control = "RIGHT_Y";
					break;
				case 4:
					control = "TRIGGER_LEFT";
					break;
				case 5:
					control = "TRIGGER_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + axis + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			if(button == null) {
				control = "null";
			} else {
				switch(button) {
				case 0:
					control = "A";
					break;
				case 1:
					control = "B";
					break;
				case 2:
					control = "X";
					break;
				case 3:
					control = "Y";
					break;
				case 4:
					control = "BACK";
					break;
				case 5:
					control = "GUIDE";
					break;
				case 6:
					control = "START";
					break;
				case 7:
					control = "LEFT_STICK";
					break;
				case 8:
					control = "RIGHT_STICK";
					break;
				case 9:
					control = "LEFT_SHOULDER";
					break;
				case 10:
					control = "RIGHT_SHOULDER";
					break;
				case 11:
					control = "DPAD_UP";
					break;
				case 12:
					control = "DPAD_DOWN";
					break;
				case 13:
					control = "DPAD_LEFT";
					break;
				case 14:
					control = "DPAD_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + button + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			if(button == null) {
				control = "null";
			} else {
				switch(button) {
				case 0:
					control = "A";
					break;
				case 1:
					control = "B";
					break;
				case 2:
					control = "X";
					break;
				case 3:
					control = "Y";
					break;
				case 4:
					control = "BACK";
					break;
				case 5:
					control = "GUIDE";
					break;
				case 6:
					control = "START";
					break;
				case 7:
					control = "LEFT_STICK";
					break;
				case 8:
					control = "RIGHT_STICK";
					break;
				case 9:
					control = "LEFT_SHOULDER";
					break;
				case 10:
					control = "RIGHT_SHOULDER";
					break;
				case 11:
					control = "DPAD_UP";
					break;
				case 12:
					control = "DPAD_DOWN";
					break;
				case 13:
					control = "DPAD_LEFT";
					break;
				case 14:
					control = "DPAD_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + button + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",true,false,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = "openfl.ui.GameInputControl";
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 0,-1,1);
	this.__axis.h[0] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 1,-1,1);
	this.__axis.h[1] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 2,-1,1);
	this.__axis.h[2] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 3,-1,1);
	this.__axis.h[3] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 4,-1,1);
	this.__axis.h[4] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 5,-1,1);
	this.__axis.h[5] = control;
	this.__controls.push(control);
	var _g = 0;
	while(_g < 15) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i,0,1);
		this.__button.h[i] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = "openfl.ui.GameInputDevice";
openfl_ui_GameInputDevice.prototype = {
	getCachedSamples: function(data,append) {
		if(append == null) {
			append = false;
		}
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = "openfl.ui.Keyboard";
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 13;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = "openfl.ui.Mouse";
openfl_ui_Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"};
openfl_ui_Mouse.hide = function() {
	openfl_ui_Mouse.__hidden = true;
	var _g = 0;
	var _g1 = lime_app_Application.current.__windows;
	while(_g < _g1.length) {
		var window1 = _g1[_g];
		++_g;
		window1.set_cursor(null);
	}
};
openfl_ui_Mouse.show = function() {
	openfl_ui_Mouse.__hidden = false;
	var cacheCursor = openfl_ui_Mouse.__cursor;
	openfl_ui_Mouse.__cursor = null;
	openfl_ui_Mouse.set_cursor(cacheCursor);
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	if(value == null) {
		value = "auto";
	}
	var setCursor = null;
	switch(value) {
	case "arrow":
		setCursor = lime_ui_MouseCursor.ARROW;
		break;
	case "button":
		setCursor = lime_ui_MouseCursor.POINTER;
		break;
	case "crosshair":
		setCursor = lime_ui_MouseCursor.CROSSHAIR;
		break;
	case "custom":
		setCursor = lime_ui_MouseCursor.CUSTOM;
		break;
	case "hand":
		setCursor = lime_ui_MouseCursor.MOVE;
		break;
	case "ibeam":
		setCursor = lime_ui_MouseCursor.TEXT;
		break;
	case "resize_nesw":
		setCursor = lime_ui_MouseCursor.RESIZE_NESW;
		break;
	case "resize_ns":
		setCursor = lime_ui_MouseCursor.RESIZE_NS;
		break;
	case "resize_nwse":
		setCursor = lime_ui_MouseCursor.RESIZE_NWSE;
		break;
	case "resize_we":
		setCursor = lime_ui_MouseCursor.RESIZE_WE;
		break;
	case "wait":
		setCursor = lime_ui_MouseCursor.WAIT;
		break;
	case "waitarrow":
		setCursor = lime_ui_MouseCursor.WAIT_ARROW;
		break;
	default:
	}
	if(setCursor != null && !openfl_ui_Mouse.__hidden) {
		var _g = 0;
		var _g1 = lime_app_Application.current.__windows;
		while(_g < _g1.length) {
			var window1 = _g1[_g];
			++_g;
			window1.set_cursor(setCursor);
		}
	}
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_ui_MouseCursor = {};
openfl_ui_MouseCursor.fromLimeCursor = function(cursor) {
	switch(cursor._hx_index) {
	case 0:
		return "arrow";
	case 1:
		return "crosshair";
	case 2:
		return "auto";
	case 3:
		return "hand";
	case 4:
		return "button";
	case 5:
		return "resize_nesw";
	case 6:
		return "resize_ns";
	case 7:
		return "resize_nwse";
	case 8:
		return "resize_we";
	case 9:
		return "ibeam";
	case 10:
		return "wait";
	case 11:
		return "waitarrow";
	case 12:
		return "custom";
	}
};
openfl_ui_MouseCursor.toLimeCursor = function(this1) {
	switch(this1) {
	case "arrow":
		return lime_ui_MouseCursor.ARROW;
	case "auto":
		return lime_ui_MouseCursor.DEFAULT;
	case "button":
		return lime_ui_MouseCursor.POINTER;
	case "crosshair":
		return lime_ui_MouseCursor.CROSSHAIR;
	case "custom":
		return lime_ui_MouseCursor.CUSTOM;
	case "hand":
		return lime_ui_MouseCursor.MOVE;
	case "ibeam":
		return lime_ui_MouseCursor.TEXT;
	case "resize_nesw":
		return lime_ui_MouseCursor.RESIZE_NESW;
	case "resize_ns":
		return lime_ui_MouseCursor.RESIZE_NS;
	case "resize_nwse":
		return lime_ui_MouseCursor.RESIZE_NWSE;
	case "resize_we":
		return lime_ui_MouseCursor.RESIZE_WE;
	case "wait":
		return lime_ui_MouseCursor.WAIT;
	case "waitarrow":
		return lime_ui_MouseCursor.WAIT_ARROW;
	default:
		return lime_ui_MouseCursor.DEFAULT;
	}
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = "openfl.ui.Multitouch";
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents"};
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) {
		return true;
	}
	return false;
};
var openfl_ui_MultitouchInputMode = {};
openfl_ui_MultitouchInputMode.fromString = function(value) {
	switch(value) {
	case "gesture":
		return 0;
	case "none":
		return 1;
	case "touchPoint":
		return 2;
	default:
		return null;
	}
};
openfl_ui_MultitouchInputMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "gesture";
	case 1:
		return "none";
	case 2:
		return "touchPoint";
	default:
		return null;
	}
};
var openfl_utils_AGALMiniAssembler = function(debugging) {
	if(debugging == null) {
		debugging = false;
	}
	this.debugEnabled = false;
	this.debugEnabled = debugging;
	if(!openfl_utils_AGALMiniAssembler.initialized) {
		openfl_utils_AGALMiniAssembler.init();
	}
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl_utils_AGALMiniAssembler;
openfl_utils_AGALMiniAssembler.__name__ = "openfl.utils.AGALMiniAssembler";
openfl_utils_AGALMiniAssembler.init = function() {
	openfl_utils_AGALMiniAssembler.initialized = true;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mov",2,0,0);
	this1.h["mov"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("add",3,1,0);
	this1.h["add"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sub",3,2,0);
	this1.h["sub"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mul",3,3,0);
	this1.h["mul"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("div",3,4,0);
	this1.h["div"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("rcp",2,5,0);
	this1.h["rcp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("min",3,6,0);
	this1.h["min"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("max",3,7,0);
	this1.h["max"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("frc",2,8,0);
	this1.h["frc"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sqt",2,9,0);
	this1.h["sqt"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("rsq",2,10,0);
	this1.h["rsq"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("pow",3,11,0);
	this1.h["pow"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("log",2,12,0);
	this1.h["log"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("exp",2,13,0);
	this1.h["exp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("nrm",2,14,0);
	this1.h["nrm"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sin",2,15,0);
	this1.h["sin"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("cos",2,16,0);
	this1.h["cos"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("crs",3,17,0);
	this1.h["crs"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("dp3",3,18,0);
	this1.h["dp3"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("dp4",3,19,0);
	this1.h["dp4"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("abs",2,20,0);
	this1.h["abs"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("neg",2,21,0);
	this1.h["neg"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sat",2,22,0);
	this1.h["sat"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m33",3,23,16);
	this1.h["m33"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m44",3,24,16);
	this1.h["m44"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m34",3,25,16);
	this1.h["m34"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ddx",2,26,288);
	this1.h["ddx"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ddy",2,27,288);
	this1.h["ddy"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ife",2,28,897);
	this1.h["ife"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ine",2,29,897);
	this1.h["ine"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ifg",2,30,897);
	this1.h["ifg"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ifl",2,31,897);
	this1.h["ifl"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("els",0,32,1921);
	this1.h["els"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("eif",0,33,1409);
	this1.h["eif"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("kil",1,39,160);
	this1.h["kil"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("tex",3,40,40);
	this1.h["tex"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sge",3,41,0);
	this1.h["sge"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("slt",3,42,0);
	this1.h["slt"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sgn",2,43,0);
	this1.h["sgn"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("seq",3,44,0);
	this1.h["seq"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sne",3,45,0);
	this1.h["sne"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("rgba",8,0);
	this1.h["rgba"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("compressed",8,1);
	this1.h["compressed"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("compressedalpha",8,2);
	this1.h["compressedalpha"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("dxt1",8,1);
	this1.h["dxt1"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("dxt5",8,2);
	this1.h["dxt5"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("video",8,3);
	this1.h["video"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("2d",12,0);
	this1.h["2d"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("3d",12,2);
	this1.h["3d"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("cube",12,1);
	this1.h["cube"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("mipnearest",24,1);
	this1.h["mipnearest"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("miplinear",24,2);
	this1.h["miplinear"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("mipnone",24,0);
	this1.h["mipnone"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("nomip",24,0);
	this1.h["nomip"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("nearest",28,0);
	this1.h["nearest"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("linear",28,1);
	this1.h["linear"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic2x",28,2);
	this1.h["anisotropic2x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic4x",28,3);
	this1.h["anisotropic4x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic8x",28,4);
	this1.h["anisotropic8x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic16x",28,5);
	this1.h["anisotropic16x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("centroid",16,1);
	this1.h["centroid"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("single",16,2);
	this1.h["single"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("ignoresampler",16,4);
	this1.h["ignoresampler"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("repeat",20,1);
	this1.h["repeat"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("wrap",20,1);
	this1.h["wrap"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("clamp",20,0);
	this1.h["clamp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("clamp_u_repeat_v",20,2);
	this1.h["clamp_u_repeat_v"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("repeat_u_clamp_v",20,3);
	this1.h["repeat_u_clamp_v"] = v;
};
openfl_utils_AGALMiniAssembler.prototype = {
	assemble2: function(context3D,version,vertexSource,fragmentSource) {
		var agalVertex = this.assemble("vertex",vertexSource,version);
		var agalFragment = this.assemble("fragment",fragmentSource,version);
		var program = context3D.createProgram();
		program.upload(agalVertex,agalFragment);
		return program;
	}
	,assemble: function(mode,source,version,ignoreLimits) {
		if(ignoreLimits == null) {
			ignoreLimits = false;
		}
		if(version == null) {
			version = 1;
		}
		var start = openfl_Lib.getTimer();
		var this1 = new openfl_utils_ByteArrayData(0);
		this.agalcode = this1;
		this.error = "";
		var isFrag = false;
		if(mode == "fragment") {
			isFrag = true;
		} else if(mode != "vertex") {
			this.error = "ERROR: mode needs to be \"" + "fragment" + "\" or \"" + "vertex" + "\" but is \"" + mode + "\".";
		}
		this.agalcode.__endian = 1;
		this.agalcode.writeByte(160);
		this.agalcode.writeUnsignedInt(version);
		this.agalcode.writeByte(161);
		this.agalcode.writeByte(isFrag ? 1 : 0);
		this.initregmap(version,ignoreLimits);
		var lines = StringTools.replace(source,"\r","\n").split("\n");
		var nops = 0;
		var lng = lines.length;
		var reg1 = new EReg("<.*>","g");
		var reg2 = new EReg("([\\w\\.\\-\\+]+)","gi");
		var reg3 = new EReg("^\\w{3}","ig");
		var reg4 = new EReg("vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?","gi");
		var reg5 = new EReg("\\[.*\\]","ig");
		var reg6 = new EReg("^\\b[A-Za-z]{1,3}","ig");
		var reg7 = new EReg("\\d+","");
		var reg8 = new EReg("(\\.[xyzw]{1,4})","");
		var reg9 = new EReg("[A-Za-z]{1,3}","ig");
		var reg10 = new EReg("(\\.[xyzw]{1,1})","");
		var reg11 = new EReg("\\+\\d{1,3}","ig");
		var i = 0;
		while(i < lng && this.error == "") {
			var line = StringTools.trim(lines[i]);
			var startcomment = line.indexOf("//");
			if(startcomment != -1) {
				line = HxOverrides.substr(line,0,startcomment);
			}
			var optsi = reg1.match(line) ? reg1.matchedPos().pos : -1;
			var opts = null;
			if(optsi != -1) {
				opts = this.match(HxOverrides.substr(line,optsi,null),reg2);
				line = HxOverrides.substr(line,0,optsi);
			}
			var opCode = null;
			var opFound = null;
			if(reg3.match(line)) {
				opCode = reg3.matched(0);
				opFound = openfl_utils_AGALMiniAssembler.OPMAP.h[opCode];
			}
			if(opFound == null) {
				if(line.length >= 3) {
					lime_utils_Log.warn("warning: bad line " + i + ": " + lines[i],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 262, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			if(this.debugEnabled) {
				lime_utils_Log.info(opFound,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 272, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			if(opFound == null) {
				if(line.length >= 3) {
					lime_utils_Log.warn("warning: bad line " + i + ": " + lines[i],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 279, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			line = HxOverrides.substr(line,line.indexOf(opFound.name) + opFound.name.length,null);
			if((opFound.flags & 256) != 0 && version < 2) {
				this.error = "error: opcode requires version 2.";
				break;
			}
			if((opFound.flags & 64) != 0 && isFrag) {
				this.error = "error: opcode is only allowed in vertex programs.";
				break;
			}
			if((opFound.flags & 32) != 0 && !isFrag) {
				this.error = "error: opcode is only allowed in fragment programs.";
				break;
			}
			if(this.verbose) {
				lime_utils_Log.info("emit opcode=" + Std.string(opFound),{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 308, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			this.agalcode.writeUnsignedInt(opFound.emitCode);
			++nops;
			if(nops > 4096) {
				this.error = "error: too many opcodes. maximum is " + 4096 + ".";
				break;
			}
			var regs = this.match(line,reg4);
			if(regs.length != opFound.numRegister) {
				this.error = "error: wrong number of operands. found " + regs.length + " but expected " + opFound.numRegister + ".";
				break;
			}
			var badreg = false;
			var pad = 160;
			var regLength = regs.length;
			var _g = 0;
			var _g1 = regLength;
			while(_g < _g1) {
				var j = _g++;
				var isRelative = false;
				var relreg = this.match(regs[j],reg5);
				if(relreg.length > 0) {
					regs[j] = StringTools.replace(regs[j],relreg[0],"0");
					if(this.verbose) {
						lime_utils_Log.info("IS REL",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 344, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					isRelative = true;
				}
				var res = this.match(regs[j],reg6);
				if(res.length == 0) {
					this.error = "error: could not parse operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				var regFound = openfl_utils_AGALMiniAssembler.REGMAP.h[res[0]];
				if(this.debugEnabled) {
					lime_utils_Log.info(regFound,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 363, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(regFound == null) {
					this.error = "error: could not find register name for operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				if(isFrag) {
					if((regFound.flags & 32) == 0) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in vertex programs.";
						badreg = true;
						break;
					}
					if(isRelative) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") relative adressing not allowed in fragment programs.";
						badreg = true;
						break;
					}
				} else if((regFound.flags & 64) == 0) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in fragment programs.";
					badreg = true;
					break;
				}
				regs[j] = HxOverrides.substr(regs[j],regs[j].indexOf(regFound.name) + regFound.name.length,null);
				var idxmatch = isRelative ? this.match(relreg[0],reg7) : this.match(regs[j],reg7);
				var regidx = 0;
				if(idxmatch.length > 0) {
					regidx = Std.parseInt(idxmatch[0]);
				}
				if(UInt.gt(regidx,regFound.range)) {
					var tmp = regFound.range + 1;
					this.error = "error: register operand " + j + " (" + regs[j] + ") index exceeds limit of " + (tmp == null ? "null" : Std.string(UInt.toFloat(tmp))) + ".";
					badreg = true;
					break;
				}
				var regmask = 0;
				var maskmatch = this.match(regs[j],reg8);
				var isDest = j == 0 && (opFound.flags & 128) == 0;
				var isSampler = j == 2 && (opFound.flags & 8) != 0;
				var reltype = 0;
				var relsel = 0;
				var reloffset = 0;
				if(isDest && isRelative) {
					this.error = "error: relative can not be destination";
					badreg = true;
					break;
				}
				if(maskmatch.length > 0) {
					regmask = 0;
					var cv = 0;
					var maskLength = maskmatch[0].length;
					var k = 1;
					while(k < maskLength) {
						cv = HxOverrides.cca(maskmatch[0],k) - 120;
						if(UInt.gt(cv,2)) {
							cv = 3;
						}
						if(isDest) {
							regmask |= 1 << cv;
						} else {
							regmask = regmask | cv << (k - 1 << 1);
						}
						++k;
					}
					if(!isDest) {
						while(k <= 4) {
							regmask = regmask | cv << (k - 1 << 1);
							++k;
						}
					}
				} else {
					regmask = isDest ? 15 : 228;
				}
				if(isRelative) {
					var relname = this.match(relreg[0],reg9);
					var regFoundRel = openfl_utils_AGALMiniAssembler.REGMAP.h[relname[0]];
					if(regFoundRel == null) {
						this.error = "error: bad index register";
						badreg = true;
						break;
					}
					reltype = regFoundRel.emitCode;
					var selmatch = this.match(relreg[0],reg10);
					if(selmatch.length == 0) {
						this.error = "error: bad index register select";
						badreg = true;
						break;
					}
					relsel = HxOverrides.cca(selmatch[0],1) - 120;
					if(UInt.gt(relsel,2)) {
						relsel = 3;
					}
					var relofs = this.match(relreg[0],reg11);
					if(relofs.length > 0) {
						reloffset = Std.parseInt(relofs[0]);
					}
					if(reloffset < 0 || reloffset > 255) {
						this.error = "error: index offset " + reloffset + " out of bounds. [0..255]";
						badreg = true;
						break;
					}
					if(this.verbose) {
						lime_utils_Log.info("RELATIVE: type=" + reltype + "==" + relname[0] + " sel=" + (relsel == null ? "null" : Std.string(UInt.toFloat(relsel))) + "==" + selmatch[0] + " idx=" + (regidx == null ? "null" : Std.string(UInt.toFloat(regidx))) + " offset=" + reloffset,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 518, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
				}
				if(this.verbose) {
					lime_utils_Log.info("  emit argcode=" + Std.string(regFound) + "[" + (regidx == null ? "null" : Std.string(UInt.toFloat(regidx))) + "][" + regmask + "]",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 525, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(isDest) {
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					pad -= 32;
				} else if(isSampler) {
					if(this.verbose) {
						lime_utils_Log.info("  emit sampler",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 541, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					var samplerbits = 5;
					var optsLength = opts == null ? 0 : opts.length;
					var bias = 0.0;
					var _g2 = 0;
					var _g3 = optsLength;
					while(_g2 < _g3) {
						var k1 = _g2++;
						if(this.verbose) {
							lime_utils_Log.info("    opt: " + opts[k1],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 552, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
						}
						var optfound = openfl_utils_AGALMiniAssembler.SAMPLEMAP.h[opts[k1]];
						if(optfound == null) {
							bias = parseFloat(opts[k1]);
							if(this.verbose) {
								lime_utils_Log.info("    bias: " + bias,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 565, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
							}
						} else {
							if(optfound.flag != 16) {
								samplerbits &= ~(15 << optfound.flag);
							}
							samplerbits = samplerbits | optfound.mask << optfound.flag;
						}
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(bias * 8.0 | 0);
					this.agalcode.writeByte(0);
					this.agalcode.writeUnsignedInt(samplerbits);
					if(this.verbose) {
						lime_utils_Log.info("    bits: " + (samplerbits - 5),{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 586, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					pad -= 64;
				} else {
					if(j == 0) {
						this.agalcode.writeUnsignedInt(0);
						pad -= 32;
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(reloffset);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					this.agalcode.writeByte(reltype);
					this.agalcode.writeShort(isRelative ? relsel | 32768 : 0);
					pad -= 64;
				}
			}
			var j1 = 0;
			while(j1 < pad) {
				this.agalcode.writeByte(0);
				j1 += 8;
			}
			if(badreg) {
				break;
			}
			++i;
		}
		if(this.error != "") {
			this.error += "\n  at line " + i + " " + lines[i];
			openfl_utils_ByteArray.set_length(this.agalcode,0);
			lime_utils_Log.info(this.error,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 631, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.debugEnabled) {
			var dbgLine = "generated bytecode:";
			var agalLength = openfl_utils_ByteArray.get_length(this.agalcode);
			var _g = 0;
			var _g1 = agalLength;
			while(_g < _g1) {
				var index = _g++;
				if(index % 16 == 0) {
					dbgLine += "\n";
				}
				if(index % 4 == 0) {
					dbgLine += " ";
				}
				var byteStr = StringTools.hex(this.agalcode.b[index],2);
				if(byteStr.length < 2) {
					byteStr = "0" + byteStr;
				}
				dbgLine += byteStr;
			}
			lime_utils_Log.info(dbgLine,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 662, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.verbose) {
			lime_utils_Log.info("AGALMiniAssembler.assemble time: " + (openfl_Lib.getTimer() - start) / 1000 + "s",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 667, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		return this.agalcode;
	}
	,initregmap: function(version,ignorelimits) {
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("va","vertex attribute",0,ignorelimits ? 1024 : version == 1 || version == 2 ? 7 : 15,66);
		this1.h["va"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vc","vertex constant",1,ignorelimits ? 1024 : version == 1 ? 127 : 249,66);
		this1.h["vc"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vt","vertex temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,67);
		this1.h["vt"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vo","vertex output",3,ignorelimits ? 1024 : 0,65);
		this1.h["vo"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vi","varying",4,ignorelimits ? 1024 : version == 1 ? 7 : 9,99);
		this1.h["vi"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fc","fragment constant",1,ignorelimits ? 1024 : version == 1 ? 27 : version == 2 ? 63 : 199,34);
		this1.h["fc"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("ft","fragment temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,35);
		this1.h["ft"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fs","texture sampler",5,ignorelimits ? 1024 : 7,34);
		this1.h["fs"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fo","fragment output",3,ignorelimits ? 1024 : version == 1 ? 0 : 3,33);
		this1.h["fo"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fd","fragment depth output",6,ignorelimits ? 1024 : version == 1 ? -1 : 0,33);
		this1.h["fd"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("iid","instance id",7,ignorelimits ? 1024 : 0,66);
		this1.h["iid"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vo"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["op"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["i"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["v"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["fo"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["oc"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["fd"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["od"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["fi"] = v;
	}
	,match: function(value,reg) {
		var matches = [];
		var index = 0;
		var match;
		while(reg.matchSub(value,index)) {
			match = reg.matched(0);
			matches.push(match);
			index = reg.matchedPos().pos + match.length;
		}
		return matches;
	}
	,__class__: openfl_utils_AGALMiniAssembler
};
var openfl_utils__$AGALMiniAssembler_OpCode = function(name,numRegister,emitCode,flags) {
	this.name = name;
	this.numRegister = numRegister;
	this.emitCode = emitCode;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.OpCode"] = openfl_utils__$AGALMiniAssembler_OpCode;
openfl_utils__$AGALMiniAssembler_OpCode.__name__ = "openfl.utils._AGALMiniAssembler.OpCode";
openfl_utils__$AGALMiniAssembler_OpCode.prototype = {
	toString: function() {
		return "[OpCode name=\"" + this.name + "\", numRegister=" + this.numRegister + ", emitCode=" + this.emitCode + ", flags=" + this.flags + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_OpCode
};
var openfl_utils__$AGALMiniAssembler_Register = function(name,longName,emitCode,range,flags) {
	this.name = name;
	this.longName = longName;
	this.emitCode = emitCode;
	this.range = range;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Register"] = openfl_utils__$AGALMiniAssembler_Register;
openfl_utils__$AGALMiniAssembler_Register.__name__ = "openfl.utils._AGALMiniAssembler.Register";
openfl_utils__$AGALMiniAssembler_Register.prototype = {
	toString: function() {
		return "[Register name=\"" + this.name + "\", longName=\"" + this.longName + "\", emitCode=" + (this.emitCode == null ? "null" : Std.string(UInt.toFloat(this.emitCode))) + ", range=" + (this.range == null ? "null" : Std.string(UInt.toFloat(this.range))) + ", flags=" + (this.flags == null ? "null" : Std.string(UInt.toFloat(this.flags))) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Register
};
var openfl_utils__$AGALMiniAssembler_Sampler = function(name,flag,mask) {
	this.name = name;
	this.flag = flag;
	this.mask = mask;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Sampler"] = openfl_utils__$AGALMiniAssembler_Sampler;
openfl_utils__$AGALMiniAssembler_Sampler.__name__ = "openfl.utils._AGALMiniAssembler.Sampler";
openfl_utils__$AGALMiniAssembler_Sampler.prototype = {
	toString: function() {
		return "[Sampler name=\"" + this.name + "\", flag=\"" + (this.flag == null ? "null" : Std.string(UInt.toFloat(this.flag))) + "\", mask=" + (this.mask == null ? "null" : Std.string(UInt.toFloat(this.mask))) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Sampler
};
var openfl_utils_IAssetCache = function() { };
$hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
openfl_utils_IAssetCache.__name__ = "openfl.utils.IAssetCache";
openfl_utils_IAssetCache.__isInterface__ = true;
openfl_utils_IAssetCache.prototype = {
	__class__: openfl_utils_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
openfl_utils_AssetCache.__name__ = "openfl.utils.AssetCache";
openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
openfl_utils_AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = haxe_ds_StringMap.keysIterator(this.bitmapData.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.removeBitmapData(key1);
				}
			}
			var keys = haxe_ds_StringMap.keysIterator(this.font.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.removeFont(key1);
				}
			}
			var keys = haxe_ds_StringMap.keysIterator(this.sound.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.removeSound(key1);
				}
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.h[id];
	}
	,getFont: function(id) {
		return this.font.h[id];
	}
	,getSound: function(id) {
		return this.sound.h[id];
	}
	,hasBitmapData: function(id) {
		return Object.prototype.hasOwnProperty.call(this.bitmapData.h,id);
	}
	,hasFont: function(id) {
		return Object.prototype.hasOwnProperty.call(this.font.h,id);
	}
	,hasSound: function(id) {
		return Object.prototype.hasOwnProperty.call(this.sound.h,id);
	}
	,removeBitmapData: function(id) {
		var _this = lime_utils_Assets.cache.image;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
		var _this = this.bitmapData;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
			return true;
		} else {
			return false;
		}
	}
	,removeFont: function(id) {
		var _this = lime_utils_Assets.cache.font;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
		var _this = this.font;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
			return true;
		} else {
			return false;
		}
	}
	,removeSound: function(id) {
		var _this = lime_utils_Assets.cache.audio;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
		var _this = this.sound;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
			return true;
		} else {
			return false;
		}
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.h[id] = bitmapData;
	}
	,setFont: function(id,font) {
		this.font.h[id] = font;
	}
	,setSound: function(id,sound) {
		this.sound.h[id] = sound;
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_utils_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
openfl_utils_AssetLibrary.__name__ = "openfl.utils.AssetLibrary";
openfl_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(openfl_utils_ByteArray.toBytes(bytes),rootPath));
};
openfl_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
openfl_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		if(((library) instanceof openfl_utils_AssetLibrary)) {
			return library;
		} else {
			var _library = new openfl_utils_AssetLibrary();
			_library.__proxy = library;
			return _library;
		}
	} else {
		return null;
	}
};
openfl_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes),rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = openfl_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load().then(function(library) {
			return lime_app_Future.withValue(library);
		});
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
openfl_utils_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_utils_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	exists: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.exists(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.exists.call(this,id,type);
		}
	}
	,getAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.getAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.getAsset.call(this,id,type);
		}
	}
	,getAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getAudioBuffer.call(this,id);
		}
	}
	,getBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getBytes.call(this,id);
		}
	}
	,getFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getFont.call(this,id);
		}
	}
	,getImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getImage.call(this,id);
		}
	}
	,getMovieClip: function(id) {
		return null;
	}
	,getPath: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getPath(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getPath.call(this,id);
		}
	}
	,getText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getText.call(this,id);
		}
	}
	,isLocal: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.isLocal(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.isLocal.call(this,id,type);
		}
	}
	,list: function(type) {
		if(this.__proxy != null) {
			return this.__proxy.list(type);
		} else {
			return lime_utils_AssetLibrary.prototype.list.call(this,type);
		}
	}
	,loadAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.loadAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAsset.call(this,id,type);
		}
	}
	,load: function() {
		if(this.__proxy != null) {
			return this.__proxy.load();
		} else {
			return lime_utils_AssetLibrary.prototype.load.call(this);
		}
	}
	,loadAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAudioBuffer.call(this,id);
		}
	}
	,loadBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadBytes.call(this,id);
		}
	}
	,loadFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadFont.call(this,id);
		}
	}
	,loadImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadImage.call(this,id);
		}
	}
	,loadMovieClip: function(id) {
		return lime_app_Future.withValue(this.getMovieClip(id));
	}
	,loadText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadText.call(this,id);
		}
	}
	,unload: function() {
		if(this.__proxy != null) {
			this.__proxy.unload();
			return;
		} else {
			lime_utils_AssetLibrary.prototype.unload.call(this);
			return;
		}
	}
	,__class__: openfl_utils_AssetLibrary
});
var openfl_utils_Assets = function() { };
$hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
openfl_utils_Assets.__name__ = "openfl.utils.Assets";
openfl_utils_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	if(!lime_utils_Assets.onChange.has(openfl_utils_Assets.LimeAssets_onChange)) {
		lime_utils_Assets.onChange.add(openfl_utils_Assets.LimeAssets_onChange);
	}
	openfl_utils_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_utils_Assets.dispatchEvent = function(event) {
	return openfl_utils_Assets.dispatcher.dispatchEvent(event);
};
openfl_utils_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_utils_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setBitmapData(id,bitmapData);
		}
		return bitmapData;
	}
	return null;
};
openfl_utils_Assets.getBytes = function(id) {
	return openfl_utils_ByteArray.fromBytes(lime_utils_Assets.getBytes(id));
};
openfl_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		return openfl_utils_Assets.cache.getFont(id);
	}
	var limeFont = lime_utils_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_utils_Assets.getLibrary = function(name) {
	return lime_utils_Assets.getLibrary(name);
};
openfl_utils_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(((limeLibrary) instanceof openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				if(library.isLocal(symbolName,"MOVIE_CLIP")) {
					return library.getMovieClip(symbolName);
				} else {
					lime_utils_Log.error("MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "openfl/utils/Assets.hx", lineNumber : 207, className : "openfl.utils.Assets", methodName : "getMovieClip"});
					return null;
				}
			}
		}
		lime_utils_Log.error("There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "openfl/utils/Assets.hx", lineNumber : 213, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	} else {
		lime_utils_Log.error("There is no asset library named \"" + libraryName + "\"",{ fileName : "openfl/utils/Assets.hx", lineNumber : 217, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	}
	return null;
};
openfl_utils_Assets.getMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return openfl_utils_Assets.getSound(id,useCache);
};
openfl_utils_Assets.getPath = function(id) {
	return lime_utils_Assets.getPath(id);
};
openfl_utils_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasSound(id)) {
		var sound = openfl_utils_Assets.cache.getSound(id);
		if(openfl_utils_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var buffer = lime_utils_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setSound(id,sound);
		}
		return sound;
	}
	return null;
};
openfl_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_utils_Assets.hasEventListener = function(type) {
	return openfl_utils_Assets.dispatcher.hasEventListener(type);
};
openfl_utils_Assets.hasLibrary = function(name) {
	return lime_utils_Assets.hasLibrary(name);
};
openfl_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_utils_Assets.cache.hasBitmapData(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(openfl_utils_Assets.cache.hasFont(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_utils_Assets.cache.hasSound(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_utils_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
openfl_utils_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_utils_Assets.isValidSound = function(sound) {
	return true;
};
openfl_utils_Assets.list = function(type) {
	return lime_utils_Assets.list(type);
};
openfl_utils_Assets.loadBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_utils_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setBitmapData(id,bitmapData);
			}
			promise.complete(bitmapData);
		} else {
			promise.error("[Assets] Could not load Image \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadBytes = function(id) {
	var promise = new lime_app_Promise();
	var future = lime_utils_Assets.loadBytes(id);
	future.onComplete(function(bytes) {
		promise.complete(openfl_utils_ByteArray.fromBytes(bytes));
	});
	future.onProgress(function(progress,total) {
		promise.progress(progress,total);
	});
	future.onError(function(msg) {
		promise.error(msg);
	});
	return promise.future;
};
openfl_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		promise.complete(openfl_utils_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_utils_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadLibrary = function(name) {
	return lime_utils_Assets.loadLibrary(name).then(function(library) {
		var _library = null;
		if(library != null) {
			if(((library) instanceof openfl_utils_AssetLibrary)) {
				_library = library;
			} else {
				_library = new openfl_utils_AssetLibrary();
				_library.__proxy = library;
				lime_utils_Assets.registerLibrary(name,_library);
			}
		}
		return lime_app_Future.withValue(_library);
	});
};
openfl_utils_Assets.loadMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var future = new lime_app_Future(function() {
		return openfl_utils_Assets.getMusic(id,useCache);
	});
	return future;
};
openfl_utils_Assets.loadMovieClip = function(id) {
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(((limeLibrary) instanceof openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				promise.completeWith(library.loadMovieClip(symbolName));
				return promise.future;
			}
		}
		promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
openfl_utils_Assets.loadSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	lime_utils_Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setSound(id,sound);
			}
			promise.complete(sound);
		} else {
			promise.error("[Assets] Could not load Sound \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadText = function(id) {
	var future = lime_utils_Assets.loadText(id);
	return future;
};
openfl_utils_Assets.registerLibrary = function(name,library) {
	lime_utils_Assets.registerLibrary(name,library);
};
openfl_utils_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) {
		capture = false;
	}
	openfl_utils_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_utils_Assets.resolveClass = function(name) {
	return $hxClasses[name];
};
openfl_utils_Assets.resolveEnum = function(name) {
	var value = $hxEnums[name];
	return value;
};
openfl_utils_Assets.unloadLibrary = function(name) {
	lime_utils_Assets.unloadLibrary(name);
};
openfl_utils_Assets.LimeAssets_onChange = function() {
	openfl_utils_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_utils_ByteArray = {};
openfl_utils_ByteArray.__properties__ = {set_position:"set_position",get_position:"get_position",set_length:"set_length",get_length:"get_length",get_bytesAvailable:"get_bytesAvailable",set_defaultObjectEncoding:"set_defaultObjectEncoding",get_defaultObjectEncoding:"get_defaultObjectEncoding",set_defaultEndian:"set_defaultEndian",get_defaultEndian:"get_defaultEndian"};
openfl_utils_ByteArray._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = new openfl_utils_ByteArrayData(length);
	return this1;
};
openfl_utils_ByteArray.clear = function(this1) {
	this1.clear();
};
openfl_utils_ByteArray.compress = function(this1,algorithm) {
	this1.compress(algorithm);
};
openfl_utils_ByteArray.deflate = function(this1) {
	this1.deflate();
};
openfl_utils_ByteArray.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils_ByteArray.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(((bytes) instanceof openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils_ByteArray.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils_ByteArray.fromFile = function(path) {
	return openfl_utils_ByteArray.fromBytes(lime_utils_Bytes.fromFile(path));
};
openfl_utils_ByteArray.fromLimeBytes = function(bytes) {
	return openfl_utils_ByteArray.fromBytes(bytes);
};
openfl_utils_ByteArray.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils_ByteArray.inflate = function(this1) {
	this1.inflate();
};
openfl_utils_ByteArray.loadFromBytes = function(bytes) {
	return lime_utils_Bytes.loadFromBytes(bytes).then(function(limeBytes) {
		var byteArray = openfl_utils_ByteArray.fromBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils_ByteArray.loadFromFile = function(path) {
	return lime_utils_Bytes.loadFromFile(path).then(function(limeBytes) {
		var byteArray = openfl_utils_ByteArray.fromBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils_ByteArray.readBoolean = function(this1) {
	return this1.readBoolean();
};
openfl_utils_ByteArray.readByte = function(this1) {
	return this1.readByte();
};
openfl_utils_ByteArray.readBytes = function(this1,bytes,offset,length) {
	if(length == null) {
		length = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this1.readBytes(bytes,offset,length);
};
openfl_utils_ByteArray.readDouble = function(this1) {
	return this1.readDouble();
};
openfl_utils_ByteArray.readFloat = function(this1) {
	return this1.readFloat();
};
openfl_utils_ByteArray.readInt = function(this1) {
	return this1.readInt();
};
openfl_utils_ByteArray.readMultiByte = function(this1,length,charSet) {
	return this1.readMultiByte(length,charSet);
};
openfl_utils_ByteArray.readObject = function(this1) {
	return this1.readObject();
};
openfl_utils_ByteArray.readShort = function(this1) {
	return this1.readShort();
};
openfl_utils_ByteArray.readUTF = function(this1) {
	return this1.readUTF();
};
openfl_utils_ByteArray.readUTFBytes = function(this1,length) {
	return this1.readUTFBytes(length);
};
openfl_utils_ByteArray.readUnsignedByte = function(this1) {
	return this1.readUnsignedByte();
};
openfl_utils_ByteArray.readUnsignedInt = function(this1) {
	return this1.readUnsignedInt();
};
openfl_utils_ByteArray.readUnsignedShort = function(this1) {
	return this1.readUnsignedShort();
};
openfl_utils_ByteArray.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.b[index] = value & 255;
	return value;
};
openfl_utils_ByteArray.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils_ByteArray.toBytePointer = function(byteArray) {
	lime_utils_BytePointer.set(openfl_utils_ByteArray.__bytePointer,byteArray,null,null,byteArray.position);
	return openfl_utils_ByteArray.__bytePointer;
};
openfl_utils_ByteArray.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils_ByteArray.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils_ByteArray.toLimeBytes = function(byteArray) {
	return byteArray;
};
openfl_utils_ByteArray.toString = function(this1) {
	return this1.toString();
};
openfl_utils_ByteArray.uncompress = function(this1,algorithm) {
	this1.uncompress(algorithm);
};
openfl_utils_ByteArray.writeBoolean = function(this1,value) {
	this1.writeBoolean(value);
};
openfl_utils_ByteArray.writeByte = function(this1,value) {
	this1.writeByte(value);
};
openfl_utils_ByteArray.writeBytes = function(this1,bytes,offset,length) {
	if(length == null) {
		length = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this1.writeBytes(bytes,offset,length);
};
openfl_utils_ByteArray.writeDouble = function(this1,value) {
	this1.writeDouble(value);
};
openfl_utils_ByteArray.writeFloat = function(this1,value) {
	this1.writeFloat(value);
};
openfl_utils_ByteArray.writeInt = function(this1,value) {
	this1.writeInt(value);
};
openfl_utils_ByteArray.writeMultiByte = function(this1,value,charSet) {
	this1.writeMultiByte(value,charSet);
};
openfl_utils_ByteArray.writeObject = function(this1,object) {
	this1.writeObject(object);
};
openfl_utils_ByteArray.writeShort = function(this1,value) {
	this1.writeShort(value);
};
openfl_utils_ByteArray.writeUTF = function(this1,value) {
	this1.writeUTF(value);
};
openfl_utils_ByteArray.writeUTFBytes = function(this1,value) {
	this1.writeUTFBytes(value);
};
openfl_utils_ByteArray.writeUnsignedInt = function(this1,value) {
	this1.writeUnsignedInt(value);
};
openfl_utils_ByteArray.get_bytesAvailable = function(this1) {
	return this1.length - this1.position;
};
openfl_utils_ByteArray.get_defaultEndian = function() {
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	return openfl_utils_ByteArrayData.__defaultEndian;
};
openfl_utils_ByteArray.set_defaultEndian = function(value) {
	return openfl_utils_ByteArrayData.__defaultEndian = value;
};
openfl_utils_ByteArray.get_defaultObjectEncoding = function() {
	return openfl_utils_ByteArrayData.defaultObjectEncoding;
};
openfl_utils_ByteArray.set_defaultObjectEncoding = function(value) {
	return openfl_utils_ByteArrayData.defaultObjectEncoding = value;
};
openfl_utils_ByteArray.get_endian = function(this1) {
	return this1.__endian;
};
openfl_utils_ByteArray.set_endian = function(this1,value) {
	return this1.__endian = value;
};
openfl_utils_ByteArray.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
openfl_utils_ByteArray.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
		if(value < this1.position) {
			this1.position = value;
		}
	}
	this1.length = value;
	return value;
};
openfl_utils_ByteArray.get_objectEncoding = function(this1) {
	return this1.objectEncoding;
};
openfl_utils_ByteArray.set_objectEncoding = function(this1,value) {
	return this1.objectEncoding = value;
};
openfl_utils_ByteArray.get_position = function(this1) {
	return this1.position;
};
openfl_utils_ByteArray.set_position = function(this1,value) {
	return this1.position = value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = "openfl.utils.IDataOutput";
openfl_utils_IDataOutput.__isInterface__ = true;
openfl_utils_IDataOutput.prototype = {
	__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = "openfl.utils.IDataInput";
openfl_utils_IDataInput.__isInterface__ = true;
openfl_utils_IDataInput.prototype = {
	__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	this.__endian = openfl_utils_ByteArrayData.__defaultEndian;
	this.objectEncoding = openfl_utils_ByteArrayData.defaultObjectEncoding;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = "openfl.utils.ByteArrayData";
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.__properties__ = {set_defaultEndian:"set_defaultEndian",get_defaultEndian:"get_defaultEndian"};
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.get_defaultEndian = function() {
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	return openfl_utils_ByteArrayData.__defaultEndian;
};
openfl_utils_ByteArrayData.set_defaultEndian = function(value) {
	return openfl_utils_ByteArrayData.__defaultEndian = value;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var limeBytes = this;
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.DEFLATE);
			break;
		case 1:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.LZMA);
			break;
		default:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.ZLIB);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.b[this.position++] != 0;
		} else {
			throw haxe_Exception.thrown(new openfl_errors_EOFError());
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.length - this.position;
		}
		if(this.position + length > this.length) {
			throw haxe_Exception.thrown(new openfl_errors_EOFError());
		}
		if(bytes.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		if(this.__endian == 1) {
			if(this.position + 8 > this.length) {
				throw haxe_Exception.thrown(new openfl_errors_EOFError());
			}
			this.position += 8;
			return this.getDouble(this.position - 8);
		} else {
			var ch1 = this.readInt();
			var ch2 = this.readInt();
			return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,readFloat: function() {
		if(this.__endian == 1) {
			if(this.position + 4 > this.length) {
				throw haxe_Exception.thrown(new openfl_errors_EOFError());
			}
			this.position += 4;
			return this.getFloat(this.position - 4);
		} else {
			return haxe_io_FPHelper.i32ToFloat(this.readInt());
		}
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readObject: function() {
		switch(this.objectEncoding) {
		case 10:
			var data = this.readUTF();
			return haxe_Unserializer.run(data);
		case 12:
			var data = this.readUTF();
			return JSON.parse(data);
		default:
			return null;
		}
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == 1) {
			value = ch2 << 8 | ch1;
		} else {
			value = ch1 << 8 | ch2;
		}
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw haxe_Exception.thrown(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw haxe_Exception.thrown(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var limeBytes = this;
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.DEFLATE);
			break;
		case 1:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.LZMA);
			break;
		default:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.ZLIB);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
		}
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value ? 1 : 0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils_ByteArray.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils_ByteArray.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		if(this.__endian == 1) {
			this.__resize(this.position + 4);
			this.setFloat(this.position,value);
			this.position += 4;
		} else {
			var int = haxe_io_FPHelper.floatToI32(value);
			this.writeInt(int);
		}
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 24 & 255 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value & 255 & 255;
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeObject: function(object) {
		switch(this.objectEncoding) {
		case 10:
			var value = haxe_Serializer.run(object);
			this.writeUTF(value);
			break;
		case 12:
			var value = JSON.stringify(object);
			this.writeUTF(value);
			break;
		default:
			return;
		}
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
		} else {
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils_ByteArray.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils_ByteArray.fromBytes(bytes));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			if(this.__length > 0) {
				var cacheLength = this.length;
				this.length = this.__length;
				bytes.blit(0,this,0,this.__length);
				this.length = cacheLength;
			}
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils_CompressionAlgorithm = {};
openfl_utils_CompressionAlgorithm.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils_CompressionAlgorithm.toString = function(this1) {
	switch(this1) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils_Dictionary = {};
openfl_utils_Dictionary.exists = function(this1,key) {
	return this1.exists(key);
};
openfl_utils_Dictionary.get = function(this1,key) {
	return this1.get(key);
};
openfl_utils_Dictionary.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
openfl_utils_Dictionary.remove = function(this1,key) {
	return this1.remove(key);
};
openfl_utils_Dictionary.set = function(this1,key,value) {
	this1.set(key,value);
	return value;
};
openfl_utils_Dictionary.iterator = function(this1) {
	return this1.keys();
};
openfl_utils_Dictionary.each = function(this1) {
	return this1.iterator();
};
openfl_utils_Dictionary.toStringMap = function(t,weakKeys) {
	return new haxe_ds_StringMap();
};
openfl_utils_Dictionary.toIntMap = function(t,weakKeys) {
	return new haxe_ds_IntMap();
};
openfl_utils_Dictionary.toFloatMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_FloatMap();
};
openfl_utils_Dictionary.toEnumValueMapMap = function(t,weakKeys) {
	return new haxe_ds_EnumValueMap();
};
openfl_utils_Dictionary.toObjectMap = function(t,weakKeys) {
	return new haxe_ds_ObjectMap();
};
openfl_utils_Dictionary.toUtilsObjectMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_UtilsObjectMap();
};
openfl_utils_Dictionary.toClassMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_ClassMap();
};
openfl_utils_Dictionary.fromStringMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromIntMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromFloatMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromObjectMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromUtilsObjectMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromClassMap = function(map) {
	return map;
};
var openfl_utils__$Dictionary_ClassMap = function() {
	this.types = new haxe_ds_StringMap();
	this.values = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils._Dictionary.ClassMap"] = openfl_utils__$Dictionary_ClassMap;
openfl_utils__$Dictionary_ClassMap.__name__ = "openfl.utils._Dictionary.ClassMap";
openfl_utils__$Dictionary_ClassMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_ClassMap.prototype = {
	clear: function() {
		this.types.h = Object.create(null);
		this.values.h = Object.create(null);
	}
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_ClassMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		var this1 = this.types;
		var key1 = key.__name__;
		return Object.prototype.hasOwnProperty.call(this1.h,key1);
	}
	,get: function(key) {
		var this1 = this.values;
		var key1 = key.__name__;
		return this1.h[key1];
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		return haxe_ds_StringMap.valueIterator(this.types.h);
	}
	,iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.values.h);
	}
	,remove: function(key) {
		var name = key.__name__;
		var _this = this.types;
		var tmp;
		if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
			delete(_this.h[name]);
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			var _this = this.values;
			if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
				delete(_this.h[name]);
				return true;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set: function(key,value) {
		var name = key.__name__;
		this.types.h[name] = key;
		this.values.h[name] = value;
	}
	,toString: function() {
		return haxe_ds_StringMap.stringify(this.values.h);
	}
	,__class__: openfl_utils__$Dictionary_ClassMap
};
var openfl_utils__$Dictionary_FloatMap = function() {
	this.floatKeys = [];
	this.values = [];
};
$hxClasses["openfl.utils._Dictionary.FloatMap"] = openfl_utils__$Dictionary_FloatMap;
openfl_utils__$Dictionary_FloatMap.__name__ = "openfl.utils._Dictionary.FloatMap";
openfl_utils__$Dictionary_FloatMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_FloatMap.prototype = {
	clear: function() {
		this.floatKeys = [];
		this.values = [];
	}
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_FloatMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		return this.indexOf(key) > -1;
	}
	,get: function(key) {
		var ind = this.indexOf(key);
		if(ind > -1) {
			return this.values[ind];
		} else {
			return null;
		}
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		return new haxe_iterators_ArrayIterator(this.floatKeys.slice());
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.values.slice());
	}
	,remove: function(key) {
		var ind = this.indexOf(key);
		if(ind > -1) {
			this.floatKeys.splice(ind,1);
			this.values.splice(ind,1);
			return true;
		}
		return false;
	}
	,set: function(key,value) {
		this.insertSorted(key,value);
	}
	,indexOf: function(key) {
		var len = this.floatKeys.length;
		var startIndex = 0;
		var endIndex = len - 1;
		if(len == 0) {
			return -1;
		}
		var midIndex = 0;
		while(startIndex < endIndex) {
			midIndex = Math.floor((startIndex + endIndex) / 2);
			if(this.floatKeys[midIndex] == key) {
				return midIndex;
			} else if(this.floatKeys[midIndex] > key) {
				endIndex = midIndex - 1;
			} else {
				startIndex = midIndex + 1;
			}
		}
		if(this.floatKeys[startIndex] == key) {
			return startIndex;
		} else {
			return -1;
		}
	}
	,insertSorted: function(key,value) {
		var len = this.floatKeys.length;
		var startIndex = 0;
		var endIndex = len - 1;
		if(len == 0) {
			this.floatKeys.push(key);
			this.values.push(value);
			return;
		}
		var midIndex = 0;
		while(startIndex < endIndex) {
			midIndex = Math.floor((startIndex + endIndex) / 2);
			if(this.floatKeys[midIndex] == key) {
				this.values[midIndex] = value;
				return;
			} else if(this.floatKeys[midIndex] > key) {
				endIndex = midIndex - 1;
			} else {
				startIndex = midIndex + 1;
			}
		}
		if(this.floatKeys[startIndex] > key) {
			this.floatKeys.splice(startIndex,0,key);
			this.values.splice(startIndex,0,value);
		} else if(this.floatKeys[startIndex] < key) {
			this.floatKeys.splice(startIndex + 1,0,key);
			this.values.splice(startIndex + 1,0,value);
		} else {
			this.values[startIndex] = value;
		}
	}
	,toString: function() {
		return this.values.toString();
	}
	,__class__: openfl_utils__$Dictionary_FloatMap
};
var openfl_utils__$Dictionary_UtilsObjectMap = function() {
	this.map = new haxe_ds_ObjectMap();
};
$hxClasses["openfl.utils._Dictionary.UtilsObjectMap"] = openfl_utils__$Dictionary_UtilsObjectMap;
openfl_utils__$Dictionary_UtilsObjectMap.__name__ = "openfl.utils._Dictionary.UtilsObjectMap";
openfl_utils__$Dictionary_UtilsObjectMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_UtilsObjectMap.prototype = {
	clear: function() {
		this.map.h = { __keys__ : { }};
	}
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_UtilsObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		return this.map.h.__keys__[key.__id__] != null;
	}
	,get: function(key) {
		return this.map.h[key.__id__];
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		return this.map.keys();
	}
	,iterator: function() {
		return this.map.iterator();
	}
	,remove: function(key) {
		return this.map.remove(key);
	}
	,set: function(key,value) {
		this.map.set(key,value);
	}
	,toString: function() {
		return this.map.toString();
	}
	,__class__: openfl_utils__$Dictionary_UtilsObjectMap
};
var openfl_utils_Endian = {};
openfl_utils_Endian.fromLimeEndian = function(value) {
	switch(value._hx_index) {
	case 0:
		return 1;
	case 1:
		return 0;
	}
};
openfl_utils_Endian.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils_Endian.toLimeEndian = function(this1) {
	switch(this1) {
	case 0:
		return lime_system_Endian.BIG_ENDIAN;
	case 1:
		return lime_system_Endian.LITTLE_ENDIAN;
	default:
		return null;
	}
};
openfl_utils_Endian.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils_Object = {};
openfl_utils_Object._new = function() {
	var this1 = { };
	return this1;
};
openfl_utils_Object.hasOwnProperty = function(this1,name) {
	if(this1 != null) {
		return Object.prototype.hasOwnProperty.call(this1,name);
	} else {
		return false;
	}
};
openfl_utils_Object.isPrototypeOf = function(this1,theClass) {
	var c = js_Boot.getClass(this1);
	while(c != null) {
		if(c == theClass) {
			return true;
		}
		c = c.__super__;
	}
	return false;
};
openfl_utils_Object.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) {
		fields = [];
	}
	return new haxe_iterators_ArrayIterator(fields);
};
openfl_utils_Object.propertyIsEnumerable = function(this1,name) {
	if(this1 != null && Object.prototype.hasOwnProperty.call(this1,name)) {
		return js_Boot.__implements(Reflect.field(this1,name),haxe_lang_Iterable);
	} else {
		return false;
	}
};
openfl_utils_Object.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils_Object.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils_Object.valueOf = function(this1) {
	return this1;
};
openfl_utils_Object.__fieldRead = function(this1,name) {
	return Reflect.getProperty(this1,name);
};
openfl_utils_Object.__fieldWrite = function(this1,name,value) {
	Reflect.setProperty(this1,name,value);
	return value;
};
openfl_utils_Object.__get = function(this1,key) {
	return Reflect.getProperty(this1,key);
};
openfl_utils_Object.__set = function(this1,key,value) {
	Reflect.setProperty(this1,key,value);
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = "haxe.lang.Iterator";
haxe_lang_Iterator.__isInterface__ = true;
haxe_lang_Iterator.prototype = {
	__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = "haxe.lang.Iterable";
haxe_lang_Iterable.__isInterface__ = true;
haxe_lang_Iterable.prototype = {
	__class__: haxe_lang_Iterable
};
var openfl_utils__$internal_Lib = function() { };
$hxClasses["openfl.utils._internal.Lib"] = openfl_utils__$internal_Lib;
openfl_utils__$internal_Lib.__name__ = "openfl.utils._internal.Lib";
openfl_utils__$internal_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	if(!Object.prototype.hasOwnProperty.call(openfl_utils__$internal_Lib.__sentWarnings.h,api)) {
		openfl_utils__$internal_Lib.__sentWarnings.h[api] = true;
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
var openfl_utils__$internal_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl.utils._internal.TouchData"] = openfl_utils__$internal_TouchData;
openfl_utils__$internal_TouchData.__name__ = "openfl.utils._internal.TouchData";
openfl_utils__$internal_TouchData.prototype = {
	reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl_utils__$internal_TouchData
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
var _init = lime__$internal_backend_html5_HTML5Application;
var init = lime_app_Application;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
var array = null;
var vector = null;
var view = null;
var buffer = null;
var len = null;
var this1 = new Uint32Array(256);
lime_math_RGBA.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_RGBA.__alpha16[i] = Math.ceil(i * 257.00392156862745);
}
var array = null;
var vector = null;
var view = null;
var buffer = null;
var len = null;
var this1 = new Uint8Array(511);
lime_math_RGBA.__clamp = this1;
var _g = 0;
while(_g < 255) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = i;
}
var _g = 255;
var _g1 = 511;
while(_g < _g1) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 5;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
openfl_display__$internal_CanvasGraphics.hitTestCanvas = typeof(window) != "undefined" ? window.document.createElement("canvas") : null;
openfl_display__$internal_CanvasGraphics.hitTestContext = typeof(window) != "undefined" ? openfl_display__$internal_CanvasGraphics.hitTestCanvas.getContext("2d") : null;
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_ui_Multitouch.inputMode = 2;
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
extension_ga_GameAnalytics.sdk_version_ios = "ios 3.2.1";
extension_ga_GameAnalytics.sdk_version_android = "android 4.0.0";
extension_ga_GameAnalytics.sdk_version_javascript = "javascript 3.1.2";
extension_ga_GameAnalytics.sdk_name = "openfl";
extension_ga_GameAnalytics.sdk_version = "3.0.0";
extension_ga_GameAnalytics.ready = false;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
haxe_Template.hxKeepArrayIterator = new haxe_iterators_ArrayIterator([]);
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
openfl_Vector.__meta__ = { statics : { toNullVector : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DisplayObject.__meta__ = { fields : { __cairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, addEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}, removeEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempStack = new lime_utils_ObjectPool(function() {
	return openfl_Vector.toObjectVector(null);
},function(stack) {
	stack.set_length(0);
});
haxepunk_Entity._EMPTY = new haxepunk_Entity();
haxepunk_Entity._point = (function($this) {
	var $r;
	var this1 = { x : 0, y : 0};
	$r = this1;
	return $r;
}(this));
haxepunk_Graphic.smoothDefault = true;
haxepunk_Graphic.pixelSnappingDefault = false;
haxepunk_HXP.VERSION = "4.0.2";
haxepunk_HXP.windowWidth = 0;
haxepunk_HXP.windowHeight = 0;
haxepunk_HXP.frameRate = 0;
haxepunk_HXP.rate = 1;
haxepunk_HXP.defaultFont = "font/monofonto";
haxepunk_HXP.tweener = new haxepunk_Tweener();
haxepunk_HXP.focused = false;
haxepunk_HXP.orientations = [];
haxepunk_HXP.needsResize = false;
haxepunk_HXP.volume = 1;
haxepunk_HXP._pan = 0;
haxepunk_HXP.point = (function($this) {
	var $r;
	var this1 = { x : 0, y : 0};
	$r = this1;
	return $r;
}(this));
haxepunk_HXP.point2 = (function($this) {
	var $r;
	var this1 = { x : 0, y : 0};
	$r = this1;
	return $r;
}(this));
haxepunk_HXP.zeroCamera = new haxepunk_Camera();
haxepunk_HXP.rect = new haxepunk_math_Rectangle();
openfl_display_DefaultPreloader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
haxepunk_Scene.drawContext = new haxepunk_utils_DrawContext();
haxepunk_Scene._pooledEntityLists = [];
haxepunk_Sfx._sounds = new haxe_ds_StringMap();
haxepunk_Sfx._typePlaying = new haxe_ds_StringMap();
haxepunk_Sfx._typeTransforms = new haxe_ds_StringMap();
haxepunk__$internal_KeyInput._nativeCorrection = new haxe_ds_StringMap();
haxepunk_assets_AssetCache.global = new haxepunk_assets_AssetCache("global");
haxepunk_assets_AssetCache.active = [haxepunk_assets_AssetCache.global];
haxepunk_assets_AssetCache.customLoaders = new haxe_ds_StringMap();
haxepunk_debug_Console.SAMPLE_TIME = 0.33333333333333331;
haxepunk_debug_Console.DATA_SIZE = 15;
haxepunk_debug_Console.CAMERA_PAN_PER_SECOND = 256;
haxepunk_debug_Console.MIN_DRAG = 8;
haxepunk_debug_LogPanel.EXPAND_PER_SECOND = 2048;
haxepunk_debug_LogPanel.LOG_LINES = 10;
haxepunk_debug_LogPanel.MAX_HEIGHT = 216;
haxepunk_debug_LogPanel.MIN_HEIGHT = 48;
haxepunk_graphics_atlas_AtlasData._uniqueId = 0;
haxepunk_graphics_atlas_AtlasData._rect = new haxepunk_math_Rectangle();
haxepunk_graphics_atlas_AtlasResolutions._rect = new haxepunk_math_Rectangle();
haxepunk_graphics_atlas_AtlasResolutions._point = (function($this) {
	var $r;
	var this1 = { x : 0, y : 0};
	$r = this1;
	return $r;
}(this));
haxepunk_graphics_hardware_DrawCommand._pool = haxepunk_graphics_hardware_DrawCommand._prePopulatePool(32,4);
haxepunk_graphics_hardware_DrawCommandBatch.maxTriangleChecks = 128;
haxepunk_graphics_hardware_DrawCommandBatch._bounds = new haxepunk_math_Rectangle();
haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit = -1;
haxepunk_graphics_hardware_HardwareRenderer.UNIFORM_MATRIX = "uMatrix";
haxepunk_graphics_hardware_HardwareRenderer.triangleCount = 0;
haxepunk_graphics_hardware_HardwareRenderer.drawCallCount = 0;
haxepunk_graphics_hardware_HardwareRenderer._tracking = true;
haxepunk_graphics_hardware_RenderBuffer.INITIAL_SIZE = 100;
openfl_geom_Point.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
});
haxepunk_graphics_hardware_Texture._zero = new openfl_geom_Point(0,0);
haxepunk_graphics_shader_Shader.idSeq = 0;
haxepunk_graphics_shader_Shader._attribs = [];
haxepunk_graphics_shader_ColorShader.VERTEX_SHADER = "// HaxePunk color vertex shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec4 aColor;\nvarying vec4 vColor;\nuniform mat4 uMatrix;\n\nvoid main(void) {\n\tvColor = vec4(aColor.bgr * aColor.a, aColor.a);\n\tgl_Position = uMatrix * aPosition;\n}";
haxepunk_graphics_shader_ColorShader.FRAGMENT_SHADER = "// HaxePunk color fragment shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec4 vColor;\n\nvoid main(void) {\n\tgl_FragColor = vColor;\n}";
haxepunk_graphics_shader_SceneShader.DEFAULT_VERTEX_SHADER = "\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n\tvTexCoord = aTexCoord;\n\tgl_Position = aPosition;\n}";
haxepunk_graphics_shader_SceneShader.DEFAULT_FRAGMENT_SHADER = "\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec2 vTexCoord;\nuniform sampler2D uImage0;\nuniform vec2 uResolution;\n\nvoid main () {\n\tgl_FragColor = texture2D(uImage0, vTexCoord);\n}";
haxepunk_graphics_shader_SceneShader._vertices = [-1.0,-1.0,0,0,1.0,-1.0,1,0,-1.0,1.0,0,1,1.0,-1.0,1,0,1.0,1.0,1,1,-1.0,1.0,0,1];
haxepunk_graphics_shader_SceneShader._lastX = 0;
haxepunk_graphics_shader_SceneShader._lastY = 0;
haxepunk_graphics_shader_SceneShader._lastSx = 0;
haxepunk_graphics_shader_SceneShader._lastSy = 0;
haxepunk_graphics_shader_TextureShader.VERTEX_SHADER = "// HaxePunk texture vertex shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec2 aTexCoord;\nattribute vec4 aColor;\nvarying vec2 vTexCoord;\nvarying vec4 vColor;\nuniform mat4 uMatrix;\n\nvoid main(void) {\n\tvColor = vec4(aColor.bgr * aColor.a, aColor.a);\n\tvTexCoord = aTexCoord;\n\tgl_Position = uMatrix * aPosition;\n}";
haxepunk_graphics_shader_TextureShader.FRAGMENT_SHADER = "// HaxePunk texture fragment shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec4 vColor;\nvarying vec2 vTexCoord;\nuniform sampler2D uImage0;\n\nvoid main(void) {\n\tvec4 color = texture2D(uImage0, vTexCoord);\n\tif (color.a == 0.0) {\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t} else {\n\t\tgl_FragColor = color * vColor;\n\t}\n}";
haxepunk_graphics_text_BitmapFontAtlas._DEFAULT_GLYPHS = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
haxepunk_graphics_text_AlignType.Left = 0;
haxepunk_graphics_text_AlignType.Center = 1;
haxepunk_graphics_text_AlignType.Right = 2;
haxepunk_utils_LogLevel.Debug = 10;
haxepunk_utils_LogLevel.Info = 20;
haxepunk_utils_LogLevel.Warning = 30;
haxepunk_utils_LogLevel.Error = 40;
haxepunk_utils_LogLevel.Critical = 50;
haxepunk_utils_LogLevel.longest = 20;
haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE = new EReg("<(([A-Za-z_-]+)( ([a-zA-Z-_]+)=\"([^\"]*)\")?/?|(/[A-Za-z_-]+))>","");
haxepunk_graphics_text_BitmapText.formatTags = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["br"] = [haxepunk_graphics_text_TextOpcode.NewLine(0,0,0)];
	_g.h["left"] = [haxepunk_graphics_text_TextOpcode.Align(0)];
	_g.h["/left"] = [haxepunk_graphics_text_TextOpcode.Align(0)];
	_g.h["right"] = [haxepunk_graphics_text_TextOpcode.Align(2)];
	_g.h["/right"] = [haxepunk_graphics_text_TextOpcode.Align(0)];
	_g.h["center"] = [haxepunk_graphics_text_TextOpcode.Align(1)];
	_g.h["/center"] = [haxepunk_graphics_text_TextOpcode.Align(0)];
	$r = _g;
	return $r;
}(this));
haxepunk_graphics_text_BitmapText.dynamicTags = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["img"] = haxepunk_graphics_text_BitmapText.dynamicImage;
	$r = _g;
	return $r;
}(this));
haxepunk_graphics_text_BitmapText._colorStack = [];
haxepunk_graphics_text_BitmapText._alphaStack = [];
haxepunk_graphics_text_BitmapText._scaleStack = [];
haxepunk_graphics_text_BitmapText._fontStack = [];
haxepunk_graphics_text_BitmapText._sizeStack = [];
haxepunk_graphics_text_BitmapText._word = [];
haxepunk_graphics_text_BitmapText._customStack = [];
haxepunk_graphics_text_BitmapText._renderData = new haxepunk_graphics_text_RenderData();
haxepunk_graphics_text_BitmapText._imgArray = [];
haxepunk_input_Gamepad.deadZone = 0.15;
haxepunk_input_Gamepad.gamepads = new haxe_ds_IntMap();
haxepunk_input_Gamepad.onConnect = new haxepunk_Signal1();
haxepunk_input_Gamepad.onDisconnect = new haxepunk_Signal1();
haxepunk_input_Gamepad.gamepadCount = 0;
haxepunk_input_Gesture.TAP = 1;
haxepunk_input_Gesture.DOUBLE_TAP = 2;
haxepunk_input_Gesture.LONG_PRESS = 3;
haxepunk_input_Gesture.MOVE = 4;
haxepunk_input_Gesture.PINCH = 5;
haxepunk_input_Gesture.TWO_FINGER_TAP = 6;
haxepunk_input_Gesture.longPressTime = 0.5;
haxepunk_input_Gesture.doubleTapTime = 0.5;
haxepunk_input_Gesture.deadZone = 5;
haxepunk_input_Gesture.enabled = false;
haxepunk_input_Gesture.gestures = new haxe_ds_IntMap();
haxepunk_input_Gesture._lastTap = 0;
haxepunk_input_Mouse.mouseDown = false;
haxepunk_input_Mouse.mouseUp = false;
haxepunk_input_Mouse.mousePressed = false;
haxepunk_input_Mouse.mouseReleased = false;
haxepunk_input_Mouse.rightMouseDown = false;
haxepunk_input_Mouse.rightMouseUp = false;
haxepunk_input_Mouse.rightMousePressed = false;
haxepunk_input_Mouse.rightMouseReleased = false;
haxepunk_input_Mouse.middleMouseDown = false;
haxepunk_input_Mouse.middleMouseUp = false;
haxepunk_input_Mouse.middleMousePressed = false;
haxepunk_input_Mouse.middleMouseReleased = false;
haxepunk_input_Mouse.mouseWheel = false;
haxepunk_input_Mouse._control = new haxe_ds_StringMap();
haxepunk_input_Mouse._buttonMap = new haxe_ds_IntMap();
haxepunk_input_Mouse._mouseWheelDelta = 0;
haxepunk_input_Mouse._mouseOnScreen = true;
haxepunk_input_Input.PRESS = "press";
haxepunk_input_Input.RELEASE = "release";
haxepunk_input_Input.handlers = [haxepunk_input_Handler,haxepunk_input_Mouse];
haxepunk_input_Input.multiTouchSupported = false;
haxepunk_input_Input._signals = [];
haxepunk_input_Input._enabled = false;
haxepunk_input_Key.keyString = "";
haxepunk_input_Key.ANY = -1;
haxepunk_input_Key.LEFT = 37;
haxepunk_input_Key.UP = 38;
haxepunk_input_Key.RIGHT = 39;
haxepunk_input_Key.DOWN = 40;
haxepunk_input_Key.ENTER = 13;
haxepunk_input_Key.COMMAND = 15;
haxepunk_input_Key.CONTROL = 17;
haxepunk_input_Key.SPACE = 32;
haxepunk_input_Key.SHIFT = 16;
haxepunk_input_Key.BACKSPACE = 8;
haxepunk_input_Key.CAPS_LOCK = 20;
haxepunk_input_Key.DELETE = 46;
haxepunk_input_Key.END = 35;
haxepunk_input_Key.ESCAPE = 27;
haxepunk_input_Key.HOME = 36;
haxepunk_input_Key.INSERT = 45;
haxepunk_input_Key.TAB = 9;
haxepunk_input_Key.PAGE_DOWN = 34;
haxepunk_input_Key.PAGE_UP = 33;
haxepunk_input_Key.LEFT_SQUARE_BRACKET = 219;
haxepunk_input_Key.RIGHT_SQUARE_BRACKET = 221;
haxepunk_input_Key.TILDE = 192;
haxepunk_input_Key.A = 65;
haxepunk_input_Key.B = 66;
haxepunk_input_Key.C = 67;
haxepunk_input_Key.D = 68;
haxepunk_input_Key.E = 69;
haxepunk_input_Key.F = 70;
haxepunk_input_Key.G = 71;
haxepunk_input_Key.H = 72;
haxepunk_input_Key.I = 73;
haxepunk_input_Key.J = 74;
haxepunk_input_Key.K = 75;
haxepunk_input_Key.L = 76;
haxepunk_input_Key.M = 77;
haxepunk_input_Key.N = 78;
haxepunk_input_Key.O = 79;
haxepunk_input_Key.P = 80;
haxepunk_input_Key.Q = 81;
haxepunk_input_Key.R = 82;
haxepunk_input_Key.S = 83;
haxepunk_input_Key.T = 84;
haxepunk_input_Key.U = 85;
haxepunk_input_Key.V = 86;
haxepunk_input_Key.W = 87;
haxepunk_input_Key.X = 88;
haxepunk_input_Key.Y = 89;
haxepunk_input_Key.Z = 90;
haxepunk_input_Key.F1 = 112;
haxepunk_input_Key.F2 = 113;
haxepunk_input_Key.F3 = 114;
haxepunk_input_Key.F4 = 115;
haxepunk_input_Key.F5 = 116;
haxepunk_input_Key.F6 = 117;
haxepunk_input_Key.F7 = 118;
haxepunk_input_Key.F8 = 119;
haxepunk_input_Key.F9 = 120;
haxepunk_input_Key.F10 = 121;
haxepunk_input_Key.F11 = 122;
haxepunk_input_Key.F12 = 123;
haxepunk_input_Key.F13 = 124;
haxepunk_input_Key.F14 = 125;
haxepunk_input_Key.F15 = 126;
haxepunk_input_Key.DIGIT_0 = 48;
haxepunk_input_Key.DIGIT_1 = 49;
haxepunk_input_Key.DIGIT_2 = 50;
haxepunk_input_Key.DIGIT_3 = 51;
haxepunk_input_Key.DIGIT_4 = 52;
haxepunk_input_Key.DIGIT_5 = 53;
haxepunk_input_Key.DIGIT_6 = 54;
haxepunk_input_Key.DIGIT_7 = 55;
haxepunk_input_Key.DIGIT_8 = 56;
haxepunk_input_Key.DIGIT_9 = 57;
haxepunk_input_Key.NUMPAD_0 = 96;
haxepunk_input_Key.NUMPAD_1 = 97;
haxepunk_input_Key.NUMPAD_2 = 98;
haxepunk_input_Key.NUMPAD_3 = 99;
haxepunk_input_Key.NUMPAD_4 = 100;
haxepunk_input_Key.NUMPAD_5 = 101;
haxepunk_input_Key.NUMPAD_6 = 102;
haxepunk_input_Key.NUMPAD_7 = 103;
haxepunk_input_Key.NUMPAD_8 = 104;
haxepunk_input_Key.NUMPAD_9 = 105;
haxepunk_input_Key.NUMPAD_ADD = 107;
haxepunk_input_Key.NUMPAD_DECIMAL = 110;
haxepunk_input_Key.NUMPAD_DIVIDE = 111;
haxepunk_input_Key.NUMPAD_ENTER = 108;
haxepunk_input_Key.NUMPAD_MULTIPLY = 106;
haxepunk_input_Key.NUMPAD_SUBTRACT = 109;
haxepunk_input_Key.kKeyStringMax = 100;
haxepunk_input_Key._key = new haxe_ds_IntMap();
haxepunk_input_Key._keyNum = 0;
haxepunk_input_Key._press = [];
haxepunk_input_Key._pressNum = 0;
haxepunk_input_Key._release = [];
haxepunk_input_Key._releaseNum = 0;
haxepunk_input_Key._control = new haxe_ds_StringMap();
haxepunk_input_Key._keyMap = new haxe_ds_IntMap();
haxepunk_input_Touch._touches = new haxe_ds_IntMap();
haxepunk_input_Touch._touchOrder = [];
haxepunk_input_gamepad_GamepadAxis.all = [2,5,0,1,3,4];
haxepunk_input_gamepad_GamepadAxis.LeftTrigger = 2;
haxepunk_input_gamepad_GamepadAxis.RightTrigger = 5;
haxepunk_input_gamepad_GamepadAxis.LeftX = 0;
haxepunk_input_gamepad_GamepadAxis.LeftY = 1;
haxepunk_input_gamepad_GamepadAxis.RightX = 3;
haxepunk_input_gamepad_GamepadAxis.RightY = 4;
haxepunk_input_gamepad_GamepadButton.all = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14];
haxepunk_input_gamepad_GamepadButton.BtnA = 0;
haxepunk_input_gamepad_GamepadButton.BtnB = 1;
haxepunk_input_gamepad_GamepadButton.BtnX = 2;
haxepunk_input_gamepad_GamepadButton.BtnY = 3;
haxepunk_input_gamepad_GamepadButton.LeftShoulder = 4;
haxepunk_input_gamepad_GamepadButton.RightShoulder = 5;
haxepunk_input_gamepad_GamepadButton.Back = 6;
haxepunk_input_gamepad_GamepadButton.Start = 7;
haxepunk_input_gamepad_GamepadButton.LeftStick = 8;
haxepunk_input_gamepad_GamepadButton.RightStick = 9;
haxepunk_input_gamepad_GamepadButton.Guide = 10;
haxepunk_input_gamepad_GamepadButton.DpadUp = 11;
haxepunk_input_gamepad_GamepadButton.DpadDown = 12;
haxepunk_input_gamepad_GamepadButton.DpadLeft = 13;
haxepunk_input_gamepad_GamepadButton.DpadRight = 14;
haxepunk_input_gamepad_GamepadType.controllers = new haxe_ds_StringMap();
haxepunk_masks_Polygon.EPSILON = 0.000000001;
haxepunk_masks_Polygon.firstProj = new haxepunk_math_Projection();
haxepunk_masks_Polygon.secondProj = new haxepunk_math_Projection();
haxepunk_masks_Polygon.vertical = (function($this) {
	var $r;
	var x = 0;
	var y = 1;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	$r = this1;
	return $r;
}(this));
haxepunk_masks_Polygon.horizontal = (function($this) {
	var $r;
	var x = 1;
	var y = 0;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	$r = this1;
	return $r;
}(this));
haxepunk_masks_SlopedGrid._emptyTile = { type : 0};
haxepunk_math_MathUtil.INT_MIN_VALUE = -2147483648;
haxepunk_math_MathUtil.INT_MAX_VALUE = 2147483647;
haxepunk_math_MathUtil.PI = 3.14159265358979323;
haxepunk_math_MathUtil.EPSILON = 1e-10;
haxepunk_math_MathUtil.point = (function($this) {
	var $r;
	var this1 = { x : 0, y : 0};
	$r = this1;
	return $r;
}(this));
haxepunk_math_Random._seed = 0;
haxepunk_utils_BlendMode.Add = 0;
haxepunk_utils_BlendMode.Alpha = 1;
haxepunk_utils_BlendMode.Multiply = 9;
haxepunk_utils_BlendMode.Screen = 12;
haxepunk_utils_BlendMode.Subtract = 14;
haxepunk_utils_Color.White = 16777215;
haxepunk_utils_Color.Black = 0;
haxepunk_utils_Ease.PI = 3.141592653589793;
haxepunk_utils_Ease.PI2 = 1.5707963267948966;
haxepunk_utils_Ease.EL = 13.962634015954636;
haxepunk_utils_Ease.B1 = 0.36363636363636365;
haxepunk_utils_Ease.B2 = 0.72727272727272729;
haxepunk_utils_Ease.B3 = 0.54545454545454541;
haxepunk_utils_Ease.B4 = 0.90909090909090906;
haxepunk_utils_Ease.B5 = 0.81818181818181823;
haxepunk_utils_Ease.B6 = 0.95454545454545459;
haxepunk_utils_HaxelibInfo.$name = "HaxePunk";
haxepunk_utils_HaxelibInfo.description = "A Haxe port of the FlashPunk AS3 engine.";
haxepunk_utils_HaxelibInfo.url = "http://haxepunk.com";
haxepunk_utils_HaxelibInfo.install = { lime : "7.6.3", munit : "", openfl : "8.9.1"};
haxepunk_utils_HaxelibInfo.contributors = ["heardtheword","_ibilon","bendmorris","matrefeytontias"];
haxepunk_utils_HaxelibInfo.version = "4.0.2";
haxepunk_utils_HaxelibInfo.releasenote = "See CHANGELOG.md";
haxepunk_utils_HaxelibInfo.tags = ["flash","game","cpp","openfl","nme"];
haxepunk_utils_HaxelibInfo.license = "MIT";
kro13_hxp_systems_HxpPhysicsSystem.UPD_FREQ = 1;
kro13_kk_Constants.DAY_IN_SECS = 86400;
kro13_kk_Constants.BASE_BLOCKS_COUNT = 10;
kro13_kk_Constants.DIFFICULTY_BLOCKS_COUNT = 20;
kro13_kk_Constants.TILE_SIZE = 40;
kro13_kk_Constants.THICK_BORDER_SIZE = 20;
kro13_kk_Constants.BORDER_SIZE = 2;
kro13_kk_Constants.GUI_COLOR = 10066380;
kro13_kk_Constants.GUI_TEXT_COLOR = 11250647;
kro13_kk_Constants.LIGHT_COLOR = 16730531;
kro13_kk_Constants.SPARK_COLOR = 16757990;
kro13_kk_Constants.PINK_COLOR = 16731843;
kro13_kk_Constants.GROUND_COLOR1 = 10066380;
kro13_kk_Constants.GROUND_COLOR2 = 13421798;
kro13_kk_Constants.GROUND_COLOR3 = 16250879;
kro13_kk_Constants.SHADOW_COLOR = 6776735;
kro13_kk_Constants.PLAYER_COLOR = 13369344;
kro13_kk_Constants.BORDER_COLOR = 7566220;
kro13_kk_Constants.SPOT_COLOR = 7697834;
kro13_kk_Constants.GREEN_COLOR = 65280;
kro13_kk_Constants.RED_COLOR = 16711680;
kro13_kk_Constants.ARROW_SPEED = 100;
kro13_kk_Constants.ANGULAR_SPEED = 40;
kro13_kk_Constants.BASE_GRAVITY = 400;
kro13_kk_Constants.MAX_SPEED = 775;
kro13_kk_Constants.MIN_SPEED = 50;
kro13_kk_Constants.CRITICAL_HIT_SPEED = 400;
kro13_kk_Constants.HORIZONTAL_MOVE_COEF = 0.15;
kro13_kk_Constants.GROUND_RESISTANCE_COEF = 0.001;
kro13_kk_Constants.GYRO_SPEED = 100000;
kro13_kk_Constants.TEXT_EMITTER_DELAY = 1;
kro13_kk_Constants.HIT_EVENT_INTERVAL = 1;
kro13_kk_Constants.SCORE_UPDATE_DELAY = 1;
kro13_kk_Constants.JUMP_TIME = 0.6;
kro13_kk_Constants.SOCIAL_URL = "https://vk.com/kanyonkarvergroup";
kro13_kk_Constants.SOCIAL_URL_MOBILE = "vk://vk.com/kanyonkarvergroup";
kro13_kk_Constants.FREE_RESTARTS_COUNT = 1;
kro13_kk_Constants.BUTTON_HEIGHT = 120;
kro13_kk_Constants.POPUP_WIDTH = 900;
kro13_kk_Constants.UI_GAP = 50;
kro13_kk_Constants.SPEED_BAR_WIDTH = 204;
kro13_kk_Constants.SPEED_BAR_HEIGHT = 40;
kro13_kk_Constants.RD_BIG_TICK_SIZE = 22;
kro13_kk_Constants.RD_SMALL_TICK_SIZE = 16;
kro13_kk_Constants.RD_RADIUS = 152;
kro13_kk_Constants.BASE_TEXT_SIZE = 60;
kro13_kk_Constants.SMALL_TEXT_SIZE = 46;
kro13_kk_Constants.BIG_TEXT_SIZE = 70;
kro13_kk_Constants.VERY_BIG_TEXT_SIZE = 76;
kro13_kk_Constants.LOCALE = "en";
kro13_kk_Constants.MIN_PORTRAIT_H = 1920;
kro13_kk_Constants.MIN_LANDSCAPE_H = 1400;
kro13_kk_Constants.MIN_PORTRAIT_W = 1080;
kro13_kk_Constants.MIN_LANDSCAPE_W = 2800;
kro13_kk_Constants.RESTART_MAX_HP = 90;
kro13_kk_Constants.MAIN_MENU_ADS_TRIGGER = 1;
kro13_kk_Constants.AUDIO_FORMAT = "mp3";
kro13_kk_Constants.PORTRAIT = true;
kro13_kk_Constants.BOOM_COLOR_GREEN = 16777215;
kro13_kk_Constants.BOOM_COLOR_RED = 16777215;
kro13_kk_Constants.FONT = "Norse-Bold-ru.fnt";
kro13_kk_Constants.FORCE_PRECISION = 1;
kro13_kk_KKGame.isMe = false;
kro13_kk_KKGame.version = "0.0.0";
kro13_kk_data_DataUtils.adjectives = ["bold","courageous","daring","epic","fearless","gallant","grand","gutsy","noble","valiant","classic","elevated","dauntless","doughty","exaggerated","fire-eating","grandiose","gritty","gutty","high-flown","impavid","inflated","intrepid","lion-hearted","mythological","stouthearted","unafraid","undaunted","valorous","almighty","backbreaking","colossal","courageous","forceful","gargantuan","gigantic","hard","heroic","huge","impressive","laborious","mighty","strenuous","tough","vigorous","altruistic","benevolent","bighearted","chivalrous","considerate","free","gracious","greathearted","heroic","liberal","lofty","magnanimous","noble","princely","unselfish"];
kro13_kk_data_DataUtils.nouns = ["alligator","crocodile","alpaca","ant","antelope","ape","armadillo","donkey","burro","baboon","badger","bat","bear","beaver","bee","beetle","buffalo","butterfly","camel","carabao","caribou","cat","cattle","cheetah","chimpanzee","chinchilla","cicada","clam","cockroach","cod","coyote","crab","cricket","crow","raven","deer","dinosaur","dog","dolphin","porpoise","duck","eagle","eel","elephant","elk","ferret","fish","fly","fox","frog","toad","gerbil","giraffe","gnat","gnu","wildebeest","goat","goldfish","goose","gorilla","grasshopper","guinea pig","hamster","hare","hedgehog","herring","hippopotamus","hornet","horse","hound","hyena","impala","insect","jackal","jellyfish","kangaroo","wallaby","koala","leopard","lion","lizard","llama","locust","louse","macaw","mallard","mammoth","manatee","marten","mink","minnow","mole","monkey","moose","mosquito","mouse","rat","mule","muskrat","otter","ox","oyster","panda","pig","hog","swine","platypus","porcupine","prairie dog","pug","rabbit","raccoon","reindeer","rhinoceros","salmon","sardine","scorpion","seal","sea lion","serval","shark","sheep","skunk","snail","snake","spider","squirrel","swan","termite","tiger","trout","turtle","walrus","wasp","weasel","whale","wolf","wombat","woodchuck","worm","yak","yellowjacket","zebra"];
kro13_kk_data_EProfileTag.HELP_SEEN = 0;
kro13_kk_data_EProfileTag.MEMBER = 1;
kro13_kk_data_EProfileTag.SNOWMEN_HELP_SEEN = 2;
kro13_kk_data_EProfileTag.AVALANCHE_HELP_SEEN = 3;
kro13_kk_data_EProfileTag.FAUNA_HELP_SEEN = 4;
kro13_kk_data_EProfileTag.TUTOR_FINISHED = 5;
kro13_kk_data_EProfileTag.PRIVACY_POLICY_ACCEPED = 6;
kro13_kk_data_EProfileTag.MANDALA_HELP_SEEN = 7;
kro13_kk_guiObjects_popups_ConsolePopup.log = [];
kro13_kk_guiObjects_popups_ConsolePopup.isLogDirty = false;
kro13_kk_systems_ChaseSystem.CHASE_START_TIME = 60;
kro13_kk_systems_DTSystem.multiplier = 1;
kro13_kk_systems_InGameMessagesSystem.MSG_TIMEOUT = 2;
kro13_kk_systems_RollbackSystem.EAGLE0 = "images/eagle1.png";
kro13_kk_systems_RollbackSystem.EAGLE1 = "images/eagle.png";
kro13_kk_systems_SoundControlSystem.MAIN_MUSIC_TIMEOUT = 180;
kro13_kk_utils_CollisionUtils.NORMAL_TOLERANCE = 0.0001;
kro13_kk_utils_GameObjetIds.id = 0;
kro13_kk_utils_TextUtils.greenTag = "green";
kro13_kk_utils_TextUtils.pinkTag = "pink";
kro13_kk_utils_TextUtils.guiTag = "guiText";
kro13_kk_utils_TextUtils.redTag = "red";
kro13_kk_utils_TextUtils.plusSign = "+";
kro13_ya_YaRemoteDataProvider.TOP_SCORE_NAME = "topscore1";
lime__$internal_backend_html5_HTML5HTTPRequest.OPTION_REVOKE_URL = 1;
lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit = 17;
lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue = new haxe_ds_List();
lime__$internal_backend_html5_HTML5Window.dummyCharacter = "";
lime__$internal_backend_html5_HTML5Window.windowID = 0;
lime__$internal_format_Base64.DICTIONARY = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
lime__$internal_format_Base64.EXTENDED_DICTIONARY = (function($this) {
	var $r;
	var result = [];
	{
		var _g = 0;
		var _g1 = lime__$internal_format_Base64.DICTIONARY;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = lime__$internal_format_Base64.DICTIONARY;
			while(_g2 < _g3.length) {
				var b = _g3[_g2];
				++_g2;
				result.push(a + b);
			}
		}
	}
	$r = result;
	return $r;
}(this));
lime__$internal_graphics_StackBlur.MUL_TABLE = [1,171,205,293,57,373,79,137,241,27,391,357,41,19,283,265,497,469,443,421,25,191,365,349,335,161,155,149,9,278,269,261,505,245,475,231,449,437,213,415,405,395,193,377,369,361,353,345,169,331,325,319,313,307,301,37,145,285,281,69,271,267,263,259,509,501,493,243,479,118,465,459,113,446,55,435,429,423,209,413,51,403,199,393,97,3,379,375,371,367,363,359,355,351,347,43,85,337,333,165,327,323,5,317,157,311,77,305,303,75,297,294,73,289,287,71,141,279,277,275,68,135,67,133,33,262,260,129,511,507,503,499,495,491,61,121,481,477,237,235,467,232,115,457,227,451,7,445,221,439,218,433,215,427,425,211,419,417,207,411,409,203,202,401,399,396,197,49,389,387,385,383,95,189,47,187,93,185,23,183,91,181,45,179,89,177,11,175,87,173,345,343,341,339,337,21,167,83,331,329,327,163,81,323,321,319,159,79,315,313,39,155,309,307,153,305,303,151,75,299,149,37,295,147,73,291,145,289,287,143,285,71,141,281,35,279,139,69,275,137,273,17,271,135,269,267,133,265,33,263,131,261,130,259,129,257,1];
lime__$internal_graphics_StackBlur.SHG_TABLE = [0,9,10,11,9,12,10,11,12,9,13,13,10,9,13,13,14,14,14,14,10,13,14,14,14,13,13,13,9,14,14,14,15,14,15,14,15,15,14,15,15,15,14,15,15,15,15,15,14,15,15,15,15,15,15,12,14,15,15,13,15,15,15,15,16,16,16,15,16,14,16,16,14,16,13,16,16,16,15,16,13,16,15,16,14,9,16,16,16,16,16,16,16,16,16,13,14,16,16,15,16,16,10,16,15,16,14,16,16,14,16,16,14,16,16,14,15,16,16,16,14,15,14,15,13,16,16,15,17,17,17,17,17,17,14,15,17,17,16,16,17,16,15,17,16,17,11,17,16,17,16,17,16,17,17,16,17,17,16,17,17,16,16,17,17,17,16,14,17,17,17,17,15,16,14,16,15,16,13,16,15,16,14,16,15,16,12,16,15,16,17,17,17,17,17,13,16,15,17,17,17,16,15,17,17,17,16,15,17,17,14,16,17,17,16,17,17,16,15,17,16,14,17,16,15,17,16,17,17,16,17,15,16,17,14,17,16,15,17,16,17,13,17,16,17,17,16,17,14,17,16,17,16,17,16,17,9];
lime_graphics_cairo_CairoFTFontFace.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.EXTENSIONS = 7939;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_TYPE = 35738;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_graphics_opengl_GL.READ_BUFFER = 3074;
lime_graphics_opengl_GL.UNPACK_ROW_LENGTH = 3314;
lime_graphics_opengl_GL.UNPACK_SKIP_ROWS = 3315;
lime_graphics_opengl_GL.UNPACK_SKIP_PIXELS = 3316;
lime_graphics_opengl_GL.PACK_ROW_LENGTH = 3330;
lime_graphics_opengl_GL.PACK_SKIP_ROWS = 3331;
lime_graphics_opengl_GL.PACK_SKIP_PIXELS = 3332;
lime_graphics_opengl_GL.TEXTURE_BINDING_3D = 32874;
lime_graphics_opengl_GL.UNPACK_SKIP_IMAGES = 32877;
lime_graphics_opengl_GL.UNPACK_IMAGE_HEIGHT = 32878;
lime_graphics_opengl_GL.MAX_3D_TEXTURE_SIZE = 32883;
lime_graphics_opengl_GL.MAX_ELEMENTS_VERTICES = 33000;
lime_graphics_opengl_GL.MAX_ELEMENTS_INDICES = 33001;
lime_graphics_opengl_GL.MAX_TEXTURE_LOD_BIAS = 34045;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
lime_graphics_opengl_GL.MAX_ARRAY_TEXTURE_LAYERS = 35071;
lime_graphics_opengl_GL.MIN_PROGRAM_TEXEL_OFFSET = 35076;
lime_graphics_opengl_GL.MAX_PROGRAM_TEXEL_OFFSET = 35077;
lime_graphics_opengl_GL.MAX_VARYING_COMPONENTS = 35659;
lime_graphics_opengl_GL.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
lime_graphics_opengl_GL.RASTERIZER_DISCARD = 35977;
lime_graphics_opengl_GL.VERTEX_ARRAY_BINDING = 34229;
lime_graphics_opengl_GL.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
lime_graphics_opengl_GL.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
lime_graphics_opengl_GL.MAX_SERVER_WAIT_TIMEOUT = 37137;
lime_graphics_opengl_GL.MAX_ELEMENT_INDEX = 36203;
lime_graphics_opengl_GL.RED = 6403;
lime_graphics_opengl_GL.RGB8 = 32849;
lime_graphics_opengl_GL.RGBA8 = 32856;
lime_graphics_opengl_GL.RGB10_A2 = 32857;
lime_graphics_opengl_GL.TEXTURE_3D = 32879;
lime_graphics_opengl_GL.TEXTURE_WRAP_R = 32882;
lime_graphics_opengl_GL.TEXTURE_MIN_LOD = 33082;
lime_graphics_opengl_GL.TEXTURE_MAX_LOD = 33083;
lime_graphics_opengl_GL.TEXTURE_BASE_LEVEL = 33084;
lime_graphics_opengl_GL.TEXTURE_MAX_LEVEL = 33085;
lime_graphics_opengl_GL.TEXTURE_COMPARE_MODE = 34892;
lime_graphics_opengl_GL.TEXTURE_COMPARE_FUNC = 34893;
lime_graphics_opengl_GL.SRGB = 35904;
lime_graphics_opengl_GL.SRGB8 = 35905;
lime_graphics_opengl_GL.SRGB8_ALPHA8 = 35907;
lime_graphics_opengl_GL.COMPARE_REF_TO_TEXTURE = 34894;
lime_graphics_opengl_GL.RGBA32F = 34836;
lime_graphics_opengl_GL.RGB32F = 34837;
lime_graphics_opengl_GL.RGBA16F = 34842;
lime_graphics_opengl_GL.RGB16F = 34843;
lime_graphics_opengl_GL.TEXTURE_2D_ARRAY = 35866;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D_ARRAY = 35869;
lime_graphics_opengl_GL.R11F_G11F_B10F = 35898;
lime_graphics_opengl_GL.RGB9_E5 = 35901;
lime_graphics_opengl_GL.RGBA32UI = 36208;
lime_graphics_opengl_GL.RGB32UI = 36209;
lime_graphics_opengl_GL.RGBA16UI = 36214;
lime_graphics_opengl_GL.RGB16UI = 36215;
lime_graphics_opengl_GL.RGBA8UI = 36220;
lime_graphics_opengl_GL.RGB8UI = 36221;
lime_graphics_opengl_GL.RGBA32I = 36226;
lime_graphics_opengl_GL.RGB32I = 36227;
lime_graphics_opengl_GL.RGBA16I = 36232;
lime_graphics_opengl_GL.RGB16I = 36233;
lime_graphics_opengl_GL.RGBA8I = 36238;
lime_graphics_opengl_GL.RGB8I = 36239;
lime_graphics_opengl_GL.RED_INTEGER = 36244;
lime_graphics_opengl_GL.RGB_INTEGER = 36248;
lime_graphics_opengl_GL.RGBA_INTEGER = 36249;
lime_graphics_opengl_GL.R8 = 33321;
lime_graphics_opengl_GL.RG8 = 33323;
lime_graphics_opengl_GL.R16F = 33325;
lime_graphics_opengl_GL.R32F = 33326;
lime_graphics_opengl_GL.RG16F = 33327;
lime_graphics_opengl_GL.RG32F = 33328;
lime_graphics_opengl_GL.R8I = 33329;
lime_graphics_opengl_GL.R8UI = 33330;
lime_graphics_opengl_GL.R16I = 33331;
lime_graphics_opengl_GL.R16UI = 33332;
lime_graphics_opengl_GL.R32I = 33333;
lime_graphics_opengl_GL.R32UI = 33334;
lime_graphics_opengl_GL.RG8I = 33335;
lime_graphics_opengl_GL.RG8UI = 33336;
lime_graphics_opengl_GL.RG16I = 33337;
lime_graphics_opengl_GL.RG16UI = 33338;
lime_graphics_opengl_GL.RG32I = 33339;
lime_graphics_opengl_GL.RG32UI = 33340;
lime_graphics_opengl_GL.R8_SNORM = 36756;
lime_graphics_opengl_GL.RG8_SNORM = 36757;
lime_graphics_opengl_GL.RGB8_SNORM = 36758;
lime_graphics_opengl_GL.RGBA8_SNORM = 36759;
lime_graphics_opengl_GL.RGB10_A2UI = 36975;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_FORMAT = 37167;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_LEVELS = 33503;
lime_graphics_opengl_GL.UNSIGNED_INT_2_10_10_10_REV = 33640;
lime_graphics_opengl_GL.UNSIGNED_INT_10F_11F_11F_REV = 35899;
lime_graphics_opengl_GL.UNSIGNED_INT_5_9_9_9_REV = 35902;
lime_graphics_opengl_GL.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
lime_graphics_opengl_GL.UNSIGNED_INT_24_8 = 34042;
lime_graphics_opengl_GL.HALF_FLOAT = 5131;
lime_graphics_opengl_GL.RG = 33319;
lime_graphics_opengl_GL.RG_INTEGER = 33320;
lime_graphics_opengl_GL.INT_2_10_10_10_REV = 36255;
lime_graphics_opengl_GL.CURRENT_QUERY = 34917;
lime_graphics_opengl_GL.QUERY_RESULT = 34918;
lime_graphics_opengl_GL.QUERY_RESULT_AVAILABLE = 34919;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED = 35887;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
lime_graphics_opengl_GL.MAX_DRAW_BUFFERS = 34852;
lime_graphics_opengl_GL.DRAW_BUFFER0 = 34853;
lime_graphics_opengl_GL.DRAW_BUFFER1 = 34854;
lime_graphics_opengl_GL.DRAW_BUFFER2 = 34855;
lime_graphics_opengl_GL.DRAW_BUFFER3 = 34856;
lime_graphics_opengl_GL.DRAW_BUFFER4 = 34857;
lime_graphics_opengl_GL.DRAW_BUFFER5 = 34858;
lime_graphics_opengl_GL.DRAW_BUFFER6 = 34859;
lime_graphics_opengl_GL.DRAW_BUFFER7 = 34860;
lime_graphics_opengl_GL.DRAW_BUFFER8 = 34861;
lime_graphics_opengl_GL.DRAW_BUFFER9 = 34862;
lime_graphics_opengl_GL.DRAW_BUFFER10 = 34863;
lime_graphics_opengl_GL.DRAW_BUFFER11 = 34864;
lime_graphics_opengl_GL.DRAW_BUFFER12 = 34865;
lime_graphics_opengl_GL.DRAW_BUFFER13 = 34866;
lime_graphics_opengl_GL.DRAW_BUFFER14 = 34867;
lime_graphics_opengl_GL.DRAW_BUFFER15 = 34868;
lime_graphics_opengl_GL.MAX_COLOR_ATTACHMENTS = 36063;
lime_graphics_opengl_GL.COLOR_ATTACHMENT1 = 36065;
lime_graphics_opengl_GL.COLOR_ATTACHMENT2 = 36066;
lime_graphics_opengl_GL.COLOR_ATTACHMENT3 = 36067;
lime_graphics_opengl_GL.COLOR_ATTACHMENT4 = 36068;
lime_graphics_opengl_GL.COLOR_ATTACHMENT5 = 36069;
lime_graphics_opengl_GL.COLOR_ATTACHMENT6 = 36070;
lime_graphics_opengl_GL.COLOR_ATTACHMENT7 = 36071;
lime_graphics_opengl_GL.COLOR_ATTACHMENT8 = 36072;
lime_graphics_opengl_GL.COLOR_ATTACHMENT9 = 36073;
lime_graphics_opengl_GL.COLOR_ATTACHMENT10 = 36074;
lime_graphics_opengl_GL.COLOR_ATTACHMENT11 = 36075;
lime_graphics_opengl_GL.COLOR_ATTACHMENT12 = 36076;
lime_graphics_opengl_GL.COLOR_ATTACHMENT13 = 36077;
lime_graphics_opengl_GL.COLOR_ATTACHMENT14 = 36078;
lime_graphics_opengl_GL.COLOR_ATTACHMENT15 = 36079;
lime_graphics_opengl_GL.SAMPLER_3D = 35679;
lime_graphics_opengl_GL.SAMPLER_2D_SHADOW = 35682;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY = 36289;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY_SHADOW = 36292;
lime_graphics_opengl_GL.SAMPLER_CUBE_SHADOW = 36293;
lime_graphics_opengl_GL.INT_SAMPLER_2D = 36298;
lime_graphics_opengl_GL.INT_SAMPLER_3D = 36299;
lime_graphics_opengl_GL.INT_SAMPLER_CUBE = 36300;
lime_graphics_opengl_GL.INT_SAMPLER_2D_ARRAY = 36303;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D = 36306;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_3D = 36307;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_CUBE = 36308;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
lime_graphics_opengl_GL.MAX_SAMPLES = 36183;
lime_graphics_opengl_GL.SAMPLER_BINDING = 35097;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER = 35051;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER = 35052;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER_BINDING = 35053;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER_BINDING = 35055;
lime_graphics_opengl_GL.COPY_READ_BUFFER = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER = 36663;
lime_graphics_opengl_GL.COPY_READ_BUFFER_BINDING = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER_BINDING = 36663;
lime_graphics_opengl_GL.FLOAT_MAT2x3 = 35685;
lime_graphics_opengl_GL.FLOAT_MAT2x4 = 35686;
lime_graphics_opengl_GL.FLOAT_MAT3x2 = 35687;
lime_graphics_opengl_GL.FLOAT_MAT3x4 = 35688;
lime_graphics_opengl_GL.FLOAT_MAT4x2 = 35689;
lime_graphics_opengl_GL.FLOAT_MAT4x3 = 35690;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC2 = 36294;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC3 = 36295;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC4 = 36296;
lime_graphics_opengl_GL.UNSIGNED_NORMALIZED = 35863;
lime_graphics_opengl_GL.SIGNED_NORMALIZED = 36764;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_VARYINGS = 35971;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
lime_graphics_opengl_GL.INTERLEAVED_ATTRIBS = 35980;
lime_graphics_opengl_GL.SEPARATE_ATTRIBS = 35981;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER = 35982;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK = 36386;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PAUSED = 36387;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_ACTIVE = 36388;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BINDING = 36389;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
lime_graphics_opengl_GL.FRAMEBUFFER_DEFAULT = 33304;
lime_graphics_opengl_GL.DEPTH24_STENCIL8 = 35056;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.READ_FRAMEBUFFER = 36008;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER = 36009;
lime_graphics_opengl_GL.READ_FRAMEBUFFER_BINDING = 36010;
lime_graphics_opengl_GL.RENDERBUFFER_SAMPLES = 36011;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
lime_graphics_opengl_GL.UNIFORM_BUFFER = 35345;
lime_graphics_opengl_GL.UNIFORM_BUFFER_BINDING = 35368;
lime_graphics_opengl_GL.UNIFORM_BUFFER_START = 35369;
lime_graphics_opengl_GL.UNIFORM_BUFFER_SIZE = 35370;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
lime_graphics_opengl_GL.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
lime_graphics_opengl_GL.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
lime_graphics_opengl_GL.MAX_UNIFORM_BLOCK_SIZE = 35376;
lime_graphics_opengl_GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
lime_graphics_opengl_GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
lime_graphics_opengl_GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
lime_graphics_opengl_GL.ACTIVE_UNIFORM_BLOCKS = 35382;
lime_graphics_opengl_GL.UNIFORM_TYPE = 35383;
lime_graphics_opengl_GL.UNIFORM_SIZE = 35384;
lime_graphics_opengl_GL.UNIFORM_BLOCK_INDEX = 35386;
lime_graphics_opengl_GL.UNIFORM_OFFSET = 35387;
lime_graphics_opengl_GL.UNIFORM_ARRAY_STRIDE = 35388;
lime_graphics_opengl_GL.UNIFORM_MATRIX_STRIDE = 35389;
lime_graphics_opengl_GL.UNIFORM_IS_ROW_MAJOR = 35390;
lime_graphics_opengl_GL.UNIFORM_BLOCK_BINDING = 35391;
lime_graphics_opengl_GL.UNIFORM_BLOCK_DATA_SIZE = 35392;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
lime_graphics_opengl_GL.OBJECT_TYPE = 37138;
lime_graphics_opengl_GL.SYNC_CONDITION = 37139;
lime_graphics_opengl_GL.SYNC_STATUS = 37140;
lime_graphics_opengl_GL.SYNC_FLAGS = 37141;
lime_graphics_opengl_GL.SYNC_FENCE = 37142;
lime_graphics_opengl_GL.SYNC_GPU_COMMANDS_COMPLETE = 37143;
lime_graphics_opengl_GL.UNSIGNALED = 37144;
lime_graphics_opengl_GL.SIGNALED = 37145;
lime_graphics_opengl_GL.ALREADY_SIGNALED = 37146;
lime_graphics_opengl_GL.TIMEOUT_EXPIRED = 37147;
lime_graphics_opengl_GL.CONDITION_SATISFIED = 37148;
lime_graphics_opengl_GL.WAIT_FAILED = 37149;
lime_graphics_opengl_GL.SYNC_FLUSH_COMMANDS_BIT = 1;
lime_graphics_opengl_GL.COLOR = 6144;
lime_graphics_opengl_GL.DEPTH = 6145;
lime_graphics_opengl_GL.STENCIL = 6146;
lime_graphics_opengl_GL.MIN = 32775;
lime_graphics_opengl_GL.MAX = 32776;
lime_graphics_opengl_GL.DEPTH_COMPONENT24 = 33190;
lime_graphics_opengl_GL.STREAM_READ = 35041;
lime_graphics_opengl_GL.STREAM_COPY = 35042;
lime_graphics_opengl_GL.STATIC_READ = 35045;
lime_graphics_opengl_GL.STATIC_COPY = 35046;
lime_graphics_opengl_GL.DYNAMIC_READ = 35049;
lime_graphics_opengl_GL.DYNAMIC_COPY = 35050;
lime_graphics_opengl_GL.DEPTH_COMPONENT32F = 36012;
lime_graphics_opengl_GL.DEPTH32F_STENCIL8 = 36013;
lime_graphics_opengl_GL.INVALID_INDEX = -1;
lime_graphics_opengl_GL.TIMEOUT_IGNORED = -1;
lime_graphics_opengl_GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
lime_math_ColorMatrix.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math_Matrix4.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_media_openal_AL.NONE = 0;
lime_media_openal_AL.FALSE = 0;
lime_media_openal_AL.TRUE = 1;
lime_media_openal_AL.SOURCE_RELATIVE = 514;
lime_media_openal_AL.CONE_INNER_ANGLE = 4097;
lime_media_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_media_openal_AL.PITCH = 4099;
lime_media_openal_AL.POSITION = 4100;
lime_media_openal_AL.DIRECTION = 4101;
lime_media_openal_AL.VELOCITY = 4102;
lime_media_openal_AL.LOOPING = 4103;
lime_media_openal_AL.BUFFER = 4105;
lime_media_openal_AL.GAIN = 4106;
lime_media_openal_AL.MIN_GAIN = 4109;
lime_media_openal_AL.MAX_GAIN = 4110;
lime_media_openal_AL.ORIENTATION = 4111;
lime_media_openal_AL.SOURCE_STATE = 4112;
lime_media_openal_AL.INITIAL = 4113;
lime_media_openal_AL.PLAYING = 4114;
lime_media_openal_AL.PAUSED = 4115;
lime_media_openal_AL.STOPPED = 4116;
lime_media_openal_AL.BUFFERS_QUEUED = 4117;
lime_media_openal_AL.BUFFERS_PROCESSED = 4118;
lime_media_openal_AL.REFERENCE_DISTANCE = 4128;
lime_media_openal_AL.ROLLOFF_FACTOR = 4129;
lime_media_openal_AL.CONE_OUTER_GAIN = 4130;
lime_media_openal_AL.MAX_DISTANCE = 4131;
lime_media_openal_AL.SEC_OFFSET = 4132;
lime_media_openal_AL.SAMPLE_OFFSET = 4133;
lime_media_openal_AL.BYTE_OFFSET = 4134;
lime_media_openal_AL.SOURCE_TYPE = 4135;
lime_media_openal_AL.STATIC = 4136;
lime_media_openal_AL.STREAMING = 4137;
lime_media_openal_AL.UNDETERMINED = 4144;
lime_media_openal_AL.FORMAT_MONO8 = 4352;
lime_media_openal_AL.FORMAT_MONO16 = 4353;
lime_media_openal_AL.FORMAT_STEREO8 = 4354;
lime_media_openal_AL.FORMAT_STEREO16 = 4355;
lime_media_openal_AL.FREQUENCY = 8193;
lime_media_openal_AL.BITS = 8194;
lime_media_openal_AL.CHANNELS = 8195;
lime_media_openal_AL.SIZE = 8196;
lime_media_openal_AL.NO_ERROR = 0;
lime_media_openal_AL.INVALID_NAME = 40961;
lime_media_openal_AL.INVALID_ENUM = 40962;
lime_media_openal_AL.INVALID_VALUE = 40963;
lime_media_openal_AL.INVALID_OPERATION = 40964;
lime_media_openal_AL.OUT_OF_MEMORY = 40965;
lime_media_openal_AL.VENDOR = 45057;
lime_media_openal_AL.VERSION = 45058;
lime_media_openal_AL.RENDERER = 45059;
lime_media_openal_AL.EXTENSIONS = 45060;
lime_media_openal_AL.DOPPLER_FACTOR = 49152;
lime_media_openal_AL.SPEED_OF_SOUND = 49155;
lime_media_openal_AL.DOPPLER_VELOCITY = 49153;
lime_media_openal_AL.DISTANCE_MODEL = 53248;
lime_media_openal_AL.INVERSE_DISTANCE = 53249;
lime_media_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_media_openal_AL.LINEAR_DISTANCE = 53251;
lime_media_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_media_openal_AL.EXPONENT_DISTANCE = 53253;
lime_media_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_media_openal_AL.METERS_PER_UNIT = 131076;
lime_media_openal_AL.DIRECT_FILTER = 131077;
lime_media_openal_AL.AUXILIARY_SEND_FILTER = 131078;
lime_media_openal_AL.AIR_ABSORPTION_FACTOR = 131079;
lime_media_openal_AL.ROOM_ROLLOFF_FACTOR = 131080;
lime_media_openal_AL.CONE_OUTER_GAINHF = 131081;
lime_media_openal_AL.DIRECT_FILTER_GAINHF_AUTO = 131082;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAIN_AUTO = 131083;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAINHF_AUTO = 131084;
lime_media_openal_AL.REVERB_DENSITY = 1;
lime_media_openal_AL.REVERB_DIFFUSION = 2;
lime_media_openal_AL.REVERB_GAIN = 3;
lime_media_openal_AL.REVERB_GAINHF = 4;
lime_media_openal_AL.REVERB_DECAY_TIME = 5;
lime_media_openal_AL.REVERB_DECAY_HFRATIO = 6;
lime_media_openal_AL.REVERB_REFLECTIONS_GAIN = 7;
lime_media_openal_AL.REVERB_REFLECTIONS_DELAY = 8;
lime_media_openal_AL.REVERB_LATE_REVERB_GAIN = 9;
lime_media_openal_AL.REVERB_LATE_REVERB_DELAY = 10;
lime_media_openal_AL.REVERB_AIR_ABSORPTION_GAINHF = 11;
lime_media_openal_AL.REVERB_ROOM_ROLLOFF_FACTOR = 12;
lime_media_openal_AL.REVERB_DECAY_HFLIMIT = 13;
lime_media_openal_AL.EAXREVERB_DENSITY = 1;
lime_media_openal_AL.EAXREVERB_DIFFUSION = 2;
lime_media_openal_AL.EAXREVERB_GAIN = 3;
lime_media_openal_AL.EAXREVERB_GAINHF = 4;
lime_media_openal_AL.EAXREVERB_GAINLF = 5;
lime_media_openal_AL.EAXREVERB_DECAY_TIME = 6;
lime_media_openal_AL.EAXREVERB_DECAY_HFRATIO = 7;
lime_media_openal_AL.EAXREVERB_DECAY_LFRATIO = 8;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_GAIN = 9;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_DELAY = 10;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_PAN = 11;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_GAIN = 12;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_DELAY = 13;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_PAN = 14;
lime_media_openal_AL.EAXREVERB_ECHO_TIME = 15;
lime_media_openal_AL.EAXREVERB_ECHO_DEPTH = 16;
lime_media_openal_AL.EAXREVERB_MODULATION_TIME = 17;
lime_media_openal_AL.EAXREVERB_MODULATION_DEPTH = 18;
lime_media_openal_AL.EAXREVERB_AIR_ABSORPTION_GAINHF = 19;
lime_media_openal_AL.EAXREVERB_HFREFERENCE = 20;
lime_media_openal_AL.EAXREVERB_LFREFERENCE = 21;
lime_media_openal_AL.EAXREVERB_ROOM_ROLLOFF_FACTOR = 22;
lime_media_openal_AL.EAXREVERB_DECAY_HFLIMIT = 23;
lime_media_openal_AL.CHORUS_WAVEFORM = 1;
lime_media_openal_AL.CHORUS_PHASE = 2;
lime_media_openal_AL.CHORUS_RATE = 3;
lime_media_openal_AL.CHORUS_DEPTH = 4;
lime_media_openal_AL.CHORUS_FEEDBACK = 5;
lime_media_openal_AL.CHORUS_DELAY = 6;
lime_media_openal_AL.DISTORTION_EDGE = 1;
lime_media_openal_AL.DISTORTION_GAIN = 2;
lime_media_openal_AL.DISTORTION_LOWPASS_CUTOFF = 3;
lime_media_openal_AL.DISTORTION_EQCENTER = 4;
lime_media_openal_AL.DISTORTION_EQBANDWIDTH = 5;
lime_media_openal_AL.ECHO_DELAY = 1;
lime_media_openal_AL.ECHO_LRDELAY = 2;
lime_media_openal_AL.ECHO_DAMPING = 3;
lime_media_openal_AL.ECHO_FEEDBACK = 4;
lime_media_openal_AL.ECHO_SPREAD = 5;
lime_media_openal_AL.FLANGER_WAVEFORM = 1;
lime_media_openal_AL.FLANGER_PHASE = 2;
lime_media_openal_AL.FLANGER_RATE = 3;
lime_media_openal_AL.FLANGER_DEPTH = 4;
lime_media_openal_AL.FLANGER_FEEDBACK = 5;
lime_media_openal_AL.FLANGER_DELAY = 6;
lime_media_openal_AL.FREQUENCY_SHIFTER_FREQUENCY = 1;
lime_media_openal_AL.FREQUENCY_SHIFTER_LEFT_DIRECTION = 2;
lime_media_openal_AL.FREQUENCY_SHIFTER_RIGHT_DIRECTION = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA = 1;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA_COARSE_TUNING = 2;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB_COARSE_TUNING = 4;
lime_media_openal_AL.VOCAL_MORPHER_WAVEFORM = 5;
lime_media_openal_AL.VOCAL_MORPHER_RATE = 6;
lime_media_openal_AL.PITCH_SHIFTER_COARSE_TUNE = 1;
lime_media_openal_AL.PITCH_SHIFTER_FINE_TUNE = 2;
lime_media_openal_AL.RING_MODULATOR_FREQUENCY = 1;
lime_media_openal_AL.RING_MODULATOR_HIGHPASS_CUTOFF = 2;
lime_media_openal_AL.RING_MODULATOR_WAVEFORM = 3;
lime_media_openal_AL.AUTOWAH_ATTACK_TIME = 1;
lime_media_openal_AL.AUTOWAH_RELEASE_TIME = 2;
lime_media_openal_AL.AUTOWAH_RESONANCE = 3;
lime_media_openal_AL.AUTOWAH_PEAK_GAIN = 4;
lime_media_openal_AL.COMPRESSOR_ONOFF = 1;
lime_media_openal_AL.EQUALIZER_LOW_GAIN = 1;
lime_media_openal_AL.EQUALIZER_LOW_CUTOFF = 2;
lime_media_openal_AL.EQUALIZER_MID1_GAIN = 3;
lime_media_openal_AL.EQUALIZER_MID1_CENTER = 4;
lime_media_openal_AL.EQUALIZER_MID1_WIDTH = 5;
lime_media_openal_AL.EQUALIZER_MID2_GAIN = 6;
lime_media_openal_AL.EQUALIZER_MID2_CENTER = 7;
lime_media_openal_AL.EQUALIZER_MID2_WIDTH = 8;
lime_media_openal_AL.EQUALIZER_HIGH_GAIN = 9;
lime_media_openal_AL.EQUALIZER_HIGH_CUTOFF = 10;
lime_media_openal_AL.EFFECT_FIRST_PARAMETER = 0;
lime_media_openal_AL.EFFECT_LAST_PARAMETER = 32768;
lime_media_openal_AL.EFFECT_TYPE = 32769;
lime_media_openal_AL.EFFECT_NULL = 0;
lime_media_openal_AL.EFFECT_EAXREVERB = 32768;
lime_media_openal_AL.EFFECT_REVERB = 1;
lime_media_openal_AL.EFFECT_CHORUS = 2;
lime_media_openal_AL.EFFECT_DISTORTION = 3;
lime_media_openal_AL.EFFECT_ECHO = 4;
lime_media_openal_AL.EFFECT_FLANGER = 5;
lime_media_openal_AL.EFFECT_FREQUENCY_SHIFTER = 6;
lime_media_openal_AL.EFFECT_VOCAL_MORPHER = 7;
lime_media_openal_AL.EFFECT_PITCH_SHIFTER = 8;
lime_media_openal_AL.EFFECT_RING_MODULATOR = 9;
lime_media_openal_AL.FFECT_AUTOWAH = 10;
lime_media_openal_AL.EFFECT_COMPRESSOR = 11;
lime_media_openal_AL.EFFECT_EQUALIZER = 12;
lime_media_openal_AL.EFFECTSLOT_EFFECT = 1;
lime_media_openal_AL.EFFECTSLOT_GAIN = 2;
lime_media_openal_AL.EFFECTSLOT_AUXILIARY_SEND_AUTO = 3;
lime_media_openal_AL.LOWPASS_GAIN = 1;
lime_media_openal_AL.LOWPASS_GAINHF = 2;
lime_media_openal_AL.HIGHPASS_GAIN = 1;
lime_media_openal_AL.HIGHPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAIN = 1;
lime_media_openal_AL.BANDPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAINHF = 3;
lime_media_openal_AL.FILTER_FIRST_PARAMETER = 0;
lime_media_openal_AL.FILTER_LAST_PARAMETER = 32768;
lime_media_openal_AL.FILTER_TYPE = 32769;
lime_media_openal_AL.FILTER_NULL = 0;
lime_media_openal_AL.FILTER_LOWPASS = 1;
lime_media_openal_AL.FILTER_HIGHPASS = 2;
lime_media_openal_AL.FILTER_BANDPASS = 3;
lime_media_openal_ALC.FALSE = 0;
lime_media_openal_ALC.TRUE = 1;
lime_media_openal_ALC.FREQUENCY = 4103;
lime_media_openal_ALC.REFRESH = 4104;
lime_media_openal_ALC.SYNC = 4105;
lime_media_openal_ALC.MONO_SOURCES = 4112;
lime_media_openal_ALC.STEREO_SOURCES = 4113;
lime_media_openal_ALC.NO_ERROR = 0;
lime_media_openal_ALC.INVALID_DEVICE = 40961;
lime_media_openal_ALC.INVALID_CONTEXT = 40962;
lime_media_openal_ALC.INVALID_ENUM = 40963;
lime_media_openal_ALC.INVALID_VALUE = 40964;
lime_media_openal_ALC.OUT_OF_MEMORY = 40965;
lime_media_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_media_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_media_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_media_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_media_openal_ALC.EXTENSIONS = 4102;
lime_media_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_media_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_media_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_system_JNI.alreadyCreated = new haxe_ds_StringMap();
lime_system_JNI.initialized = false;
lime_system_Sensor.sensorByID = new haxe_ds_IntMap();
lime_system_Sensor.sensors = [];
lime_system_System.__directories = new haxe_ds_IntMap();
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui_GamepadAxis.LEFT_X = 0;
lime_ui_GamepadAxis.LEFT_Y = 1;
lime_ui_GamepadAxis.RIGHT_X = 2;
lime_ui_GamepadAxis.RIGHT_Y = 3;
lime_ui_GamepadAxis.TRIGGER_LEFT = 4;
lime_ui_GamepadAxis.TRIGGER_RIGHT = 5;
lime_ui_GamepadButton.A = 0;
lime_ui_GamepadButton.B = 1;
lime_ui_GamepadButton.X = 2;
lime_ui_GamepadButton.Y = 3;
lime_ui_GamepadButton.BACK = 4;
lime_ui_GamepadButton.GUIDE = 5;
lime_ui_GamepadButton.START = 6;
lime_ui_GamepadButton.LEFT_STICK = 7;
lime_ui_GamepadButton.RIGHT_STICK = 8;
lime_ui_GamepadButton.LEFT_SHOULDER = 9;
lime_ui_GamepadButton.RIGHT_SHOULDER = 10;
lime_ui_GamepadButton.DPAD_UP = 11;
lime_ui_GamepadButton.DPAD_DOWN = 12;
lime_ui_GamepadButton.DPAD_LEFT = 13;
lime_ui_GamepadButton.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui_JoystickHatPosition.CENTER = 0;
lime_ui_JoystickHatPosition.DOWN = 4;
lime_ui_JoystickHatPosition.LEFT = 8;
lime_ui_JoystickHatPosition.RIGHT = 2;
lime_ui_JoystickHatPosition.UP = 1;
lime_ui_JoystickHatPosition.DOWN_LEFT = 12;
lime_ui_JoystickHatPosition.DOWN_RIGHT = 6;
lime_ui_JoystickHatPosition.UP_LEFT = 9;
lime_ui_JoystickHatPosition.UP_RIGHT = 3;
lime_ui_KeyCode.UNKNOWN = 0;
lime_ui_KeyCode.BACKSPACE = 8;
lime_ui_KeyCode.TAB = 9;
lime_ui_KeyCode.RETURN = 13;
lime_ui_KeyCode.ESCAPE = 27;
lime_ui_KeyCode.SPACE = 32;
lime_ui_KeyCode.EXCLAMATION = 33;
lime_ui_KeyCode.QUOTE = 34;
lime_ui_KeyCode.HASH = 35;
lime_ui_KeyCode.DOLLAR = 36;
lime_ui_KeyCode.PERCENT = 37;
lime_ui_KeyCode.AMPERSAND = 38;
lime_ui_KeyCode.SINGLE_QUOTE = 39;
lime_ui_KeyCode.LEFT_PARENTHESIS = 40;
lime_ui_KeyCode.RIGHT_PARENTHESIS = 41;
lime_ui_KeyCode.ASTERISK = 42;
lime_ui_KeyCode.PLUS = 43;
lime_ui_KeyCode.COMMA = 44;
lime_ui_KeyCode.MINUS = 45;
lime_ui_KeyCode.PERIOD = 46;
lime_ui_KeyCode.SLASH = 47;
lime_ui_KeyCode.NUMBER_0 = 48;
lime_ui_KeyCode.NUMBER_1 = 49;
lime_ui_KeyCode.NUMBER_2 = 50;
lime_ui_KeyCode.NUMBER_3 = 51;
lime_ui_KeyCode.NUMBER_4 = 52;
lime_ui_KeyCode.NUMBER_5 = 53;
lime_ui_KeyCode.NUMBER_6 = 54;
lime_ui_KeyCode.NUMBER_7 = 55;
lime_ui_KeyCode.NUMBER_8 = 56;
lime_ui_KeyCode.NUMBER_9 = 57;
lime_ui_KeyCode.COLON = 58;
lime_ui_KeyCode.SEMICOLON = 59;
lime_ui_KeyCode.LESS_THAN = 60;
lime_ui_KeyCode.EQUALS = 61;
lime_ui_KeyCode.GREATER_THAN = 62;
lime_ui_KeyCode.QUESTION = 63;
lime_ui_KeyCode.AT = 64;
lime_ui_KeyCode.LEFT_BRACKET = 91;
lime_ui_KeyCode.BACKSLASH = 92;
lime_ui_KeyCode.RIGHT_BRACKET = 93;
lime_ui_KeyCode.CARET = 94;
lime_ui_KeyCode.UNDERSCORE = 95;
lime_ui_KeyCode.GRAVE = 96;
lime_ui_KeyCode.A = 97;
lime_ui_KeyCode.B = 98;
lime_ui_KeyCode.C = 99;
lime_ui_KeyCode.D = 100;
lime_ui_KeyCode.E = 101;
lime_ui_KeyCode.F = 102;
lime_ui_KeyCode.G = 103;
lime_ui_KeyCode.H = 104;
lime_ui_KeyCode.I = 105;
lime_ui_KeyCode.J = 106;
lime_ui_KeyCode.K = 107;
lime_ui_KeyCode.L = 108;
lime_ui_KeyCode.M = 109;
lime_ui_KeyCode.N = 110;
lime_ui_KeyCode.O = 111;
lime_ui_KeyCode.P = 112;
lime_ui_KeyCode.Q = 113;
lime_ui_KeyCode.R = 114;
lime_ui_KeyCode.S = 115;
lime_ui_KeyCode.T = 116;
lime_ui_KeyCode.U = 117;
lime_ui_KeyCode.V = 118;
lime_ui_KeyCode.W = 119;
lime_ui_KeyCode.X = 120;
lime_ui_KeyCode.Y = 121;
lime_ui_KeyCode.Z = 122;
lime_ui_KeyCode.DELETE = 127;
lime_ui_KeyCode.CAPS_LOCK = 1073741881;
lime_ui_KeyCode.F1 = 1073741882;
lime_ui_KeyCode.F2 = 1073741883;
lime_ui_KeyCode.F3 = 1073741884;
lime_ui_KeyCode.F4 = 1073741885;
lime_ui_KeyCode.F5 = 1073741886;
lime_ui_KeyCode.F6 = 1073741887;
lime_ui_KeyCode.F7 = 1073741888;
lime_ui_KeyCode.F8 = 1073741889;
lime_ui_KeyCode.F9 = 1073741890;
lime_ui_KeyCode.F10 = 1073741891;
lime_ui_KeyCode.F11 = 1073741892;
lime_ui_KeyCode.F12 = 1073741893;
lime_ui_KeyCode.PRINT_SCREEN = 1073741894;
lime_ui_KeyCode.SCROLL_LOCK = 1073741895;
lime_ui_KeyCode.PAUSE = 1073741896;
lime_ui_KeyCode.INSERT = 1073741897;
lime_ui_KeyCode.HOME = 1073741898;
lime_ui_KeyCode.PAGE_UP = 1073741899;
lime_ui_KeyCode.END = 1073741901;
lime_ui_KeyCode.PAGE_DOWN = 1073741902;
lime_ui_KeyCode.RIGHT = 1073741903;
lime_ui_KeyCode.LEFT = 1073741904;
lime_ui_KeyCode.DOWN = 1073741905;
lime_ui_KeyCode.UP = 1073741906;
lime_ui_KeyCode.NUM_LOCK = 1073741907;
lime_ui_KeyCode.NUMPAD_DIVIDE = 1073741908;
lime_ui_KeyCode.NUMPAD_MULTIPLY = 1073741909;
lime_ui_KeyCode.NUMPAD_MINUS = 1073741910;
lime_ui_KeyCode.NUMPAD_PLUS = 1073741911;
lime_ui_KeyCode.NUMPAD_ENTER = 1073741912;
lime_ui_KeyCode.NUMPAD_1 = 1073741913;
lime_ui_KeyCode.NUMPAD_2 = 1073741914;
lime_ui_KeyCode.NUMPAD_3 = 1073741915;
lime_ui_KeyCode.NUMPAD_4 = 1073741916;
lime_ui_KeyCode.NUMPAD_5 = 1073741917;
lime_ui_KeyCode.NUMPAD_6 = 1073741918;
lime_ui_KeyCode.NUMPAD_7 = 1073741919;
lime_ui_KeyCode.NUMPAD_8 = 1073741920;
lime_ui_KeyCode.NUMPAD_9 = 1073741921;
lime_ui_KeyCode.NUMPAD_0 = 1073741922;
lime_ui_KeyCode.NUMPAD_PERIOD = 1073741923;
lime_ui_KeyCode.APPLICATION = 1073741925;
lime_ui_KeyCode.POWER = 1073741926;
lime_ui_KeyCode.NUMPAD_EQUALS = 1073741927;
lime_ui_KeyCode.F13 = 1073741928;
lime_ui_KeyCode.F14 = 1073741929;
lime_ui_KeyCode.F15 = 1073741930;
lime_ui_KeyCode.F16 = 1073741931;
lime_ui_KeyCode.F17 = 1073741932;
lime_ui_KeyCode.F18 = 1073741933;
lime_ui_KeyCode.F19 = 1073741934;
lime_ui_KeyCode.F20 = 1073741935;
lime_ui_KeyCode.F21 = 1073741936;
lime_ui_KeyCode.F22 = 1073741937;
lime_ui_KeyCode.F23 = 1073741938;
lime_ui_KeyCode.F24 = 1073741939;
lime_ui_KeyCode.EXECUTE = 1073741940;
lime_ui_KeyCode.HELP = 1073741941;
lime_ui_KeyCode.MENU = 1073741942;
lime_ui_KeyCode.SELECT = 1073741943;
lime_ui_KeyCode.STOP = 1073741944;
lime_ui_KeyCode.AGAIN = 1073741945;
lime_ui_KeyCode.UNDO = 1073741946;
lime_ui_KeyCode.CUT = 1073741947;
lime_ui_KeyCode.COPY = 1073741948;
lime_ui_KeyCode.PASTE = 1073741949;
lime_ui_KeyCode.FIND = 1073741950;
lime_ui_KeyCode.MUTE = 1073741951;
lime_ui_KeyCode.VOLUME_UP = 1073741952;
lime_ui_KeyCode.VOLUME_DOWN = 1073741953;
lime_ui_KeyCode.NUMPAD_COMMA = 1073741957;
lime_ui_KeyCode.ALT_ERASE = 1073741977;
lime_ui_KeyCode.SYSTEM_REQUEST = 1073741978;
lime_ui_KeyCode.CANCEL = 1073741979;
lime_ui_KeyCode.CLEAR = 1073741980;
lime_ui_KeyCode.PRIOR = 1073741981;
lime_ui_KeyCode.RETURN2 = 1073741982;
lime_ui_KeyCode.SEPARATOR = 1073741983;
lime_ui_KeyCode.OUT = 1073741984;
lime_ui_KeyCode.OPER = 1073741985;
lime_ui_KeyCode.CLEAR_AGAIN = 1073741986;
lime_ui_KeyCode.CRSEL = 1073741987;
lime_ui_KeyCode.EXSEL = 1073741988;
lime_ui_KeyCode.NUMPAD_00 = 1073742000;
lime_ui_KeyCode.NUMPAD_000 = 1073742001;
lime_ui_KeyCode.THOUSAND_SEPARATOR = 1073742002;
lime_ui_KeyCode.DECIMAL_SEPARATOR = 1073742003;
lime_ui_KeyCode.CURRENCY_UNIT = 1073742004;
lime_ui_KeyCode.CURRENCY_SUBUNIT = 1073742005;
lime_ui_KeyCode.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui_KeyCode.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui_KeyCode.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui_KeyCode.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui_KeyCode.NUMPAD_TAB = 1073742010;
lime_ui_KeyCode.NUMPAD_BACKSPACE = 1073742011;
lime_ui_KeyCode.NUMPAD_A = 1073742012;
lime_ui_KeyCode.NUMPAD_B = 1073742013;
lime_ui_KeyCode.NUMPAD_C = 1073742014;
lime_ui_KeyCode.NUMPAD_D = 1073742015;
lime_ui_KeyCode.NUMPAD_E = 1073742016;
lime_ui_KeyCode.NUMPAD_F = 1073742017;
lime_ui_KeyCode.NUMPAD_XOR = 1073742018;
lime_ui_KeyCode.NUMPAD_POWER = 1073742019;
lime_ui_KeyCode.NUMPAD_PERCENT = 1073742020;
lime_ui_KeyCode.NUMPAD_LESS_THAN = 1073742021;
lime_ui_KeyCode.NUMPAD_GREATER_THAN = 1073742022;
lime_ui_KeyCode.NUMPAD_AMPERSAND = 1073742023;
lime_ui_KeyCode.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui_KeyCode.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui_KeyCode.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui_KeyCode.NUMPAD_COLON = 1073742027;
lime_ui_KeyCode.NUMPAD_HASH = 1073742028;
lime_ui_KeyCode.NUMPAD_SPACE = 1073742029;
lime_ui_KeyCode.NUMPAD_AT = 1073742030;
lime_ui_KeyCode.NUMPAD_EXCLAMATION = 1073742031;
lime_ui_KeyCode.NUMPAD_MEM_STORE = 1073742032;
lime_ui_KeyCode.NUMPAD_MEM_RECALL = 1073742033;
lime_ui_KeyCode.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui_KeyCode.NUMPAD_MEM_ADD = 1073742035;
lime_ui_KeyCode.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui_KeyCode.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui_KeyCode.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui_KeyCode.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui_KeyCode.NUMPAD_CLEAR = 1073742040;
lime_ui_KeyCode.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui_KeyCode.NUMPAD_BINARY = 1073742042;
lime_ui_KeyCode.NUMPAD_OCTAL = 1073742043;
lime_ui_KeyCode.NUMPAD_DECIMAL = 1073742044;
lime_ui_KeyCode.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui_KeyCode.LEFT_CTRL = 1073742048;
lime_ui_KeyCode.LEFT_SHIFT = 1073742049;
lime_ui_KeyCode.LEFT_ALT = 1073742050;
lime_ui_KeyCode.LEFT_META = 1073742051;
lime_ui_KeyCode.RIGHT_CTRL = 1073742052;
lime_ui_KeyCode.RIGHT_SHIFT = 1073742053;
lime_ui_KeyCode.RIGHT_ALT = 1073742054;
lime_ui_KeyCode.RIGHT_META = 1073742055;
lime_ui_KeyCode.MODE = 1073742081;
lime_ui_KeyCode.AUDIO_NEXT = 1073742082;
lime_ui_KeyCode.AUDIO_PREVIOUS = 1073742083;
lime_ui_KeyCode.AUDIO_STOP = 1073742084;
lime_ui_KeyCode.AUDIO_PLAY = 1073742085;
lime_ui_KeyCode.AUDIO_MUTE = 1073742086;
lime_ui_KeyCode.MEDIA_SELECT = 1073742087;
lime_ui_KeyCode.WWW = 1073742088;
lime_ui_KeyCode.MAIL = 1073742089;
lime_ui_KeyCode.CALCULATOR = 1073742090;
lime_ui_KeyCode.COMPUTER = 1073742091;
lime_ui_KeyCode.APP_CONTROL_SEARCH = 1073742092;
lime_ui_KeyCode.APP_CONTROL_HOME = 1073742093;
lime_ui_KeyCode.APP_CONTROL_BACK = 1073742094;
lime_ui_KeyCode.APP_CONTROL_FORWARD = 1073742095;
lime_ui_KeyCode.APP_CONTROL_STOP = 1073742096;
lime_ui_KeyCode.APP_CONTROL_REFRESH = 1073742097;
lime_ui_KeyCode.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui_KeyCode.BRIGHTNESS_DOWN = 1073742099;
lime_ui_KeyCode.BRIGHTNESS_UP = 1073742100;
lime_ui_KeyCode.DISPLAY_SWITCH = 1073742101;
lime_ui_KeyCode.BACKLIGHT_TOGGLE = 1073742102;
lime_ui_KeyCode.BACKLIGHT_DOWN = 1073742103;
lime_ui_KeyCode.BACKLIGHT_UP = 1073742104;
lime_ui_KeyCode.EJECT = 1073742105;
lime_ui_KeyCode.SLEEP = 1073742106;
lime_ui_KeyModifier.NONE = 0;
lime_ui_KeyModifier.LEFT_SHIFT = 1;
lime_ui_KeyModifier.RIGHT_SHIFT = 2;
lime_ui_KeyModifier.LEFT_CTRL = 64;
lime_ui_KeyModifier.RIGHT_CTRL = 128;
lime_ui_KeyModifier.LEFT_ALT = 256;
lime_ui_KeyModifier.RIGHT_ALT = 512;
lime_ui_KeyModifier.LEFT_META = 1024;
lime_ui_KeyModifier.RIGHT_META = 2048;
lime_ui_KeyModifier.NUM_LOCK = 4096;
lime_ui_KeyModifier.CAPS_LOCK = 8192;
lime_ui_KeyModifier.MODE = 16384;
lime_ui_KeyModifier.CTRL = 192;
lime_ui_KeyModifier.SHIFT = 3;
lime_ui_KeyModifier.ALT = 768;
lime_ui_KeyModifier.META = 3072;
lime_ui_ScanCode.UNKNOWN = 0;
lime_ui_ScanCode.BACKSPACE = 42;
lime_ui_ScanCode.TAB = 43;
lime_ui_ScanCode.RETURN = 40;
lime_ui_ScanCode.ESCAPE = 41;
lime_ui_ScanCode.SPACE = 44;
lime_ui_ScanCode.SINGLE_QUOTE = 52;
lime_ui_ScanCode.COMMA = 54;
lime_ui_ScanCode.MINUS = 45;
lime_ui_ScanCode.PERIOD = 55;
lime_ui_ScanCode.SLASH = 56;
lime_ui_ScanCode.NUMBER_0 = 39;
lime_ui_ScanCode.NUMBER_1 = 30;
lime_ui_ScanCode.NUMBER_2 = 31;
lime_ui_ScanCode.NUMBER_3 = 32;
lime_ui_ScanCode.NUMBER_4 = 33;
lime_ui_ScanCode.NUMBER_5 = 34;
lime_ui_ScanCode.NUMBER_6 = 35;
lime_ui_ScanCode.NUMBER_7 = 36;
lime_ui_ScanCode.NUMBER_8 = 37;
lime_ui_ScanCode.NUMBER_9 = 38;
lime_ui_ScanCode.SEMICOLON = 51;
lime_ui_ScanCode.EQUALS = 46;
lime_ui_ScanCode.LEFT_BRACKET = 47;
lime_ui_ScanCode.BACKSLASH = 49;
lime_ui_ScanCode.RIGHT_BRACKET = 48;
lime_ui_ScanCode.GRAVE = 53;
lime_ui_ScanCode.A = 4;
lime_ui_ScanCode.B = 5;
lime_ui_ScanCode.C = 6;
lime_ui_ScanCode.D = 7;
lime_ui_ScanCode.E = 8;
lime_ui_ScanCode.F = 9;
lime_ui_ScanCode.G = 10;
lime_ui_ScanCode.H = 11;
lime_ui_ScanCode.I = 12;
lime_ui_ScanCode.J = 13;
lime_ui_ScanCode.K = 14;
lime_ui_ScanCode.L = 15;
lime_ui_ScanCode.M = 16;
lime_ui_ScanCode.N = 17;
lime_ui_ScanCode.O = 18;
lime_ui_ScanCode.P = 19;
lime_ui_ScanCode.Q = 20;
lime_ui_ScanCode.R = 21;
lime_ui_ScanCode.S = 22;
lime_ui_ScanCode.T = 23;
lime_ui_ScanCode.U = 24;
lime_ui_ScanCode.V = 25;
lime_ui_ScanCode.W = 26;
lime_ui_ScanCode.X = 27;
lime_ui_ScanCode.Y = 28;
lime_ui_ScanCode.Z = 29;
lime_ui_ScanCode.DELETE = 76;
lime_ui_ScanCode.CAPS_LOCK = 57;
lime_ui_ScanCode.F1 = 58;
lime_ui_ScanCode.F2 = 59;
lime_ui_ScanCode.F3 = 60;
lime_ui_ScanCode.F4 = 61;
lime_ui_ScanCode.F5 = 62;
lime_ui_ScanCode.F6 = 63;
lime_ui_ScanCode.F7 = 64;
lime_ui_ScanCode.F8 = 65;
lime_ui_ScanCode.F9 = 66;
lime_ui_ScanCode.F10 = 67;
lime_ui_ScanCode.F11 = 68;
lime_ui_ScanCode.F12 = 69;
lime_ui_ScanCode.PRINT_SCREEN = 70;
lime_ui_ScanCode.SCROLL_LOCK = 71;
lime_ui_ScanCode.PAUSE = 72;
lime_ui_ScanCode.INSERT = 73;
lime_ui_ScanCode.HOME = 74;
lime_ui_ScanCode.PAGE_UP = 75;
lime_ui_ScanCode.END = 77;
lime_ui_ScanCode.PAGE_DOWN = 78;
lime_ui_ScanCode.RIGHT = 79;
lime_ui_ScanCode.LEFT = 80;
lime_ui_ScanCode.DOWN = 81;
lime_ui_ScanCode.UP = 82;
lime_ui_ScanCode.NUM_LOCK = 83;
lime_ui_ScanCode.NUMPAD_DIVIDE = 84;
lime_ui_ScanCode.NUMPAD_MULTIPLY = 85;
lime_ui_ScanCode.NUMPAD_MINUS = 86;
lime_ui_ScanCode.NUMPAD_PLUS = 87;
lime_ui_ScanCode.NUMPAD_ENTER = 88;
lime_ui_ScanCode.NUMPAD_1 = 89;
lime_ui_ScanCode.NUMPAD_2 = 90;
lime_ui_ScanCode.NUMPAD_3 = 91;
lime_ui_ScanCode.NUMPAD_4 = 92;
lime_ui_ScanCode.NUMPAD_5 = 93;
lime_ui_ScanCode.NUMPAD_6 = 94;
lime_ui_ScanCode.NUMPAD_7 = 95;
lime_ui_ScanCode.NUMPAD_8 = 96;
lime_ui_ScanCode.NUMPAD_9 = 97;
lime_ui_ScanCode.NUMPAD_0 = 98;
lime_ui_ScanCode.NUMPAD_PERIOD = 99;
lime_ui_ScanCode.APPLICATION = 101;
lime_ui_ScanCode.POWER = 102;
lime_ui_ScanCode.NUMPAD_EQUALS = 103;
lime_ui_ScanCode.F13 = 104;
lime_ui_ScanCode.F14 = 105;
lime_ui_ScanCode.F15 = 106;
lime_ui_ScanCode.F16 = 107;
lime_ui_ScanCode.F17 = 108;
lime_ui_ScanCode.F18 = 109;
lime_ui_ScanCode.F19 = 110;
lime_ui_ScanCode.F20 = 111;
lime_ui_ScanCode.F21 = 112;
lime_ui_ScanCode.F22 = 113;
lime_ui_ScanCode.F23 = 114;
lime_ui_ScanCode.F24 = 115;
lime_ui_ScanCode.EXECUTE = 116;
lime_ui_ScanCode.HELP = 117;
lime_ui_ScanCode.MENU = 118;
lime_ui_ScanCode.SELECT = 119;
lime_ui_ScanCode.STOP = 120;
lime_ui_ScanCode.AGAIN = 121;
lime_ui_ScanCode.UNDO = 122;
lime_ui_ScanCode.CUT = 123;
lime_ui_ScanCode.COPY = 124;
lime_ui_ScanCode.PASTE = 125;
lime_ui_ScanCode.FIND = 126;
lime_ui_ScanCode.MUTE = 127;
lime_ui_ScanCode.VOLUME_UP = 128;
lime_ui_ScanCode.VOLUME_DOWN = 129;
lime_ui_ScanCode.NUMPAD_COMMA = 133;
lime_ui_ScanCode.ALT_ERASE = 153;
lime_ui_ScanCode.SYSTEM_REQUEST = 154;
lime_ui_ScanCode.CANCEL = 155;
lime_ui_ScanCode.CLEAR = 156;
lime_ui_ScanCode.PRIOR = 157;
lime_ui_ScanCode.RETURN2 = 158;
lime_ui_ScanCode.SEPARATOR = 159;
lime_ui_ScanCode.OUT = 160;
lime_ui_ScanCode.OPER = 161;
lime_ui_ScanCode.CLEAR_AGAIN = 162;
lime_ui_ScanCode.CRSEL = 163;
lime_ui_ScanCode.EXSEL = 164;
lime_ui_ScanCode.NUMPAD_00 = 176;
lime_ui_ScanCode.NUMPAD_000 = 177;
lime_ui_ScanCode.THOUSAND_SEPARATOR = 178;
lime_ui_ScanCode.DECIMAL_SEPARATOR = 179;
lime_ui_ScanCode.CURRENCY_UNIT = 180;
lime_ui_ScanCode.CURRENCY_SUBUNIT = 181;
lime_ui_ScanCode.NUMPAD_LEFT_PARENTHESIS = 182;
lime_ui_ScanCode.NUMPAD_RIGHT_PARENTHESIS = 183;
lime_ui_ScanCode.NUMPAD_LEFT_BRACE = 184;
lime_ui_ScanCode.NUMPAD_RIGHT_BRACE = 185;
lime_ui_ScanCode.NUMPAD_TAB = 186;
lime_ui_ScanCode.NUMPAD_BACKSPACE = 187;
lime_ui_ScanCode.NUMPAD_A = 188;
lime_ui_ScanCode.NUMPAD_B = 189;
lime_ui_ScanCode.NUMPAD_C = 190;
lime_ui_ScanCode.NUMPAD_D = 191;
lime_ui_ScanCode.NUMPAD_E = 192;
lime_ui_ScanCode.NUMPAD_F = 193;
lime_ui_ScanCode.NUMPAD_XOR = 194;
lime_ui_ScanCode.NUMPAD_POWER = 195;
lime_ui_ScanCode.NUMPAD_PERCENT = 196;
lime_ui_ScanCode.NUMPAD_LESS_THAN = 197;
lime_ui_ScanCode.NUMPAD_GREATER_THAN = 198;
lime_ui_ScanCode.NUMPAD_AMPERSAND = 199;
lime_ui_ScanCode.NUMPAD_DOUBLE_AMPERSAND = 200;
lime_ui_ScanCode.NUMPAD_VERTICAL_BAR = 201;
lime_ui_ScanCode.NUMPAD_DOUBLE_VERTICAL_BAR = 202;
lime_ui_ScanCode.NUMPAD_COLON = 203;
lime_ui_ScanCode.NUMPAD_HASH = 204;
lime_ui_ScanCode.NUMPAD_SPACE = 205;
lime_ui_ScanCode.NUMPAD_AT = 206;
lime_ui_ScanCode.NUMPAD_EXCLAMATION = 207;
lime_ui_ScanCode.NUMPAD_MEM_STORE = 208;
lime_ui_ScanCode.NUMPAD_MEM_RECALL = 209;
lime_ui_ScanCode.NUMPAD_MEM_CLEAR = 210;
lime_ui_ScanCode.NUMPAD_MEM_ADD = 211;
lime_ui_ScanCode.NUMPAD_MEM_SUBTRACT = 212;
lime_ui_ScanCode.NUMPAD_MEM_MULTIPLY = 213;
lime_ui_ScanCode.NUMPAD_MEM_DIVIDE = 214;
lime_ui_ScanCode.NUMPAD_PLUS_MINUS = 215;
lime_ui_ScanCode.NUMPAD_CLEAR = 216;
lime_ui_ScanCode.NUMPAD_CLEAR_ENTRY = 217;
lime_ui_ScanCode.NUMPAD_BINARY = 218;
lime_ui_ScanCode.NUMPAD_OCTAL = 219;
lime_ui_ScanCode.NUMPAD_DECIMAL = 220;
lime_ui_ScanCode.NUMPAD_HEXADECIMAL = 221;
lime_ui_ScanCode.LEFT_CTRL = 224;
lime_ui_ScanCode.LEFT_SHIFT = 225;
lime_ui_ScanCode.LEFT_ALT = 226;
lime_ui_ScanCode.LEFT_META = 227;
lime_ui_ScanCode.RIGHT_CTRL = 228;
lime_ui_ScanCode.RIGHT_SHIFT = 229;
lime_ui_ScanCode.RIGHT_ALT = 230;
lime_ui_ScanCode.RIGHT_META = 231;
lime_ui_ScanCode.MODE = 257;
lime_ui_ScanCode.AUDIO_NEXT = 258;
lime_ui_ScanCode.AUDIO_PREVIOUS = 259;
lime_ui_ScanCode.AUDIO_STOP = 260;
lime_ui_ScanCode.AUDIO_PLAY = 261;
lime_ui_ScanCode.AUDIO_MUTE = 262;
lime_ui_ScanCode.MEDIA_SELECT = 263;
lime_ui_ScanCode.WWW = 264;
lime_ui_ScanCode.MAIL = 265;
lime_ui_ScanCode.CALCULATOR = 266;
lime_ui_ScanCode.COMPUTER = 267;
lime_ui_ScanCode.APP_CONTROL_SEARCH = 268;
lime_ui_ScanCode.APP_CONTROL_HOME = 269;
lime_ui_ScanCode.APP_CONTROL_BACK = 270;
lime_ui_ScanCode.APP_CONTROL_FORWARD = 271;
lime_ui_ScanCode.APP_CONTROL_STOP = 272;
lime_ui_ScanCode.APP_CONTROL_REFRESH = 273;
lime_ui_ScanCode.APP_CONTROL_BOOKMARKS = 274;
lime_ui_ScanCode.BRIGHTNESS_DOWN = 275;
lime_ui_ScanCode.BRIGHTNESS_UP = 276;
lime_ui_ScanCode.DISPLAY_SWITCH = 277;
lime_ui_ScanCode.BACKLIGHT_TOGGLE = 278;
lime_ui_ScanCode.BACKLIGHT_DOWN = 279;
lime_ui_ScanCode.BACKLIGHT_UP = 280;
lime_ui_ScanCode.EJECT = 281;
lime_ui_ScanCode.SLEEP = 282;
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.bundlePaths = new haxe_ds_StringMap();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils_Float32Array.BYTES_PER_ELEMENT = 4;
lime_utils_Float64Array.BYTES_PER_ELEMENT = 8;
lime_utils_Int16Array.BYTES_PER_ELEMENT = 2;
lime_utils_Int32Array.BYTES_PER_ELEMENT = 4;
lime_utils_Int8Array.BYTES_PER_ELEMENT = 1;
lime_utils_Log.throwErrors = true;
lime_utils_LogLevel.NONE = 0;
lime_utils_LogLevel.ERROR = 1;
lime_utils_LogLevel.WARN = 2;
lime_utils_LogLevel.INFO = 3;
lime_utils_LogLevel.DEBUG = 4;
lime_utils_LogLevel.VERBOSE = 5;
lime_utils_UInt16Array.BYTES_PER_ELEMENT = 2;
lime_utils_UInt32Array.BYTES_PER_ELEMENT = 4;
lime_utils_UInt8Array.BYTES_PER_ELEMENT = 1;
lime_utils_UInt8ClampedArray.BYTES_PER_ELEMENT = 1;
openfl_Lib.__lastTimerID = 0;
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl_Lib.__timers = new haxe_ds_IntMap();
openfl__$Vector_IVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$Vector_BoolVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_FloatVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_FunctionVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_IntVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_ObjectVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { concat : { SuppressWarnings : ["checkstyle:Dynamic"]}, toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_Application.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_BitmapData.__meta__ = { fields : { image : { SuppressWarnings : ["checkstyle:Dynamic"]}, __framebufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __indexBufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __surface : { SuppressWarnings : ["checkstyle:Dynamic"]}, __textureContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __vertexBufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, compare : { SuppressWarnings : ["checkstyle:Dynamic"]}, getSurface : { SuppressWarnings : ["checkstyle:Dynamic"]}, __fromImage : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_BitmapData.VERTEX_BUFFER_STRIDE = 14;
openfl_display_BitmapData.__tempVector = new lime_math_Vector2();
openfl_display_BlendMode.ADD = 0;
openfl_display_BlendMode.ALPHA = 1;
openfl_display_BlendMode.DARKEN = 2;
openfl_display_BlendMode.DIFFERENCE = 3;
openfl_display_BlendMode.ERASE = 4;
openfl_display_BlendMode.HARDLIGHT = 5;
openfl_display_BlendMode.INVERT = 6;
openfl_display_BlendMode.LAYER = 7;
openfl_display_BlendMode.LIGHTEN = 8;
openfl_display_BlendMode.MULTIPLY = 9;
openfl_display_BlendMode.NORMAL = 10;
openfl_display_BlendMode.OVERLAY = 11;
openfl_display_BlendMode.SCREEN = 12;
openfl_display_BlendMode.SHADER = 13;
openfl_display_BlendMode.SUBTRACT = 14;
openfl_display_DisplayObjectRenderer.__meta__ = { fields : { __context : { SuppressWarnings : ["checkstyle:Dynamic"]}, __type : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_CairoRenderer.__meta__ = { fields : { cairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, __matrix3 : { SuppressWarnings : ["checkstyle:Dynamic"]}, applyMatrix : { SuppressWarnings : ["checkstyle:Dynamic"]}, __setBlendModeCairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_CanvasRenderer.__meta__ = { fields : { context : { SuppressWarnings : ["checkstyle:Dynamic"]}, applySmoothing : { SuppressWarnings : ["checkstyle:Dynamic"]}, setTransform : { SuppressWarnings : ["checkstyle:Dynamic"]}, __setBlendModeContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_CapsStyle.NONE = 0;
openfl_display_CapsStyle.ROUND = 1;
openfl_display_CapsStyle.SQUARE = 2;
openfl_display_DOMElement.__meta__ = { fields : { __element : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DOMRenderer.__meta__ = { fields : { element : { SuppressWarnings : ["checkstyle:Dynamic"]}, applyStyle : { SuppressWarnings : ["checkstyle:Dynamic"]}, clearStyle : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_Shader.__meta__ = { fields : { glProgram : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_GradientType.LINEAR = 0;
openfl_display_GradientType.RADIAL = 1;
openfl_display_Graphics.__meta__ = { fields : { overrideBlendMode : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_display_GraphicsPath.SIN45 = 0.70710678118654752440084436210485;
openfl_display_GraphicsPath.TAN22 = 0.4142135623730950488016887242097;
openfl_display_GraphicsPathWinding.EVEN_ODD = 0;
openfl_display_GraphicsPathWinding.NON_ZERO = 1;
openfl_display_InterpolationMethod.LINEAR_RGB = 0;
openfl_display_InterpolationMethod.RGB = 1;
openfl_display_JointStyle.BEVEL = 0;
openfl_display_JointStyle.MITER = 1;
openfl_display_JointStyle.ROUND = 2;
openfl_display_LineScaleMode.HORIZONTAL = 0;
openfl_display_LineScaleMode.NONE = 1;
openfl_display_LineScaleMode.NORMAL = 2;
openfl_display_LineScaleMode.VERTICAL = 3;
openfl_display_Loader.__meta__ = { fields : { BitmapData_onError : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_LoaderInfo.__meta__ = { statics : { create : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}, fields : { parameters : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_LoaderInfo.__rootURL = typeof(window) != "undefined" ? window.document.URL : "";
openfl_geom_Rectangle.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
});
openfl_display_OpenGLRenderer.__meta__ = { fields : { gl : { SuppressWarnings : ["checkstyle:Dynamic"]}, __gl : { SuppressWarnings : ["checkstyle:Dynamic"]}, __matrix : { SuppressWarnings : ["checkstyle:Dynamic"]}, __projection : { SuppressWarnings : ["checkstyle:Dynamic"]}, __projectionFlipped : { SuppressWarnings : ["checkstyle:Dynamic"]}, getMatrix : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_OpenGLRenderer.__alphaValue = [1];
openfl_display_OpenGLRenderer.__colorMultipliersValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__colorOffsetsValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__defaultColorMultipliersValue = [1,1,1,1];
openfl_display_OpenGLRenderer.__emptyColorValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__emptyAlphaValue = [1];
openfl_display_OpenGLRenderer.__hasColorTransformValue = [false];
openfl_display_OpenGLRenderer.__scissorRectangle = new openfl_geom_Rectangle();
openfl_display_OpenGLRenderer.__textureSizeValue = [0,0];
openfl_display_PixelSnapping.ALWAYS = 0;
openfl_display_PixelSnapping.AUTO = 1;
openfl_display_PixelSnapping.NEVER = 2;
openfl_display_Preloader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { onComplete : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_ShaderInput.__meta__ = { fields : { index : { SuppressWarnings : ["checkstyle:Dynamic"]}, name : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_display_ShaderParameter.__meta__ = { fields : { index : { SuppressWarnings : ["checkstyle:Dynamic"]}, name : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_display_ShaderParameterType.BOOL = 0;
openfl_display_ShaderParameterType.BOOL2 = 1;
openfl_display_ShaderParameterType.BOOL3 = 2;
openfl_display_ShaderParameterType.BOOL4 = 3;
openfl_display_ShaderParameterType.FLOAT = 4;
openfl_display_ShaderParameterType.FLOAT2 = 5;
openfl_display_ShaderParameterType.FLOAT3 = 6;
openfl_display_ShaderParameterType.FLOAT4 = 7;
openfl_display_ShaderParameterType.INT = 8;
openfl_display_ShaderParameterType.INT2 = 9;
openfl_display_ShaderParameterType.INT3 = 10;
openfl_display_ShaderParameterType.INT4 = 11;
openfl_display_ShaderParameterType.MATRIX2X2 = 12;
openfl_display_ShaderParameterType.MATRIX2X3 = 13;
openfl_display_ShaderParameterType.MATRIX2X4 = 14;
openfl_display_ShaderParameterType.MATRIX3X2 = 15;
openfl_display_ShaderParameterType.MATRIX3X3 = 16;
openfl_display_ShaderParameterType.MATRIX3X4 = 17;
openfl_display_ShaderParameterType.MATRIX4X2 = 18;
openfl_display_ShaderParameterType.MATRIX4X3 = 19;
openfl_display_ShaderParameterType.MATRIX4X4 = 20;
openfl_display_ShaderPrecision.FAST = 0;
openfl_display_ShaderPrecision.FULL = 1;
openfl_display_SpreadMethod.PAD = 0;
openfl_display_SpreadMethod.REFLECT = 1;
openfl_display_SpreadMethod.REPEAT = 2;
openfl_display_Stage.__meta__ = { fields : { __broadcastEvent : { SuppressWarnings : ["checkstyle:Dynamic"]}, __dispatchEvent : { SuppressWarnings : [["checkstyle:Dynamic","checkstyle:LeftCurly"]]}, __dispatchStack : { SuppressWarnings : [["checkstyle:Dynamic","checkstyle:LeftCurly"]]}, __dispatchTarget : { SuppressWarnings : ["checkstyle:Dynamic"]}, __handleError : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_StageAlign.BOTTOM = 0;
openfl_display_StageAlign.BOTTOM_LEFT = 1;
openfl_display_StageAlign.BOTTOM_RIGHT = 2;
openfl_display_StageAlign.LEFT = 3;
openfl_display_StageAlign.RIGHT = 4;
openfl_display_StageAlign.TOP = 5;
openfl_display_StageAlign.TOP_LEFT = 6;
openfl_display_StageAlign.TOP_RIGHT = 7;
openfl_display_StageDisplayState.FULL_SCREEN = 0;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE = 1;
openfl_display_StageDisplayState.NORMAL = 2;
openfl_display_StageQuality.BEST = 0;
openfl_display_StageQuality.HIGH = 1;
openfl_display_StageQuality.LOW = 2;
openfl_display_StageQuality.MEDIUM = 3;
openfl_display_StageScaleMode.EXACT_FIT = 0;
openfl_display_StageScaleMode.NO_BORDER = 1;
openfl_display_StageScaleMode.NO_SCALE = 2;
openfl_display_StageScaleMode.SHOW_ALL = 3;
openfl_display_Tile.__meta__ = { fields : { data : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$Tileset_TileData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_TriangleCulling.NEGATIVE = 0;
openfl_display_TriangleCulling.NONE = 1;
openfl_display_TriangleCulling.POSITIVE = 2;
openfl_display_Window.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_AbstractNoise.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoGraphics.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CairoTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { renderTileContainer : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_CanvasBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CanvasDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DrawCommandBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { o : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_DrawCommandBuffer.empty = new openfl_display__$internal_DrawCommandBuffer();
openfl_display__$internal_CanvasGraphics.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { windingRule : { SuppressWarnings : ["checkstyle:Dynamic"]}, createBitmapFill : { SuppressWarnings : ["checkstyle:Dynamic"]}, createGradientPattern : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl_display__$internal_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl_display__$internal_CanvasGraphics.fillCommands = new openfl_display__$internal_DrawCommandBuffer();
openfl_display__$internal_CanvasGraphics.strokeCommands = new openfl_display__$internal_DrawCommandBuffer();
openfl_display__$internal_CanvasShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CanvasTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CanvasTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { renderTileContainer : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_CanvasVideo.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DBuffer.MAX_INDEX_BUFFER_LENGTH = 65535;
openfl_display__$internal_Context3DBuffer.MAX_QUADS_PER_INDEX_BUFFER = 10922;
openfl_display__$internal_Context3DBuffer.MAX_QUAD_INDEX_BUFFER_LENGTH = 65532;
openfl_display__$internal_Context3DDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_geom_Matrix.__meta__ = { fields : { equals : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, to3DString : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, toMozString : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
});
openfl_geom_Matrix.__matrix3 = new lime_math_Matrix3();
openfl_geom_ColorTransform.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_ColorTransform();
},function(ct) {
	ct.__identity();
});
openfl_display__$internal_Context3DGraphics.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DGraphics.blankBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl_display__$internal_Context3DGraphics.tempColorTransform = new openfl_geom_ColorTransform(1,1,1,1,0,0,0,0);
openfl_display__$internal_Context3DMaskShader.opaqueBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl_display__$internal_Context3DShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DVideo.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DVideo.__textureSizeValue = [0,0.];
openfl_display__$internal_DOMBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMTextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl_display__$internal_DOMTextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl_display__$internal_DOMTextField.__regexFont = new EReg("<font ([^>]+)>","gi");
openfl_display__$internal_DOMTextField.__regexCloseFont = new EReg("</font>","gi");
openfl_display__$internal_DOMTextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl_display__$internal_DOMTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMVideo.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DrawCommandReader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { obj : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_FlashRenderer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_FlashTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_FlashTilemap.alphaColorTransform = new openfl_geom_ColorTransform();
openfl_display__$internal_FlashTilemap.bitmap = new openfl_display_Bitmap();
openfl_display__$internal_FlashTilemap.destPoint = new openfl_geom_Point();
openfl_display__$internal_FlashTilemap.sourceRect = new openfl_geom_Rectangle();
openfl_display__$internal_PerlinNoise.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { P : { SuppressWarnings : ["checkstyle:ConstantName"]}}};
openfl_display__$internal_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl_display__$internal_SamplerState.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_ShaderBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { overrideIntValues : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.__glDepthStencil = -1;
openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = -1;
openfl_display3D_Context3D.__glMaxViewportDims = -1;
openfl_display3D_Context3D.__glMemoryCurrentAvailable = -1;
openfl_display3D_Context3D.__glMemoryTotalAvailable = -1;
openfl_display3D_Context3D.__glTextureMaxAnisotropy = -1;
openfl_display3D_Context3DBlendFactor.DESTINATION_ALPHA = 0;
openfl_display3D_Context3DBlendFactor.DESTINATION_COLOR = 1;
openfl_display3D_Context3DBlendFactor.ONE = 2;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D_Context3DBlendFactor.SOURCE_ALPHA = 7;
openfl_display3D_Context3DBlendFactor.SOURCE_COLOR = 8;
openfl_display3D_Context3DBlendFactor.ZERO = 9;
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW = 0;
openfl_display3D_Context3DBufferUsage.STATIC_DRAW = 1;
openfl_display3D_Context3DCompareMode.ALWAYS = 0;
openfl_display3D_Context3DCompareMode.EQUAL = 1;
openfl_display3D_Context3DCompareMode.GREATER = 2;
openfl_display3D_Context3DCompareMode.GREATER_EQUAL = 3;
openfl_display3D_Context3DCompareMode.LESS = 4;
openfl_display3D_Context3DCompareMode.LESS_EQUAL = 5;
openfl_display3D_Context3DCompareMode.NEVER = 6;
openfl_display3D_Context3DCompareMode.NOT_EQUAL = 7;
openfl_display3D_Context3DMipFilter.MIPLINEAR = 0;
openfl_display3D_Context3DMipFilter.MIPNEAREST = 1;
openfl_display3D_Context3DMipFilter.MIPNONE = 2;
openfl_display3D_Context3DProfile.BASELINE = 0;
openfl_display3D_Context3DProfile.BASELINE_CONSTRAINED = 1;
openfl_display3D_Context3DProfile.BASELINE_EXTENDED = 2;
openfl_display3D_Context3DProfile.STANDARD = 3;
openfl_display3D_Context3DProfile.STANDARD_CONSTRAINED = 4;
openfl_display3D_Context3DProfile.STANDARD_EXTENDED = 5;
openfl_display3D_Context3DProgramFormat.AGAL = 0;
openfl_display3D_Context3DProgramFormat.GLSL = 1;
openfl_display3D_Context3DProgramType.FRAGMENT = 0;
openfl_display3D_Context3DProgramType.VERTEX = 1;
openfl_display3D_Context3DRenderMode.AUTO = 0;
openfl_display3D_Context3DRenderMode.SOFTWARE = 1;
openfl_display3D_Context3DStencilAction.DECREMENT_SATURATE = 0;
openfl_display3D_Context3DStencilAction.DECREMENT_WRAP = 1;
openfl_display3D_Context3DStencilAction.INCREMENT_SATURATE = 2;
openfl_display3D_Context3DStencilAction.INCREMENT_WRAP = 3;
openfl_display3D_Context3DStencilAction.INVERT = 4;
openfl_display3D_Context3DStencilAction.KEEP = 5;
openfl_display3D_Context3DStencilAction.SET = 6;
openfl_display3D_Context3DStencilAction.ZERO = 7;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = 0;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = 1;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = 2;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = 3;
openfl_display3D_Context3DTextureFilter.LINEAR = 4;
openfl_display3D_Context3DTextureFilter.NEAREST = 5;
openfl_display3D_Context3DTextureFormat.BGR_PACKED = 0;
openfl_display3D_Context3DTextureFormat.BGRA = 1;
openfl_display3D_Context3DTextureFormat.BGRA_PACKED = 2;
openfl_display3D_Context3DTextureFormat.COMPRESSED = 3;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = 4;
openfl_display3D_Context3DTextureFormat.RGBA_HALF_FLOAT = 5;
openfl_display3D_Context3DTriangleFace.BACK = 0;
openfl_display3D_Context3DTriangleFace.FRONT = 1;
openfl_display3D_Context3DTriangleFace.FRONT_AND_BACK = 2;
openfl_display3D_Context3DTriangleFace.NONE = 3;
openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = 0;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = 1;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = 2;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = 3;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = 4;
openfl_display3D_Context3DWrapMode.CLAMP = 0;
openfl_display3D_Context3DWrapMode.CLAMP_U_REPEAT_V = 1;
openfl_display3D_Context3DWrapMode.REPEAT = 2;
openfl_display3D_Context3DWrapMode.REPEAT_U_CLAMP_V = 3;
openfl_display3D_Uniform.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D_UniformMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_AGALConverter.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_AGALConverter.limitedProfile = true;
openfl_display3D__$internal__$AGALConverter_DestRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_RegisterMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal__$AGALConverter_SamplerRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal__$AGALConverter_SourceRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_ATFReader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_Context3DState.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D_textures_TextureBase.__meta__ = { fields : { __textureContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __getGLFramebuffer : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events__$EventDispatcher_DispatchIterator.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_events__$EventDispatcher_Listener.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_RenderEvent.CLEAR_DOM = "clearDOM";
openfl_events_RenderEvent.RENDER_CAIRO = "renderCairo";
openfl_events_RenderEvent.RENDER_CANVAS = "renderCanvas";
openfl_events_RenderEvent.RENDER_DOM = "renderDOM";
openfl_events_RenderEvent.RENDER_OPENGL = "renderOpenGL";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TouchEvent.__meta__ = { fields : { delta : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
openfl_geom_Matrix3D.__meta__ = { statics : { create2D : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, createABCD : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, createOrtho : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_geom_Orientation3D.AXIS_ANGLE = 0;
openfl_geom_Orientation3D.EULER_ANGLES = 1;
openfl_geom_Orientation3D.QUATERNION = 2;
openfl_media_SoundTransform.__meta__ = { fields : { clone : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_media_Video.VERTEX_BUFFER_STRIDE = 5;
openfl_net_NetConnection.__meta__ = { statics : { CONNECT_SUCCESS : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_net_NetConnection.CONNECT_SUCCESS = "NetConnection.Connect.Success";
openfl_net_NetStream.__meta__ = { fields : { audioCodec : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, decodedFrames : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, speed : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, requestVideoStatus : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_net_SharedObject.defaultObjectEncoding = 10;
openfl_net_SharedObjectFlushStatus.FLUSHED = 0;
openfl_net_SharedObjectFlushStatus.PENDING = 1;
openfl_net_URLLoaderDataFormat.BINARY = 0;
openfl_net_URLLoaderDataFormat.TEXT = 1;
openfl_net_URLLoaderDataFormat.VARIABLES = 2;
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = false;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_system_SecurityDomain.__meta__ = { obj : { SuppressWarnings : ["checkstyle:UnnecessaryConstructor"]}};
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_text_AntiAliasType.ADVANCED = 0;
openfl_text_AntiAliasType.NORMAL = 1;
openfl_text_FontStyle.BOLD = 0;
openfl_text_FontStyle.BOLD_ITALIC = 1;
openfl_text_FontStyle.ITALIC = 2;
openfl_text_FontStyle.REGULAR = 3;
openfl_text_FontType.DEVICE = 0;
openfl_text_FontType.EMBEDDED = 1;
openfl_text_FontType.EMBEDDED_CFF = 2;
openfl_text_GridFitType.NONE = 0;
openfl_text_GridFitType.PIXEL = 1;
openfl_text_GridFitType.SUBPIXEL = 2;
openfl_text_TextField.__missingFontWarning = new haxe_ds_StringMap();
openfl_text_TextFieldAutoSize.CENTER = 0;
openfl_text_TextFieldAutoSize.LEFT = 1;
openfl_text_TextFieldAutoSize.NONE = 2;
openfl_text_TextFieldAutoSize.RIGHT = 3;
openfl_text_TextFieldType.DYNAMIC = 0;
openfl_text_TextFieldType.INPUT = 1;
openfl_text_TextFormat.__meta__ = { fields : { clone : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_text_TextFormatAlign.CENTER = 0;
openfl_text_TextFormatAlign.END = 1;
openfl_text_TextFormatAlign.JUSTIFY = 2;
openfl_text_TextFormatAlign.LEFT = 3;
openfl_text_TextFormatAlign.RIGHT = 4;
openfl_text_TextFormatAlign.START = 5;
openfl_text__$internal_CacheMeasurement.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_text__$internal_GlyphPosition.__meta__ = { obj : { SuppressWarnings : [["checkstyle:FieldDocComment","checkstyle:Dynamic"]]}};
openfl_text__$internal_HTMLParser.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_text__$internal_HTMLParser.__regexAlign = new EReg("align\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl_text__$internal_HTMLParser.__regexBlockIndent = new EReg("blockindent\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexColor = new EReg("color\\s?=\\s?(\"#([^\"]+)\"|'#([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g"),new EReg("&nbsp;","g")];
openfl_text__$internal_HTMLParser.__regexFace = new EReg("face\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexHTMLTag = new EReg("<.*?>","g");
openfl_text__$internal_HTMLParser.__regexHref = new EReg("href\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexIndent = new EReg(" indent\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexLeading = new EReg("leading\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexLeftMargin = new EReg("leftmargin\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexRightMargin = new EReg("rightmargin\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexSize = new EReg("size\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexTabStops = new EReg("tabstops\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_ShapeCache.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_text__$internal_TextEngine.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { __cairoFont : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_text__$internal_TextEngine.GUTTER = 2;
openfl_text__$internal_TextEngine.UTF8_TAB = 9;
openfl_text__$internal_TextEngine.UTF8_ENDLINE = 10;
openfl_text__$internal_TextEngine.UTF8_SPACE = 32;
openfl_text__$internal_TextEngine.UTF8_HYPHEN = 45;
openfl_text__$internal_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl_text__$internal_TextLayout.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { glyphs : { SuppressWarnings : ["checkstyle:Dynamic"]}, __handle : { SuppressWarnings : ["checkstyle:Dynamic"]}, __hbBuffer : { SuppressWarnings : ["checkstyle:Dynamic"]}, __hbFont : { SuppressWarnings : ["checkstyle:Dynamic"]}, get_glyphs : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_text__$internal_TextLayout.FT_LOAD_DEFAULT = 0;
openfl_text__$internal_TextLayout.FT_LOAD_NO_SCALE = 1;
openfl_text__$internal_TextLayout.FT_LOAD_NO_HINTING = 2;
openfl_text__$internal_TextLayout.FT_LOAD_RENDER = 4;
openfl_text__$internal_TextLayout.FT_LOAD_NO_BITMAP = 8;
openfl_text__$internal_TextLayout.FT_LOAD_VERTICAL_LAYOUT = 16;
openfl_text__$internal_TextLayout.FT_LOAD_FORCE_AUTOHINT = 32;
openfl_text__$internal_TextLayout.FT_LOAD_CROP_BITMAP = 64;
openfl_text__$internal_TextLayout.FT_LOAD_PEDANTIC = 128;
openfl_text__$internal_TextLayout.FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH = 256;
openfl_text__$internal_TextLayout.FT_LOAD_NO_RECURSE = 512;
openfl_text__$internal_TextLayout.FT_LOAD_IGNORE_TRANSFORM = 1024;
openfl_text__$internal_TextLayout.FT_LOAD_MONOCHROME = 2048;
openfl_text__$internal_TextLayout.FT_LOAD_LINEAR_DESIGN = 4096;
openfl_text__$internal_TextLayout.FT_LOAD_NO_AUTOHINT = 8192;
openfl_text__$internal_TextLayout.FT_LOAD_COLOR = 16384;
openfl_text__$internal_TextLayout.FT_LOAD_COMPUTE_METRICS = 32768;
openfl_text__$internal_TextLayout.FT_LOAD_BITMAP_METRICS_ONLY = 65536;
openfl_text__$internal_TextLayout.FT_LOAD_TARGET_NORMAL = 0;
openfl_text__$internal_TextLayout.FT_LOAD_TARGET_LIGHT = 0;
openfl_text__$internal_TextDirection.INVALID = 0;
openfl_text__$internal_TextDirection.LEFT_TO_RIGHT = 4;
openfl_text__$internal_TextDirection.RIGHT_TO_LEFT = 5;
openfl_text__$internal_TextDirection.TOP_TO_BOTTOM = 6;
openfl_text__$internal_TextDirection.BOTTOM_TO_TOP = 7;
openfl_text__$internal_TextScript.COMMON = "Zyyy";
openfl_text__$internal_TextScript.INHERITED = "Zinh";
openfl_text__$internal_TextScript.UNKNOWN = "Zzzz";
openfl_text__$internal_TextScript.ARABIC = "Arab";
openfl_text__$internal_TextScript.ARMENIAN = "Armn";
openfl_text__$internal_TextScript.BENGALI = "Beng";
openfl_text__$internal_TextScript.CYRILLIC = "Cyrl";
openfl_text__$internal_TextScript.DEVANAGARI = "Deva";
openfl_text__$internal_TextScript.GEORGIAN = "Geor";
openfl_text__$internal_TextScript.GREEK = "Grek";
openfl_text__$internal_TextScript.GUJARATI = "Gujr";
openfl_text__$internal_TextScript.GURMUKHI = "Guru";
openfl_text__$internal_TextScript.HANGUL = "Hang";
openfl_text__$internal_TextScript.HAN = "Hani";
openfl_text__$internal_TextScript.HEBREW = "Hebr";
openfl_text__$internal_TextScript.HIRAGANA = "Hira";
openfl_text__$internal_TextScript.KANNADA = "Knda";
openfl_text__$internal_TextScript.KATAKANA = "Kana";
openfl_text__$internal_TextScript.LAO = "Laoo";
openfl_text__$internal_TextScript.LATIN = "Latn";
openfl_text__$internal_TextScript.MALAYALAM = "Mlym";
openfl_text__$internal_TextScript.ORIYA = "Orya";
openfl_text__$internal_TextScript.TAMIL = "Taml";
openfl_text__$internal_TextScript.TELUGA = "Telu";
openfl_text__$internal_TextScript.THAI = "Thai";
openfl_text__$internal_TextScript.TIBETAN = "Tibt";
openfl_text__$internal_TextScript.BOPOMOFO = "Bopo";
openfl_text__$internal_TextScript.BRAILLE = "Brai";
openfl_text__$internal_TextScript.CANADIAN_SYLLABICS = "Cans";
openfl_text__$internal_TextScript.CHEROKEE = "Cher";
openfl_text__$internal_TextScript.ETHIOPIC = "Ethi";
openfl_text__$internal_TextScript.KHMER = "Khmr";
openfl_text__$internal_TextScript.MONGOLIAN = "Mong";
openfl_text__$internal_TextScript.MYANMAR = "Mymr";
openfl_text__$internal_TextScript.OGHAM = "Ogam";
openfl_text__$internal_TextScript.RUNIC = "Runr";
openfl_text__$internal_TextScript.SINHALA = "Sinh";
openfl_text__$internal_TextScript.SYRIAC = "Syrc";
openfl_text__$internal_TextScript.THAANA = "Thaa";
openfl_text__$internal_TextScript.YI = "Yiii";
openfl_text__$internal_TextScript.DESERET = "Dsrt";
openfl_text__$internal_TextScript.GOTHIC = "Goth";
openfl_text__$internal_TextScript.OLD_ITALIC = "Ital";
openfl_text__$internal_TextScript.BUHID = "Buhd";
openfl_text__$internal_TextScript.HANUNOO = "Hano";
openfl_text__$internal_TextScript.TAGALOG = "Tglg";
openfl_text__$internal_TextScript.TAGBANWA = "Tagb";
openfl_text__$internal_TextScript.CYPRIOT = "Cprt";
openfl_text__$internal_TextScript.LIMBU = "Limb";
openfl_text__$internal_TextScript.LINEAR_B = "Linb";
openfl_text__$internal_TextScript.OSMANYA = "Osma";
openfl_text__$internal_TextScript.SHAVIAN = "Shaw";
openfl_text__$internal_TextScript.TAI_LE = "Tale";
openfl_text__$internal_TextScript.UGARITIC = "Ugar";
openfl_text__$internal_TextScript.BUGINESE = "Bugi";
openfl_text__$internal_TextScript.COPTIC = "Copt";
openfl_text__$internal_TextScript.GLAGOLITIC = "Glag";
openfl_text__$internal_TextScript.KHAROSHTHI = "Khar";
openfl_text__$internal_TextScript.NEW_TAI_LUE = "Talu";
openfl_text__$internal_TextScript.OLD_PERSIAN = "Xpeo";
openfl_text__$internal_TextScript.SYLOTI_NAGRI = "Sylo";
openfl_text__$internal_TextScript.TIFINAGH = "Tfng";
openfl_text__$internal_TextScript.BALINESE = "Bali";
openfl_text__$internal_TextScript.CUNEIFORM = "Xsux";
openfl_text__$internal_TextScript.NKO = "Nkoo";
openfl_text__$internal_TextScript.PHAGS_PA = "Phag";
openfl_text__$internal_TextScript.PHOENICIAN = "Phnx";
openfl_text__$internal_TextScript.CARIAN = "Cari";
openfl_text__$internal_TextScript.CHAM = "Cham";
openfl_text__$internal_TextScript.KAYAH_LI = "Kali";
openfl_text__$internal_TextScript.LEPCHA = "Lepc";
openfl_text__$internal_TextScript.LYCIAN = "Lyci";
openfl_text__$internal_TextScript.LYDIAN = "Lydi";
openfl_text__$internal_TextScript.OL_CHIKI = "Olck";
openfl_text__$internal_TextScript.REJANG = "Rjng";
openfl_text__$internal_TextScript.SAURASHTRA = "Saur";
openfl_text__$internal_TextScript.SUNDANESE = "Sund";
openfl_text__$internal_TextScript.VAI = "Vaii";
openfl_text__$internal_TextScript.AVESTAN = "Avst";
openfl_text__$internal_TextScript.BAMUM = "Bamu";
openfl_text__$internal_TextScript.EGYPTIAN_HIEROGLYPHS = "Egyp";
openfl_text__$internal_TextScript.IMPERIAL_ARAMAIC = "Armi";
openfl_text__$internal_TextScript.INSCRIPTIONAL_PAHLAVI = "Phli";
openfl_text__$internal_TextScript.INSCRIPTIONAL_PARTHIAN = "Prti";
openfl_text__$internal_TextScript.JAVANESE = "Java";
openfl_text__$internal_TextScript.KAITHI = "Kthi";
openfl_text__$internal_TextScript.LISU = "Lisu";
openfl_text__$internal_TextScript.MEETEI_MAYEK = "Mtei";
openfl_text__$internal_TextScript.OLD_SOUTH_ARABIAN = "Sarb";
openfl_text__$internal_TextScript.OLD_TURKIC = "Orkh";
openfl_text__$internal_TextScript.SAMARITAN = "Samr";
openfl_text__$internal_TextScript.TAI_THAM = "Lana";
openfl_text__$internal_TextScript.TAI_VIET = "Tavt";
openfl_text__$internal_TextScript.BATAK = "Batk";
openfl_text__$internal_TextScript.BRAHMI = "Brah";
openfl_text__$internal_TextScript.MANDAIC = "Mand";
openfl_text__$internal_TextScript.CHAKMA = "Cakm";
openfl_text__$internal_TextScript.MEROITIC_CURSIVE = "Merc";
openfl_text__$internal_TextScript.MEROITIC_HIEROGLYPHS = "Mero";
openfl_text__$internal_TextScript.MIAO = "Plrd";
openfl_text__$internal_TextScript.SHARADA = "Shrd";
openfl_text__$internal_TextScript.SORA_SOMPENG = "Sora";
openfl_text__$internal_TextScript.TAKRI = "Takr";
openfl_text__$internal_TextScript.BASSA_VAH = "Bass";
openfl_text__$internal_TextScript.CAUCASIAN_ALBANIAN = "Aghb";
openfl_text__$internal_TextScript.DUPLOYAN = "Dupl";
openfl_text__$internal_TextScript.ELBASAN = "Elba";
openfl_text__$internal_TextScript.GRANTHA = "Gran";
openfl_text__$internal_TextScript.KHOJKI = "Khoj";
openfl_text__$internal_TextScript.KHUDAWADI = "Sind";
openfl_text__$internal_TextScript.LINEAR_A = "Lina";
openfl_text__$internal_TextScript.MAHAJANI = "Mahj";
openfl_text__$internal_TextScript.MANICHAEAN = "Mani";
openfl_text__$internal_TextScript.MENDE_KIKAKUI = "Mend";
openfl_text__$internal_TextScript.MODI = "Modi";
openfl_text__$internal_TextScript.MRO = "Mroo";
openfl_text__$internal_TextScript.NABATAEAN = "Nbat";
openfl_text__$internal_TextScript.OLD_NORTH_ARABIAN = "Narb";
openfl_text__$internal_TextScript.OLD_PERMIC = "Perm";
openfl_text__$internal_TextScript.PAHAWH_HMONG = "Hmng";
openfl_text__$internal_TextScript.PALMYRENE = "Palm";
openfl_text__$internal_TextScript.PAU_CIN_HAU = "Pauc";
openfl_text__$internal_TextScript.PSALTER_PAHLAVI = "Phlp";
openfl_text__$internal_TextScript.SIDDHAM = "Sidd";
openfl_text__$internal_TextScript.TIRHUTA = "Tirh";
openfl_text__$internal_TextScript.WARANG_CITI = "Wara";
openfl_text__$internal_TextLayoutGroup.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_ui_GameInput.__meta__ = { fields : { addEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.__meta__ = { statics : { BREAK : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, NUMLOCK : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_ui_MouseCursor.ARROW = "arrow";
openfl_ui_MouseCursor.AUTO = "auto";
openfl_ui_MouseCursor.BUTTON = "button";
openfl_ui_MouseCursor.HAND = "hand";
openfl_ui_MouseCursor.IBEAM = "ibeam";
openfl_ui_MouseCursor.__CROSSHAIR = "crosshair";
openfl_ui_MouseCursor.__CUSTOM = "custom";
openfl_ui_MouseCursor.__MOVE = "move";
openfl_ui_MouseCursor.__RESIZE_NESW = "resize_nesw";
openfl_ui_MouseCursor.__RESIZE_NS = "resize_ns";
openfl_ui_MouseCursor.__RESIZE_NWSE = "resize_nwse";
openfl_ui_MouseCursor.__RESIZE_WE = "resize_we";
openfl_ui_MouseCursor.__WAIT = "wait";
openfl_ui_MouseCursor.__WAIT_ARROW = "waitarrow";
openfl_ui_MultitouchInputMode.GESTURE = 0;
openfl_ui_MultitouchInputMode.NONE = 1;
openfl_ui_MultitouchInputMode.TOUCH_POINT = 2;
openfl_utils_AGALMiniAssembler.__meta__ = { obj : { SuppressWarnings : [["checkstyle:ConstantName","checkstyle:FieldDocComment"]]}};
openfl_utils_AGALMiniAssembler.OPMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.REGMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.SAMPLEMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.MAX_NESTING = 4;
openfl_utils_AGALMiniAssembler.MAX_OPCODES = 4096;
openfl_utils_AGALMiniAssembler.FRAGMENT = "fragment";
openfl_utils_AGALMiniAssembler.VERTEX = "vertex";
openfl_utils_AGALMiniAssembler.SAMPLER_TYPE_SHIFT = 8;
openfl_utils_AGALMiniAssembler.SAMPLER_DIM_SHIFT = 12;
openfl_utils_AGALMiniAssembler.SAMPLER_SPECIAL_SHIFT = 16;
openfl_utils_AGALMiniAssembler.SAMPLER_REPEAT_SHIFT = 20;
openfl_utils_AGALMiniAssembler.SAMPLER_MIPMAP_SHIFT = 24;
openfl_utils_AGALMiniAssembler.SAMPLER_FILTER_SHIFT = 28;
openfl_utils_AGALMiniAssembler.REG_WRITE = 1;
openfl_utils_AGALMiniAssembler.REG_READ = 2;
openfl_utils_AGALMiniAssembler.REG_FRAG = 32;
openfl_utils_AGALMiniAssembler.REG_VERT = 64;
openfl_utils_AGALMiniAssembler.OP_SCALAR = 1;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_TEX = 8;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_MATRIX = 16;
openfl_utils_AGALMiniAssembler.OP_FRAG_ONLY = 32;
openfl_utils_AGALMiniAssembler.OP_VERT_ONLY = 64;
openfl_utils_AGALMiniAssembler.OP_NO_DEST = 128;
openfl_utils_AGALMiniAssembler.OP_VERSION2 = 256;
openfl_utils_AGALMiniAssembler.OP_INCNEST = 512;
openfl_utils_AGALMiniAssembler.OP_DECNEST = 1024;
openfl_utils_AGALMiniAssembler.MOV = "mov";
openfl_utils_AGALMiniAssembler.ADD = "add";
openfl_utils_AGALMiniAssembler.SUB = "sub";
openfl_utils_AGALMiniAssembler.MUL = "mul";
openfl_utils_AGALMiniAssembler.DIV = "div";
openfl_utils_AGALMiniAssembler.RCP = "rcp";
openfl_utils_AGALMiniAssembler.MIN = "min";
openfl_utils_AGALMiniAssembler.MAX = "max";
openfl_utils_AGALMiniAssembler.FRC = "frc";
openfl_utils_AGALMiniAssembler.SQT = "sqt";
openfl_utils_AGALMiniAssembler.RSQ = "rsq";
openfl_utils_AGALMiniAssembler.POW = "pow";
openfl_utils_AGALMiniAssembler.LOG = "log";
openfl_utils_AGALMiniAssembler.EXP = "exp";
openfl_utils_AGALMiniAssembler.NRM = "nrm";
openfl_utils_AGALMiniAssembler.SIN = "sin";
openfl_utils_AGALMiniAssembler.COS = "cos";
openfl_utils_AGALMiniAssembler.CRS = "crs";
openfl_utils_AGALMiniAssembler.DP3 = "dp3";
openfl_utils_AGALMiniAssembler.DP4 = "dp4";
openfl_utils_AGALMiniAssembler.ABS = "abs";
openfl_utils_AGALMiniAssembler.NEG = "neg";
openfl_utils_AGALMiniAssembler.SAT = "sat";
openfl_utils_AGALMiniAssembler.M33 = "m33";
openfl_utils_AGALMiniAssembler.M44 = "m44";
openfl_utils_AGALMiniAssembler.M34 = "m34";
openfl_utils_AGALMiniAssembler.DDX = "ddx";
openfl_utils_AGALMiniAssembler.DDY = "ddy";
openfl_utils_AGALMiniAssembler.IFE = "ife";
openfl_utils_AGALMiniAssembler.INE = "ine";
openfl_utils_AGALMiniAssembler.IFG = "ifg";
openfl_utils_AGALMiniAssembler.IFL = "ifl";
openfl_utils_AGALMiniAssembler.IEG = "ieg";
openfl_utils_AGALMiniAssembler.IEL = "iel";
openfl_utils_AGALMiniAssembler.ELS = "els";
openfl_utils_AGALMiniAssembler.EIF = "eif";
openfl_utils_AGALMiniAssembler.TED = "ted";
openfl_utils_AGALMiniAssembler.KIL = "kil";
openfl_utils_AGALMiniAssembler.TEX = "tex";
openfl_utils_AGALMiniAssembler.SGE = "sge";
openfl_utils_AGALMiniAssembler.SLT = "slt";
openfl_utils_AGALMiniAssembler.SGN = "sgn";
openfl_utils_AGALMiniAssembler.SEQ = "seq";
openfl_utils_AGALMiniAssembler.SNE = "sne";
openfl_utils_AGALMiniAssembler.VA = "va";
openfl_utils_AGALMiniAssembler.VC = "vc";
openfl_utils_AGALMiniAssembler.VT = "vt";
openfl_utils_AGALMiniAssembler.VO = "vo";
openfl_utils_AGALMiniAssembler.VI = "vi";
openfl_utils_AGALMiniAssembler.FC = "fc";
openfl_utils_AGALMiniAssembler.FT = "ft";
openfl_utils_AGALMiniAssembler.FS = "fs";
openfl_utils_AGALMiniAssembler.FO = "fo";
openfl_utils_AGALMiniAssembler.FD = "fd";
openfl_utils_AGALMiniAssembler.IID = "iid";
openfl_utils_AGALMiniAssembler.D2 = "2d";
openfl_utils_AGALMiniAssembler.D3 = "3d";
openfl_utils_AGALMiniAssembler.CUBE = "cube";
openfl_utils_AGALMiniAssembler.MIPNEAREST = "mipnearest";
openfl_utils_AGALMiniAssembler.MIPLINEAR = "miplinear";
openfl_utils_AGALMiniAssembler.MIPNONE = "mipnone";
openfl_utils_AGALMiniAssembler.NOMIP = "nomip";
openfl_utils_AGALMiniAssembler.NEAREST = "nearest";
openfl_utils_AGALMiniAssembler.LINEAR = "linear";
openfl_utils_AGALMiniAssembler.ANISOTROPIC2X = "anisotropic2x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC4X = "anisotropic4x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC8X = "anisotropic8x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC16X = "anisotropic16x";
openfl_utils_AGALMiniAssembler.CENTROID = "centroid";
openfl_utils_AGALMiniAssembler.SINGLE = "single";
openfl_utils_AGALMiniAssembler.IGNORESAMPLER = "ignoresampler";
openfl_utils_AGALMiniAssembler.REPEAT = "repeat";
openfl_utils_AGALMiniAssembler.WRAP = "wrap";
openfl_utils_AGALMiniAssembler.CLAMP = "clamp";
openfl_utils_AGALMiniAssembler.REPEAT_U_CLAMP_V = "repeat_u_clamp_v";
openfl_utils_AGALMiniAssembler.CLAMP_U_REPEAT_V = "clamp_u_repeat_v";
openfl_utils_AGALMiniAssembler.RGBA = "rgba";
openfl_utils_AGALMiniAssembler.COMPRESSED = "compressed";
openfl_utils_AGALMiniAssembler.COMPRESSEDALPHA = "compressedalpha";
openfl_utils_AGALMiniAssembler.DXT1 = "dxt1";
openfl_utils_AGALMiniAssembler.DXT5 = "dxt5";
openfl_utils_AGALMiniAssembler.VIDEO = "video";
openfl_utils_AGALMiniAssembler.initialized = false;
openfl_utils__$AGALMiniAssembler_OpCode.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$AGALMiniAssembler_Register.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$AGALMiniAssembler_Sampler.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils_Assets.cache = new openfl_utils_AssetCache();
openfl_utils_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_utils_ByteArray.__bytePointer = (function($this) {
	var $r;
	var this1 = new lime_utils_BytePointerData(null,0);
	$r = this1;
	return $r;
}(this));
openfl_utils_ByteArrayData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils_ByteArrayData.defaultObjectEncoding = 10;
openfl_utils_CompressionAlgorithm.DEFLATE = 0;
openfl_utils_CompressionAlgorithm.LZMA = 1;
openfl_utils_CompressionAlgorithm.ZLIB = 2;
openfl_utils__$Dictionary_ClassMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$Dictionary_FloatMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$Dictionary_UtilsObjectMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils_Endian.BIG_ENDIAN = 0;
openfl_utils_Endian.LITTLE_ENDIAN = 1;
openfl_utils_Object.__meta__ = { statics : { iterator : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, __get : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, __set : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
haxe_lang_Iterator.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
haxe_lang_Iterable.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$internal_Lib.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { notImplemented : { SuppressWarnings : ["checkstyle:NullableParameter"]}}};
openfl_utils__$internal_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl_utils__$internal_TouchData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { touch : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_utils__$internal_TouchData.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_utils__$internal_TouchData();
},function(data) {
	data.reset();
});
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=KK.js.map
});
$hx_exports.lime = $hx_exports.lime || {};
$hx_exports.lime.$scripts = $hx_exports.lime.$scripts || {};
$hx_exports.lime.$scripts["KK"] = $hx_script;
$hx_exports.lime.embed = function(projectName) { var exports = {};
	var script = $hx_exports.lime.$scripts[projectName];
	if (!script) throw Error("Cannot find project name \"" + projectName + "\"");
	script(exports, $global);
	for (var key in exports) $hx_exports[key] = $hx_exports[key] || exports[key];
	var lime = exports.lime || window.lime;
	if (lime && lime.embed && this != lime.embed) lime.embed.apply(lime, arguments);
	return exports;
};
if(typeof define == "function" && define.amd) {
	define([], function() { return $hx_exports.lime; });
	define.__amd = define.amd;
	define.amd = null;
}
})(typeof exports != "undefined" ? exports : typeof define == "function" && define.amd ? {} : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

/*! howler.js v2.1.1 | (c) 2013-2018, James Simpson of GoldFire Studios | MIT License | howlerjs.com */
!function(){"use strict";var e=function(){this.init()};e.prototype={init:function(){var e=this||n;return e._counter=1e3,e._html5AudioPool=[],e.html5PoolSize=10,e._codecs={},e._howls=[],e._muted=!1,e._volume=1,e._canPlayEvent="canplaythrough",e._navigator="undefined"!=typeof window&&window.navigator?window.navigator:null,e.masterGain=null,e.noAudio=!1,e.usingWebAudio=!0,e.autoSuspend=!0,e.ctx=null,e.autoUnlock=!0,e._setup(),e},volume:function(e){var o=this||n;if(e=parseFloat(e),o.ctx||_(),void 0!==e&&e>=0&&e<=1){if(o._volume=e,o._muted)return o;o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.volume=u._volume*e)}return o}return o._volume},mute:function(e){var o=this||n;o.ctx||_(),o._muted=e,o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e?0:o._volume,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.muted=!!e||u._muted)}return o},unload:function(){for(var e=this||n,o=e._howls.length-1;o>=0;o--)e._howls[o].unload();return e.usingWebAudio&&e.ctx&&void 0!==e.ctx.close&&(e.ctx.close(),e.ctx=null,_()),e},codecs:function(e){return(this||n)._codecs[e.replace(/^x-/,"")]},_setup:function(){var e=this||n;if(e.state=e.ctx?e.ctx.state||"suspended":"suspended",e._autoSuspend(),!e.usingWebAudio)if("undefined"!=typeof Audio)try{var o=new Audio;void 0===o.oncanplaythrough&&(e._canPlayEvent="canplay")}catch(n){e.noAudio=!0}else e.noAudio=!0;try{var o=new Audio;o.muted&&(e.noAudio=!0)}catch(e){}return e.noAudio||e._setupCodecs(),e},_setupCodecs:function(){var e=this||n,o=null;try{o="undefined"!=typeof Audio?new Audio:null}catch(n){return e}if(!o||"function"!=typeof o.canPlayType)return e;var t=o.canPlayType("audio/mpeg;").replace(/^no$/,""),r=e._navigator&&e._navigator.userAgent.match(/OPR\/([0-6].)/g),a=r&&parseInt(r[0].split("/")[1],10)<33;return e._codecs={mp3:!(a||!t&&!o.canPlayType("audio/mp3;").replace(/^no$/,"")),mpeg:!!t,opus:!!o.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),oga:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!o.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),aac:!!o.canPlayType("audio/aac;").replace(/^no$/,""),caf:!!o.canPlayType("audio/x-caf;").replace(/^no$/,""),m4a:!!(o.canPlayType("audio/x-m4a;")||o.canPlayType("audio/m4a;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(o.canPlayType("audio/x-mp4;")||o.canPlayType("audio/mp4;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),webm:!!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),dolby:!!o.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/,""),flac:!!(o.canPlayType("audio/x-flac;")||o.canPlayType("audio/flac;")).replace(/^no$/,"")},e},_unlockAudio:function(){var e=this||n,o=/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome|Safari/i.test(e._navigator&&e._navigator.userAgent);if(!e._audioUnlocked&&e.ctx&&o){e._audioUnlocked=!1,e.autoUnlock=!1,e._mobileUnloaded||44100===e.ctx.sampleRate||(e._mobileUnloaded=!0,e.unload()),e._scratchBuffer=e.ctx.createBuffer(1,1,22050);var t=function(n){for(var o=0;o<e.html5PoolSize;o++){var r=new Audio;r._unlocked=!0,e._releaseHtml5Audio(r)}for(var o=0;o<e._howls.length;o++)if(!e._howls[o]._webAudio)for(var a=e._howls[o]._getSoundIds(),u=0;u<a.length;u++){var i=e._howls[o]._soundById(a[u]);i&&i._node&&!i._node._unlocked&&(i._node._unlocked=!0,i._node.load())}e._autoResume();var d=e.ctx.createBufferSource();d.buffer=e._scratchBuffer,d.connect(e.ctx.destination),void 0===d.start?d.noteOn(0):d.start(0),"function"==typeof e.ctx.resume&&e.ctx.resume(),d.onended=function(){d.disconnect(0),e._audioUnlocked=!0,document.removeEventListener("touchstart",t,!0),document.removeEventListener("touchend",t,!0),document.removeEventListener("click",t,!0);for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("unlock")}};return document.addEventListener("touchstart",t,!0),document.addEventListener("touchend",t,!0),document.addEventListener("click",t,!0),e}},_obtainHtml5Audio:function(){var e=this||n;if(e._html5AudioPool.length)return e._html5AudioPool.pop();var o=(new Audio).play();return o&&"undefined"!=typeof Promise&&(o instanceof Promise||"function"==typeof o.then)&&o.catch(function(){console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.")}),new Audio},_releaseHtml5Audio:function(e){var o=this||n;return e._unlocked&&o._html5AudioPool.push(e),o},_autoSuspend:function(){var e=this;if(e.autoSuspend&&e.ctx&&void 0!==e.ctx.suspend&&n.usingWebAudio){for(var o=0;o<e._howls.length;o++)if(e._howls[o]._webAudio)for(var t=0;t<e._howls[o]._sounds.length;t++)if(!e._howls[o]._sounds[t]._paused)return e;return e._suspendTimer&&clearTimeout(e._suspendTimer),e._suspendTimer=setTimeout(function(){e.autoSuspend&&(e._suspendTimer=null,e.state="suspending",e.ctx.suspend().then(function(){e.state="suspended",e._resumeAfterSuspend&&(delete e._resumeAfterSuspend,e._autoResume())}))},3e4),e}},_autoResume:function(){var e=this;if(e.ctx&&void 0!==e.ctx.resume&&n.usingWebAudio)return"running"===e.state&&e._suspendTimer?(clearTimeout(e._suspendTimer),e._suspendTimer=null):"suspended"===e.state?(e.ctx.resume().then(function(){e.state="running";for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("resume")}),e._suspendTimer&&(clearTimeout(e._suspendTimer),e._suspendTimer=null)):"suspending"===e.state&&(e._resumeAfterSuspend=!0),e}};var n=new e,o=function(e){var n=this;if(!e.src||0===e.src.length)return void console.error("An array of source files must be passed with any new Howl.");n.init(e)};o.prototype={init:function(e){var o=this;return n.ctx||_(),o._autoplay=e.autoplay||!1,o._format="string"!=typeof e.format?e.format:[e.format],o._html5=e.html5||!1,o._muted=e.mute||!1,o._loop=e.loop||!1,o._pool=e.pool||5,o._preload="boolean"!=typeof e.preload||e.preload,o._rate=e.rate||1,o._sprite=e.sprite||{},o._src="string"!=typeof e.src?e.src:[e.src],o._volume=void 0!==e.volume?e.volume:1,o._xhrWithCredentials=e.xhrWithCredentials||!1,o._duration=0,o._state="unloaded",o._sounds=[],o._endTimers={},o._queue=[],o._playLock=!1,o._onend=e.onend?[{fn:e.onend}]:[],o._onfade=e.onfade?[{fn:e.onfade}]:[],o._onload=e.onload?[{fn:e.onload}]:[],o._onloaderror=e.onloaderror?[{fn:e.onloaderror}]:[],o._onplayerror=e.onplayerror?[{fn:e.onplayerror}]:[],o._onpause=e.onpause?[{fn:e.onpause}]:[],o._onplay=e.onplay?[{fn:e.onplay}]:[],o._onstop=e.onstop?[{fn:e.onstop}]:[],o._onmute=e.onmute?[{fn:e.onmute}]:[],o._onvolume=e.onvolume?[{fn:e.onvolume}]:[],o._onrate=e.onrate?[{fn:e.onrate}]:[],o._onseek=e.onseek?[{fn:e.onseek}]:[],o._onunlock=e.onunlock?[{fn:e.onunlock}]:[],o._onresume=[],o._webAudio=n.usingWebAudio&&!o._html5,void 0!==n.ctx&&n.ctx&&n.autoUnlock&&n._unlockAudio(),n._howls.push(o),o._autoplay&&o._queue.push({event:"play",action:function(){o.play()}}),o._preload&&o.load(),o},load:function(){var e=this,o=null;if(n.noAudio)return void e._emit("loaderror",null,"No audio support.");"string"==typeof e._src&&(e._src=[e._src]);for(var r=0;r<e._src.length;r++){var u,i;if(e._format&&e._format[r])u=e._format[r];else{if("string"!=typeof(i=e._src[r])){e._emit("loaderror",null,"Non-string found in selected audio sources - ignoring.");continue}u=/^data:audio\/([^;,]+);/i.exec(i),u||(u=/\.([^.]+)$/.exec(i.split("?",1)[0])),u&&(u=u[1].toLowerCase())}if(u||console.warn('No file extension was found. Consider using the "format" property or specify an extension.'),u&&n.codecs(u)){o=e._src[r];break}}return o?(e._src=o,e._state="loading","https:"===window.location.protocol&&"http:"===o.slice(0,5)&&(e._html5=!0,e._webAudio=!1),new t(e),e._webAudio&&a(e),e):void e._emit("loaderror",null,"No codec support for selected audio sources.")},play:function(e,o){var t=this,r=null;if("number"==typeof e)r=e,e=null;else{if("string"==typeof e&&"loaded"===t._state&&!t._sprite[e])return null;if(void 0===e&&(e="__default",!t._playLock)){for(var a=0,u=0;u<t._sounds.length;u++)t._sounds[u]._paused&&!t._sounds[u]._ended&&(a++,r=t._sounds[u]._id);1===a?e=null:r=null}}var i=r?t._soundById(r):t._inactiveSound();if(!i)return null;if(r&&!e&&(e=i._sprite||"__default"),"loaded"!==t._state){i._sprite=e,i._ended=!1;var d=i._id;return t._queue.push({event:"play",action:function(){t.play(d)}}),d}if(r&&!i._paused)return o||t._loadQueue("play"),i._id;t._webAudio&&n._autoResume();var _=Math.max(0,i._seek>0?i._seek:t._sprite[e][0]/1e3),s=Math.max(0,(t._sprite[e][0]+t._sprite[e][1])/1e3-_),l=1e3*s/Math.abs(i._rate),c=t._sprite[e][0]/1e3,f=(t._sprite[e][0]+t._sprite[e][1])/1e3,p=!(!i._loop&&!t._sprite[e][2]);i._sprite=e,i._ended=!1;var m=function(){i._paused=!1,i._seek=_,i._start=c,i._stop=f,i._loop=p};if(_>=f)return void t._ended(i);var v=i._node;if(t._webAudio){var h=function(){t._playLock=!1,m(),t._refreshBuffer(i);var e=i._muted||t._muted?0:i._volume;v.gain.setValueAtTime(e,n.ctx.currentTime),i._playStart=n.ctx.currentTime,void 0===v.bufferSource.start?i._loop?v.bufferSource.noteGrainOn(0,_,86400):v.bufferSource.noteGrainOn(0,_,s):i._loop?v.bufferSource.start(0,_,86400):v.bufferSource.start(0,_,s),l!==1/0&&(t._endTimers[i._id]=setTimeout(t._ended.bind(t,i),l)),o||setTimeout(function(){t._emit("play",i._id),t._loadQueue()},0)};"running"===n.state?h():(t._playLock=!0,t.once("resume",h),t._clearTimer(i._id))}else{var y=function(){v.currentTime=_,v.muted=i._muted||t._muted||n._muted||v.muted,v.volume=i._volume*n.volume(),v.playbackRate=i._rate;try{var r=v.play();if(r&&"undefined"!=typeof Promise&&(r instanceof Promise||"function"==typeof r.then)?(t._playLock=!0,m(),r.then(function(){t._playLock=!1,v._unlocked=!0,o||(t._emit("play",i._id),t._loadQueue())}).catch(function(){t._playLock=!1,t._emit("playerror",i._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."),i._ended=!0,i._paused=!0})):o||(t._playLock=!1,m(),t._emit("play",i._id),t._loadQueue()),v.playbackRate=i._rate,v.paused)return void t._emit("playerror",i._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");"__default"!==e||i._loop?t._endTimers[i._id]=setTimeout(t._ended.bind(t,i),l):(t._endTimers[i._id]=function(){t._ended(i),v.removeEventListener("ended",t._endTimers[i._id],!1)},v.addEventListener("ended",t._endTimers[i._id],!1))}catch(e){t._emit("playerror",i._id,e)}},g=window&&window.ejecta||!v.readyState&&n._navigator.isCocoonJS;if(v.readyState>=3||g)y();else{t._playLock=!0;var b=function(){y(),v.removeEventListener(n._canPlayEvent,b,!1)};v.addEventListener(n._canPlayEvent,b,!1),t._clearTimer(i._id)}}return i._id},pause:function(e){var n=this;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"pause",action:function(){n.pause(e)}}),n;for(var o=n._getSoundIds(e),t=0;t<o.length;t++){n._clearTimer(o[t]);var r=n._soundById(o[t]);if(r&&!r._paused&&(r._seek=n.seek(o[t]),r._rateSeek=0,r._paused=!0,n._stopFade(o[t]),r._node))if(n._webAudio){if(!r._node.bufferSource)continue;void 0===r._node.bufferSource.stop?r._node.bufferSource.noteOff(0):r._node.bufferSource.stop(0),n._cleanBuffer(r._node)}else isNaN(r._node.duration)&&r._node.duration!==1/0||r._node.pause();arguments[1]||n._emit("pause",r?r._id:null)}return n},stop:function(e,n){var o=this;if("loaded"!==o._state||o._playLock)return o._queue.push({event:"stop",action:function(){o.stop(e)}}),o;for(var t=o._getSoundIds(e),r=0;r<t.length;r++){o._clearTimer(t[r]);var a=o._soundById(t[r]);a&&(a._seek=a._start||0,a._rateSeek=0,a._paused=!0,a._ended=!0,o._stopFade(t[r]),a._node&&(o._webAudio?a._node.bufferSource&&(void 0===a._node.bufferSource.stop?a._node.bufferSource.noteOff(0):a._node.bufferSource.stop(0),o._cleanBuffer(a._node)):isNaN(a._node.duration)&&a._node.duration!==1/0||(a._node.currentTime=a._start||0,a._node.pause())),n||o._emit("stop",a._id))}return o},mute:function(e,o){var t=this;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"mute",action:function(){t.mute(e,o)}}),t;if(void 0===o){if("boolean"!=typeof e)return t._muted;t._muted=e}for(var r=t._getSoundIds(o),a=0;a<r.length;a++){var u=t._soundById(r[a]);u&&(u._muted=e,u._interval&&t._stopFade(u._id),t._webAudio&&u._node?u._node.gain.setValueAtTime(e?0:u._volume,n.ctx.currentTime):u._node&&(u._node.muted=!!n._muted||e),t._emit("mute",u._id))}return t},volume:function(){var e,o,t=this,r=arguments;if(0===r.length)return t._volume;if(1===r.length||2===r.length&&void 0===r[1]){t._getSoundIds().indexOf(r[0])>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else r.length>=2&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var a;if(!(void 0!==e&&e>=0&&e<=1))return a=o?t._soundById(o):t._sounds[0],a?a._volume:0;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"volume",action:function(){t.volume.apply(t,r)}}),t;void 0===o&&(t._volume=e),o=t._getSoundIds(o);for(var u=0;u<o.length;u++)(a=t._soundById(o[u]))&&(a._volume=e,r[2]||t._stopFade(o[u]),t._webAudio&&a._node&&!a._muted?a._node.gain.setValueAtTime(e,n.ctx.currentTime):a._node&&!a._muted&&(a._node.volume=e*n.volume()),t._emit("volume",a._id));return t},fade:function(e,o,t,r){var a=this;if("loaded"!==a._state||a._playLock)return a._queue.push({event:"fade",action:function(){a.fade(e,o,t,r)}}),a;e=parseFloat(e),o=parseFloat(o),t=parseFloat(t),a.volume(e,r);for(var u=a._getSoundIds(r),i=0;i<u.length;i++){var d=a._soundById(u[i]);if(d){if(r||a._stopFade(u[i]),a._webAudio&&!d._muted){var _=n.ctx.currentTime,s=_+t/1e3;d._volume=e,d._node.gain.setValueAtTime(e,_),d._node.gain.linearRampToValueAtTime(o,s)}a._startFadeInterval(d,e,o,t,u[i],void 0===r)}}return a},_startFadeInterval:function(e,n,o,t,r,a){var u=this,i=n,d=o-n,_=Math.abs(d/.01),s=Math.max(4,_>0?t/_:t),l=Date.now();e._fadeTo=o,e._interval=setInterval(function(){var r=(Date.now()-l)/t;l=Date.now(),i+=d*r,i=Math.max(0,i),i=Math.min(1,i),i=Math.round(100*i)/100,u._webAudio?e._volume=i:u.volume(i,e._id,!0),a&&(u._volume=i),(o<n&&i<=o||o>n&&i>=o)&&(clearInterval(e._interval),e._interval=null,e._fadeTo=null,u.volume(o,e._id),u._emit("fade",e._id))},s)},_stopFade:function(e){var o=this,t=o._soundById(e);return t&&t._interval&&(o._webAudio&&t._node.gain.cancelScheduledValues(n.ctx.currentTime),clearInterval(t._interval),t._interval=null,o.volume(t._fadeTo,e),t._fadeTo=null,o._emit("fade",e)),o},loop:function(){var e,n,o,t=this,r=arguments;if(0===r.length)return t._loop;if(1===r.length){if("boolean"!=typeof r[0])return!!(o=t._soundById(parseInt(r[0],10)))&&o._loop;e=r[0],t._loop=e}else 2===r.length&&(e=r[0],n=parseInt(r[1],10));for(var a=t._getSoundIds(n),u=0;u<a.length;u++)(o=t._soundById(a[u]))&&(o._loop=e,t._webAudio&&o._node&&o._node.bufferSource&&(o._node.bufferSource.loop=e,e&&(o._node.bufferSource.loopStart=o._start||0,o._node.bufferSource.loopEnd=o._stop)));return t},rate:function(){var e,o,t=this,r=arguments;if(0===r.length)o=t._sounds[0]._id;else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var i;if("number"!=typeof e)return i=t._soundById(o),i?i._rate:t._rate;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"rate",action:function(){t.rate.apply(t,r)}}),t;void 0===o&&(t._rate=e),o=t._getSoundIds(o);for(var d=0;d<o.length;d++)if(i=t._soundById(o[d])){t.playing(o[d])&&(i._rateSeek=t.seek(o[d]),i._playStart=t._webAudio?n.ctx.currentTime:i._playStart),i._rate=e,t._webAudio&&i._node&&i._node.bufferSource?i._node.bufferSource.playbackRate.setValueAtTime(e,n.ctx.currentTime):i._node&&(i._node.playbackRate=e);var _=t.seek(o[d]),s=(t._sprite[i._sprite][0]+t._sprite[i._sprite][1])/1e3-_,l=1e3*s/Math.abs(i._rate);!t._endTimers[o[d]]&&i._paused||(t._clearTimer(o[d]),t._endTimers[o[d]]=setTimeout(t._ended.bind(t,i),l)),t._emit("rate",i._id)}return t},seek:function(){var e,o,t=this,r=arguments;if(0===r.length)o=t._sounds[0]._id;else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):t._sounds.length&&(o=t._sounds[0]._id,e=parseFloat(r[0]))}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));if(void 0===o)return t;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"seek",action:function(){t.seek.apply(t,r)}}),t;var i=t._soundById(o);if(i){if(!("number"==typeof e&&e>=0)){if(t._webAudio){var d=t.playing(o)?n.ctx.currentTime-i._playStart:0,_=i._rateSeek?i._rateSeek-i._seek:0;return i._seek+(_+d*Math.abs(i._rate))}return i._node.currentTime}var s=t.playing(o);s&&t.pause(o,!0),i._seek=e,i._ended=!1,t._clearTimer(o),t._webAudio||!i._node||isNaN(i._node.duration)||(i._node.currentTime=e);var l=function(){t._emit("seek",o),s&&t.play(o,!0)};if(s&&!t._webAudio){var c=function(){t._playLock?setTimeout(c,0):l()};setTimeout(c,0)}else l()}return t},playing:function(e){var n=this;if("number"==typeof e){var o=n._soundById(e);return!!o&&!o._paused}for(var t=0;t<n._sounds.length;t++)if(!n._sounds[t]._paused)return!0;return!1},duration:function(e){var n=this,o=n._duration,t=n._soundById(e);return t&&(o=n._sprite[t._sprite][1]/1e3),o},state:function(){return this._state},unload:function(){for(var e=this,o=e._sounds,t=0;t<o.length;t++){if(o[t]._paused||e.stop(o[t]._id),!e._webAudio){/MSIE |Trident\//.test(n._navigator&&n._navigator.userAgent)||(o[t]._node.src="data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"),o[t]._node.removeEventListener("error",o[t]._errorFn,!1),o[t]._node.removeEventListener(n._canPlayEvent,o[t]._loadFn,!1),n._releaseHtml5Audio(o[t]._node)}delete o[t]._node,e._clearTimer(o[t]._id)}var a=n._howls.indexOf(e);a>=0&&n._howls.splice(a,1);var u=!0;for(t=0;t<n._howls.length;t++)if(n._howls[t]._src===e._src||e._src.indexOf(n._howls[t]._src)>=0){u=!1;break}return r&&u&&delete r[e._src],n.noAudio=!1,e._state="unloaded",e._sounds=[],e=null,null},on:function(e,n,o,t){var r=this,a=r["_on"+e];return"function"==typeof n&&a.push(t?{id:o,fn:n,once:t}:{id:o,fn:n}),r},off:function(e,n,o){var t=this,r=t["_on"+e],a=0;if("number"==typeof n&&(o=n,n=null),n||o)for(a=0;a<r.length;a++){var u=o===r[a].id;if(n===r[a].fn&&u||!n&&u){r.splice(a,1);break}}else if(e)t["_on"+e]=[];else{var i=Object.keys(t);for(a=0;a<i.length;a++)0===i[a].indexOf("_on")&&Array.isArray(t[i[a]])&&(t[i[a]]=[])}return t},once:function(e,n,o){var t=this;return t.on(e,n,o,1),t},_emit:function(e,n,o){for(var t=this,r=t["_on"+e],a=r.length-1;a>=0;a--)r[a].id&&r[a].id!==n&&"load"!==e||(setTimeout(function(e){e.call(this,n,o)}.bind(t,r[a].fn),0),r[a].once&&t.off(e,r[a].fn,r[a].id));return t._loadQueue(e),t},_loadQueue:function(e){var n=this;if(n._queue.length>0){var o=n._queue[0];o.event===e&&(n._queue.shift(),n._loadQueue()),e||o.action()}return n},_ended:function(e){var o=this,t=e._sprite;if(!o._webAudio&&e._node&&!e._node.paused&&!e._node.ended&&e._node.currentTime<e._stop)return setTimeout(o._ended.bind(o,e),100),o;var r=!(!e._loop&&!o._sprite[t][2]);if(o._emit("end",e._id),!o._webAudio&&r&&o.stop(e._id,!0).play(e._id),o._webAudio&&r){o._emit("play",e._id),e._seek=e._start||0,e._rateSeek=0,e._playStart=n.ctx.currentTime;var a=1e3*(e._stop-e._start)/Math.abs(e._rate);o._endTimers[e._id]=setTimeout(o._ended.bind(o,e),a)}return o._webAudio&&!r&&(e._paused=!0,e._ended=!0,e._seek=e._start||0,e._rateSeek=0,o._clearTimer(e._id),o._cleanBuffer(e._node),n._autoSuspend()),o._webAudio||r||o.stop(e._id,!0),o},_clearTimer:function(e){var n=this;if(n._endTimers[e]){if("function"!=typeof n._endTimers[e])clearTimeout(n._endTimers[e]);else{var o=n._soundById(e);o&&o._node&&o._node.removeEventListener("ended",n._endTimers[e],!1)}delete n._endTimers[e]}return n},_soundById:function(e){for(var n=this,o=0;o<n._sounds.length;o++)if(e===n._sounds[o]._id)return n._sounds[o];return null},_inactiveSound:function(){var e=this;e._drain();for(var n=0;n<e._sounds.length;n++)if(e._sounds[n]._ended)return e._sounds[n].reset();return new t(e)},_drain:function(){var e=this,n=e._pool,o=0,t=0;if(!(e._sounds.length<n)){for(t=0;t<e._sounds.length;t++)e._sounds[t]._ended&&o++;for(t=e._sounds.length-1;t>=0;t--){if(o<=n)return;e._sounds[t]._ended&&(e._webAudio&&e._sounds[t]._node&&e._sounds[t]._node.disconnect(0),e._sounds.splice(t,1),o--)}}},_getSoundIds:function(e){var n=this;if(void 0===e){for(var o=[],t=0;t<n._sounds.length;t++)o.push(n._sounds[t]._id);return o}return[e]},_refreshBuffer:function(e){var o=this;return e._node.bufferSource=n.ctx.createBufferSource(),e._node.bufferSource.buffer=r[o._src],e._panner?e._node.bufferSource.connect(e._panner):e._node.bufferSource.connect(e._node),e._node.bufferSource.loop=e._loop,e._loop&&(e._node.bufferSource.loopStart=e._start||0,e._node.bufferSource.loopEnd=e._stop||0),e._node.bufferSource.playbackRate.setValueAtTime(e._rate,n.ctx.currentTime),o},_cleanBuffer:function(e){var o=this,t=n._navigator&&n._navigator.vendor.indexOf("Apple")>=0;if(n._scratchBuffer&&e.bufferSource&&(e.bufferSource.onended=null,e.bufferSource.disconnect(0),t))try{e.bufferSource.buffer=n._scratchBuffer}catch(e){}return e.bufferSource=null,o}};var t=function(e){this._parent=e,this.init()};t.prototype={init:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,o._sounds.push(e),e.create(),e},create:function(){var e=this,o=e._parent,t=n._muted||e._muted||e._parent._muted?0:e._volume;return o._webAudio?(e._node=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),e._node.gain.setValueAtTime(t,n.ctx.currentTime),e._node.paused=!0,e._node.connect(n.masterGain)):(e._node=n._obtainHtml5Audio(),e._errorFn=e._errorListener.bind(e),e._node.addEventListener("error",e._errorFn,!1),e._loadFn=e._loadListener.bind(e),e._node.addEventListener(n._canPlayEvent,e._loadFn,!1),e._node.src=o._src,e._node.preload="auto",e._node.volume=t*n.volume(),e._node.load()),e},reset:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._rateSeek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,e},_errorListener:function(){var e=this;e._parent._emit("loaderror",e._id,e._node.error?e._node.error.code:0),e._node.removeEventListener("error",e._errorFn,!1)},_loadListener:function(){var e=this,o=e._parent;o._duration=Math.ceil(10*e._node.duration)/10,0===Object.keys(o._sprite).length&&(o._sprite={__default:[0,1e3*o._duration]}),"loaded"!==o._state&&(o._state="loaded",o._emit("load"),o._loadQueue()),e._node.removeEventListener(n._canPlayEvent,e._loadFn,!1)}};var r={},a=function(e){var n=e._src;if(r[n])return e._duration=r[n].duration,void d(e);if(/^data:[^;]+;base64,/.test(n)){for(var o=atob(n.split(",")[1]),t=new Uint8Array(o.length),a=0;a<o.length;++a)t[a]=o.charCodeAt(a);i(t.buffer,e)}else{var _=new XMLHttpRequest;_.open("GET",n,!0),_.withCredentials=e._xhrWithCredentials,_.responseType="arraybuffer",_.onload=function(){var n=(_.status+"")[0];if("0"!==n&&"2"!==n&&"3"!==n)return void e._emit("loaderror",null,"Failed loading audio file with status: "+_.status+".");i(_.response,e)},_.onerror=function(){e._webAudio&&(e._html5=!0,e._webAudio=!1,e._sounds=[],delete r[n],e.load())},u(_)}},u=function(e){try{e.send()}catch(n){e.onerror()}},i=function(e,o){var t=function(){o._emit("loaderror",null,"Decoding audio data failed.")},a=function(e){e&&o._sounds.length>0?(r[o._src]=e,d(o,e)):t()};"undefined"!=typeof Promise&&1===n.ctx.decodeAudioData.length?n.ctx.decodeAudioData(e).then(a).catch(t):n.ctx.decodeAudioData(e,a,t)},d=function(e,n){n&&!e._duration&&(e._duration=n.duration),0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),"loaded"!==e._state&&(e._state="loaded",e._emit("load"),e._loadQueue())},_=function(){if(n.usingWebAudio){try{"undefined"!=typeof AudioContext?n.ctx=new AudioContext:"undefined"!=typeof webkitAudioContext?n.ctx=new webkitAudioContext:n.usingWebAudio=!1}catch(e){n.usingWebAudio=!1}n.ctx||(n.usingWebAudio=!1);var e=/iP(hone|od|ad)/.test(n._navigator&&n._navigator.platform),o=n._navigator&&n._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),t=o?parseInt(o[1],10):null;if(e&&t&&t<9){var r=/safari/.test(n._navigator&&n._navigator.userAgent.toLowerCase());(n._navigator&&n._navigator.standalone&&!r||n._navigator&&!n._navigator.standalone&&!r)&&(n.usingWebAudio=!1)}n.usingWebAudio&&(n.masterGain=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),n.masterGain.gain.setValueAtTime(n._muted?0:1,n.ctx.currentTime),n.masterGain.connect(n.ctx.destination)),n._setup()}};"function"==typeof define&&define.amd&&define([],function(){return{Howler:n,Howl:o}}),"undefined"!=typeof exports&&(exports.Howler=n,exports.Howl=o),"undefined"!=typeof window?(window.HowlerGlobal=e,window.Howler=n,window.Howl=o,window.Sound=t):"undefined"!=typeof global&&(global.HowlerGlobal=e,global.Howler=n,global.Howl=o,global.Sound=t)}();
/*! Spatial Plugin */
!function(){"use strict";HowlerGlobal.prototype._pos=[0,0,0],HowlerGlobal.prototype._orientation=[0,0,-1,0,1,0],HowlerGlobal.prototype.stereo=function(e){var n=this;if(!n.ctx||!n.ctx.listener)return n;for(var t=n._howls.length-1;t>=0;t--)n._howls[t].stereo(e);return n},HowlerGlobal.prototype.pos=function(e,n,t){var r=this;return r.ctx&&r.ctx.listener?(n="number"!=typeof n?r._pos[1]:n,t="number"!=typeof t?r._pos[2]:t,"number"!=typeof e?r._pos:(r._pos=[e,n,t],void 0!==r.ctx.listener.positionX?(r.ctx.listener.positionX.setTargetAtTime(r._pos[0],Howler.ctx.currentTime,.1),r.ctx.listener.positionY.setTargetAtTime(r._pos[1],Howler.ctx.currentTime,.1),r.ctx.listener.positionZ.setTargetAtTime(r._pos[2],Howler.ctx.currentTime,.1)):r.ctx.listener.setPosition(r._pos[0],r._pos[1],r._pos[2]),r)):r},HowlerGlobal.prototype.orientation=function(e,n,t,r,o,i){var a=this;if(!a.ctx||!a.ctx.listener)return a;var s=a._orientation;return n="number"!=typeof n?s[1]:n,t="number"!=typeof t?s[2]:t,r="number"!=typeof r?s[3]:r,o="number"!=typeof o?s[4]:o,i="number"!=typeof i?s[5]:i,"number"!=typeof e?s:(a._orientation=[e,n,t,r,o,i],void 0!==a.ctx.listener.forwardX?(a.ctx.listener.forwardX.setTargetAtTime(e,Howler.ctx.currentTime,.1),a.ctx.listener.forwardY.setTargetAtTime(n,Howler.ctx.currentTime,.1),a.ctx.listener.forwardZ.setTargetAtTime(t,Howler.ctx.currentTime,.1),a.ctx.listener.upX.setTargetAtTime(e,Howler.ctx.currentTime,.1),a.ctx.listener.upY.setTargetAtTime(n,Howler.ctx.currentTime,.1),a.ctx.listener.upZ.setTargetAtTime(t,Howler.ctx.currentTime,.1)):a.ctx.listener.setOrientation(e,n,t,r,o,i),a)},Howl.prototype.init=function(e){return function(n){var t=this;return t._orientation=n.orientation||[1,0,0],t._stereo=n.stereo||null,t._pos=n.pos||null,t._pannerAttr={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:360,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:360,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:0,distanceModel:void 0!==n.distanceModel?n.distanceModel:"inverse",maxDistance:void 0!==n.maxDistance?n.maxDistance:1e4,panningModel:void 0!==n.panningModel?n.panningModel:"HRTF",refDistance:void 0!==n.refDistance?n.refDistance:1,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:1},t._onstereo=n.onstereo?[{fn:n.onstereo}]:[],t._onpos=n.onpos?[{fn:n.onpos}]:[],t._onorientation=n.onorientation?[{fn:n.onorientation}]:[],e.call(this,n)}}(Howl.prototype.init),Howl.prototype.stereo=function(n,t){var r=this;if(!r._webAudio)return r;if("loaded"!==r._state)return r._queue.push({event:"stereo",action:function(){r.stereo(n,t)}}),r;var o=void 0===Howler.ctx.createStereoPanner?"spatial":"stereo";if(void 0===t){if("number"!=typeof n)return r._stereo;r._stereo=n,r._pos=[n,0,0]}for(var i=r._getSoundIds(t),a=0;a<i.length;a++){var s=r._soundById(i[a]);if(s){if("number"!=typeof n)return s._stereo;s._stereo=n,s._pos=[n,0,0],s._node&&(s._pannerAttr.panningModel="equalpower",s._panner&&s._panner.pan||e(s,o),"spatial"===o?void 0!==s._panner.positionX?(s._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),s._panner.positionY.setValueAtTime(0,Howler.ctx.currentTime),s._panner.positionZ.setValueAtTime(0,Howler.ctx.currentTime)):s._panner.setPosition(n,0,0):s._panner.pan.setValueAtTime(n,Howler.ctx.currentTime)),r._emit("stereo",s._id)}}return r},Howl.prototype.pos=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"pos",action:function(){i.pos(n,t,r,o)}}),i;if(t="number"!=typeof t?0:t,r="number"!=typeof r?-.5:r,void 0===o){if("number"!=typeof n)return i._pos;i._pos=[n,t,r]}for(var a=i._getSoundIds(o),s=0;s<a.length;s++){var p=i._soundById(a[s]);if(p){if("number"!=typeof n)return p._pos;p._pos=[n,t,r],p._node&&(p._panner&&!p._panner.pan||e(p,"spatial"),void 0!==p._panner.positionX?(p._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),p._panner.positionY.setValueAtTime(t,Howler.ctx.currentTime),p._panner.positionZ.setValueAtTime(r,Howler.ctx.currentTime)):p._panner.setPosition(n,t,r)),i._emit("pos",p._id)}}return i},Howl.prototype.orientation=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"orientation",action:function(){i.orientation(n,t,r,o)}}),i;if(t="number"!=typeof t?i._orientation[1]:t,r="number"!=typeof r?i._orientation[2]:r,void 0===o){if("number"!=typeof n)return i._orientation;i._orientation=[n,t,r]}for(var a=i._getSoundIds(o),s=0;s<a.length;s++){var p=i._soundById(a[s]);if(p){if("number"!=typeof n)return p._orientation;p._orientation=[n,t,r],p._node&&(p._panner||(p._pos||(p._pos=i._pos||[0,0,-.5]),e(p,"spatial")),void 0!==p._panner.orientationX?(p._panner.orientationX.setValueAtTime(n,Howler.ctx.currentTime),p._panner.orientationY.setValueAtTime(t,Howler.ctx.currentTime),p._panner.orientationZ.setValueAtTime(r,Howler.ctx.currentTime)):p._panner.setOrientation(n,t,r)),i._emit("orientation",p._id)}}return i},Howl.prototype.pannerAttr=function(){var n,t,r,o=this,i=arguments;if(!o._webAudio)return o;if(0===i.length)return o._pannerAttr;if(1===i.length){if("object"!=typeof i[0])return r=o._soundById(parseInt(i[0],10)),r?r._pannerAttr:o._pannerAttr;n=i[0],void 0===t&&(n.pannerAttr||(n.pannerAttr={coneInnerAngle:n.coneInnerAngle,coneOuterAngle:n.coneOuterAngle,coneOuterGain:n.coneOuterGain,distanceModel:n.distanceModel,maxDistance:n.maxDistance,refDistance:n.refDistance,rolloffFactor:n.rolloffFactor,panningModel:n.panningModel}),o._pannerAttr={coneInnerAngle:void 0!==n.pannerAttr.coneInnerAngle?n.pannerAttr.coneInnerAngle:o._coneInnerAngle,coneOuterAngle:void 0!==n.pannerAttr.coneOuterAngle?n.pannerAttr.coneOuterAngle:o._coneOuterAngle,coneOuterGain:void 0!==n.pannerAttr.coneOuterGain?n.pannerAttr.coneOuterGain:o._coneOuterGain,distanceModel:void 0!==n.pannerAttr.distanceModel?n.pannerAttr.distanceModel:o._distanceModel,maxDistance:void 0!==n.pannerAttr.maxDistance?n.pannerAttr.maxDistance:o._maxDistance,refDistance:void 0!==n.pannerAttr.refDistance?n.pannerAttr.refDistance:o._refDistance,rolloffFactor:void 0!==n.pannerAttr.rolloffFactor?n.pannerAttr.rolloffFactor:o._rolloffFactor,panningModel:void 0!==n.pannerAttr.panningModel?n.pannerAttr.panningModel:o._panningModel})}else 2===i.length&&(n=i[0],t=parseInt(i[1],10));for(var a=o._getSoundIds(t),s=0;s<a.length;s++)if(r=o._soundById(a[s])){var p=r._pannerAttr;p={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:p.coneInnerAngle,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:p.coneOuterAngle,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:p.coneOuterGain,distanceModel:void 0!==n.distanceModel?n.distanceModel:p.distanceModel,maxDistance:void 0!==n.maxDistance?n.maxDistance:p.maxDistance,refDistance:void 0!==n.refDistance?n.refDistance:p.refDistance,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:p.rolloffFactor,panningModel:void 0!==n.panningModel?n.panningModel:p.panningModel};var c=r._panner;c?(c.coneInnerAngle=p.coneInnerAngle,c.coneOuterAngle=p.coneOuterAngle,c.coneOuterGain=p.coneOuterGain,c.distanceModel=p.distanceModel,c.maxDistance=p.maxDistance,c.refDistance=p.refDistance,c.rolloffFactor=p.rolloffFactor,c.panningModel=p.panningModel):(r._pos||(r._pos=o._pos||[0,0,-.5]),e(r,"spatial"))}return o},Sound.prototype.init=function(e){return function(){var n=this,t=n._parent;n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,e.call(this),n._stereo?t.stereo(n._stereo):n._pos&&t.pos(n._pos[0],n._pos[1],n._pos[2],n._id)}}(Sound.prototype.init),Sound.prototype.reset=function(e){return function(){var n=this,t=n._parent;return n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,n._stereo?t.stereo(n._stereo):n._pos?t.pos(n._pos[0],n._pos[1],n._pos[2],n._id):n._panner&&(n._panner.disconnect(0),n._panner=void 0,t._refreshBuffer(n)),e.call(this)}}(Sound.prototype.reset);var e=function(e,n){n=n||"spatial","spatial"===n?(e._panner=Howler.ctx.createPanner(),e._panner.coneInnerAngle=e._pannerAttr.coneInnerAngle,e._panner.coneOuterAngle=e._pannerAttr.coneOuterAngle,e._panner.coneOuterGain=e._pannerAttr.coneOuterGain,e._panner.distanceModel=e._pannerAttr.distanceModel,e._panner.maxDistance=e._pannerAttr.maxDistance,e._panner.refDistance=e._pannerAttr.refDistance,e._panner.rolloffFactor=e._pannerAttr.rolloffFactor,e._panner.panningModel=e._pannerAttr.panningModel,void 0!==e._panner.positionX?(e._panner.positionX.setValueAtTime(e._pos[0],Howler.ctx.currentTime),e._panner.positionY.setValueAtTime(e._pos[1],Howler.ctx.currentTime),e._panner.positionZ.setValueAtTime(e._pos[2],Howler.ctx.currentTime)):e._panner.setPosition(e._pos[0],e._pos[1],e._pos[2]),void 0!==e._panner.orientationX?(e._panner.orientationX.setValueAtTime(e._orientation[0],Howler.ctx.currentTime),e._panner.orientationY.setValueAtTime(e._orientation[1],Howler.ctx.currentTime),e._panner.orientationZ.setValueAtTime(e._orientation[2],Howler.ctx.currentTime)):e._panner.setOrientation(e._orientation[0],e._orientation[1],e._orientation[2])):(e._panner=Howler.ctx.createStereoPanner(),e._panner.pan.setValueAtTime(e._stereo,Howler.ctx.currentTime)),e._panner.connect(e._node),e._paused||e._parent.pause(e._id,!0).play(e._id,!0)}}();
/* pako 1.0.2 nodeca/pako */
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.pako=t()}}(function(){return function t(e,a,i){function n(s,o){if(!a[s]){if(!e[s]){var l="function"==typeof require&&require;if(!o&&l)return l(s,!0);if(r)return r(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var d=a[s]={exports:{}};e[s][0].call(d.exports,function(t){var a=e[s][1][t];return n(a?a:t)},d,d.exports,t,e,a,i)}return a[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)n(i[s]);return n}({1:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=l.assign({level:w,method:v,chunkSize:16384,windowBits:15,memLevel:8,strategy:p,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=o.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==b)throw new Error(d[a]);if(e.header&&o.deflateSetHeader(this.strm,e.header),e.dictionary){var n;if(n="string"==typeof e.dictionary?h.string2buf(e.dictionary):"[object ArrayBuffer]"===_.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=o.deflateSetDictionary(this.strm,n),a!==b)throw new Error(d[a]);this._dict_set=!0}}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}function s(t,e){return e=e||{},e.gzip=!0,n(t,e)}var o=t("./zlib/deflate"),l=t("./utils/common"),h=t("./utils/strings"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=Object.prototype.toString,u=0,c=4,b=0,g=1,m=2,w=-1,p=0,v=8;i.prototype.push=function(t,e){var a,i,n=this.strm,r=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:e===!0?c:u,"string"==typeof t?n.input=h.string2buf(t):"[object ArrayBuffer]"===_.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new l.Buf8(r),n.next_out=0,n.avail_out=r),a=o.deflate(n,i),a!==g&&a!==b)return this.onEnd(a),this.ended=!0,!1;0!==n.avail_out&&(0!==n.avail_in||i!==c&&i!==m)||("string"===this.options.to?this.onData(h.buf2binstring(l.shrinkBuf(n.output,n.next_out))):this.onData(l.shrinkBuf(n.output,n.next_out)))}while((n.avail_in>0||0===n.avail_out)&&a!==g);return i===c?(a=o.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===b):i!==m||(this.onEnd(b),n.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===b&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=l.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Deflate=i,a.deflate=n,a.deflateRaw=r,a.gzip=s},{"./utils/common":3,"./utils/strings":4,"./zlib/deflate":8,"./zlib/messages":13,"./zlib/zstream":15}],2:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0===(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=s.inflateInit2(this.strm,e.windowBits);if(a!==h.Z_OK)throw new Error(d[a]);this.header=new _,s.inflateGetHeader(this.strm,this.header)}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}var s=t("./zlib/inflate"),o=t("./utils/common"),l=t("./utils/strings"),h=t("./zlib/constants"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=t("./zlib/gzheader"),u=Object.prototype.toString;i.prototype.push=function(t,e){var a,i,n,r,d,f,_=this.strm,c=this.options.chunkSize,b=this.options.dictionary,g=!1;if(this.ended)return!1;i=e===~~e?e:e===!0?h.Z_FINISH:h.Z_NO_FLUSH,"string"==typeof t?_.input=l.binstring2buf(t):"[object ArrayBuffer]"===u.call(t)?_.input=new Uint8Array(t):_.input=t,_.next_in=0,_.avail_in=_.input.length;do{if(0===_.avail_out&&(_.output=new o.Buf8(c),_.next_out=0,_.avail_out=c),a=s.inflate(_,h.Z_NO_FLUSH),a===h.Z_NEED_DICT&&b&&(f="string"==typeof b?l.string2buf(b):"[object ArrayBuffer]"===u.call(b)?new Uint8Array(b):b,a=s.inflateSetDictionary(this.strm,f)),a===h.Z_BUF_ERROR&&g===!0&&(a=h.Z_OK,g=!1),a!==h.Z_STREAM_END&&a!==h.Z_OK)return this.onEnd(a),this.ended=!0,!1;_.next_out&&(0!==_.avail_out&&a!==h.Z_STREAM_END&&(0!==_.avail_in||i!==h.Z_FINISH&&i!==h.Z_SYNC_FLUSH)||("string"===this.options.to?(n=l.utf8border(_.output,_.next_out),r=_.next_out-n,d=l.buf2string(_.output,n),_.next_out=r,_.avail_out=c-r,r&&o.arraySet(_.output,_.output,n,r,0),this.onData(d)):this.onData(o.shrinkBuf(_.output,_.next_out)))),0===_.avail_in&&0===_.avail_out&&(g=!0)}while((_.avail_in>0||0===_.avail_out)&&a!==h.Z_STREAM_END);return a===h.Z_STREAM_END&&(i=h.Z_FINISH),i===h.Z_FINISH?(a=s.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===h.Z_OK):i!==h.Z_SYNC_FLUSH||(this.onEnd(h.Z_OK),_.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===h.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Inflate=i,a.inflate=n,a.inflateRaw=r,a.ungzip=n},{"./utils/common":3,"./utils/strings":4,"./zlib/constants":6,"./zlib/gzheader":9,"./zlib/inflate":11,"./zlib/messages":13,"./zlib/zstream":15}],3:[function(t,e,a){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;a.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var a=e.shift();if(a){if("object"!=typeof a)throw new TypeError(a+"must be non-object");for(var i in a)a.hasOwnProperty(i)&&(t[i]=a[i])}}return t},a.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,a,i,n){if(e.subarray&&t.subarray)return void t.set(e.subarray(a,a+i),n);for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){var e,a,i,n,r,s;for(i=0,e=0,a=t.length;e<a;e++)i+=t[e].length;for(s=new Uint8Array(i),n=0,e=0,a=t.length;e<a;e++)r=t[e],s.set(r,n),n+=r.length;return s}},r={arraySet:function(t,e,a,i,n){for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){return[].concat.apply([],t)}};a.setTyped=function(t){t?(a.Buf8=Uint8Array,a.Buf16=Uint16Array,a.Buf32=Int32Array,a.assign(a,n)):(a.Buf8=Array,a.Buf16=Array,a.Buf32=Array,a.assign(a,r))},a.setTyped(i)},{}],4:[function(t,e,a){"use strict";function i(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&r))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var a="",i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a}var n=t("./common"),r=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){r=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var o=new n.Buf8(256),l=0;l<256;l++)o[l]=l>=252?6:l>=248?5:l>=240?4:l>=224?3:l>=192?2:1;o[254]=o[254]=1,a.string2buf=function(t){var e,a,i,r,s,o=t.length,l=0;for(r=0;r<o;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),l+=a<128?1:a<2048?2:a<65536?3:4;for(e=new n.Buf8(l),s=0,r=0;s<l;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},a.buf2binstring=function(t){return i(t,t.length)},a.binstring2buf=function(t){for(var e=new n.Buf8(t.length),a=0,i=e.length;a<i;a++)e[a]=t.charCodeAt(a);return e},a.buf2string=function(t,e){var a,n,r,s,l=e||t.length,h=new Array(2*l);for(n=0,a=0;a<l;)if(r=t[a++],r<128)h[n++]=r;else if(s=o[r],s>4)h[n++]=65533,a+=s-1;else{for(r&=2===s?31:3===s?15:7;s>1&&a<l;)r=r<<6|63&t[a++],s--;s>1?h[n++]=65533:r<65536?h[n++]=r:(r-=65536,h[n++]=55296|r>>10&1023,h[n++]=56320|1023&r)}return i(h,n)},a.utf8border=function(t,e){var a;for(e=e||t.length,e>t.length&&(e=t.length),a=e-1;a>=0&&128===(192&t[a]);)a--;return a<0?e:0===a?e:a+o[t[a]]>e?a:e}},{"./common":3}],5:[function(t,e,a){"use strict";function i(t,e,a,i){for(var n=65535&t|0,r=t>>>16&65535|0,s=0;0!==a;){s=a>2e3?2e3:a,a-=s;do n=n+e[i++]|0,r=r+n|0;while(--s);n%=65521,r%=65521}return n|r<<16|0}e.exports=i},{}],6:[function(t,e,a){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],7:[function(t,e,a){"use strict";function i(){for(var t,e=[],a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e}function n(t,e,a,i){var n=r,s=i+a;t^=-1;for(var o=i;o<s;o++)t=t>>>8^n[255&(t^e[o])];return t^-1}var r=i();e.exports=n},{}],8:[function(t,e,a){"use strict";function i(t,e){return t.msg=D[e],e}function n(t){return(t<<1)-(t>4?9:0)}function r(t){for(var e=t.length;--e>=0;)t[e]=0}function s(t){var e=t.state,a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(R.arraySet(t.output,e.pending_buf,e.pending_out,a,t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))}function o(t,e){C._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,s(t.strm)}function l(t,e){t.pending_buf[t.pending++]=e}function h(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function d(t,e,a,i){var n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,R.arraySet(e,t.input,t.next_in,n,a),1===t.state.wrap?t.adler=N(t.adler,e,n,a):2===t.state.wrap&&(t.adler=O(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)}function f(t,e){var a,i,n=t.max_chain_length,r=t.strstart,s=t.prev_length,o=t.nice_match,l=t.strstart>t.w_size-ft?t.strstart-(t.w_size-ft):0,h=t.window,d=t.w_mask,f=t.prev,_=t.strstart+dt,u=h[r+s-1],c=h[r+s];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do if(a=e,h[a+s]===c&&h[a+s-1]===u&&h[a]===h[r]&&h[++a]===h[r+1]){r+=2,a++;do;while(h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&r<_);if(i=dt-(_-r),r=_-dt,i>s){if(t.match_start=e,s=i,i>=o)break;u=h[r+s-1],c=h[r+s]}}while((e=f[e&d])>l&&0!==--n);return s<=t.lookahead?s:t.lookahead}function _(t){var e,a,i,n,r,s=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=s+(s-ft)){R.arraySet(t.window,t.window,s,s,0),t.match_start-=s,t.strstart-=s,t.block_start-=s,a=t.hash_size,e=a;do i=t.head[--e],t.head[e]=i>=s?i-s:0;while(--a);a=s,e=a;do i=t.prev[--e],t.prev[e]=i>=s?i-s:0;while(--a);n+=s}if(0===t.strm.avail_in)break;if(a=d(t.strm,t.window,t.strstart+t.lookahead,n),t.lookahead+=a,t.lookahead+t.insert>=ht)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+ht-1])&t.hash_mask,t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<ht)););}while(t.lookahead<ft&&0!==t.strm.avail_in)}function u(t,e){var a=65535;for(a>t.pending_buf_size-5&&(a=t.pending_buf_size-5);;){if(t.lookahead<=1){if(_(t),0===t.lookahead&&e===I)return vt;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+a;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,o(t,!1),0===t.strm.avail_out))return vt;if(t.strstart-t.block_start>=t.w_size-ft&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.strstart>t.block_start&&(o(t,!1),0===t.strm.avail_out)?vt:vt}function c(t,e){for(var a,i;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a)),t.match_length>=ht)if(i=C._tr_tally(t,t.strstart-t.match_start,t.match_length-ht),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=ht){t.match_length--;do t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(0!==--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function b(t,e){for(var a,i,n;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=ht-1,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a),t.match_length<=5&&(t.strategy===q||t.match_length===ht&&t.strstart-t.match_start>4096)&&(t.match_length=ht-1)),t.prev_length>=ht&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-ht,i=C._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-ht),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(0!==--t.prev_length);if(t.match_available=0,t.match_length=ht-1,t.strstart++,i&&(o(t,!1),0===t.strm.avail_out))return vt}else if(t.match_available){if(i=C._tr_tally(t,0,t.window[t.strstart-1]),i&&o(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return vt}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=C._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function g(t,e){for(var a,i,n,r,s=t.window;;){if(t.lookahead<=dt){if(_(t),t.lookahead<=dt&&e===I)return vt;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=ht&&t.strstart>0&&(n=t.strstart-1,i=s[n],i===s[++n]&&i===s[++n]&&i===s[++n])){r=t.strstart+dt;do;while(i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&n<r);t.match_length=dt-(r-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=ht?(a=C._tr_tally(t,1,t.match_length-ht),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function m(t,e){for(var a;;){if(0===t.lookahead&&(_(t),0===t.lookahead)){if(e===I)return vt;break}if(t.match_length=0,a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function w(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}function p(t){t.window_size=2*t.w_size,r(t.head),t.max_lazy_match=Z[t.level].max_lazy,t.good_match=Z[t.level].good_length,t.nice_match=Z[t.level].nice_length,t.max_chain_length=Z[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=ht-1,t.match_available=0,t.ins_h=0}function v(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=V,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new R.Buf16(2*ot),this.dyn_dtree=new R.Buf16(2*(2*rt+1)),this.bl_tree=new R.Buf16(2*(2*st+1)),r(this.dyn_ltree),r(this.dyn_dtree),r(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new R.Buf16(lt+1),this.heap=new R.Buf16(2*nt+1),r(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new R.Buf16(2*nt+1),r(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function k(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=Q,e=t.state,e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?ut:wt,t.adler=2===e.wrap?0:1,e.last_flush=I,C._tr_init(e),H):i(t,K)}function y(t){var e=k(t);return e===H&&p(t.state),e}function x(t,e){return t&&t.state?2!==t.state.wrap?K:(t.state.gzhead=e,H):K}function z(t,e,a,n,r,s){if(!t)return K;var o=1;if(e===Y&&(e=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),r<1||r>$||a!==V||n<8||n>15||e<0||e>9||s<0||s>W)return i(t,K);8===n&&(n=9);var l=new v;return t.state=l,l.strm=t,l.wrap=o,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=r+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+ht-1)/ht),l.window=new R.Buf8(2*l.w_size),l.head=new R.Buf16(l.hash_size),l.prev=new R.Buf16(l.w_size),l.lit_bufsize=1<<r+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new R.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=e,l.strategy=s,l.method=a,y(t)}function B(t,e){return z(t,e,V,tt,et,J)}function S(t,e){var a,o,d,f;if(!t||!t.state||e>L||e<0)return t?i(t,K):K;if(o=t.state,!t.output||!t.input&&0!==t.avail_in||o.status===pt&&e!==F)return i(t,0===t.avail_out?P:K);if(o.strm=t,a=o.last_flush,o.last_flush=e,o.status===ut)if(2===o.wrap)t.adler=0,l(o,31),l(o,139),l(o,8),o.gzhead?(l(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),l(o,255&o.gzhead.time),l(o,o.gzhead.time>>8&255),l(o,o.gzhead.time>>16&255),l(o,o.gzhead.time>>24&255),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(l(o,255&o.gzhead.extra.length),l(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(t.adler=O(t.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=ct):(l(o,0),l(o,0),l(o,0),l(o,0),l(o,0),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,zt),o.status=wt);else{var _=V+(o.w_bits-8<<4)<<8,u=-1;u=o.strategy>=G||o.level<2?0:o.level<6?1:6===o.level?2:3,_|=u<<6,0!==o.strstart&&(_|=_t),_+=31-_%31,o.status=wt,h(o,_),0!==o.strstart&&(h(o,t.adler>>>16),h(o,65535&t.adler)),t.adler=1}if(o.status===ct)if(o.gzhead.extra){for(d=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending!==o.pending_buf_size));)l(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=bt)}else o.status=bt;if(o.status===bt)if(o.gzhead.name){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.gzindex=0,o.status=gt)}else o.status=gt;if(o.status===gt)if(o.gzhead.comment){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.status=mt)}else o.status=mt;if(o.status===mt&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&s(t),o.pending+2<=o.pending_buf_size&&(l(o,255&t.adler),l(o,t.adler>>8&255),t.adler=0,o.status=wt)):o.status=wt),0!==o.pending){if(s(t),0===t.avail_out)return o.last_flush=-1,H}else if(0===t.avail_in&&n(e)<=n(a)&&e!==F)return i(t,P);if(o.status===pt&&0!==t.avail_in)return i(t,P);if(0!==t.avail_in||0!==o.lookahead||e!==I&&o.status!==pt){var c=o.strategy===G?m(o,e):o.strategy===X?g(o,e):Z[o.level].func(o,e);if(c!==yt&&c!==xt||(o.status=pt),c===vt||c===yt)return 0===t.avail_out&&(o.last_flush=-1),H;if(c===kt&&(e===U?C._tr_align(o):e!==L&&(C._tr_stored_block(o,0,0,!1),e===T&&(r(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),s(t),0===t.avail_out))return o.last_flush=-1,H}return e!==F?H:o.wrap<=0?j:(2===o.wrap?(l(o,255&t.adler),l(o,t.adler>>8&255),l(o,t.adler>>16&255),l(o,t.adler>>24&255),l(o,255&t.total_in),l(o,t.total_in>>8&255),l(o,t.total_in>>16&255),l(o,t.total_in>>24&255)):(h(o,t.adler>>>16),h(o,65535&t.adler)),s(t),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?H:j)}function E(t){var e;return t&&t.state?(e=t.state.status,e!==ut&&e!==ct&&e!==bt&&e!==gt&&e!==mt&&e!==wt&&e!==pt?i(t,K):(t.state=null,e===wt?i(t,M):H)):K}function A(t,e){var a,i,n,s,o,l,h,d,f=e.length;if(!t||!t.state)return K;if(a=t.state,s=a.wrap,2===s||1===s&&a.status!==ut||a.lookahead)return K;for(1===s&&(t.adler=N(t.adler,e,f,0)),a.wrap=0,f>=a.w_size&&(0===s&&(r(a.head),a.strstart=0,a.block_start=0,a.insert=0),d=new R.Buf8(a.w_size),R.arraySet(d,e,f-a.w_size,a.w_size,0),e=d,f=a.w_size),o=t.avail_in,l=t.next_in,h=t.input,t.avail_in=f,t.next_in=0,t.input=e,_(a);a.lookahead>=ht;){i=a.strstart,n=a.lookahead-(ht-1);do a.ins_h=(a.ins_h<<a.hash_shift^a.window[i+ht-1])&a.hash_mask,a.prev[i&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=i,i++;while(--n);a.strstart=i,a.lookahead=ht-1,_(a)}return a.strstart+=a.lookahead,a.block_start=a.strstart,a.insert=a.lookahead,a.lookahead=0,a.match_length=a.prev_length=ht-1,a.match_available=0,t.next_in=l,t.input=h,t.avail_in=o,a.wrap=s,H}var Z,R=t("../utils/common"),C=t("./trees"),N=t("./adler32"),O=t("./crc32"),D=t("./messages"),I=0,U=1,T=3,F=4,L=5,H=0,j=1,K=-2,M=-3,P=-5,Y=-1,q=1,G=2,X=3,W=4,J=0,Q=2,V=8,$=9,tt=15,et=8,at=29,it=256,nt=it+1+at,rt=30,st=19,ot=2*nt+1,lt=15,ht=3,dt=258,ft=dt+ht+1,_t=32,ut=42,ct=69,bt=73,gt=91,mt=103,wt=113,pt=666,vt=1,kt=2,yt=3,xt=4,zt=3;Z=[new w(0,0,0,0,u),new w(4,4,8,4,c),new w(4,5,16,8,c),new w(4,6,32,32,c),new w(4,4,16,16,b),new w(8,16,32,32,b),new w(8,16,128,128,b),new w(8,32,128,256,b),new w(32,128,258,1024,b),new w(32,258,258,4096,b)],a.deflateInit=B,a.deflateInit2=z,a.deflateReset=y,a.deflateResetKeep=k,a.deflateSetHeader=x,a.deflate=S,a.deflateEnd=E,a.deflateSetDictionary=A,a.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./messages":13,"./trees":14}],9:[function(t,e,a){"use strict";function i(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}e.exports=i},{}],10:[function(t,e,a){"use strict";var i=30,n=12;e.exports=function(t,e){var a,r,s,o,l,h,d,f,_,u,c,b,g,m,w,p,v,k,y,x,z,B,S,E,A;a=t.state,r=t.next_in,E=t.input,s=r+(t.avail_in-5),o=t.next_out,A=t.output,l=o-(e-t.avail_out),h=o+(t.avail_out-257),d=a.dmax,f=a.wsize,_=a.whave,u=a.wnext,c=a.window,b=a.hold,g=a.bits,m=a.lencode,w=a.distcode,p=(1<<a.lenbits)-1,v=(1<<a.distbits)-1;t:do{g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=m[b&p];e:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,0===y)A[o++]=65535&k;else{if(!(16&y)){if(0===(64&y)){k=m[(65535&k)+(b&(1<<y)-1)];continue e}if(32&y){a.mode=n;break t}t.msg="invalid literal/length code",a.mode=i;break t}x=65535&k,y&=15,y&&(g<y&&(b+=E[r++]<<g,g+=8),x+=b&(1<<y)-1,b>>>=y,g-=y),g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=w[b&v];a:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,!(16&y)){if(0===(64&y)){k=w[(65535&k)+(b&(1<<y)-1)];continue a}t.msg="invalid distance code",a.mode=i;break t}if(z=65535&k,y&=15,g<y&&(b+=E[r++]<<g,g+=8,g<y&&(b+=E[r++]<<g,g+=8)),z+=b&(1<<y)-1,z>d){t.msg="invalid distance too far back",a.mode=i;break t}if(b>>>=y,g-=y,y=o-l,z>y){if(y=z-y,y>_&&a.sane){t.msg="invalid distance too far back",a.mode=i;break t}if(B=0,S=c,0===u){if(B+=f-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}else if(u<y){if(B+=f+u-y,y-=u,y<x){x-=y;do A[o++]=c[B++];while(--y);if(B=0,u<x){y=u,x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}}else if(B+=u-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}for(;x>2;)A[o++]=S[B++],A[o++]=S[B++],A[o++]=S[B++],x-=3;x&&(A[o++]=S[B++],x>1&&(A[o++]=S[B++]))}else{B=o-z;do A[o++]=A[B++],A[o++]=A[B++],A[o++]=A[B++],x-=3;while(x>2);x&&(A[o++]=A[B++],x>1&&(A[o++]=A[B++]))}break}}break}}while(r<s&&o<h);x=g>>3,r-=x,g-=x<<3,b&=(1<<g)-1,t.next_in=r,t.next_out=o,t.avail_in=r<s?5+(s-r):5-(r-s),t.avail_out=o<h?257+(h-o):257-(o-h),a.hold=b,a.bits=g}},{}],11:[function(t,e,a){"use strict";function i(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function n(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new w.Buf16(320),this.work=new w.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function r(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=T,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new w.Buf32(bt),e.distcode=e.distdyn=new w.Buf32(gt),e.sane=1,e.back=-1,Z):N}function s(t){var e;return t&&t.state?(e=t.state,e.wsize=0,e.whave=0,e.wnext=0,r(t)):N}function o(t,e){var a,i;return t&&t.state?(i=t.state,e<0?(a=0,e=-e):(a=(e>>4)+1,e<48&&(e&=15)),e&&(e<8||e>15)?N:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,s(t))):N}function l(t,e){var a,i;return t?(i=new n,t.state=i,i.window=null,a=o(t,e),a!==Z&&(t.state=null),a):N}function h(t){return l(t,wt)}function d(t){if(pt){var e;for(g=new w.Buf32(512),m=new w.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(y(z,t.lens,0,288,g,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;y(B,t.lens,0,32,m,0,t.work,{bits:5}),pt=!1}t.lencode=g,t.lenbits=9,t.distcode=m,t.distbits=5}function f(t,e,a,i){var n,r=t.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new w.Buf8(r.wsize)),i>=r.wsize?(w.arraySet(r.window,e,a-r.wsize,r.wsize,0),r.wnext=0,r.whave=r.wsize):(n=r.wsize-r.wnext,n>i&&(n=i),w.arraySet(r.window,e,a-i,n,r.wnext),i-=n,i?(w.arraySet(r.window,e,a-i,i,0),r.wnext=i,r.whave=r.wsize):(r.wnext+=n,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=n))),0}function _(t,e){var a,n,r,s,o,l,h,_,u,c,b,g,m,bt,gt,mt,wt,pt,vt,kt,yt,xt,zt,Bt,St=0,Et=new w.Buf8(4),At=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return N;a=t.state,a.mode===X&&(a.mode=W),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,c=l,b=h,xt=Z;t:for(;;)switch(a.mode){case T:if(0===a.wrap){a.mode=W;break}for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(2&a.wrap&&35615===_){a.check=0,Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0),_=0,u=0,a.mode=F;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&_)<<8)+(_>>8))%31){t.msg="incorrect header check",a.mode=_t;break}if((15&_)!==U){t.msg="unknown compression method",a.mode=_t;break}if(_>>>=4,u-=4,yt=(15&_)+8,0===a.wbits)a.wbits=yt;else if(yt>a.wbits){t.msg="invalid window size",a.mode=_t;break}a.dmax=1<<yt,t.adler=a.check=1,a.mode=512&_?q:X,_=0,u=0;break;case F:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(a.flags=_,(255&a.flags)!==U){t.msg="unknown compression method",a.mode=_t;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=_t;break}a.head&&(a.head.text=_>>8&1),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=L;case L:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.time=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,Et[2]=_>>>16&255,Et[3]=_>>>24&255,a.check=v(a.check,Et,4,0)),_=0,u=0,a.mode=H;case H:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.xflags=255&_,a.head.os=_>>8),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=j;case j:if(1024&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length=_,a.head&&(a.head.extra_len=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0}else a.head&&(a.head.extra=null);a.mode=K;case K:if(1024&a.flags&&(g=a.length,g>l&&(g=l),g&&(a.head&&(yt=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Array(a.head.extra_len)),w.arraySet(a.head.extra,n,s,g,yt)),512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,a.length-=g),a.length))break t;a.length=0,a.mode=M;case M:if(2048&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.name+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=P;case P:if(4096&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.comment+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.comment=null);a.mode=Y;case Y:if(512&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(65535&a.check)){t.msg="header crc mismatch",a.mode=_t;break}_=0,u=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=X;break;case q:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}t.adler=a.check=i(_),_=0,u=0,a.mode=G;case G:if(0===a.havedict)return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,C;t.adler=a.check=1,a.mode=X;case X:if(e===E||e===A)break t;case W:if(a.last){_>>>=7&u,u-=7&u,a.mode=ht;break}for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}switch(a.last=1&_,_>>>=1,u-=1,3&_){case 0:a.mode=J;break;case 1:if(d(a),a.mode=at,e===A){_>>>=2,u-=2;break t}break;case 2:a.mode=$;break;case 3:t.msg="invalid block type",a.mode=_t}_>>>=2,u-=2;break;case J:for(_>>>=7&u,u-=7&u;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if((65535&_)!==(_>>>16^65535)){t.msg="invalid stored block lengths",a.mode=_t;break}if(a.length=65535&_,_=0,u=0,a.mode=Q,e===A)break t;case Q:a.mode=V;case V:if(g=a.length){if(g>l&&(g=l),g>h&&(g=h),0===g)break t;w.arraySet(r,n,s,g,o),l-=g,s+=g,h-=g,o+=g,a.length-=g;break}a.mode=X;break;case $:for(;u<14;){if(0===l)break t;
l--,_+=n[s++]<<u,u+=8}if(a.nlen=(31&_)+257,_>>>=5,u-=5,a.ndist=(31&_)+1,_>>>=5,u-=5,a.ncode=(15&_)+4,_>>>=4,u-=4,a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=_t;break}a.have=0,a.mode=tt;case tt:for(;a.have<a.ncode;){for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.lens[At[a.have++]]=7&_,_>>>=3,u-=3}for(;a.have<19;)a.lens[At[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,zt={bits:a.lenbits},xt=y(x,a.lens,0,19,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid code lengths set",a.mode=_t;break}a.have=0,a.mode=et;case et:for(;a.have<a.nlen+a.ndist;){for(;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(wt<16)_>>>=gt,u-=gt,a.lens[a.have++]=wt;else{if(16===wt){for(Bt=gt+2;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_>>>=gt,u-=gt,0===a.have){t.msg="invalid bit length repeat",a.mode=_t;break}yt=a.lens[a.have-1],g=3+(3&_),_>>>=2,u-=2}else if(17===wt){for(Bt=gt+3;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=3+(7&_),_>>>=3,u-=3}else{for(Bt=gt+7;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=11+(127&_),_>>>=7,u-=7}if(a.have+g>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=_t;break}for(;g--;)a.lens[a.have++]=yt}}if(a.mode===_t)break;if(0===a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=_t;break}if(a.lenbits=9,zt={bits:a.lenbits},xt=y(z,a.lens,0,a.nlen,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid literal/lengths set",a.mode=_t;break}if(a.distbits=6,a.distcode=a.distdyn,zt={bits:a.distbits},xt=y(B,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,zt),a.distbits=zt.bits,xt){t.msg="invalid distances set",a.mode=_t;break}if(a.mode=at,e===A)break t;case at:a.mode=it;case it:if(l>=6&&h>=258){t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,k(t,b),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,a.mode===X&&(a.back=-1);break}for(a.back=0;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(mt&&0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.lencode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,a.length=wt,0===mt){a.mode=lt;break}if(32&mt){a.back=-1,a.mode=X;break}if(64&mt){t.msg="invalid literal/length code",a.mode=_t;break}a.extra=15&mt,a.mode=nt;case nt:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=rt;case rt:for(;St=a.distcode[_&(1<<a.distbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.distcode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,64&mt){t.msg="invalid distance code",a.mode=_t;break}a.offset=wt,a.extra=15&mt,a.mode=st;case st:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.offset+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg="invalid distance too far back",a.mode=_t;break}a.mode=ot;case ot:if(0===h)break t;if(g=b-h,a.offset>g){if(g=a.offset-g,g>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=_t;break}g>a.wnext?(g-=a.wnext,m=a.wsize-g):m=a.wnext-g,g>a.length&&(g=a.length),bt=a.window}else bt=r,m=o-a.offset,g=a.length;g>h&&(g=h),h-=g,a.length-=g;do r[o++]=bt[m++];while(--g);0===a.length&&(a.mode=it);break;case lt:if(0===h)break t;r[o++]=a.length,h--,a.mode=it;break;case ht:if(a.wrap){for(;u<32;){if(0===l)break t;l--,_|=n[s++]<<u,u+=8}if(b-=h,t.total_out+=b,a.total+=b,b&&(t.adler=a.check=a.flags?v(a.check,r,b,o-b):p(a.check,r,b,o-b)),b=h,(a.flags?_:i(_))!==a.check){t.msg="incorrect data check",a.mode=_t;break}_=0,u=0}a.mode=dt;case dt:if(a.wrap&&a.flags){for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(4294967295&a.total)){t.msg="incorrect length check",a.mode=_t;break}_=0,u=0}a.mode=ft;case ft:xt=R;break t;case _t:xt=O;break t;case ut:return D;case ct:default:return N}return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,(a.wsize||b!==t.avail_out&&a.mode<_t&&(a.mode<ht||e!==S))&&f(t,t.output,t.next_out,b-t.avail_out)?(a.mode=ut,D):(c-=t.avail_in,b-=t.avail_out,t.total_in+=c,t.total_out+=b,a.total+=b,a.wrap&&b&&(t.adler=a.check=a.flags?v(a.check,r,b,t.next_out-b):p(a.check,r,b,t.next_out-b)),t.data_type=a.bits+(a.last?64:0)+(a.mode===X?128:0)+(a.mode===at||a.mode===Q?256:0),(0===c&&0===b||e===S)&&xt===Z&&(xt=I),xt)}function u(t){if(!t||!t.state)return N;var e=t.state;return e.window&&(e.window=null),t.state=null,Z}function c(t,e){var a;return t&&t.state?(a=t.state,0===(2&a.wrap)?N:(a.head=e,e.done=!1,Z)):N}function b(t,e){var a,i,n,r=e.length;return t&&t.state?(a=t.state,0!==a.wrap&&a.mode!==G?N:a.mode===G&&(i=1,i=p(i,e,r,0),i!==a.check)?O:(n=f(t,e,r,r))?(a.mode=ut,D):(a.havedict=1,Z)):N}var g,m,w=t("../utils/common"),p=t("./adler32"),v=t("./crc32"),k=t("./inffast"),y=t("./inftrees"),x=0,z=1,B=2,S=4,E=5,A=6,Z=0,R=1,C=2,N=-2,O=-3,D=-4,I=-5,U=8,T=1,F=2,L=3,H=4,j=5,K=6,M=7,P=8,Y=9,q=10,G=11,X=12,W=13,J=14,Q=15,V=16,$=17,tt=18,et=19,at=20,it=21,nt=22,rt=23,st=24,ot=25,lt=26,ht=27,dt=28,ft=29,_t=30,ut=31,ct=32,bt=852,gt=592,mt=15,wt=mt,pt=!0;a.inflateReset=s,a.inflateReset2=o,a.inflateResetKeep=r,a.inflateInit=h,a.inflateInit2=l,a.inflate=_,a.inflateEnd=u,a.inflateGetHeader=c,a.inflateSetDictionary=b,a.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./inffast":10,"./inftrees":12}],12:[function(t,e,a){"use strict";var i=t("../utils/common"),n=15,r=852,s=592,o=0,l=1,h=2,d=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],f=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],_=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],u=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,a,c,b,g,m,w){var p,v,k,y,x,z,B,S,E,A=w.bits,Z=0,R=0,C=0,N=0,O=0,D=0,I=0,U=0,T=0,F=0,L=null,H=0,j=new i.Buf16(n+1),K=new i.Buf16(n+1),M=null,P=0;for(Z=0;Z<=n;Z++)j[Z]=0;for(R=0;R<c;R++)j[e[a+R]]++;for(O=A,N=n;N>=1&&0===j[N];N--);if(O>N&&(O=N),0===N)return b[g++]=20971520,b[g++]=20971520,w.bits=1,0;for(C=1;C<N&&0===j[C];C++);for(O<C&&(O=C),U=1,Z=1;Z<=n;Z++)if(U<<=1,U-=j[Z],U<0)return-1;if(U>0&&(t===o||1!==N))return-1;for(K[1]=0,Z=1;Z<n;Z++)K[Z+1]=K[Z]+j[Z];for(R=0;R<c;R++)0!==e[a+R]&&(m[K[e[a+R]]++]=R);if(t===o?(L=M=m,z=19):t===l?(L=d,H-=257,M=f,P-=257,z=256):(L=_,M=u,z=-1),F=0,R=0,Z=C,x=g,D=O,I=0,k=-1,T=1<<O,y=T-1,t===l&&T>r||t===h&&T>s)return 1;for(var Y=0;;){Y++,B=Z-I,m[R]<z?(S=0,E=m[R]):m[R]>z?(S=M[P+m[R]],E=L[H+m[R]]):(S=96,E=0),p=1<<Z-I,v=1<<D,C=v;do v-=p,b[x+(F>>I)+v]=B<<24|S<<16|E|0;while(0!==v);for(p=1<<Z-1;F&p;)p>>=1;if(0!==p?(F&=p-1,F+=p):F=0,R++,0===--j[Z]){if(Z===N)break;Z=e[a+m[R]]}if(Z>O&&(F&y)!==k){for(0===I&&(I=O),x+=C,D=Z-I,U=1<<D;D+I<N&&(U-=j[D+I],!(U<=0));)D++,U<<=1;if(T+=1<<D,t===l&&T>r||t===h&&T>s)return 1;k=F&y,b[k]=O<<24|D<<16|x-g|0}}return 0!==F&&(b[x+F]=Z-I<<24|64<<16|0),w.bits=O,0}},{"../utils/common":3}],13:[function(t,e,a){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],14:[function(t,e,a){"use strict";function i(t){for(var e=t.length;--e>=0;)t[e]=0}function n(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function r(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function s(t){return t<256?lt[t]:lt[256+(t>>>7)]}function o(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function l(t,e,a){t.bi_valid>W-a?(t.bi_buf|=e<<t.bi_valid&65535,o(t,t.bi_buf),t.bi_buf=e>>W-t.bi_valid,t.bi_valid+=a-W):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)}function h(t,e,a){l(t,a[2*e],a[2*e+1])}function d(t,e){var a=0;do a|=1&t,t>>>=1,a<<=1;while(--e>0);return a>>>1}function f(t){16===t.bi_valid?(o(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}function _(t,e){var a,i,n,r,s,o,l=e.dyn_tree,h=e.max_code,d=e.stat_desc.static_tree,f=e.stat_desc.has_stree,_=e.stat_desc.extra_bits,u=e.stat_desc.extra_base,c=e.stat_desc.max_length,b=0;for(r=0;r<=X;r++)t.bl_count[r]=0;for(l[2*t.heap[t.heap_max]+1]=0,a=t.heap_max+1;a<G;a++)i=t.heap[a],r=l[2*l[2*i+1]+1]+1,r>c&&(r=c,b++),l[2*i+1]=r,i>h||(t.bl_count[r]++,s=0,i>=u&&(s=_[i-u]),o=l[2*i],t.opt_len+=o*(r+s),f&&(t.static_len+=o*(d[2*i+1]+s)));if(0!==b){do{for(r=c-1;0===t.bl_count[r];)r--;t.bl_count[r]--,t.bl_count[r+1]+=2,t.bl_count[c]--,b-=2}while(b>0);for(r=c;0!==r;r--)for(i=t.bl_count[r];0!==i;)n=t.heap[--a],n>h||(l[2*n+1]!==r&&(t.opt_len+=(r-l[2*n+1])*l[2*n],l[2*n+1]=r),i--)}}function u(t,e,a){var i,n,r=new Array(X+1),s=0;for(i=1;i<=X;i++)r[i]=s=s+a[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=d(r[o]++,o))}}function c(){var t,e,a,i,r,s=new Array(X+1);for(a=0,i=0;i<K-1;i++)for(dt[i]=a,t=0;t<1<<et[i];t++)ht[a++]=i;for(ht[a-1]=i,r=0,i=0;i<16;i++)for(ft[i]=r,t=0;t<1<<at[i];t++)lt[r++]=i;for(r>>=7;i<Y;i++)for(ft[i]=r<<7,t=0;t<1<<at[i]-7;t++)lt[256+r++]=i;for(e=0;e<=X;e++)s[e]=0;for(t=0;t<=143;)st[2*t+1]=8,t++,s[8]++;for(;t<=255;)st[2*t+1]=9,t++,s[9]++;for(;t<=279;)st[2*t+1]=7,t++,s[7]++;for(;t<=287;)st[2*t+1]=8,t++,s[8]++;for(u(st,P+1,s),t=0;t<Y;t++)ot[2*t+1]=5,ot[2*t]=d(t,5);_t=new n(st,et,M+1,P,X),ut=new n(ot,at,0,Y,X),ct=new n(new Array(0),it,0,q,J)}function b(t){var e;for(e=0;e<P;e++)t.dyn_ltree[2*e]=0;for(e=0;e<Y;e++)t.dyn_dtree[2*e]=0;for(e=0;e<q;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*Q]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function g(t){t.bi_valid>8?o(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function m(t,e,a,i){g(t),i&&(o(t,a),o(t,~a)),N.arraySet(t.pending_buf,t.window,e,a,t.pending),t.pending+=a}function w(t,e,a,i){var n=2*e,r=2*a;return t[n]<t[r]||t[n]===t[r]&&i[e]<=i[a]}function p(t,e,a){for(var i=t.heap[a],n=a<<1;n<=t.heap_len&&(n<t.heap_len&&w(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!w(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i}function v(t,e,a){var i,n,r,o,d=0;if(0!==t.last_lit)do i=t.pending_buf[t.d_buf+2*d]<<8|t.pending_buf[t.d_buf+2*d+1],n=t.pending_buf[t.l_buf+d],d++,0===i?h(t,n,e):(r=ht[n],h(t,r+M+1,e),o=et[r],0!==o&&(n-=dt[r],l(t,n,o)),i--,r=s(i),h(t,r,a),o=at[r],0!==o&&(i-=ft[r],l(t,i,o)));while(d<t.last_lit);h(t,Q,e)}function k(t,e){var a,i,n,r=e.dyn_tree,s=e.stat_desc.static_tree,o=e.stat_desc.has_stree,l=e.stat_desc.elems,h=-1;for(t.heap_len=0,t.heap_max=G,a=0;a<l;a++)0!==r[2*a]?(t.heap[++t.heap_len]=h=a,t.depth[a]=0):r[2*a+1]=0;for(;t.heap_len<2;)n=t.heap[++t.heap_len]=h<2?++h:0,r[2*n]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=s[2*n+1]);for(e.max_code=h,a=t.heap_len>>1;a>=1;a--)p(t,r,a);n=l;do a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],p(t,r,1),i=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=i,r[2*n]=r[2*a]+r[2*i],t.depth[n]=(t.depth[a]>=t.depth[i]?t.depth[a]:t.depth[i])+1,r[2*a+1]=r[2*i+1]=n,t.heap[1]=n++,p(t,r,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],_(t,e),u(r,h,t.bl_count)}function y(t,e,a){var i,n,r=-1,s=e[1],o=0,l=7,h=4;for(0===s&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=s,s=e[2*(i+1)+1],++o<l&&n===s||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==r&&t.bl_tree[2*n]++,t.bl_tree[2*V]++):o<=10?t.bl_tree[2*$]++:t.bl_tree[2*tt]++,o=0,r=n,0===s?(l=138,h=3):n===s?(l=6,h=3):(l=7,h=4))}function x(t,e,a){var i,n,r=-1,s=e[1],o=0,d=7,f=4;for(0===s&&(d=138,f=3),i=0;i<=a;i++)if(n=s,s=e[2*(i+1)+1],!(++o<d&&n===s)){if(o<f){do h(t,n,t.bl_tree);while(0!==--o)}else 0!==n?(n!==r&&(h(t,n,t.bl_tree),o--),h(t,V,t.bl_tree),l(t,o-3,2)):o<=10?(h(t,$,t.bl_tree),l(t,o-3,3)):(h(t,tt,t.bl_tree),l(t,o-11,7));o=0,r=n,0===s?(d=138,f=3):n===s?(d=6,f=3):(d=7,f=4)}}function z(t){var e;for(y(t,t.dyn_ltree,t.l_desc.max_code),y(t,t.dyn_dtree,t.d_desc.max_code),k(t,t.bl_desc),e=q-1;e>=3&&0===t.bl_tree[2*nt[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}function B(t,e,a,i){var n;for(l(t,e-257,5),l(t,a-1,5),l(t,i-4,4),n=0;n<i;n++)l(t,t.bl_tree[2*nt[n]+1],3);x(t,t.dyn_ltree,e-1),x(t,t.dyn_dtree,a-1)}function S(t){var e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return D;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return I;for(e=32;e<M;e++)if(0!==t.dyn_ltree[2*e])return I;return D}function E(t){bt||(c(),bt=!0),t.l_desc=new r(t.dyn_ltree,_t),t.d_desc=new r(t.dyn_dtree,ut),t.bl_desc=new r(t.bl_tree,ct),t.bi_buf=0,t.bi_valid=0,b(t)}function A(t,e,a,i){l(t,(T<<1)+(i?1:0),3),m(t,e,a,!0)}function Z(t){l(t,F<<1,3),h(t,Q,st),f(t)}function R(t,e,a,i){var n,r,s=0;t.level>0?(t.strm.data_type===U&&(t.strm.data_type=S(t)),k(t,t.l_desc),k(t,t.d_desc),s=z(t),n=t.opt_len+3+7>>>3,r=t.static_len+3+7>>>3,r<=n&&(n=r)):n=r=a+5,a+4<=n&&e!==-1?A(t,e,a,i):t.strategy===O||r===n?(l(t,(F<<1)+(i?1:0),3),v(t,st,ot)):(l(t,(L<<1)+(i?1:0),3),B(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),v(t,t.dyn_ltree,t.dyn_dtree)),b(t),i&&g(t)}function C(t,e,a){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&a,t.last_lit++,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(ht[a]+M+1)]++,t.dyn_dtree[2*s(e)]++),t.last_lit===t.lit_bufsize-1}var N=t("../utils/common"),O=4,D=0,I=1,U=2,T=0,F=1,L=2,H=3,j=258,K=29,M=256,P=M+1+K,Y=30,q=19,G=2*P+1,X=15,W=16,J=7,Q=256,V=16,$=17,tt=18,et=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],at=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],it=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],nt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],rt=512,st=new Array(2*(P+2));i(st);var ot=new Array(2*Y);i(ot);var lt=new Array(rt);i(lt);var ht=new Array(j-H+1);i(ht);var dt=new Array(K);i(dt);var ft=new Array(Y);i(ft);var _t,ut,ct,bt=!1;a._tr_init=E,a._tr_stored_block=A,a._tr_flush_block=R,a._tr_tally=C,a._tr_align=Z},{"../utils/common":3}],15:[function(t,e,a){"use strict";function i(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}e.exports=i},{}],"/":[function(t,e,a){"use strict";var i=t("./lib/utils/common").assign,n=t("./lib/deflate"),r=t("./lib/inflate"),s=t("./lib/zlib/constants"),o={};i(o,n,r,s),e.exports=o},{"./lib/deflate":1,"./lib/inflate":2,"./lib/utils/common":3,"./lib/zlib/constants":6}]},{},[])("/")});

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
var saveAs=saveAs||function(e){"use strict";if(typeof e==="undefined"||typeof navigator!=="undefined"&&/MSIE [1-9]\./.test(navigator.userAgent)){return}var t=e.document,n=function(){return e.URL||e.webkitURL||e},r=t.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in r,a=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},i=/constructor/i.test(e.HTMLElement)||e.safari,f=/CriOS\/[\d]+/.test(navigator.userAgent),u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},s="application/octet-stream",d=1e3*40,c=function(e){var t=function(){if(typeof e==="string"){n().revokeObjectURL(e)}else{e.remove()}};setTimeout(t,d)},l=function(e,t,n){t=[].concat(t);var r=t.length;while(r--){var o=e["on"+t[r]];if(typeof o==="function"){try{o.call(e,n||e)}catch(a){u(a)}}}},p=function(e){if(/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)){return new Blob([String.fromCharCode(65279),e],{type:e.type})}return e},v=function(t,u,d){if(!d){t=p(t)}var v=this,w=t.type,m=w===s,y,h=function(){l(v,"writestart progress write writeend".split(" "))},S=function(){if((f||m&&i)&&e.FileReader){var r=new FileReader;r.onloadend=function(){var t=f?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;");var n=e.open(t,"_blank");if(!n)e.location.href=t;t=undefined;v.readyState=v.DONE;h()};r.readAsDataURL(t);v.readyState=v.INIT;return}if(!y){y=n().createObjectURL(t)}if(m){e.location.href=y}else{var o=e.open(y,"_blank");if(!o){e.location.href=y}}v.readyState=v.DONE;h();c(y)};v.readyState=v.INIT;if(o){y=n().createObjectURL(t);setTimeout(function(){r.href=y;r.download=u;a(r);h();c(y);v.readyState=v.DONE});return}S()},w=v.prototype,m=function(e,t,n){return new v(e,t||e.name||"download",n)};if(typeof navigator!=="undefined"&&navigator.msSaveOrOpenBlob){return function(e,t,n){t=t||e.name||"download";if(!n){e=p(e)}return navigator.msSaveOrOpenBlob(e,t)}}w.abort=function(){};w.readyState=w.INIT=0;w.WRITING=1;w.DONE=2;w.error=w.onwritestart=w.onprogress=w.onwrite=w.onabort=w.onerror=w.onwriteend=null;return m}(typeof self!=="undefined"&&self||typeof window!=="undefined"&&window||this.content);if(typeof module!=="undefined"&&module.exports){module.exports.saveAs=saveAs}else if(typeof define!=="undefined"&&define!==null&&define.amd!==null){define("FileSaver.js",function(){return saveAs})}

if(typeof define == "function" && define.__amd) {
	define.amd = define.__amd;
	delete define.__amd;
}